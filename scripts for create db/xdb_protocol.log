SQL> @/u01/app/oracle/product/11.2.0.4/db_1/rdbms/admin/catqm.sql change_on_install SYSAUX TEMP YES;
SQL> Rem
SQL> Rem $Header: rdbms/admin/catqm.sql /st_rdbms_11.2.0/4 2013/01/10 11:56:46 qyu Exp $
SQL> Rem
SQL> Rem catqm.sql
SQL> Rem
SQL> Rem Copyright (c) 1900, 2013, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catqm.sql - CAtalog script for sQl xMl management
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Creates the tables and views needed to run the XDB system
SQL> Rem      Run this script like this:
SQL> Rem        catqm.sql <XDB_PASSWD> <TABLESPACE> <TEMP_TABLESPACE> <SECURE_FILES_REPO>
SQL> Rem          -- XDB_PASSWD: password for XDB user
SQL> Rem          -- TABLESPACE: tablespace for XDB
SQL> Rem          -- TEMP_TABLESPACE: temporary tablespace for XDB
SQL> Rem          -- SECURE_FILES_REPO: if YES and compatibility is at least 11.2,
SQL> Rem               then XDB repository will be stored as secure files;
SQL> Rem               otherwise, old LOBS are used. There is no default value for
SQL> Rem               this parameter, the caller must pass either YES or NO.
SQL> Rem    NOTES
SQL> Rem      Must be run connected as SYS
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    qyu         12/26/12 - 16035192: set verify off
SQL> Rem    stirmizi    12/06/12 - adding import_tt_info
SQL> Rem    spetride    05/16/11 - grant select to select_catalog_role
SQL> Rem    badeoti     05/07/10 - disable xdk schema caching for inserts into csx
SQL> Rem                           tables during install
SQL> Rem    vmedi       05/06/10 - revert 9144511 changes
SQL> Rem    badeoti     04/23/10 - 9451814: adding prompt for input parameters
SQL> Rem    spetride    12/02/09 - 9144511: disable sch validation for XS
SQL> Rem    badeoti     03/20/09 - remove public synonyms for XDB internal packages
SQL> Rem    yiru        03/06/09 - add XS$NULL into XDB schema list
SQL> Rem    spetride    03/06/09 - 8251841: children col in xdb.xdb$h_index
SQL> Rem                           cannot be securefile
SQL> Rem    spetride    02/06/09 - lrg 3573827: install trigger to allow sequences
SQL> Rem    spetride    01/26/09 - 7714185: document user_opt_secfiles
SQL> Rem    spetride    11/15/08 - xdb_installation_trigger: allow triggers
SQL> Rem    spetride    06/24/08 - run catxdpapp
SQL> Rem    spetride    04/29/08 - option: use secure files for xdb$resource
SQL> Rem    sipatel      09/29/08 - bug 7414934. call catxtbix
SQL> Rem    sichandr    09/23/08 - load dbmsxdbrepos
SQL> Rem    badeoti     09/21/08 - 6451792: add object validation to XDB
SQL> Rem    achoi       03/11/08 - register ANONYMOUS as part of XDB
SQL> Rem    sidicula    01/10/08 - Grants to dba, system
SQL> Rem    thbaby      10/27/07 - split prvtxdb to create prvtxdba
SQL> Rem    vkapoor     04/27/07 - lrg 2941734
SQL> Rem    vkapoor     04/09/07 - bug 5640175
SQL> Rem    bpwang      10/19/06 - bug 5633032
SQL> Rem    thbaby      11/02/06 - move dbms_xmlindex package body into prvtxidx
SQL> Rem    pthornto    10/09/06 - move catzxs.sql to EOF
SQL> Rem    vkapoor     07/25/06 - Bug 5371725
SQL> Rem    rtjoa       05/26/06 - change prvtxdz2.plb location
SQL> Rem    rmurthy     04/21/06 - add prvtxdz2.plb
SQL> Rem    ataracha    06/08/06 - move dbmsxidx before catxidx
SQL> Rem    rmurthy     06/02/06 - call catxdbdl for document links
SQL> Rem    pnath       03/22/06 - add prvtxdbdl.plb
SQL> Rem    pthornto    05/18/06 - add DBMS_XSH_LIB
SQL> Rem    nkhandel    02/20/06 - DOM streaming APIs added
SQL> Rem    smalde      03/09/06 - Add dbms_xmltranslations
SQL> Rem    petam       04/07/06 - separate out the install of ResConfig from ACL
SQL> Rem    abagrawa    03/11/06 - Add xdbready
SQL> Rem    cchui       03/02/06 - move after resconfig package is installed
SQL> Rem    mrafiq      03/06/06 - move catzxs after catxdbpv
SQL> Rem    pnath       02/15/06 - remove link_props from xdb.xdb$d_link
SQL> Rem    rmurthy     02/03/06 - add xdb.d_link table
SQL> Rem    thbaby      02/21/06 - add NFS info into rootinfo
SQL> Rem    rtjoa       02/16/06 - Create a schedule for nfsclient cleanup job
SQL> Rem    pnath       10/13/05 - submit job for nfs client cleanup
SQL> Rem    sidicula    01/18/06 - Adding protocol info into rootinfo
SQL> Rem    taahmed     01/18/06 - Extensible Security
SQL> Rem    mrafiq      09/20/05 - merging changes for upgrade/downgrade
SQL> Rem    thoang      09/22/04 - add dbmsxres.sql & prvtxres.plb
SQL> Rem    ataracha    04/14/04 - add pl/sql dom, xml parser, AND xsl processor
SQL> Rem    nkandalu    07/25/05 - 4494717: set upgrade status if XDB is VALID
SQL> Rem    sidicula    06/25/05 - No need for dbmsxadm as yet
SQL> Rem    rmurthy     03/09/05  - drop function for patching namespace
SQL> Rem    vkapoor     01/13/05 -  LRG 1804464
SQL> Rem    pnath       12/01/04 - prvtxdb.sql needs prvtxmld.sql to be compiled
SQL> Rem    pnath       11/16/04 - delete all objects created in installation
SQL> Rem    rpang       11/18/04 - Add catepg.sql
SQL> Rem    rmurthy     11/11/04 - add dbmsxidx
SQL> Rem    petam       11/11/04 - added execution of xdbinstd.sql
SQL> Rem    najain      07/14/04 - add stateid_restart_sequence
SQL> Rem    pnath       10/22/04 - Make SYS the owner of package dbms_regxdb
SQL> Rem    fge         10/29/04 - call prvtxdr0
SQL> Rem    attran      08/20/04 - xmlidx
SQL> Rem    rburns      08/17/04 - conditionally run dbmsxdbt
SQL> Rem    rpang       07/16/04 - Renamed epgc to epg
SQL> Rem    fge         07/08/04 - extend xdb$h_link
SQL> Rem    sbalaram    06/10/04 - Add catxlcr - xml schema definitions for LCRs
SQL> Rem    rpang       06/07/04 - Add dbmsepgc.sql and prvtepgc.plb
SQL> Rem    smukkama    02/27/04 - move catxdbtm.sql to after prvtxdb.sql
SQL> Rem    smukkama    01/05/04 - add catxdbtm.sql for compact xml token mgmt
SQL> Rem    attran      02/17/04 - XMLIndex
SQL> Rem    najain      01/27/04 - call prvtxdb0 and prvtxdz0
SQL> Rem    fge         08/01/03 - xdb$h_link: add secondary index on child_oid
SQL> Rem    sidicula    07/03/03 - prvtxdb to be executed after prvtxdbz
SQL> Rem    fge         05/19/03 - add catxdbeo.sql
SQL> Rem    sidicula    04/16/03 - Revoke powerful privileges from XDB
SQL> Rem    abagrawa    03/09/03 - Separate dbmsxsch and prvtxsch
SQL> Rem    njalali     02/11/03 - setting upgrade state to 1000
SQL> Rem    smuralid    01/09/03 - add dbmsxdbt
SQL> Rem    sichandr    12/16/02 - invoke pre-condition checks
SQL> Rem    njalali     11/14/02 - making sure 9.2.0.1 -> 9.2.0.2 mig. is noop
SQL> Rem    mkrishna    07/05/02 - dissallow ref cascade for resource and schema tables
SQL> Rem    fge         06/13/02 - rename prvtpidx.sql to prvtxdbp.sql
SQL> Rem    sichandr    04/14/02 - remove index on refcount
SQL> Rem    spannala    03/26/02 - tieing the xdb version to the database version
SQL> Rem    sidicula    02/22/02 - Anonymous login allowed only by HTTP
SQL> Rem    njalali     02/11/02 - removed refcount from H_INDEX
SQL> Rem    rmurthy     02/20/02 - remove owner user
SQL> Rem    fge         01/20/02 - call prvtxdbr.plb
SQL> Rem    fge         01/08/02 - rename prvtxdbpi.sql to prvtpidx.sql
SQL> Rem    spannala    01/13/02 - correcting compilation errors in prvtxreg
SQL> Rem    spannala    01/02/02 - registry
SQL> Rem    sichandr    01/11/02 - catxdbstd.sql becomes catxdbst.sql
SQL> Rem    spannala    01/11/02 - creating all types with fixed toids
SQL> Rem    rmurthy     01/18/02 - add xdbowner role
SQL> Rem    nmontoya    12/18/01 - grant select any table to xdb
SQL> Rem    spannala    12/19/01 - removing connects, creating objects in xdb schema
SQL> Rem    spannala    12/13/01 - beta showstopper cleanup
SQL> Rem    nmontoya    11/29/01 - replace calls of prvt*.sql to prvt*.plb
SQL> Rem    nmontoya    11/14/01 - changing owner ID to GUID
SQL> Rem    nmontoya    11/13/01 - reorder dbmsxdb pkg
SQL> Rem    nagarwal    11/12/01 - change ordering of packages
SQL> Rem    tsingh      11/09/01 - XDB Fake installation and cleanup.
SQL> Rem    nagarwal    11/08/01 - change ordering of catxdbpi.sql
SQL> Rem    najain      11/08/01 - catxdbpi.sql gets loaded before catxdbz.sql
SQL> Rem    nagarwal    11/05/01 - add catxdbpi.sql
SQL> Rem    nle         09/20/01 - add versioning package
SQL> Rem    abagrawa    09/27/01 - Add catxdbc1, catxdbc2
SQL> Rem    nmontoya    10/12/01 - ADD xdbadmin role
SQL> Rem    nagarwal    09/08/01 - add catxdbpv
SQL> Rem    nmontoya    08/21/01 - ADD pl/sql dom, xml parser, AND xsl processor
SQL> Rem    nmontoya    08/16/01 - grant alter session and dbms_rls execute to xdb
SQL> Rem    nagarwal    08/10/01 - add catxdbr
SQL> Rem    esedlar     08/09/01 - XDB standard packages
SQL> Rem    njalali     07/11/01 - Resource as XMLType
SQL> Rem    spannala    05/18/01 - xmltype_p -> xmltype
SQL> Rem    njalali     05/17/01 - split schema OID in resource into two columns
SQL> Rem    rmurthy     03/09/01 - move schema related setup to catxdbs.sql
SQL> Rem    tsingh      03/01/01 - load xdb.jar
SQL> Rem    njalali     02/15/01 - reinstated the WITH ROWID in the resource table
SQL> Rem    nmontoya    02/14/01 - Add security initialization
SQL> Rem    njalali     02/13/01 - added schema OID to resource table
SQL> Rem    rmurthy     02/02/01 - add support for element ref
SQL> Rem    mkrishna    01/29/01 - remove xmlindex related stuff
SQL> Rem    rmurthy     01/17/01 - changes to allow case-sensitive names
SQL> Rem    rmurthy     12/01/00 - grant create library to xdb
SQL> Rem    esedlar     11/01/00 - Add SQL schema
SQL> Rem    njalali     10/03/00 - removed 'datatype' from resource table
SQL> Rem    esedlar     09/27/00 - Add schema in uniqueness constraints
SQL> Rem    njalali     09/26/00 - removed the 'with rowid' in XDB$RESOURCE.
SQL> Rem    tsingh      09/22/00 - added catxdbdt.sql
SQL> Rem    nmontoya    09/18/00 - Changing default tablespace for xdb schema.
SQL> Rem    esedlar     09/05/00 - Type cache
SQL> Rem    njalali     08/15/00 - changed H_LINK to XDB$H_LINK.
SQL> Rem    tsingh      06/30/00 - Fix tablespace code.
SQL> Rem    tsingh      06/28/00 - sys to system.
SQL> Rem    tsingh      06/20/00 - Resource tables.
SQL> Rem    mkrishna    06/29/00 - add dbmsxidx
SQL> Rem    njalali     04/20/00 - Initial revision
SQL> Rem    njalali     01/00/00 - Created
SQL> Rem
SQL> 
SQL> Rem IMPORTANT: For any object type owned by XDB, if changes are made
SQL> Rem with respect to pre-11.2.0.3 versions, do not issue a new
SQL> Rem CREATE TYPE DDL part of XDB installation. Instead, use the 11.2.0.3
SQL> Rem CREATE TYPE DDL and follow it by required ALTER TYPE statements
SQL> Rem (essentially, the install and upgrade steps for XDB object types
SQL> Rem  should proceed the same). This is to be done so that every XDB
SQL> Rem installation has the object type histories at least starting with
SQL> Rem 11.2.0.3, and it is required by full/database export.
SQL> 
SQL> prompt

SQL> prompt

SQL> prompt Starting Oracle XML DB Installation ...
Starting Oracle XML DB Installation ...
SQL> prompt ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SQL> prompt Enter Parameter #1 <XDB_PASSWD>, password for XDB schema:
Enter Parameter #1 <XDB_PASSWD>, password for XDB schema:
SQL> define xdb_pass    = &1
SQL> prompt

SQL> prompt Enter Parameter #2 <TABLESPACE>, tablespace for XDB:
Enter Parameter #2 <TABLESPACE>, tablespace for XDB:
SQL> define res_tbs     = &2
SQL> prompt

SQL> prompt Enter Parameter #3 <TEMP_TABLESPACE>, temporary tablespace for XDB:
Enter Parameter #3 <TEMP_TABLESPACE>, temporary tablespace for XDB:
SQL> define temp_tbs    = &3
SQL> prompt

SQL> 
SQL> variable user_opt_secfiles varchar2(30);
SQL> variable usesecfiles varchar2(3);
SQL> 
SQL> Rem  Determine if secure files will be used for xdb.xdb$resource
SQL> Rem
SQL> prompt Enter Parameter #4 <SECURE_FILES_REPO>, YES/NO
Enter Parameter #4 <SECURE_FILES_REPO>, YES/NO
SQL> prompt ...................If YES and compatibility is at least 11.2,
...................If YES and compatibility is at least 11.2,
SQL> prompt ...................then XDB repository will be stored as secure files.
...................then XDB repository will be stored as secure files.
SQL> prompt ...................Otherwise, old LOBS are used
...................Otherwise, old LOBS are used
SQL> declare
  2    checkcompat  boolean := FALSE;
  3  begin
  4    :usesecfiles := 'NO';
  5    :user_opt_secfiles := '&4';
  6  
  7    -- if no option was passed, try using secure files
  8    if (nvl(:user_opt_secfiles,'YES') != 'NO') then
  9       checkcompat := TRUE;
 10    end if;
 11  
 12    -- secure files can only be used for 11.0.0.0 least compatibility level
 13    if (checkcompat) then
 14      if ((dbms_metadata_util.get_canonical_vsn(dbms_metadata_util.get_compat_vsn()) >=
 15           dbms_metadata_util.get_canonical_vsn('11.0.0.0')  )) then
 16        :usesecfiles := 'YES';
 17      end if;
 18    end if;
 19  
 20    exception
 21       when others then
 22          return;
 23  end;
 24  /

PL/SQL procedure successfully completed.

SQL> prompt

SQL> prompt

SQL> 
SQL> Rem Table xdb_installation_tab will store all objects created
SQL> Rem as a part of XDB installation, where owner is not XDB.
SQL> Rem Objects already existing in the database and recreated
SQL> Rem as a part of the installation, will not be added to the table.
SQL> Rem This table will be used during un-installation of XDB,
SQL> Rem when all these objects will then be dropped. This table
SQL> Rem need not contain objects which will be dropped automatically
SQL> Rem as a result of dropping some other object
SQL> Rem (eg. all PACKAGE BODY objects will be dropped when corresponding
SQL> Rem PACKAGE object is dropped).
SQL> Rem Point to note: Currently only certain object types are
SQL> Rem inserted into this table. The creation of objects of
SQL> Rem object type not handled will result in the need to modify
SQL> Rem the trigger responsible for populating xdb_installation_tab.
SQL> CREATE TABLE sys.xdb_installation_tab (
  2     Owner           VARCHAR2(200),
  3     Object_name     VARCHAR2(200),
  4     Object_type     VARCHAR2(200));

Table created.

SQL> 
SQL> 
SQL> Rem Table dropped_xdb_instll_tab will consist of the items that
SQL> Rem existed prior to XDB installation and were dropped during
SQL> Rem XDB installation. Creation of an object during the installation
SQL> Rem that is present in this table will not be added to
SQL> Rem xdb_installation_tab, as this implies that the object did
SQL> Rem exist prior to the installation.
SQL> CREATE TABLE sys.dropped_xdb_instll_tab (
  2     Owner           VARCHAR2(200),
  3     Object_name     VARCHAR2(200),
  4     Object_type     VARCHAR2(200));

Table created.

SQL> 
SQL> Rem A trigger for every successful drop on the database during
SQL> Rem XDB installation
SQL> create or replace trigger sys.dropped_xdb_instll_trigger
  2    AFTER
  3      DROP ON DATABASE
  4      BEGIN
  5        insert into dropped_xdb_instll_tab values
  6            (dictionary_obj_owner, dictionary_obj_name, dictionary_obj_type);
  7      END;
  8  /

Trigger created.

SQL> 
SQL> Rem For eXtensible Security required library, cannot do it after the
SQL> Rem install trigger is added
SQL> CREATE OR REPLACE LIBRARY DBMS_XSU_LIB TRUSTED AS STATIC;
  2  /

Library created.

SQL> CREATE OR REPLACE LIBRARY DBMS_XSH_LIB TRUSTED AS STATIC;
  2  /

Library created.

SQL> 
SQL> Rem A trigger for every object creation during XDB installation
SQL> Rem The trigger body may need to be modified if other object types
SQL> Rem are to be handled, which are currently not handled. In addition,
SQL> Rem catnoqm.sql might need to be modified to handle special
SQL> Rem cases while dropping objects.
SQL> create or replace trigger sys.xdb_installation_trigger
  2    BEFORE
  3      CREATE ON DATABASE
  4      DECLARE
  5         sql_text varchar2(200);
  6         val number;
  7      BEGIN
  8        if (dictionary_obj_owner != 'XDB') then
  9          if (dictionary_obj_type = 'FUNCTION' or
 10              dictionary_obj_type = 'INDEX' or
 11              dictionary_obj_type = 'PACKAGE' or
 12              dictionary_obj_type = 'PACKAGE BODY' or
 13              dictionary_obj_type = 'PROCEDURE' or
 14              dictionary_obj_type = 'SYNONYM' or
 15              dictionary_obj_type = 'TABLE' or
 16              dictionary_obj_type = 'TABLESPACE' or
 17              dictionary_obj_type = 'TYPE' or
 18              dictionary_obj_type = 'VIEW' or
 19              dictionary_obj_type = 'USER' or
 20              dictionary_obj_type = 'TYPE BODY' or
 21              dictionary_obj_type = 'BODY' or
 22              dictionary_obj_type = 'TRIGGER' or
 23              dictionary_obj_type = 'SEQUENCE'
 24            )then
 25            if (dictionary_obj_type  != 'PACKAGE BODY'
 26               ) then
 27              sql_text := 'select count(*) from ALL_OBJECTS where owner = :1 and object_name = :2 and object_type = :3';
 28              execute immediate sql_text into val using dictionary_obj_owner, dictionary_obj_name, dictionary_obj_type;
 29              if (val = 0) then
 30                 sql_text := 'select count(*) from dropped_xdb_instll_tab where owner = :1 and object_name = :2 and object_type = :3';
 31                 execute immediate sql_text into val using dictionary_obj_owner, dictionary_obj_name, dictionary_obj_type;
 32                 if (val = 0) then
 33                    insert into xdb_installation_tab values
 34                    (dictionary_obj_owner, dictionary_obj_name, dictionary_obj_type);
 35                 end if;
 36              end if;
 37            end if;
 38          else
 39            raise_application_error(-20000, 'Trigger xdb_installation_trigger does not support object creation of type '||dictionary_obj_type);
 40          end if;
 41        end if;
 42     end;
 43  /

Trigger created.

SQL> 
SQL> SET VERIFY OFF
SQL> 
SQL> Rem Check for pre-conditions
SQL> @@catxdbck &xdb_pass &res_tbs &temp_tbs :usesecfiles
SQL> Rem
SQL> Rem $Header: rdbms/admin/catxdbck.sql /st_rdbms_11.2.0/1 2012/03/16 09:48:54 haiswang Exp $
SQL> Rem
SQL> Rem catxdbck.sql
SQL> Rem
SQL> Rem Copyright (c) 2002, 2012, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbck.sql - XDB install pre-conditions check
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains all the preconditions that are required
SQL> Rem      for a successful install of Oracle XML DB.
SQL> Rem       (-) should be run as sys
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      The current list of conditions that prevent install
SQL> Rem       1. XDB user already exists
SQL> Rem       2. Specified tablespace is compressed.
SQL> Rem       3. shared pool size too low
SQL> Rem
SQL> Rem    INPUTS
SQL> Rem       This expects the following three inputs
SQL> Rem         1. XDB password
SQL> Rem         2. XDB user tablespace
SQL> Rem         3. XDB user temporary tablespace.
SQL> Rem
SQL> Rem        Keep in sync with other parameters to catqm.sql
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    apfwkr      03/09/12 - Backport haiswang_bug-6455619 from main
SQL> Rem    spetride    04/28/08 - check res_tbs is assm
SQL> Rem    najain      03/15/04 - flush shared pool in the beginning
SQL> Rem    spannala    06/13/03 - removing set statements
SQL> Rem    thoang      03/06/03 - #2831402 lower SHARED_POOL_SIZE to work on NT
SQL> Rem    sichandr    01/22/03 - sichandr_bug-2679778
SQL> Rem    sichandr    12/16/02 - Created
SQL> Rem
SQL> 
SQL> define xdb_pass    = &1
SQL> define res_tbs     = &2
SQL> define temp_tbs    = &3
SQL> 
SQL> Rem This frees all freeable memory which can be freed (from sga)
SQL> 
SQL> alter system flush shared_pool;

System altered.

SQL> alter system flush shared_pool;

System altered.

SQL> alter system flush shared_pool;

System altered.

SQL> alter system flush shared_pool;

System altered.

SQL> 
SQL> declare
  2  
  3    SHARED_POOL_SIZE  number := 6*1024*1024;
  4    usrcnt            number;
  5    tbscomp           varchar2(10);
  6    spbytes           number;
  7    segmgmt           varchar2(6);
  8    tempcnt           number;
  9    rescnt            number;
 10  
 11    e_user_exists     exception;
 12    e_comp_restbs     exception;
 13    e_comp_tmptbs     exception;
 14    e_low_sharedpool  exception;
 15    e_not_assm        exception;
 16    e_temp_tbs_notexists   exception;
 17    e_res_tbs_notexists    exception;
 18  
 19  begin
 20  
 21    /* check if XDB user already exists */
 22    select count(*) into usrcnt from dba_users where username = 'XDB';
 23    if usrcnt > 0 then
 24      raise e_user_exists;
 25    end if;
 26  
 27    /* check if tablespace &temp_tbs does not exist*/
 28    select count(*) into tempcnt from dba_tablespaces where tablespace_name =  upper('&temp_tbs');
 29    if tempcnt = 0 then
 30      raise e_temp_tbs_notexists;
 31    end if;
 32  
 33    /* check if tablespace &res_tbs does not exist*/
 34    select count(*) into rescnt from dba_tablespaces where tablespace_name =  upper('&res_tbs');
 35    if rescnt = 0 then
 36      raise e_res_tbs_notexists;
 37    end if;
 38  
 39    /* check if XDB tablespace is compressed */
 40    select def_tab_compression into tbscomp from dba_tablespaces
 41    where tablespace_name = upper('&res_tbs');
 42    if tbscomp = 'ENABLED' then
 43      raise e_comp_restbs;
 44    end if;
 45  
 46    select def_tab_compression into tbscomp from dba_tablespaces
 47    where tablespace_name = upper('&temp_tbs');
 48    if tbscomp = 'ENABLED' then
 49      raise e_comp_tmptbs;
 50    end if;
 51  
 52    /* check shared pool size */
 53    select bytes into spbytes from v$sgastat
 54    where pool = 'shared pool' and name = 'free memory';
 55    dbms_output.put_line ('spbytes ' || spbytes);
 56    if spbytes < SHARED_POOL_SIZE then
 57      raise e_low_sharedpool;
 58    end if;
 59  
 60    /* check if XDB tablespace is ASSM */
 61    if (:usesecfiles = 'YES') then
 62      select segment_space_management into segmgmt from dba_tablespaces
 63      where tablespace_name = upper('&res_tbs');
 64      if (segmgmt != 'AUTO') then
 65        raise e_not_assm;
 66      end if;
 67    end if;
 68  
 69  exception
 70  
 71    when e_user_exists then
 72      raise_application_error(-20000, 'XDB User already exists');
 73    when e_comp_restbs then
 74      raise_application_error(-20001, 'Compressed tablespace &res_tbs' ||
 75                                      ' cannot be used');
 76    when e_comp_tmptbs then
 77      raise_application_error(-20002, 'Compressed temporary tablespace ' ||
 78                                      '&temp_tbs cannot be used');
 79    when e_low_sharedpool then
 80      raise_application_error(-20003, 'Shared pool size too low');
 81  
 82    when e_not_assm then
 83      raise_application_error(-20004, 'Tablespace &res_tbs is not ASSM ');
 84  
 85    when e_temp_tbs_notexists then
 86      raise_application_error(-20005, 'Tablespace &temp_tbs does not exist');
 87  
 88    when e_res_tbs_notexists then
 89      raise_application_error(-20006, 'Tablespace &res_tbs does not exist');
 90  
 91  end;
 92  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Create XDB User.
SQL> create user xdb identified by &xdb_pass account lock password expire
  2         default tablespace &res_tbs temporary tablespace &temp_tbs;

User created.

SQL> 
SQL> Rem Invoke Registry. The package is defined later.
SQL> EXECUTE dbms_registry.loading('XDB', 'Oracle XML Database', 'DBMS_REGXDB.VALIDATEXDB', 'XDB');

PL/SQL procedure successfully completed.

SQL> Rem Set parent rowid''s for XDB$H_LINK. Used only by upgrade.
SQL> 
SQL> Rem should go away soon
SQL> create user anonymous identified by values 'anonymous' default tablespace &res_tbs;

User created.

SQL> EXECUTE dbms_registry.loading('XDB', 'Oracle XML Database', 'DBMS_REGXDB.VALIDATEXDB', 'XDB', dbms_registry.schema_list_t('ANONYMOUS'));

PL/SQL procedure successfully completed.

SQL> grant create session to anonymous;

Grant succeeded.

SQL> alter user anonymous account lock;

User altered.

SQL> 
SQL> SET VERIFY ON
SQL> 
SQL> grant resource to xdb;

Grant succeeded.

SQL> grant create session to xdb;

Grant succeeded.

SQL> grant alter session to xdb;

Grant succeeded.

SQL> GRANT execute ON dbms_rls TO xdb;

Grant succeeded.

SQL> grant unlimited tablespace to xdb;

Grant succeeded.

SQL> grant create library to xdb;

Grant succeeded.

SQL> grant create public synonym to xdb;

Grant succeeded.

SQL> grant drop public synonym to xdb;

Grant succeeded.

SQL> GRANT SELECT ON user$ TO xdb;

Grant succeeded.

SQL> 
SQL> grant execute on dbms_streams_control_adm to xdb;

Grant succeeded.

SQL> 
SQL> CREATE role xdbadmin;

Role created.

SQL> GRANT xdbadmin TO dba;

Grant succeeded.

SQL> 
SQL> -- Pseudo user that can be used in ACLs to refer to the resource owner
SQL> -- create user owner identified by values 'OWNER';
SQL> 
SQL> -- Needed for prvtxdbz
SQL> grant administer database trigger to xdb;

Grant succeeded.

SQL> 
SQL> -- Needed for catxdbj
SQL> GRANT javauserpriv TO xdb;

Grant succeeded.

SQL> 
SQL> -- Needed by catxdbr and catxdbpi
SQL> grant create view to xdb;

Grant succeeded.

SQL> grant query rewrite to xdb;

Grant succeeded.

SQL> grant create operator to xdb;

Grant succeeded.

SQL> grant create indextype to xdb;

Grant succeeded.

SQL> 
SQL> -- Needed by catxdbpi
SQL> -- This is needed because we are selecting from the hierarchially enabled
SQL> -- table (as a part of the path index trigger) while dropping/truncating it.
SQL> 
SQL> /* REF CASCADE IS DISSALLOWED FOR SCHEMA AND RESOURCE TABLES */
SQL> 
SQL> /* turn off the REF cascade semantics for resource$ */
SQL> alter session set events '22830 trace name context forever, level 4';

Session altered.

SQL> 
SQL> -- XDB$ROOT_INFO table
SQL> create table xdb.xdb$root_info
  2  (resource_root rowid,
  3   rclist raw(2000),
  4   ftp_port number(5),
  5   ftp_protocol varchar2(4000),
  6   http_port number(5),
  7   http_protocol varchar2(4000),
  8   http_host varchar2(4000),
  9   http2_port number(5),
 10   http2_protocol varchar2(4000),
 11   http2_host varchar2(4000),
 12   nfs_port number(5),
 13   nfs_protocol varchar2(4000)
 14  );

Table created.

SQL> 
SQL> -- XDB$XDB_READY table
SQL> create table xdb.xdb$xdb_ready
  2  (data CLOB
  3  );

Table created.

SQL> 
SQL> -- XDB.XDB$IMPORT_TT_INFO table
SQL> -- needed by prvtxdb
SQL> create table xdb.xdb$import_tt_info
  2  (guid         raw(16),
  3   nmspcid      raw(8),
  4   localname    varchar2(2000),
  5   flags        raw(4),
  6   id           raw(8));

Table created.

SQL> 
SQL> grant select,insert,update,delete on xdb.xdb$import_tt_info to public;

Grant succeeded.

SQL> 
SQL> -- XDB$RCLIST view
SQL> create view xdb.xdb$rclist_v as (select rclist from xdb.xdb$root_info);

View created.

SQL> 
SQL> -- This is needed for users to be able to query the repository's rclist
SQL> grant select on xdb.xdb$rclist_v to public;

Grant succeeded.

SQL> 
SQL> -- XDB$H_INDEX table
SQL> -- Note: chidren column cannot be securefiles for now
SQL> variable param_secf varchar2(4000);
SQL> select value from v$parameter  where name='db_securefile';

VALUE
--------------------------------------------------------------------------------
PERMITTED

1 row selected.

SQL> begin
  2   select value into :param_secf from v$parameter where UPPER(name)='DB_SECUREFILE';
  3  end;
  4  /

PL/SQL procedure successfully completed.

SQL> alter system set db_securefile='NEVER';

System altered.

SQL> 
SQL> create table xdb.xdb$h_index
  2    (
  3      oid raw(16),
  4      acl_id raw(16),
  5      owner_id raw(16),
  6      flags raw(4),
  7      children BLOB
  8    )
  9    pctfree 99 pctused 1;

Table created.

SQL> 
SQL> -- revert
SQL> declare
  2    s varchar2(4100);
  3  begin
  4    s := 'alter system set db_securefile=''' || :param_secf || ''' ';
  5  execute immediate s;
  6  end;
  7  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> CREATE INDEX xdb.xdb$h_index_oid_i ON xdb.xdb$h_index (OID);

Index created.

SQL> 
SQL> create type xdb.xdb$link_t OID '00000000000000000000000000020151' AS OBJECT
  2  (
  3      parent_oid    raw(16),
  4      child_oid     raw(16),
  5      name          varchar2(256),
  6      flags         raw(4),
  7      link_sn       raw(16),
  8      child_acloid  raw(16),
  9      child_ownerid raw(16),
 10      parent_rids   raw(2000)
 11  );
 12  /

Type created.

SQL> 
SQL> create table xdb.xdb$h_link of xdb.xdb$link_t
  2  (
  3      constraint xdb_pk_h_link primary key (parent_oid, name)
  4  );

Table created.

SQL> 
SQL> create index xdb.xdb_h_link_child_oid on xdb.xdb$h_link(child_oid);

Index created.

SQL> 
SQL> -- create document links table
SQL> create table xdb.xdb$d_link
  2  (
  3    source_id    raw(16),
  4    target_id    raw(16),
  5    target_path  varchar2(4000),
  6    flags        raw(8)
  7  );

Table created.

SQL> 
SQL> create index xdb.xdb$d_link_source_id on xdb.xdb$d_link(source_id);

Index created.

SQL> 
SQL> create index xdb.xdb$d_link_target_id on xdb.xdb$d_link(target_id);

Index created.

SQL> 
SQL> ------------------------------------------------------------------------------
SQL> create sequence xdb.stateid_restart_sequence
  2    increment by 1
  3    start with 1
  4    minvalue 1
  5    nocycle
  6  /

Sequence created.

SQL> 
SQL> create sequence xdb.clientid_sequence
  2    increment by 1
  3    start with 1
  4    minvalue 1
  5    cache 10
  6    nocycle
  7  /

Sequence created.

SQL> 
SQL> Rem Create XML schema related types and tables
SQL> @@catxdbs.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catxdbs.sql /st_rdbms_11.2.0/2 2011/03/02 08:25:02 spetride Exp $
SQL> Rem
SQL> Rem catxdbs.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2011, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbs.sql - XDB Schema related types and tables
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script creates the types, tables, etc required for
SQL> Rem      XDB Schema i.e. the schema for schemas.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script should be run as the user "XDB".
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    ckavoor     11/02/09 - 2123504: Adding 'show errors'
SQL> Rem    mkandarp    06/11/09 - 8571751 : increase maxval for xdb$namesuff_seq
SQL> Rem    bhammers    02/01/09 - add indexes to xdb.xdb$element
SQL> Rem    mrafiq      01/23/07 - fix for bug 4870624: increase size of
SQL> Rem                           XDB$RAW_LIST_T
SQL> Rem    sichandr    05/29/07 - initialize typeID sequence from 100
SQL> Rem    nkandalu    02/08/07 - 3010822: Increase length of version
SQL> Rem    smalde      02/16/06 - Translations
SQL> Rem    abagrawa    10/05/05 - Add sqltype to simpletype
SQL> Rem    abagrawa    09/29/05 - Add typeID
SQL> Rem    njalali     02/13/03 - moved final_info to end of simpleType
SQL> Rem    abagrawa    01/15/03 - Fix simpletype - remove abstract, add final
SQL> Rem    abagrawa    12/11/02 - increase size of facet_list_t
SQL> Rem    sidicula    09/25/02 - Public synonym for xdb$string_list_t
SQL> Rem    sichandr    07/31/02 - rename simplecontent to simplecont
SQL> Rem    sichandr    07/19/02 - add simpleContent types
SQL> Rem    abagrawa    05/28/02 - Add ID attribute to facets
SQL> Rem    nmontoya    06/27/02 - GRANT SELECT ON xdb.xdb$namesuff_seq TO PUBLIC
SQL> Rem    rmurthy     03/15/02 - add notation, unique, key, keyref
SQL> Rem    sichandr    02/01/02 - increase varray size
SQL> Rem    bkhaladk    01/24/02 - enable grant selects for client side issues.
SQL> Rem    spannala    01/08/02 - incorporating fge_caxdb_priv_indx_fix
SQL> Rem    spannala    01/11/02 - making all systems types have standard TOIDs
SQL> Rem    rmurthy     12/27/01 - remove userPrivilege and add defaultXSL
SQL> Rem    spannala    12/27/01 - not switching users in xdb install
SQL> Rem    njalali     12/04/01 - transient properties
SQL> Rem    rmurthy     12/07/01 - add PD columns to all types
SQL> Rem    mkrishna    11/01/01 - change xmldata to xmldata
SQL> Rem    sichandr    11/28/01 - create indexes
SQL> Rem    sichandr    10/31/01 - add ID attribute
SQL> Rem    rmurthy     09/13/01 - change documentation/appinfo to mixed types
SQL> Rem    sichandr    09/18/01 - support storeVarrayAsTable
SQL> Rem    rmurthy     08/26/01 - add support for substitutionGroup, named group
SQL> Rem    rmurthy     08/03/01 - support for inheritance
SQL> Rem    njalali     07/13/01 - removed resources from this file
SQL> Rem    tsingh      06/30/01 - XDB: XML Database merge
SQL> Rem    rmurthy     06/01/01 - add include/import support
SQL> Rem    spannala    05/18/01 - xmltype_p -> xmltype
SQL> Rem    rmurthy     05/09/01 - remove conn stmt
SQL> Rem    rmurthy     05/04/01 - annotation, appinfo, documentation
SQL> Rem    rmurthy     04/20/01 - support for any, anyAttribute
SQL> Rem    njalali     04/06/01 - made RAW pos. desc. into a VARRAY of RAW
SQL> Rem    rmurthy     03/27/01 - support for list and union simpletypes
SQL> Rem    rmurthy     03/27/01 - add use,value attrs for attribute
SQL> Rem    rmurthy     03/09/01 - major changes for new xml schemas
SQL> Rem    rmurthy     02/14/01 - Created
SQL> Rem
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                   MISC TYPES                                        */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> create or replace type xdb.xdb$xmltype_ref_list_t
  2   OID '00000000000000000000000000020120'as varray(2147483647) of ref sys.xmltype;
  3  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* Qualified Name (QName) */
SQL> create or replace type xdb.xdb$qname OID '00000000000000000000000000020121'
  2  as object
  3  (
  4      prefix_code     raw(4), /* Index into schema extras */
  5      name            varchar2(2000)
  6  );
  7  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create type xdb.xdb$string_list_t OID '00000000000000000000000000020122'
  2  as VARRAY(2147483647) of varchar2(4000);
  3  /

Type created.

SQL> 
SQL> create or replace public synonym xdb$string_list_t for xdb.xdb$string_list_t;

Synonym created.

SQL> 
SQL> create or replace type xdb.xdb$raw_list_t OID '00000000000000000000000000020123'
  2  as varray(2147483647) of raw(2000);
  3  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                   ENUM TYPES                                        */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> /* generic ENUM type if number of values <= UB1MAXVAL */
SQL> 
SQL> create or replace type xdb.xdb$enum_t OID '00000000000000000000000000020124'
  2  as object
  3  (
  4      value       raw(1),
  5  
  6  member function lookupValue RETURN VARCHAR2,
  7         pragma restrict_references (lookupValue, wnds, wnps, rnps, rnds),
  8  member procedure setValue(val IN VARCHAR2),
  9         pragma restrict_references (setValue, wnds, wnps, rnps, rnds)
 10  );
 11  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* generic ENUM type if number of values > UB1MAXVAL */
SQL> 
SQL> create or replace type xdb.xdb$enum2_t OID '00000000000000000000000000020125'
  2  as object
  3  (
  4      value       raw(2),
  5  
  6  member function lookupValue RETURN VARCHAR2,
  7         pragma restrict_references (lookupValue, wnds, wnps, rnps, rnds),
  8  member procedure setValue(val IN VARCHAR2),
  9         pragma restrict_references (setValue, wnds, wnps, rnps, rnds)
 10  );
 11  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* Note that more enum possibilities will overflow max contiguous
SQL>    allocation size in shared memory */
SQL> create type xdb.xdb$enum_values_t OID '00000000000000000000000000020126'
  2  as VARRAY(1000) of varchar2(1024);
  3  /

Type created.

SQL> 
SQL> /*
SQL> * Later will inherit from xdb.xdb$enum
SQL> */
SQL> create or replace type xdb.xdb$derivationChoice
  2  OID '00000000000000000000000000020127' as object
  3  (
  4      value       raw(2),
  5  
  6  member function lookupValue RETURN VARCHAR2,
  7         pragma restrict_references (lookupValue, wnds, wnps, rnps, rnds),
  8  member procedure setValue(val IN VARCHAR2),
  9         pragma restrict_references (setValue, wnds, wnps, rnps, rnds)
 10  );
 11  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$formChoice OID '00000000000000000000000000020128'
  2  as object
  3  (
  4      value       raw(1),
  5  
  6  member function lookupValue RETURN VARCHAR2,
  7         pragma restrict_references (lookupValue, wnds, wnps, rnps, rnds),
  8  member procedure setValue(val IN VARCHAR2),
  9         pragma restrict_references (setValue, wnds, wnps, rnps, rnds)
 10  );
 11  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$whitespaceChoice OID
  2  '00000000000000000000000000020129' as object
  3  (
  4      value       raw(1),
  5  
  6  member function lookupValue RETURN VARCHAR2,
  7         pragma restrict_references (lookupValue, wnds, wnps, rnps, rnds),
  8  member procedure setValue(val IN VARCHAR2),
  9         pragma restrict_references (setValue, wnds, wnps, rnps, rnds)
 10  );
 11  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$javatype OID '0000000000000000000000000002012A'
  2  as object
  3  (
  4      value       raw(2),
  5  
  6  member function lookupValue RETURN VARCHAR2,
  7         pragma restrict_references (lookupValue, wnds, wnps, rnps, rnds),
  8  member procedure setValue(val IN VARCHAR2),
  9         pragma restrict_references (setValue, wnds, wnps, rnps, rnds)
 10  );
 11  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* USE CHOICE - used within attributes */
SQL> create or replace type xdb.xdb$useChoice OID '0000000000000000000000000002012B'
  2  as object
  3  (
  4      value       raw(1),
  5  
  6  member function lookupValue RETURN VARCHAR2,
  7         pragma restrict_references (lookupValue, wnds, wnps, rnps, rnds),
  8  member procedure setValue(val IN VARCHAR2),
  9         pragma restrict_references (setValue, wnds, wnps, rnps, rnds)
 10  );
 11  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* PROCESS CHOICE - used within any and anyAttribute */
SQL> create or replace type xdb.xdb$processChoice OID
  2  '0000000000000000000000000002012C' as object
  3  (
  4      value       raw(1),
  5  
  6  member function lookupValue RETURN VARCHAR2,
  7         pragma restrict_references (lookupValue, wnds, wnps, rnps, rnds),
  8  member procedure setValue(val IN VARCHAR2),
  9         pragma restrict_references (setValue, wnds, wnps, rnps, rnds)
 10  );
 11  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* Transient CHOICE - used within attribute/element */
SQL> create or replace type xdb.xdb$transientChoice OID
  2  '0000000000000000000000000002012D' as object
  3  (
  4      value       raw(1),
  5  
  6  member function lookupValue RETURN VARCHAR2,
  7         pragma restrict_references (lookupValue, wnds, wnps, rnps, rnds),
  8  member procedure setValue(val IN VARCHAR2),
  9         pragma restrict_references (setValue, wnds, wnps, rnps, rnds)
 10  );
 11  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                  ANNOTATION RELATED TYPES                           */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> create or replace type xdb.xdb$appinfo_t OID '00000000000000000000000000020133'
  2  as object
  3  (
  4    sys_xdbpd$      xdb.xdb$raw_list_t,
  5    anypart         varchar2(4000),
  6    source          varchar2(4000)
  7  )
  8  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$appinfo_list_t OID
  2  '00000000000000000000000000020134' as varray(1000) of xdb.xdb$appinfo_t;
  3  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$documentation_t OID
  2  '00000000000000000000000000020135' as object
  3  (
  4    sys_xdbpd$      xdb.xdb$raw_list_t,
  5    anypart         varchar2(4000),
  6    source          varchar2(4000),
  7    lang            varchar2(4000)
  8  )
  9  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$documentation_list_t OID
  2  '00000000000000000000000000020136'
  3    as varray(1000) of xdb.xdb$documentation_t;
  4  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$annotation_t OID
  2  '00000000000000000000000000020137' as object
  3  (
  4    sys_xdbpd$      xdb.xdb$raw_list_t,
  5    appinfo         xdb.xdb$appinfo_list_t,
  6    documentation   xdb.xdb$documentation_list_t
  7  )
  8  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$annotation_list_t OID
  2  '00000000000000000000000000020138' as
  3     varray(65535) of xdb.xdb$annotation_t;
  4  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                   FACET TYPES                                       */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> /* String facet type */
SQL> create or replace type xdb.xdb$facet_t OID '0000000000000000000000000002012E'
  2  as object                 /* String Facet */
  3  (
  4     sys_xdbpd$       xdb.xdb$raw_list_t,
  5     annotation       xdb.xdb$annotation_t,
  6     value            varchar2(2000),
  7     fixed            raw(1),
  8     id               varchar2(256)
  9  )
 10  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create type xdb.xdb$facet_list_t OID '0000000000000000000000000002012F' as
  2  VARRAY(65535) of xdb.xdb$facet_t;
  3  /

Type created.

SQL> 
SQL> create or replace type xdb.xdb$numfacet_t OID '00000000000000000000000000020130'
  2  as object              /* Number Facet */
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      annotation      xdb.xdb$annotation_t,
  6      value           integer,
  7      fixed           raw(1),
  8      id              varchar2(256)
  9  )
 10  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$timefacet_t OID
  2  '00000000000000000000000000020131' as object               /* Time Facet */
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      annotation      xdb.xdb$annotation_t,
  6      value           date,
  7      fixed           raw(1),
  8      id              varchar2(256)
  9  )
 10  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$whitespace_t OID
  2  '00000000000000000000000000020132' as object        /* Whitespace facet */
  3  (
  4      sys_xdbpd$  xdb.xdb$raw_list_t,
  5      annotation  xdb.xdb$annotation_t,
  6      value       xdb.xdb$whitespaceChoice,
  7      fixed       raw(1),
  8      id          varchar2(256)
  9  );
 10  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* Forward reference */
SQL> create or replace type xdb.xdb$element_t OID '00000000000000000000000000020146';
  2  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* Forward reference */
SQL> create or replace type xdb.xdb$schema_t OID '0000000000000000000000000002014D';
  2  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                  NOTATION RELATED TYPES                             */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> create or replace type xdb.xdb$notation_t
  2  OID '00000000000000000000000000020155'
  3  as object
  4  (
  5    sys_xdbpd$      xdb.xdb$raw_list_t,
  6    annotation      xdb.xdb$annotation_t,
  7    name            varchar2(2000),                    /* name of the notation */
  8    publicval       varchar2(4000),
  9    system          varchar2(4000)
 10  )
 11  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$notation_list_t
  2  OID '00000000000000000000000000020156'
  3  as varray(1000) of xdb.xdb$notation_t
  4  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*              UNIQUE/KEY/KEYREF RELATED TYPES                        */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> create or replace type xdb.xdb$xpathspec_t
  2  OID '00000000000000000000000000020157'
  3  as object
  4  (
  5    sys_xdbpd$      xdb.xdb$raw_list_t,
  6    annotation      xdb.xdb$annotation_t,
  7    xpath           varchar2(4000)
  8  )
  9  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$xpathspec_list_t
  2  OID '00000000000000000000000000020158'
  3  as varray(1000) of xdb.xdb$xpathspec_t
  4  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$keybase_t
  2  OID '00000000000000000000000000020159'
  3  as object
  4  (
  5    sys_xdbpd$      xdb.xdb$raw_list_t,
  6    annotation      xdb.xdb$annotation_t,
  7    name            varchar2(1000),               /* name of unique/key/keyref */
  8    refer           xdb.xdb$qname,             /* applicable ONLY for "keyref" */
  9    selector        xdb.xdb$xpathspec_t,
 10    fields          xdb.xdb$xpathspec_list_t
 11  )
 12  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$keybase_list_t
  2  OID '0000000000000000000000000002015A'
  3  as varray(1000) of xdb.xdb$keybase_t
  4  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                   SIMPLETYPE RELATED TYPES                          */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> /* LIST type */
SQL> create or replace type xdb.xdb$list_t OID '00000000000000000000000000020139' as
  2  object
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      annotation      xdb.xdb$annotation_t,
  6      item_type       xdb.xdb$qname,                               /* item of list */
  7      type_ref        ref sys.xmltype,          /* LATER - ref to list item type */
  8      simple_type     ref sys.xmltype            /* locally declared simple type */
  9  )
 10  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* UNION type */
SQL> create or replace type xdb.xdb$union_t OID '0000000000000000000000000002013A' as
  2  object
  3  (
  4      sys_xdbpd$         xdb.xdb$raw_list_t,
  5      annotation      xdb.xdb$annotation_t,
  6      member_types       varchar2(4000),                 /* members of union */
  7      simple_types       xdb.xdb$xmltype_ref_list_t,       /* local simple types */
  8  
  9      /* LATER - refs to all constituents of the union type */
 10      type_refs          xdb.xdb$xmltype_ref_list_t
 11  )
 12  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* SIMPLE DERIVATION type */
SQL> create or replace type xdb.xdb$simple_derivation_t OID
  2  '0000000000000000000000000002013B' AS OBJECT
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      base_type       ref sys.xmltype,
  6      base            xdb.xdb$qname,
  7      lcl_smpl_decl   ref sys.xmltype,        /* locally declared simple type */
  8  
  9      /* Facets */
 10      fractiondigits  xdb.xdb$numfacet_t,
 11      totaldigits     xdb.xdb$numfacet_t,
 12      minlength       xdb.xdb$numfacet_t,
 13      maxlength       xdb.xdb$numfacet_t,
 14      length          xdb.xdb$numfacet_t,
 15      whitespace      xdb.xdb$whitespace_t,
 16      period          xdb.xdb$timefacet_t,
 17      duration        xdb.xdb$timefacet_t,
 18      min_inclusive   xdb.xdb$facet_t,
 19      max_inclusive   xdb.xdb$facet_t,
 20      min_exclusive   xdb.xdb$facet_t,
 21      max_exclusive   xdb.xdb$facet_t,
 22      pattern         xdb.xdb$facet_list_t,
 23      enumeration     xdb.xdb$facet_list_t,
 24      annotation      xdb.xdb$annotation_t,
 25      id              varchar2(256)
 26  );
 27  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$simple_t OID '0000000000000000000000000002013C'
  2  AS OBJECT
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      parent_schema   ref sys.xmltype,
  6      /* Note that name does not need to be a QName since its namespace
  7      must always equal the target namespace for the schema */
  8      name            varchar2(256),
  9      abstract        raw(1),   /* boolean, obsoleted */
 10      /* Only one of the foll. fields is non-null */
 11      restriction     xdb.xdb$simple_derivation_t,
 12      list_type       xdb.xdb$list_t,
 13      union_type      xdb.xdb$union_t,
 14  
 15      annotation      xdb.xdb$annotation_t,
 16      id              varchar2(256),
 17      final_info      xdb.xdb$derivationChoice,
 18      typeid          integer,
 19      sqltype         varchar2(30)
 20  );
 21  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                  GROUP RELATED TYPES                                */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> /* Group (of elements) definition type */
SQL> create or replace type xdb.xdb$group_def_t OID
  2  '0000000000000000000000000002013D' as object
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      parent_schema   ref sys.xmltype,
  6      name            varchar2(2000),                /* name of the group */
  7      /*
  8       * only one of the foll. can be non-null
  9       */
 10      all_kid         ref sys.xmltype,
 11      choice_kid      ref sys.xmltype,
 12      sequence_kid    ref sys.xmltype,
 13  
 14      annotation      xdb.xdb$annotation_t,
 15      id              varchar2(256)
 16  )
 17  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* Group reference type */
SQL> create or replace type xdb.xdb$group_ref_t OID
  2  '0000000000000000000000000002013E' as object
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      parent_schema   ref sys.xmltype,
  6      min_occurs      integer,
  7      max_occurs      varchar2(20), /* in string format incl. "unbounded" */
  8  
  9      groupref_name   xdb.xdb$qname,       /* name of the group being referenced */
 10      groupref_ref    ref sys.xmltype,   /* REF of the group being referenced */
 11  
 12      annotation      xdb.xdb$annotation_t,
 13      id              varchar2(256)
 14  )
 15  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* Attribute Group definition type */
SQL> create or replace type xdb.xdb$attrgroup_def_t OID
  2  '0000000000000000000000000002013F' as object
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      parent_schema   ref sys.xmltype,
  6      name            varchar2(2000),               /* name of the attr group */
  7  
  8      attributes      xdb.xdb$xmltype_ref_list_t,  /* list of attrs within group */
  9      any_attrs       xdb.xdb$xmltype_ref_list_t,  /* list of anyAttribute decls. */
 10      attr_groups     xdb.xdb$xmltype_ref_list_t,          /* list of attr groups */
 11  
 12      annotation      xdb.xdb$annotation_t,
 13      id              varchar2(256)
 14  )
 15  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* Attribute Group reference type */
SQL> create or replace type xdb.xdb$attrgroup_ref_t OID
  2  '00000000000000000000000000020140' as object
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      parent_schema   ref sys.xmltype,
  6  
  7      attrgroup_name  xdb.xdb$qname,   /* name of the attribute group being ref-ed */
  8      attrgroup_ref   ref sys.xmltype,   /* ref of the attr group being ref-ed */
  9  
 10      annotation      xdb.xdb$annotation_t,
 11      id              varchar2(256)
 12  )
 13  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                   COMPLEXTYPE RELATED TYPES                         */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> /* MODEL TYPE
SQL>  *  This type is used as the common type for the following elements :
SQL>  *   - all
SQL>  *   - choice
SQL>  *   - sequence
SQL> */
SQL> create type xdb.xdb$model_t OID '00000000000000000000000000020141';
  2  /

Type created.

SQL> create or replace type xdb.xdb$model_t OID '00000000000000000000000000020141' as
  2  object
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      parent_schema   ref sys.xmltype,
  6      min_occurs      integer,
  7      max_occurs      varchar2(20), /* in string format incl. "unbounded" */
  8  
  9      elements        xdb.xdb$xmltype_ref_list_t,
 10      choice_kids     xdb.xdb$xmltype_ref_list_t,
 11      sequence_kids   xdb.xdb$xmltype_ref_list_t,
 12      anys            xdb.xdb$xmltype_ref_list_t,
 13      groups          xdb.xdb$xmltype_ref_list_t,
 14  
 15      annotation      xdb.xdb$annotation_t,
 16      id              varchar2(256)
 17  )
 18  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* COMPLEX DERIVATION TYPE */
SQL> create or replace type xdb.xdb$complex_derivation_t OID
  2  '00000000000000000000000000020142' as object
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      base            xdb.xdb$qname,
  6  
  7      attributes      xdb.xdb$xmltype_ref_list_t,
  8      any_attrs       xdb.xdb$xmltype_ref_list_t,
  9      attr_groups     xdb.xdb$xmltype_ref_list_t,
 10  
 11      /*
 12       * only one of the foll. can be non-null
 13       */
 14      all_kid         ref sys.xmltype,
 15      choice_kid      ref sys.xmltype,
 16      sequence_kid    ref sys.xmltype,
 17      group_kid       ref sys.xmltype,
 18  
 19      annotation      xdb.xdb$annotation_t,
 20      id              varchar2(256)
 21  )
 22  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* CONTENT TYPE */
SQL> create or replace type xdb.xdb$content_t OID '00000000000000000000000000020143'
  2  as object
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      mixed           raw(1),
  6  
  7      /* only one of the foll. can be non-null */
  8      restriction     xdb.xdb$complex_derivation_t,
  9      extension       xdb.xdb$complex_derivation_t,
 10  
 11      annotation      xdb.xdb$annotation_t,
 12      id              varchar2(256)
 13  )
 14  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* SIMPLECONT_RES type */
SQL> create or replace type xdb.xdb$simplecont_res_t OID
  2  '0000000000000000000000000002015B' AS OBJECT
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      base            xdb.xdb$qname,
  6      id              varchar2(256),
  7      lcl_smpl_decl   ref sys.xmltype,        /* locally declared simple type */
  8      attributes      xdb.xdb$xmltype_ref_list_t,
  9      any_attrs       xdb.xdb$xmltype_ref_list_t,
 10      attr_groups     xdb.xdb$xmltype_ref_list_t,
 11      annotation      xdb.xdb$annotation_t,
 12  
 13      /* Facets */
 14      fractiondigits  xdb.xdb$numfacet_t,
 15      totaldigits     xdb.xdb$numfacet_t,
 16      minlength       xdb.xdb$numfacet_t,
 17      maxlength       xdb.xdb$numfacet_t,
 18      whitespace      xdb.xdb$whitespace_t,
 19      period          xdb.xdb$timefacet_t,
 20      duration        xdb.xdb$timefacet_t,
 21      min_inclusive   xdb.xdb$facet_t,
 22      max_inclusive   xdb.xdb$facet_t,
 23      pattern         xdb.xdb$facet_list_t,
 24      enumeration     xdb.xdb$facet_list_t,
 25      min_exclusive   xdb.xdb$facet_t,
 26      max_exclusive   xdb.xdb$facet_t,
 27      length          xdb.xdb$numfacet_t
 28  );
 29  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* SIMPLECONT_EXT TYPE */
SQL> create or replace type xdb.xdb$simplecont_ext_t OID
  2  '0000000000000000000000000002015C' as object
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      base            xdb.xdb$qname,
  6      id              varchar2(256),
  7  
  8      attributes      xdb.xdb$xmltype_ref_list_t,
  9      any_attrs       xdb.xdb$xmltype_ref_list_t,
 10      attr_groups     xdb.xdb$xmltype_ref_list_t,
 11      annotation      xdb.xdb$annotation_t
 12  )
 13  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* SIMPLECONTENT TYPE */
SQL> create or replace type xdb.xdb$simplecontent_t OID '0000000000000000000000000002015D'
  2  as object
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5  
  6      /* only one of the foll. can be non-null */
  7      restriction     xdb.xdb$simplecont_res_t,
  8      extension       xdb.xdb$simplecont_ext_t,
  9  
 10      annotation      xdb.xdb$annotation_t,
 11      id              varchar2(256)
 12  )
 13  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* COMPLEX TYPE */
SQL> create or replace type xdb.xdb$complex_t OID '00000000000000000000000000020144'
  2  AS OBJECT
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      parent_schema   ref sys.xmltype,
  6      base_type       ref sys.xmltype,      /* applicable for derived types */
  7      name            varchar2(256),
  8      abstract        raw(1),
  9      mixed           raw(1),
 10      final_info      xdb.xdb$derivationChoice,
 11      block           xdb.xdb$derivationChoice,
 12  
 13      attributes      xdb.xdb$xmltype_ref_list_t,
 14      any_attrs       xdb.xdb$xmltype_ref_list_t,
 15      attr_groups     xdb.xdb$xmltype_ref_list_t,
 16  
 17      /*
 18       * only one of the foll. can be non-null, else all have to be null.
 19       */
 20      all_kid         ref sys.xmltype,
 21      choice_kid      ref sys.xmltype,
 22      sequence_kid    ref sys.xmltype,
 23      group_kid       ref sys.xmltype,
 24  
 25      complexcontent  xdb.xdb$content_t,
 26  
 27      annotation      xdb.xdb$annotation_t,
 28  
 29      sqltype         varchar2(30),                 /* Name of corr. SQL type */
 30      sqlschema       varchar2(30),     /* Name of schema containing SQL type */
 31      maintain_dom    raw(1),
 32      subtype_refs    xdb.xdb$xmltype_ref_list_t,     /* List of refs to subtypes */
 33      id              varchar2(256),
 34      simplecont      xdb.xdb$simplecontent_t,
 35      typeid          integer
 36  );
 37  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                   ATTRIBUTE RELATED TYPES                           */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> create or replace type xdb.xdb$property_t OID '00000000000000000000000000020145'
  2  AS OBJECT
  3  (
  4      sys_xdbpd$      xdb.xdb$raw_list_t,
  5      parent_schema   ref sys.xmltype,
  6      prop_number     integer,
  7      /* Note that name does not need to be a QName since its namespace
  8      must always equal the target namespace for the schema */
  9      name            varchar2(256),
 10      typename        xdb.xdb$qname,
 11      mem_byte_length raw(2),       /* buffer size--NULL for variable size*/
 12      mem_type_code   raw(2),
 13      system          raw(1),
 14      mutable         raw(1),
 15      form            xdb.xdb$formChoice,          /* form choice - qualified/not */
 16      sqlname         varchar2(30),
 17      sqltype         varchar2(30),
 18      sqlschema       varchar2(30),
 19      java_type       xdb.xdb$javatype,
 20      default_value   varchar2(4000),
 21      smpl_type_decl  ref sys.xmltype,          /* Locally declared type */
 22      type_ref        ref sys.xmltype,          /* Globally declared type */
 23      /* The following two fields are relevant if the attr/element is defined
 24       * by a ref to a global attr/element
 25       */
 26      propref_name    xdb.xdb$qname,               /* name of global attr/element */
 27      propref_ref     ref sys.xmltype,           /* REF of global attr/element */
 28      attr_use        xdb.xdb$useChoice,             /* only applicable for attrs */
 29      fixed_value     varchar2(2000),
 30      global          raw(1),     /* TRUE for global attr/element declarations */
 31      annotation      xdb.xdb$annotation_t,
 32      sqlcolltype     varchar2(30),                   /* collection type name */
 33      sqlcollschema   varchar2(30),
 34      hidden          raw(1),
 35      transient       xdb.xdb$transientChoice,    /* = none/generated/manifested ? */
 36      id              varchar2(256),
 37      baseprop        raw(1) /* are there generated props based on this prop ? */
 38  );
 39  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                   ELEMENT RELATED TYPES                             */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> create or replace type xdb.xdb$element_t OID '00000000000000000000000000020146'
  2  as object
  3  (
  4      property        xdb.xdb$property_t,
  5      subs_group      xdb.xdb$qname,
  6      num_cols        integer,
  7      nillable        raw(1),
  8      final_info      xdb.xdb$derivationChoice,
  9      block           xdb.xdb$derivationChoice,
 10      abstract        raw(1),
 11  /* XDB extensions */
 12      mem_inline      raw(1),
 13      sql_inline      raw(1),
 14      java_inline     raw(1),
 15      maintain_dom    raw(1),
 16      default_table   varchar2(30),
 17      default_table_schema   varchar2(30),
 18      table_props     varchar2(2000),              /* table properties string */
 19      java_classname  varchar2(2000),
 20      bean_classname  varchar2(2000),
 21      base_sqlname    varchar2(61),
 22      cplx_type_decl  ref sys.xmltype,
 23      subs_group_refs xdb.xdb$xmltype_ref_list_t, /* REFs to all elements for which
 24                                               * this is the head element
 25                                               */
 26      default_xsl     varchar2(2000),     /* URL of default XSL to be applied */
 27      min_occurs      integer,
 28      max_occurs      varchar2(20),     /* in string format incl. "unbounded" */
 29      is_folder       raw(1),
 30      maintain_order  raw(1),
 31      col_props       varchar2(2000),             /* column properties string */
 32      default_acl     varchar2(2000),                   /* URL of default ACL */
 33      head_elem_ref  ref sys.xmltype,    /* REF to head element of subs. group */
 34      uniques        xdb.xdb$keybase_list_t,
 35      keys           xdb.xdb$keybase_list_t,
 36      keyrefs        xdb.xdb$keybase_list_t,
 37      is_translatable raw(1),                  /* Is this element translatable */
 38      xdb_max_occurs  varchar2(20)                            /* xdb:maxOccurs */
 39  );
 40  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                  ANY RELATED TYPES                                  */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> /* type used for both any and anyAttribute elements */
SQL> create type xdb.xdb$any_t OID '00000000000000000000000000020147' as object
  2  (
  3    property         xdb.xdb$property_t,
  4    namespace        varchar2(2000),
  5    process_contents xdb.xdb$processChoice,
  6    min_occurs       integer,
  7    max_occurs       varchar2(20)   /* in string format incl. "unbounded" */
  8  )
  9  /

Type created.

SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                 INCLUDE/IMPORT RELATED TYPES                        */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> create or replace type xdb.xdb$include_t OID '00000000000000000000000000020148'
  2  as object
  3  (
  4      sys_xdbpd$          xdb.xdb$raw_list_t,
  5      schema_location     varchar2(700),
  6      annotation          xdb.xdb$annotation_t,
  7      id                  varchar2(256)
  8  );
  9  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$include_list_t OID
  2  '00000000000000000000000000020149' as varray(65535) of xdb.xdb$include_t;
  3  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$import_t OID '0000000000000000000000000002014A'
  2  as object
  3  (
  4      sys_xdbpd$          xdb.xdb$raw_list_t,
  5      namespace           varchar2(700),
  6      schema_location     varchar2(700),
  7      annotation          xdb.xdb$annotation_t,
  8      id                  varchar2(256)
  9  );
 10  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$import_list_t OID
  2  '0000000000000000000000000002014B' as varray(65535) of xdb.xdb$import_t;
  3  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                   SCHEMA RELATED TYPES                              */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> create or replace type xdb.xdb$extra_list_t OID
  2  '0000000000000000000000000002014C' as varray(65535) of varchar2(2000);
  3  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.xdb$schema_t OID '0000000000000000000000000002014D'
  2  as object
  3  (
  4      schema_url          varchar2(700), /* Maximum key length for an index*/
  5      target_namespace    varchar2(2000),
  6      version             varchar2(4000),
  7      num_props           integer, /* Total # of properties */
  8      final_default       xdb.xdb$derivationChoice,
  9      block_default       xdb.xdb$derivationChoice,
 10      element_form_dflt   xdb.xdb$formChoice,
 11      attribute_form_dflt xdb.xdb$formChoice,
 12      elements            xdb.xdb$xmltype_ref_list_t,
 13      simple_type         xdb.xdb$xmltype_ref_list_t,
 14      complex_types       xdb.xdb$xmltype_ref_list_t,
 15      attributes          xdb.xdb$xmltype_ref_list_t,
 16      imports             xdb.xdb$import_list_t,
 17      includes            xdb.xdb$include_list_t,
 18      flags               raw(4),
 19      sys_xdbpd$          xdb.xdb$raw_list_t,
 20      annotations         xdb.xdb$annotation_list_t,
 21      map_to_nchar        raw(1),   /* map strings to NCHAR/NVARCHAR2/NCLOB ? */
 22      map_to_lob          raw(1),           /* map unbounded strings to LOB ? */
 23      groups              xdb.xdb$xmltype_ref_list_t,
 24      attrgroups          xdb.xdb$xmltype_ref_list_t,
 25      id                  varchar2(256),
 26      varray_as_tab       raw(1),     /* should varrays be stored as tables ? */
 27      schema_owner        varchar2(30),
 28      notations           xdb.xdb$notation_list_t,
 29      lang                varchar2(4000)
 30  );
 31  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                      TABLES                                         */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> 
SQL> /*
SQL>  * Each column has an array of ub2s (in bytecomparable order) specifying
SQL>  * property numbers at each level for the XML property associated with
SQL>  * a particular column.
SQL>  */
SQL> create table xdb.xdb$column_info
  2  (
  3      schema_ref          ref sys.xmltype,
  4      elnum               integer,
  5      colnum              integer,
  6      propinfo            raw(2000)
  7  );

Table created.

SQL> 
SQL> /* Well known ID for XDB schema for schema */
SQL> /* '6C3FCF2D9D354DC1E03408002087A0B7' */
SQL> 
SQL> create table xdb.xdb$simple_type of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "simpleType" id 22
  5          type xdb.xdb$simple_t;

Table created.

SQL> 
SQL> create table xdb.xdb$complex_type of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "complexType" id 29
  5          type xdb.xdb$complex_t;

Table created.

SQL> 
SQL> create table xdb.xdb$all_model of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "all" id 111
  5          type xdb.xdb$model_t;

Table created.

SQL> 
SQL> create table xdb.xdb$choice_model of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "choice" id 112
  5          type xdb.xdb$model_t;

Table created.

SQL> 
SQL> create table xdb.xdb$sequence_model of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "sequence" id 113
  5          type xdb.xdb$model_t;

Table created.

SQL> 
SQL> create table xdb.xdb$element of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "element" id 67
  5          type xdb.xdb$element_t;

Table created.

SQL> 
SQL> create table xdb.xdb$attribute of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "attribute" id 48
  5          type xdb.xdb$property_t;

Table created.

SQL> 
SQL> create table xdb.xdb$anyattr of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "anyAttribute" id 129
  5          type xdb.xdb$any_t;

Table created.

SQL> 
SQL> create table xdb.xdb$any of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "any" id 127
  5          type xdb.xdb$any_t;

Table created.

SQL> 
SQL> create table xdb.xdb$group_def of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "group" id 192
  5          type xdb.xdb$group_def_t;

Table created.

SQL> 
SQL> create table xdb.xdb$group_ref of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "group" id 165
  5          type xdb.xdb$group_ref_t;

Table created.

SQL> 
SQL> create table xdb.xdb$attrgroup_def of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "attributeGroup" id 193
  5          type xdb.xdb$attrgroup_def_t;

Table created.

SQL> 
SQL> create table xdb.xdb$attrgroup_ref of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "attributeGroup" id 169
  5          type xdb.xdb$attrgroup_ref_t;

Table created.

SQL> 
SQL> create table xdb.xdb$schema of sys.xmltype
  2          xmlschema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
  3                  id '6C3FCF2D9D354DC1E03408002087A0B7'
  4          element "schema" id 81
  5          type xdb.xdb$schema_t;

Table created.

SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                          PRIVS                                      */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> /* grant execute privs on all types */
SQL> 
SQL> grant execute on xdb.xdb$annotation_list_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$annotation_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$any_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$appinfo_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$appinfo_list_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$complex_derivation_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$complex_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$content_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$simplecont_res_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$simplecont_ext_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$simplecontent_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$derivationchoice to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$documentation_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$documentation_list_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$element_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$whitespacechoice to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$whitespace_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$enum_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$enum2_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$enum_values_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$extra_list_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$facet_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$facet_list_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$formchoice to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$transientchoice to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$group_def_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$group_ref_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$attrgroup_def_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$attrgroup_ref_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$import_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$include_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$import_list_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$include_list_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$javatype to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$link_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$list_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$model_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$numfacet_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$processchoice to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$property_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$qname to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$raw_list_t to public with grant option;

Grant succeeded.

SQL> Rem (catxdbrs) grant execute on xdb.xdb$resource_t to public with grant option;
SQL> grant execute on xdb.xdb$schema_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$simple_derivation_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$simple_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$string_list_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$timefacet_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$union_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$usechoice to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$notation_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$notation_list_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$xpathspec_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$xpathspec_list_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$keybase_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$keybase_list_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$xmltype_ref_list_t to public with grant option;

Grant succeeded.

SQL> grant execute on sys.xmltype to public with grant option;

Grant succeeded.

SQL> 
SQL> /* grant select privs on all tables
SQL>  *  TODO : enable ACL enforcement during selects
SQL>  */
SQL> grant select on xdb.xdb$schema to public with grant option;

Grant succeeded.

SQL> 
SQL> grant select on xdb.xdb$any to public with grant option;

Grant succeeded.

SQL> grant select on xdb.xdb$anyattr to public with grant option;

Grant succeeded.

SQL> grant select on xdb.xdb$attribute to public with grant option;

Grant succeeded.

SQL> grant select on xdb.xdb$complex_type to public with grant option;

Grant succeeded.

SQL> grant select on xdb.xdb$element to public with grant option;

Grant succeeded.

SQL> grant select on xdb.xdb$simple_type to public with grant option;

Grant succeeded.

SQL> grant select on xdb.xdb$all_model to public with grant option;

Grant succeeded.

SQL> grant select on xdb.xdb$choice_model to public with grant option;

Grant succeeded.

SQL> grant select on xdb.xdb$sequence_model to public with grant option;

Grant succeeded.

SQL> grant select on xdb.xdb$group_def to public with grant option;

Grant succeeded.

SQL> grant select on xdb.xdb$group_ref to public with grant option;

Grant succeeded.

SQL> grant select on xdb.xdb$attrgroup_def to public with grant option;

Grant succeeded.

SQL> grant select on xdb.xdb$attrgroup_ref to public with grant option;

Grant succeeded.

SQL> 
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                          INDEXES                                    */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> /*
SQL> create unique index xdb.xdb$propnum_a on
SQL> xdb.xdb$attribute e (reftohex(e.xmldata.parent_schema),
SQL>                  e.xmldata.prop_number);
SQL> 
SQL> create unique index xdb.xdb$propnum_e on
SQL> xdb.xdb$element e(reftohex(e.xmldata.property.parent_schema),
SQL>               e.xmldata.property.prop_number);
SQL> 
SQL> create unique index xdb.xdb$schema_pk_url on xdb.xdb$schema e
SQL>    (e.xmldata.schema_url);
SQL> */
SQL> 
SQL> 
SQL> /* if you add/alter an here please make sure to also update xdbu111.sql */
SQL> 
SQL> /* prop_number index */
SQL> create index xdb.xdb$element_propnumber on
  2  xdb.xdb$element e (e.xmldata.property.prop_number);

Index created.

SQL> 
SQL> /* prop_name index */
SQL> create index xdb.xdb$element_propname on
  2  xdb.xdb$element e (e.xmldata.property.name);

Index created.

SQL> 
SQL> /* schema_url */
SQL> create index xdb.xdb$schema_url on
  2  xdb.xdb$schema s (s.xmldata.schema_url);

Index created.

SQL> 
SQL> /* parent_schema */
SQL> create index xdb.xdb$element_ps on
  2  xdb.xdb$element e (sys_op_r2o(e.xmldata.property.parent_schema));

Index created.

SQL> 
SQL> /* propref_ref */
SQL> create  index xdb.xdb$element_pr on
  2  xdb.xdb$element e (sys_op_r2o(e.xmldata.property.propref_ref));

Index created.

SQL> 
SQL> /* type_ref */
SQL> create  index xdb.xdb$element_tr on
  2  xdb.xdb$element e (sys_op_r2o(e.xmldata.property.type_ref));

Index created.

SQL> 
SQL> /* sequence_kid */
SQL> create  index xdb.xdb$complex_type_sk on
  2  xdb.xdb$complex_type ct (sys_op_r2o(ct.xmldata.sequence_kid));

Index created.

SQL> 
SQL> /* choice_kid */
SQL> create  index xdb.xdb$complex_type_ck on
  2  xdb.xdb$complex_type ct (sys_op_r2o(ct.xmldata.choice_kid));

Index created.

SQL> 
SQL> /* all_kid */
SQL> create  index xdb.xdb$complex_type_ak on
  2  xdb.xdb$complex_type ct (sys_op_r2o(ct.xmldata.all_kid));

Index created.

SQL> 
SQL> /* head_elem_ref */
SQL> create  index xdb.xdb$element_her on
  2  xdb.xdb$element ct (sys_op_r2o(ct.xmldata.head_elem_ref));

Index created.

SQL> 
SQL> /* global */
SQL> BEGIN
  2  execute immediate
  3  'create bitmap index xdb.xdb$element_global on
  4  xdb.xdb$element e (e.xmldata.property.global)';
  5  EXCEPTION WHEN OTHERS THEN NULL;
  6  END;
  7  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> 
SQL> /* analyze xdb.xdb$element to force cbo on DBA_XML_TABLES */
SQL> analyze table xdb.xdb$element compute statistics;

Table analyzed.

SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                      SEQUENCES                                      */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> /* Sequence number generator for Property Numbers
SQL>  *   The initial set of numbers are reserved for XDB internal use.
SQL>  */
SQL> create sequence xdb.xdb$propnum_seq
  2    start with 2000
  3    cache 20;

Sequence created.

SQL> 
SQL> /* Sequence number generator for name suffixes (schema compiler)
SQL>  */
SQL> create sequence xdb.xdb$namesuff_seq
  2    maxvalue 99999 cycle cache 20;

Sequence created.

SQL> GRANT SELECT ON xdb.xdb$namesuff_seq TO PUBLIC;

Grant succeeded.

SQL> 
SQL> /* Type id generator for global simple and complex types
SQL>  * The initial numbers are reserved for built-in types.
SQL>  */
SQL> create sequence xdb.xdb$typeid_seq
  2    start with 100
  3    cache 20;

Sequence created.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> Rem Add XDB schema for schemas
SQL> @@catxdbdt.sql
SQL> Rem
SQL> Rem $Header: catxdbdt.sql 22-sep-2006.16:29:57 mrafiq Exp $
SQL> Rem
SQL> Rem catxdbdt.sql
SQL> Rem
SQL> Rem Copyright (c) 1900, 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbdt.sql - XDB initialization DaTa
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Initialization data (schema for schema) for XDB
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    mrafiq      09/22/06 - remove default value for translate
SQL> Rem    mrafiq      09/20/06 - Fix typeid default value
SQL> Rem    smalde      02/16/06 - Translations.
SQL> Rem    nkandalu    12/06/05 - 4751888: add substitution to derivationChoice
SQL> Rem    abagrawa    10/05/05 - Add sqltype to simpletype
SQL> Rem    abagrawa    09/29/05 - Add typeID
SQL> Rem    rmurthy     02/17/05 - populate namespace array
SQL> Rem    rmurthy     10/16/03 - temp fix for timefacet
SQL> Rem    njalali     02/18/03 - putting ABSTRACT back in
SQL> Rem    abagrawa    01/15/03 - Fix simpletype
SQL> Rem    njalali     10/29/02 - removing null annotation varray
SQL> Rem    bkhaladk    09/13/02 - add text type
SQL> Rem    sichandr    07/31/02 - rename simplecontent to simplecont
SQL> Rem    esedlar     06/25/02 - Fix memtype for binary
SQL> Rem    sichandr    07/17/02 - choice instead of sequence
SQL> Rem    bkhaladk    04/02/02 - baseProp should be system_qmtp TRUE
SQL> Rem    abagrawa    05/28/02 - Add ID attribute to facets
SQL> Rem    rmurthy     03/15/02 - add notation, unique, key, keyref
SQL> Rem    sichandr    02/25/02 - add owner parameter to xdb$ExtName2IntName
SQL> Rem    mkrishna    01/28/02 - pass namespace to inserAny
SQL> Rem    spannala    12/27/01 - not switching users in xdb install
SQL> Rem    rmurthy     01/02/02 - change targetNamespace to XMLSchema
SQL> Rem    rmurthy     12/27/01 - remove userPrivilege and add defaultXSL
SQL> Rem    rmurthy     12/17/01 - set system=true for XDB specific attrs
SQL> Rem    rmurthy     12/07/01 - add PD columns to all types
SQL> Rem    njalali     12/04/01 - transient and base proprties
SQL> Rem    rmurthy     11/30/01 - dont insert empty varrays
SQL> Rem    sichandr    12/05/01 - fix annotation SQLCollType
SQL> Rem    sichandr    11/28/01 - set global flag in bootstrap schemas
SQL> Rem    mkrishna    11/01/01 - change xmldata to xmldata
SQL> Rem    rmurthy     11/20/01 - specify coll type info
SQL> Rem    sichandr    10/31/01 - add ID attribute
SQL> Rem    njalali     10/27/01 - adding T_TIMESTAMP constant
SQL> Rem    sichandr    10/29/01 - authid current_user for xdb$ExtName2IntName
SQL> Rem    sichandr    10/18/01 - add xdb$extname2intname
SQL> Rem    rmurthy     09/19/01 - fix maintainDOM
SQL> Rem    rmurthy     09/13/01 - change documentation/appinfo to mixed types
SQL> Rem    sichandr    09/18/01 - support storeVarrayAsTable
SQL> Rem    rmurthy     08/26/01 - add support for substitutionGroup, named group
SQL> Rem    njalali     08/06/01 - added QMXT_XOBD
SQL> Rem    rmurthy     08/03/01 - support for inheritance
SQL> Rem    tsingh      06/30/01 - XDB: XML Database merge
SQL> Rem    rmurthy     05/31/01 - fix ctype decl. for schema/include
SQL> Rem    spannala    05/18/01 - xmltype_p -> xmltype
SQL> Rem    rmurthy     05/09/01 - remove conn stmt
SQL> Rem    rmurthy     04/25/01 - annotation, appinfo, documentation
SQL> Rem    rmurthy     04/20/01 - support for any, anyAttribute
SQL> Rem    rmurthy     03/27/01 - add use,value attrs for attribute
SQL> Rem    rmurthy     02/22/01 - major changes for new xml schemas
SQL> Rem    rmurthy     02/02/01 - add support for element ref
SQL> Rem    rmurthy     01/12/01 - consistently uppercase all schema object names
SQL> Rem    mkrishna    12/03/00 - change sys_nc values to xmldata
SQL> Rem    rmurthy     12/04/00 - uppercase type & schema names
SQL> Rem    njalali     11/16/00 - sqlschema/sqltype order switch
SQL> Rem    esedlar     11/01/00 - Add SQL schema
SQL> Rem    njalali     09/25/00 - Add typename for <schema> XML type
SQL> Rem    esedlar     07/12/00 - Created
SQL> Rem
SQL> 
SQL> create or replace library xdb.XMLSchema_lib trusted as static
  2  /

Library created.

SQL> 
SQL> Rem Function that converts namespace array to internal pickled
SQL> Rem format. Used to bootstrap the schema for schemas and
SQL> Rem also the resource schema
SQL> create or replace function xdb.xdb$getPickledNS
  2         (nsuri IN VARCHAR2, pfx IN VARCHAR2)
  3  return raw is
  4    external
  5    name "GET_PICKLED_NS"
  6    language C
  7    library XMLSCHEMA_LIB
  8    with context
  9    parameters (context,
 10                nsuri        STRING,
 11                nsuri        INDICATOR sb4,
 12                nsuri        LENGTH sb4,
 13                pfx        STRING,
 14                pfx        INDICATOR sb4,
 15                pfx        LENGTH sb4,
 16                return         LENGTH sb4,
 17                return      INDICATOR sb4,
 18                return);
 19  /

Function created.

SQL> 
SQL> Rem Bootstrap for schema for schemas
SQL> create or replace package xdb.xdb$bootstrap as
  2  
  3          SIMPLE_SQL CONSTANT VARCHAR2(256) :=
  4                           'insert into xdb.xdb$simple_type s (xmldata) ' ||
  5                           'values (:1) returning ref(s) into :2';
  6          SEQUENCE_SQL CONSTANT VARCHAR2(256) :=
  7                      'insert into xdb.xdb$sequence_model c (xmldata) ' ||
  8                           'values (:1) returning ref(c) into :2';
  9          CHOICE_SQL CONSTANT VARCHAR2(256) :=
 10                      'insert into xdb.xdb$choice_model c (xmldata) ' ||
 11                           'values (:1) returning ref(c) into :2';
 12          COMPLEX_SQL CONSTANT VARCHAR2(256) :=
 13                      'insert into xdb.xdb$complex_type c (xmldata) ' ||
 14                           'values (:1) returning ref(c) into :2';
 15          COMPLEX_UPDATE_SQL CONSTANT VARCHAR2(256) :=
 16                      'update xdb.xdb$complex_type c set xmldata = :1 ' ||
 17                           'where ref(c) = :2';
 18          ATTR_SQL CONSTANT VARCHAR2(256) :=
 19                            'insert into xdb.xdb$attribute a (xmldata) ' ||
 20                           'values (:1) returning ref(a) into :2';
 21          ELEM_SQL CONSTANT vARCHAR2(256) :=
 22                            'insert into xdb.xdb$element e (xmldata) ' ||
 23                           'values (:1) returning ref(e) into :2';
 24          ANY_SQL CONSTANT VARCHAR2(256) :=
 25                            'insert into xdb.xdb$any a (xmldata) ' ||
 26                           'values (:1) returning ref(a) into :2';
 27  
 28  
 29          LPXELEMENT   CONSTANT INTEGER :=1;
 30          LPXATTR      CONSTANT INTEGER :=2;
 31  
 32          TD_EXTENSION   CONSTANT xdb.xdb$derivationChoice :=
 33                                  xdb.xdb$derivationChoice('0001');
 34          TD_RESTRICTION CONSTANT xdb.xdb$derivationChoice :=
 35                                  xdb.xdb$derivationChoice('0002');
 36          TD_LIST        CONSTANT xdb.xdb$derivationChoice :=
 37                                  xdb.xdb$derivationChoice('0003');
 38          TD_ALL         CONSTANT xdb.xdb$derivationChoice :=
 39                                  xdb.xdb$derivationChoice('0004');
 40          TD_SUBSTITUTION CONSTANT xdb.xdb$derivationChoice :=
 41                                  xdb.xdb$derivationChoice('0005');
 42          TD_UNION       CONSTANT xdb.xdb$derivationChoice :=
 43                                  xdb.xdb$derivationChoice('0006');
 44  
 45          TRANSIENT_GENERATED  CONSTANT xdb.xdb$transientChoice :=
 46                                          xdb.xdb$transientChoice('01');
 47          TRANSIENT_MANIFESTED CONSTANT xdb.xdb$transientChoice :=
 48                                          xdb.xdb$transientChoice('02');
 49  
 50          FC_UNQUAL      CONSTANT xdb.xdb$formChoice := xdb.xdb$formChoice('00');
 51          FC_QUAL        CONSTANT xdb.xdb$formChoice := xdb.xdb$formChoice('01');
 52  
 53          T_JAVASTRING CONSTANT RAW(2) :='101';
 54          T_XOB        CONSTANT RAW(2) :='102';
 55          T_ENUM       CONSTANT RAW(2) :='103';
 56          T_QNAME      CONSTANT RAW(2) :='104';
 57          T_XOBD       CONSTANT RAW(2) :='105';
 58          T_CSTRING    CONSTANT RAW(2) :='1'; /* DTYCHR */
 59          T_NUMBER     CONSTANT RAW(2) :='2'; /* DTYNUM */
 60          T_INTEGER    CONSTANT RAW(2) :='3'; /* DTYINT */
 61          T_FLOAT      CONSTANT RAW(2) :='4'; /* DTYFLT */
 62          T_DATE       CONSTANT RAW(2) :='c'; /* DTYDAT */
 63          T_TIMESTAMP  CONSTANT RAW(2) :='b4'; /* DTYSTAMP */
 64          T_BINARY     CONSTANT RAW(2) :='17'; /* DTYBIN */
 65          T_UNSIGNINT  CONSTANT RAW(2) :='44'; /* DTYINT */
 66          T_REF        CONSTANT RAW(2) :='6e'; /* DTYREF */
 67          T_BOOLEAN    CONSTANT RAW(2) :='fc'; /* DTYBOL */
 68          T_BLOB       CONSTANT RAW(2) :='71'; /* DTYBLOB */
 69          T_CLOB       CONSTANT RAW(2) :='70'; /* DTYBLOB */
 70  
 71          JT_STRING     CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('0');
 72          JT_INT        CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('1');
 73          JT_LONG       CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('2');
 74          JT_SHORT      CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('3');
 75          JT_BYTE       CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('4');
 76          JT_FLOAT      CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('5');
 77          JT_DOUBLE     CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('6');
 78          JT_BIGDECIMAL CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('6');
 79          JT_BOOLEAN    CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('8');
 80          JT_BYTEARRAY  CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('9');
 81          JT_STREAM     CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('a');
 82          JT_CHARSTREAM CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('b');
 83          JT_TIMESTAMP  CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('c');
 84          JT_REFERENCE  CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('d');
 85          JT_QNAME      CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('e');
 86          JT_ENUM       CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('f');
 87          JT_XMLTYPE    CONSTANT xdb.xdb$javatype := xdb.xdb$javatype('10');
 88  
 89  
 90          TR_STRING    CONSTANT xdb.xdb$qname := xdb.xdb$qname('00', 'string');
 91          TR_BOOLEAN   CONSTANT xdb.xdb$qname := xdb.xdb$qname('00', 'boolean');
 92          TR_BINARY    CONSTANT xdb.xdb$qname := xdb.xdb$qname('00', 'hexBinary');
 93          TR_INT       CONSTANT xdb.xdb$qname := xdb.xdb$qname('00', 'integer');
 94          TR_NNEGINT   CONSTANT xdb.xdb$qname := xdb.xdb$qname('00',
 95                                                           'nonNegativeInteger');
 96  
 97          FALSE        CONSTANT RAW(1) := '0';
 98          TRUE         CONSTANT RAW(1) := '1';
 99  
100  
101          PN_TOTAL_PROPNUMS CONSTANT INTEGER := 276;
102  
103          PN_SCHEMA_LANG                CONSTANT INTEGER := 212;
104          PN_NOTATION_ANNOTATION        CONSTANT INTEGER := 213;
105          PN_NOTATION_NAME              CONSTANT INTEGER := 214;
106          PN_NOTATION_PUBLIC            CONSTANT INTEGER := 215;
107          PN_NOTATION_SYSTEM            CONSTANT INTEGER := 216;
108          PN_SCHEMA_NOTATION            CONSTANT INTEGER := 217;
109          PN_XPATHSPEC_ANNOTATION       CONSTANT INTEGER := 218;
110          PN_XPATHSPEC_XPATH            CONSTANT INTEGER := 219;
111          PN_KEYBASE_ANNOTATION         CONSTANT INTEGER := 220;
112          PN_KEYBASE_NAME               CONSTANT INTEGER := 221;
113          PN_KEYBASE_REFER              CONSTANT INTEGER := 222;
114          PN_KEYBASE_SELECTOR           CONSTANT INTEGER := 223;
115          PN_KEYBASE_FIELD              CONSTANT INTEGER := 224;
116          PN_ELEMENT_UNIQUE             CONSTANT INTEGER := 225;
117          PN_ELEMENT_KEY                CONSTANT INTEGER := 226;
118          PN_ELEMENT_KEYREF             CONSTANT INTEGER := 227;
119  
120          PN_SCHEMA_MAPTONCHAR          CONSTANT INTEGER := 162;
121          PN_SCHEMA_MAPTOLOB            CONSTANT INTEGER := 194;
122          PN_SCHEMA_GROUP               CONSTANT INTEGER := 192;
123          PN_SCHEMA_ATTRGROUP           CONSTANT INTEGER := 193;
124          PN_SCHEMA_ID                  CONSTANT INTEGER := 206;
125          PN_SCHEMA_VARRAYTAB           CONSTANT INTEGER := 209;
126          PN_SCHEMA_OWNER               CONSTANT INTEGER := 210;
127  
128          PN_FACET_FIXED  CONSTANT INTEGER := 86;
129          PN_NUMFACET_FIXED  CONSTANT INTEGER := 87;
130          PN_TIMEFACET_FIXED  CONSTANT INTEGER := 88;
131          PN_WHITESPACE_FIXED  CONSTANT INTEGER := 89;
132  
133          PN_FACET_ANNOTATION  CONSTANT INTEGER := 228;
134          PN_NUMFACET_ANNOTATION  CONSTANT INTEGER := 229;
135          PN_TIMEFACET_ANNOTATION  CONSTANT INTEGER := 230;
136          PN_WHITESPACE_ANNOTATION  CONSTANT INTEGER := 231;
137  
138          PN_FACET_ID CONSTANT INTEGER      := 234;
139          PN_NUMFACET_ID CONSTANT INTEGER   := 235;
140          PN_TIMEFACET_ID CONSTANT INTEGER  := 236;
141          PN_WHITESPACE_ID CONSTANT INTEGER := 237;
142  
143          PN_SIMPLE_PARENTSCHEMA        CONSTANT INTEGER := 4;
144          PN_SIMPLE_NAME        CONSTANT INTEGER := 6;
145          PN_SIMPLE_ABSTRACT        CONSTANT INTEGER := 8;
146          PN_SIMPLE_FINAL          CONSTANT INTEGER := 270;
147          PN_SIMPLE_BASETYPE        CONSTANT INTEGER := 5;
148          PN_SIMPLE_BASE        CONSTANT INTEGER := 7;
149          PN_SIMPLE_PRECISION     CONSTANT INTEGER := 11;
150          PN_SIMPLE_SCALE         CONSTANT INTEGER := 12;
151          PN_SIMPLE_MINLENGTH        CONSTANT INTEGER := 13;
152          PN_SIMPLE_MAXLENGTH        CONSTANT INTEGER := 14;
153          PN_SIMPLE_WHITESPACE        CONSTANT INTEGER := 15;
154          PN_SIMPLE_PERIOD        CONSTANT INTEGER := 16;
155          PN_SIMPLE_DURATION        CONSTANT INTEGER := 17;
156          PN_SIMPLE_MININCLUSIVE        CONSTANT INTEGER := 18;
157          PN_SIMPLE_MAXINCLUSIVE        CONSTANT INTEGER := 19;
158          PN_SIMPLE_PATTERN        CONSTANT INTEGER := 20;
159          PN_SIMPLE_ENUMERATION        CONSTANT INTEGER := 21;
160          PN_SIMPLE_MINEXCLUSIVE  CONSTANT INTEGER := 90;
161          PN_SIMPLE_MAXEXCLUSIVE  CONSTANT INTEGER := 91;
162          PN_SIMPLE_LENGTH        CONSTANT INTEGER := 92;
163          PN_SIMPLE_ID            CONSTANT INTEGER := 196;
164          PN_SIMPLEDER_SIMPLETYPE        CONSTANT INTEGER := 9;
165          PN_SIMPLEDER_ANNOTATION        CONSTANT INTEGER := 144;
166          PN_SIMPLEDER_ID                CONSTANT INTEGER := 195;
167          PN_SIMPLE_RESTRICTION        CONSTANT INTEGER := 10;
168          PN_SIMPLE_LIST            CONSTANT INTEGER := 117;
169          PN_SIMPLE_UNION            CONSTANT INTEGER := 124;
170          PN_SIMPLE_TYPEID          CONSTANT INTEGER := 271;
171          PN_SIMPLE_SQLTYPE         CONSTANT INTEGER := 273;
172          PN_LIST_ITEMTYPE          CONSTANT INTEGER := 118;
173          PN_LIST_TYPEREF           CONSTANT INTEGER := 119;
174          PN_LIST_SIMPLETYPE        CONSTANT INTEGER := 120;
175          PN_LIST_ANNOTATION        CONSTANT INTEGER := 232;
176          PN_UNION_MEMBERTYPES      CONSTANT INTEGER := 121;
177          PN_UNION_SIMPLETYPE       CONSTANT INTEGER := 122;
178          PN_UNION_TYPEREF          CONSTANT INTEGER := 123;
179          PN_UNION_ANNOTATION        CONSTANT INTEGER := 233;
180  
181          PN_MODEL_PARENTSCHEMA CONSTANT INTEGER := 93;
182          PN_MODEL_MINOCCURS    CONSTANT INTEGER := 94;
183          PN_MODEL_MAXOCCURS    CONSTANT INTEGER := 95;
184          PN_MODEL_ELEMENT      CONSTANT INTEGER := 96;
185          PN_MODEL_CHOICE       CONSTANT INTEGER := 97;
186          PN_MODEL_SEQUENCE     CONSTANT INTEGER := 98;
187          PN_MODEL_ANY          CONSTANT INTEGER := 127;
188          PN_MODEL_ANNOTATION   CONSTANT INTEGER := 143;
189          PN_MODEL_ID           CONSTANT INTEGER := 201;
190          PN_MODEL_GROUP        CONSTANT INTEGER := 165;
191          PN_COMPLEXDERIVATION_BASE      CONSTANT INTEGER := 99;
192          PN_COMPLEXDERIVATION_ATTRIBUTE CONSTANT INTEGER := 101;
193          PN_COMPLEXDERIVATION_ALL       CONSTANT INTEGER := 102;
194          PN_COMPLEXDERIVATION_CHOICE    CONSTANT INTEGER := 103;
195          PN_COMPLEXDERIVATION_SEQUENCE  CONSTANT INTEGER := 104;
196          PN_COMPLEXDERIVATION_ANYATTR   CONSTANT INTEGER := 128;
197          PN_COMPLEXDERIVATION_ANNOT     CONSTANT INTEGER := 145;
198          PN_COMPLEXDERIVATION_GROUP     CONSTANT INTEGER := 166;
199          PN_COMPLEXDERIVATION_ATTRGROUP CONSTANT INTEGER := 167;
200          PN_COMPLEXDERIVATION_ID        CONSTANT INTEGER := 202;
201          PN_CONTENT_MIXED        CONSTANT INTEGER := 105;
202          PN_CONTENT_RESTRICTION  CONSTANT INTEGER := 106;
203          PN_CONTENT_EXTENSION    CONSTANT INTEGER := 107;
204          PN_CONTENT_ANNOTATION   CONSTANT INTEGER := 146;
205          PN_CONTENT_ID           CONSTANT INTEGER := 203;
206          PN_COMPLEXTYPE_PARENTSCHEMA     CONSTANT INTEGER := 23;
207          PN_COMPLEXTYPE_FINAL            CONSTANT INTEGER := 24;
208          PN_COMPLEXTYPE_BLOCK            CONSTANT INTEGER := 25;
209          PN_COMPLEXTYPE_MIXED            CONSTANT INTEGER := 108;
210          PN_COMPLEXTYPE_ABSTRACT         CONSTANT INTEGER := 109;
211          PN_COMPLEXTYPE_NAME             CONSTANT INTEGER := 110;
212          PN_COMPLEXTYPE_SIMPLECONTENT    CONSTANT INTEGER := 26;
213          PN_COMPLEXTYPE_COMPLEXCONTENT   CONSTANT INTEGER := 27;
214          PN_COMPLEXTYPE_ATTRIBUTE        CONSTANT INTEGER := 28;
215          PN_COMPLEXTYPE_ALL              CONSTANT INTEGER := 111;
216          PN_COMPLEXTYPE_CHOICE           CONSTANT INTEGER := 112;
217          PN_COMPLEXTYPE_SEQUENCE         CONSTANT INTEGER := 113;
218          PN_COMPLEXTYPE_ANYATTR          CONSTANT INTEGER := 129;
219          PN_COMPLEXTYPE_SQLTYPE          CONSTANT INTEGER := 159;
220          PN_COMPLEXTYPE_SQLSCHEMA        CONSTANT INTEGER := 160;
221          PN_COMPLEXTYPE_MAINTAINDOM      CONSTANT INTEGER := 161;
222          PN_COMPLEXTYPE_SUBTYPEREF       CONSTANT INTEGER := 163;
223          PN_COMPLEXTYPE_BASETYPE         CONSTANT INTEGER := 100;
224          PN_COMPLEXTYPE_GROUP            CONSTANT INTEGER := 168;
225          PN_COMPLEXTYPE_ATTRGROUP        CONSTANT INTEGER := 169;
226          PN_COMPLEXTYPE_ID               CONSTANT INTEGER := 204;
227  
228          PN_COMPLEXTYPE_TYPEID           CONSTANT INTEGER := 272;
229  
230          PN_APPINFO_SOURCE               CONSTANT INTEGER := 130;
231          PN_APPINFO_ANY                  CONSTANT INTEGER := 131;
232          PN_DOCUMENTATION_SOURCE         CONSTANT INTEGER := 132;
233          PN_DOCUMENTATION_LANG           CONSTANT INTEGER := 133;
234          PN_DOCUMENTATION_ANY            CONSTANT INTEGER := 134;
235          PN_ANNOTATION_APPINFO           CONSTANT INTEGER := 135;
236          PN_ANNOTATION_DOCUMENTATION     CONSTANT INTEGER := 136;
237          PN_SCHEMA_ANNOTATION            CONSTANT INTEGER := 137;
238          PN_ATTRIBUTE_ANNOTATION         CONSTANT INTEGER := 138;
239          PN_SIMPLE_ANNOTATION            CONSTANT INTEGER := 139;
240          PN_COMPLEXTYPE_ANNOTATION       CONSTANT INTEGER := 140;
241  
242          PN_ELEMENT_DEFAULTXSL           CONSTANT INTEGER := 114;
243          PN_ELEMENT_DEFTABLESCHEMA       CONSTANT INTEGER := 147;
244          PN_ELEMENT_ISFOLDER             CONSTANT INTEGER := 155;
245          PN_ELEMENT_MAINTAINORDER        CONSTANT INTEGER := 156;
246          PN_ELEMENT_COLUMNPROPS          CONSTANT INTEGER := 157;
247          PN_ELEMENT_DEFAULTACL           CONSTANT INTEGER := 158;
248          PN_ELEMENT_HEADELEM_REF         CONSTANT INTEGER := 164;
249          PN_ELEMENT_ISTRANSLATABLE       CONSTANT INTEGER := 274;
250          PN_ELEMENT_XDBMAXOCCURS         CONSTANT INTEGER := 275;
251  
252          PN_ATTRIBUTE_USE                CONSTANT INTEGER := 115;
253          PN_ATTRIBUTE_FIXED              CONSTANT INTEGER := 116;
254          PN_ATTR_SQLCOLLTYPE             CONSTANT INTEGER := 148;
255          PN_ATTR_SQLCOLLSCHEMA           CONSTANT INTEGER := 149;
256          PN_ATTR_HIDDEN                  CONSTANT INTEGER := 153;
257          PN_ATTR_TRANSIENT               CONSTANT INTEGER := 154;
258          PN_ATTR_ID                      CONSTANT INTEGER := 205;
259          PN_ATTR_BASEPROP                CONSTANT INTEGER := 211;
260  
261          PN_ANYTYPE_MINOCCURS            CONSTANT INTEGER := 141;
262          PN_ANYTYPE_MAXOCCURS            CONSTANT INTEGER := 142;
263          PN_ANYTYPE_NAMESPACE            CONSTANT INTEGER := 125;
264          PN_ANYTYPE_PROCESSCONTENTS      CONSTANT INTEGER := 126;
265  
266          PN_INCLUDE_ANNOTATION           CONSTANT INTEGER := 150;
267          PN_INCLUDE_ID                   CONSTANT INTEGER := 207;
268          PN_INCLUDE_SCHEMALOCATION       CONSTANT INTEGER := 151;
269          PN_IMPORT_ANNOTATION            CONSTANT INTEGER := 152;
270          PN_IMPORT_ID                    CONSTANT INTEGER := 208;
271  
272          PN_GROUPDEF_PARENTSCHEMA        CONSTANT INTEGER := 170;
273          PN_GROUPDEF_NAME                CONSTANT INTEGER := 171;
274          PN_GROUPDEF_ANNOTATION          CONSTANT INTEGER := 172;
275          PN_GROUPDEF_ID                  CONSTANT INTEGER := 197;
276          PN_GROUPDEF_ALL                 CONSTANT INTEGER := 173;
277          PN_GROUPDEF_CHOICE              CONSTANT INTEGER := 174;
278          PN_GROUPDEF_SEQUENCE            CONSTANT INTEGER := 175;
279  
280          PN_GROUPREF_PARENTSCHEMA        CONSTANT INTEGER := 176;
281          PN_GROUPREF_MINOCCURS           CONSTANT INTEGER := 177;
282          PN_GROUPREF_MAXOCCURS           CONSTANT INTEGER := 178;
283          PN_GROUPREF_NAME                CONSTANT INTEGER := 179;
284          PN_GROUPREF_REF                 CONSTANT INTEGER := 180;
285          PN_GROUPREF_ANNOTATION          CONSTANT INTEGER := 181;
286          PN_GROUPREF_ID                  CONSTANT INTEGER := 198;
287  
288          PN_ATTRGROUPDEF_PARENTSCHEMA    CONSTANT INTEGER := 182;
289          PN_ATTRGROUPDEF_NAME            CONSTANT INTEGER := 183;
290          PN_ATTRGROUPDEF_ANNOTATION      CONSTANT INTEGER := 184;
291          PN_ATTRGROUPDEF_ID              CONSTANT INTEGER := 199;
292          PN_ATTRGROUPDEF_ATTRIBUTE       CONSTANT INTEGER := 185;
293          PN_ATTRGROUPDEF_ANYATTR         CONSTANT INTEGER := 186;
294          PN_ATTRGROUPDEF_ATTRGROUP       CONSTANT INTEGER := 187;
295  
296          PN_ATTRGROUPREF_PARENTSCHEMA    CONSTANT INTEGER := 188;
297          PN_ATTRGROUPREF_NAME            CONSTANT INTEGER := 189;
298          PN_ATTRGROUPREF_REF             CONSTANT INTEGER := 190;
299          PN_ATTRGROUPREF_ANNOTATION      CONSTANT INTEGER := 191;
300          PN_ATTRGROUPREF_ID              CONSTANT INTEGER := 200;
301  
302          /* simpleContent -> extension */
303          PN_SIMPLECONTEXT_BASE           CONSTANT INTEGER := 238;
304          PN_SIMPLECONTEXT_ID             CONSTANT INTEGER := 239;
305          PN_SIMPLECONTEXT_ANNOTATION     CONSTANT INTEGER := 240;
306          PN_SIMPLECONTEXT_ATTRIBUTE      CONSTANT INTEGER := 241;
307          PN_SIMPLECONTEXT_ANYATTR        CONSTANT INTEGER := 242;
308          PN_SIMPLECONTEXT_ATTRGROUP      CONSTANT INTEGER := 243;
309  
310          /* simpleContent -> restriction */
311          PN_SIMPLECONTRES_BASE           CONSTANT INTEGER := 244;
312          PN_SIMPLECONTRES_ID             CONSTANT INTEGER := 245;
313          PN_SIMPLECONTRES_ATTRIBUTE      CONSTANT INTEGER := 246;
314          PN_SIMPLECONTRES_ANYATTR        CONSTANT INTEGER := 247;
315          PN_SIMPLECONTRES_ATTRGROUP      CONSTANT INTEGER := 248;
316          PN_SIMPLECONTRES_ANNOTATION     CONSTANT INTEGER := 249;
317          PN_SIMPLECONTRES_FRACDIGITS     CONSTANT INTEGER := 250;
318          PN_SIMPLECONTRES_TOTALDIGITS    CONSTANT INTEGER := 251;
319          PN_SIMPLECONTRES_MINLENGTH      CONSTANT INTEGER := 252;
320          PN_SIMPLECONTRES_MAXLENGTH      CONSTANT INTEGER := 253;
321          PN_SIMPLECONTRES_WHITESPACE     CONSTANT INTEGER := 254;
322          PN_SIMPLECONTRES_PERIOD         CONSTANT INTEGER := 255;
323          PN_SIMPLECONTRES_DURATION       CONSTANT INTEGER := 256;
324          PN_SIMPLECONTRES_MININCLUSIVE   CONSTANT INTEGER := 257;
325          PN_SIMPLECONTRES_MAXINCLUSIVE   CONSTANT INTEGER := 258;
326          PN_SIMPLECONTRES_PATTERN        CONSTANT INTEGER := 259;
327          PN_SIMPLECONTRES_ENUMERATION    CONSTANT INTEGER := 260;
328          PN_SIMPLECONTRES_MINEXCLUSIVE   CONSTANT INTEGER := 261;
329          PN_SIMPLECONTRES_MAXEXCLUSIVE   CONSTANT INTEGER := 262;
330          PN_SIMPLECONTRES_LENGTH         CONSTANT INTEGER := 263;
331          PN_SIMPLECONTRES_SIMPLETYPE     CONSTANT INTEGER := 264;
332  
333          /* simpleContent */
334          PN_SIMPLECONTENT_ID             CONSTANT INTEGER := 265;
335          PN_SIMPLECONTENT_ANNOTATION     CONSTANT INTEGER := 266;
336          PN_SIMPLECONTENT_RESTRICTION    CONSTANT INTEGER := 267;
337          PN_SIMPLECONTENT_EXTENSION      CONSTANT INTEGER := 268;
338  
339          function xdb$enums2facet(vals xdb.xdb$enum_values_t)
340                   return xdb.xdb$facet_list_t;
341  
342          function xdb$getNumFacet(val integer) return xdb.xdb$numfacet_t;
343          function xdb$getWhitespaceFacet(val xdb.xdb$whitespaceChoice)
344            return xdb.xdb$whitespace_t;
345          function xdb$getTimeFacet(val date) return xdb.xdb$timefacet_t;
346          function xdb$getFacet(val varchar2) return xdb.xdb$facet_t;
347  
348          function xdb$insertSimple(
349                  parent_schema   ref sys.xmltype,
350                  base_type       ref sys.xmltype,
351                  name            varchar2,
352                  base            xdb.xdb$qname,
353                  final_info      xdb.xdb$derivationChoice,
354                  derived_by      xdb.xdb$derivationChoice,
355                  flags           raw,
356                  precision       integer,
357                  scale           integer,
358                  minlength       integer,
359                  maxlength       integer,
360                  whitespace      xdb.xdb$whitespaceChoice,
361                  period          date,
362                  duration        date,
363                  minInclusive    varchar2,
364                  maxInclusive    varchar2,
365                  pattern         varchar2,
366                  enumeration     xdb.xdb$enum_values_t
367          ) return ref sys.xmltype;
368  
369          function xdb$insertSimpleList(
370                  parent_schema   ref sys.xmltype,
371                  name            varchar2,
372                  final_info      xdb.xdb$derivationChoice,
373                  itemtype        xdb.xdb$qname,
374                  itemref         ref sys.xmltype) return ref sys.xmltype;
375  
376          function xdb$insertSequence (
377            parent_schema ref sys.xmltype,
378            elements          xdb.xdb$xmltype_ref_list_t,
379            anyelems        xdb.xdb$xmltype_ref_list_t := null,
380            choice_list     xdb.xdb$xmltype_ref_list_t := null
381          ) return ref sys.xmltype;
382  
383          function xdb$insertChoice (
384            parent_schema ref sys.xmltype,
385            elements          xdb.xdb$xmltype_ref_list_t,
386            anyelems        xdb.xdb$xmltype_ref_list_t := null,
387            maxoccurs       varchar2 := 'unbounded'
388          ) return ref sys.xmltype;
389  
390          function xdb$insertEmptyComplex return ref sys.xmltype;
391  
392          function xdb$insertComplex(
393                  parent_schema   ref sys.xmltype,
394                  base_type       ref sys.xmltype,
395                  name            varchar2,
396                  base            xdb.xdb$qname,
397                  abstract        raw,
398                  derived_by      xdb.xdb$derivationChoice,
399                  flags           raw,
400                  precision       integer,
401                  scale           integer,
402                  minlength       integer,
403                  maxlength       integer,
404                  whitespace      xdb.xdb$whitespaceChoice,
405                  period          date,
406                  duration        date,
407                  min_bound       varchar2,
408                  max_bound       varchar2,
409                  pattern         varchar2,
410                  enumeration     xdb.xdb$enum_values_t,
411                  dummy         varchar2,
412                  final_info      xdb.xdb$derivationChoice,
413                  block           xdb.xdb$derivationChoice,
414                  glob_elements   xdb.xdb$xmltype_ref_list_t,
415                  local_elements  xdb.xdb$xmltype_ref_list_t,
416                  attributes      xdb.xdb$xmltype_ref_list_t,
417                  anyelems        xdb.xdb$xmltype_ref_list_t := null,
418                  mixed           raw := FALSE,
419                  model_ref       ref sys.xmltype := null
420          ) return ref sys.xmltype;
421  
422  
423          procedure xdb$updateComplex(
424                  complex_ref     ref sys.xmltype,
425                  parent_schema   ref sys.xmltype,
426                  base_type       ref sys.xmltype,
427                  name            varchar2,
428                  base            xdb.xdb$qname,
429                  abstract        raw,
430                  derived_by      xdb.xdb$derivationChoice,
431                  dummy           varchar2,
432                  final_info      xdb.xdb$derivationChoice,
433                  block           xdb.xdb$derivationChoice,
434                  glob_elements   xdb.xdb$xmltype_ref_list_t,
435                  local_elements  xdb.xdb$xmltype_ref_list_t,
436                  attributes      xdb.xdb$xmltype_ref_list_t,
437                  model_ref       ref sys.xmltype := null
438          );
439  
440          function xdb$insertAttr(
441                  parent_schema   ref sys.xmltype,
442                  prop_number     integer,
443                  name            varchar2,
444                  typename        xdb.xdb$qname,
445                  min_occurs      integer,
446                  max_occurs      integer,
447                  mem_byte_length raw,
448                  mem_type_code   raw,
449                  system          raw,
450                  mutable         raw,
451                  fixed           raw,
452                  sqlname         varchar2,
453                  sqltype         varchar2,
454                  sqlschema       varchar2,
455                  java_type       xdb.xdb$javatype,
456                  default_value   varchar2,
457                  smpl_type_decl  ref sys.xmltype,
458                  type_ref        ref sys.xmltype,
459                  propref_name    xdb.xdb$qname,
460                  propref_ref     ref sys.xmltype,
461                  sqlcolltype     varchar2 := null,
462                  sqlcollschema   varchar2 := null,
463                  hidden          raw := null,
464                  transient       xdb.xdb$transientChoice := null,
465                  baseprop        raw := null
466          ) return ref sys.xmltype;
467  
468  
469          function xdb$insertElement(
470                  parent_schema   ref sys.xmltype,
471                  prop_number     integer,
472                  name            varchar2,
473                  typename        xdb.xdb$qname,
474                  min_occurs      integer,
475                  max_occurs      integer,
476                  mem_byte_length raw,
477                  mem_type_code   raw,
478                  system          raw,
479                  mutable         raw,
480                  fixed           raw,
481                  sqlname         varchar2,
482                  sqltype         varchar2,
483                  sqlschema       varchar2,
484                  java_type       xdb.xdb$javatype,
485                  default_value   varchar2,
486                  smpl_type_decl  ref sys.xmltype,
487                  type_ref        ref sys.xmltype,
488                  propref_name    xdb.xdb$qname,
489                  propref_ref     ref sys.xmltype,
490                  subs_group      xdb.xdb$qname,
491                  num_cols        integer,
492                  nillable        raw,
493                  final_info      xdb.xdb$derivationChoice,
494                  block           xdb.xdb$derivationChoice,
495                  abstract        raw,
496                  mem_inline      raw,
497                  sql_inline      raw,
498                  java_inline     raw,
499                  maintain_dom    raw,
500                  default_table   varchar2,
501                  table_storage   varchar2,
502                  java_classname  varchar2,
503                  bean_classname  varchar2,
504                  global          raw,
505                  base_sqlname    varchar2,
506                  cplx_type_decl  ref sys.xmltype,
507                  subs_group_refs xdb.xdb$xmltype_ref_list_t,
508                  sqlcolltype     varchar2 := null,
509                  sqlcollschema   varchar2 := null,
510                  hidden          raw := null,
511                  transient       xdb.xdb$transientChoice := null,
512                  baseprop        raw := null
513          ) return ref sys.xmltype;
514  
515          function xdb$insertAny(
516                  parent_schema   ref sys.xmltype,
517                  prop_number     integer,
518                  name            varchar2,
519                  typename        xdb.xdb$qname,
520                  anynamespace    varchar2,
521                  min_occurs      integer,
522                  max_occurs      integer,
523                  mem_byte_length raw,
524                  mem_type_code   raw,
525                  system          raw,
526                  mutable         raw,
527                  fixed           raw,
528                  sqlname         varchar2,
529                  sqltype         varchar2,
530                  sqlschema       varchar2,
531                  java_type       xdb.xdb$javatype,
532                  default_value   varchar2,
533                  smpl_type_decl  ref sys.xmltype,
534                  type_ref        ref sys.xmltype,
535                  propref_name    xdb.xdb$qname,
536                  propref_ref     ref sys.xmltype,
537                  sqlcolltype     varchar2 := null,
538                  sqlcollschema   varchar2 := null
539          ) return ref sys.xmltype;
540  
541          procedure driver;
542  
543  end;
544  /

Package created.

SQL> show errors
No errors.
SQL> 
SQL> 
SQL> 
SQL> create or replace package body xdb.xdb$bootstrap is
  2  
  3          function xdb$enums2facet(vals xdb.xdb$enum_values_t)
  4                   return xdb.xdb$facet_list_t is
  5            facet_list xdb.xdb$facet_list_t := xdb.xdb$facet_list_t();
  6          begin
  7            if vals is null then
  8              return null;
  9            end if;
 10            facet_list.extend(vals.count);
 11            for i in 1..vals.count loop
 12                facet_list(i) := xdb.xdb$facet_t(null, null, vals(i), FALSE, null);
 13            end loop;
 14            return facet_list;
 15          end;
 16  
 17          function xdb$getNumFacet(val integer) return xdb.xdb$numfacet_t is
 18          begin
 19            if val is null then
 20              return null;
 21            else
 22              return xdb.xdb$numfacet_t(null, null, val, FALSE, null);
 23            end if;
 24          end;
 25  
 26          function xdb$getWhitespaceFacet(val xdb.xdb$whitespaceChoice)
 27             return xdb.xdb$whitespace_t is
 28          begin
 29            if val is null then
 30              return null;
 31            else
 32              return xdb.xdb$whitespace_t(null, null, val, FALSE, null);
 33            end if;
 34          end;
 35  
 36          function xdb$getTimeFacet(val date) return xdb.xdb$timefacet_t is
 37          begin
 38            if val is null then
 39              return null;
 40            else
 41              return xdb.xdb$timefacet_t(null, null, val, FALSE, null);
 42            end if;
 43          end;
 44  
 45          function xdb$getFacet(val varchar2) return xdb.xdb$facet_t is
 46          begin
 47            if val is null then
 48              return null;
 49            else
 50              return xdb.xdb$facet_t(null, null, val, FALSE, null);
 51            end if;
 52          end;
 53  
 54          function xdb$insertSimple(
 55                  parent_schema   ref sys.xmltype,
 56                  base_type       ref sys.xmltype,
 57                  name            varchar2,
 58                  base            xdb.xdb$qname,
 59                  final_info      xdb.xdb$derivationChoice,
 60                  derived_by      xdb.xdb$derivationChoice,
 61                  flags           raw,
 62                  precision       integer,
 63                  scale           integer,
 64                  minlength       integer,
 65                  maxlength       integer,
 66                  whitespace      xdb.xdb$whitespaceChoice,
 67                  period          date,
 68                  duration        date,
 69                  minInclusive    varchar2,
 70                  maxInclusive    varchar2,
 71                  pattern         varchar2,
 72                  enumeration     xdb.xdb$enum_values_t
 73          ) return ref sys.xmltype is
 74                  simple_i xdb.xdb$simple_t;
 75                  simple_ref ref sys.xmltype;
 76          begin
 77                  simple_i := xdb.xdb$simple_t(
 78                                  null,
 79                                  parent_schema,
 80                                  name,
 81                                  null,
 82                                xdb.xdb$simple_derivation_t(
 83                                  null,
 84                                  base_type,
 85                                  base,
 86                                  null,
 87                                  xdb$getNumFacet(precision),
 88                                  xdb$getNumFacet(scale),
 89                                  xdb$getNumFacet(minlength),
 90                                  xdb$getNumFacet(maxlength),
 91                                  null,
 92                                  xdb$getWhitespaceFacet(whitespace),
 93                                  xdb$getTimeFacet(period),
 94                                  xdb$getTimeFacet(duration),
 95                                  xdb$getFacet(minInclusive),
 96                                  xdb$getFacet(maxInclusive),
 97                                  null,null,
 98                                  null,
 99                                  xdb$enums2facet(enumeration), null, null),
100                                  null, null, null, null,
101                                  final_info, null, null);
102  
103                  execute immediate SIMPLE_SQL using simple_i
104                          returning into simple_ref;
105  
106                  return simple_ref;
107          end;
108  
109          function xdb$insertSimpleList(
110                  parent_schema   ref sys.xmltype,
111                  name            varchar2,
112                  final_info      xdb.xdb$derivationChoice,
113                  itemtype        xdb.xdb$qname,
114                  itemref         ref sys.xmltype) return ref sys.xmltype
115          is
116                  simple_i xdb.xdb$simple_t;
117                  simple_ref ref sys.xmltype;
118          begin
119                  simple_i := xdb.xdb$simple_t(
120                                  null,
121                                  parent_schema,
122                                  name,
123                                  null,
124                                  null,
125                                  xdb.xdb$list_t(null,null,itemtype,itemref,null),
126                                  null, null, null,
127                                  final_info, null, null);
128  
129                  execute immediate SIMPLE_SQL using simple_i
130                          returning into simple_ref;
131  
132                  return simple_ref;
133          end;
134  
135          function xdb$insertSequence (
136            parent_schema ref sys.xmltype,
137            elements          xdb.xdb$xmltype_ref_list_t,
138            anyelems        xdb.xdb$xmltype_ref_list_t := null,
139            choice_list     xdb.xdb$xmltype_ref_list_t := null
140          ) return ref sys.xmltype
141          is
142            model_i   xdb.xdb$model_t;
143            model_ref ref sys.xmltype;
144          begin
145            if (elements is null and anyelems is null) then
146              return null;
147            else
148              model_i := xdb.xdb$model_t(null, parent_schema, 1, '1', elements,
149                                         choice_list, null,
150                                         anyelems, null, null, null);
151  
152              execute immediate SEQUENCE_SQL using model_i
153                  returning into model_ref;
154              return model_ref;
155            end if;
156          end;
157  
158  
159          function xdb$insertChoice (
160            parent_schema ref sys.xmltype,
161            elements          xdb.xdb$xmltype_ref_list_t,
162            anyelems        xdb.xdb$xmltype_ref_list_t := null,
163            maxoccurs       varchar2 := 'unbounded'
164          ) return ref sys.xmltype
165          is
166            model_i   xdb.xdb$model_t;
167            model_ref ref sys.xmltype;
168          begin
169            if (elements is null and anyelems is null) then
170              return null;
171            else
172              model_i := xdb.xdb$model_t(null, parent_schema, 0, maxoccurs,
173                                         elements, null, null,
174                                         anyelems, null, null, null);
175  
176              execute immediate CHOICE_SQL using model_i
177                  returning into model_ref;
178              return model_ref;
179            end if;
180          end;
181  
182  
183          function xdb$insertEmptyComplex return ref sys.xmltype is
184                  complex_i xdb.xdb$complex_t;
185                  complex_ref ref sys.xmltype;
186          begin
187                  complex_i := xdb.xdb$complex_t(null,null,null,null,null,null,null,null,
188                                  null,null,null,null,null,null, null,null,
189                                  null,null,null,null,null,null,null,null);
190  
191                  execute immediate COMPLEX_SQL using complex_i
192                          returning into complex_ref;
193  
194                  return complex_ref;
195          end;
196  
197          function xdb$insertComplex(
198                  parent_schema   ref sys.xmltype,
199                  base_type       ref sys.xmltype,
200                  name            varchar2,
201                  base            xdb.xdb$qname,
202                  abstract        raw,
203                  derived_by      xdb.xdb$derivationChoice,
204                  flags           raw,
205                  precision       integer,
206                  scale           integer,
207                  minlength       integer,
208                  maxlength       integer,
209                  whitespace      xdb.xdb$whitespaceChoice,
210                  period          date,
211                  duration        date,
212                  min_bound       varchar2,
213                  max_bound       varchar2,
214                  pattern         varchar2,
215                  enumeration     xdb.xdb$enum_values_t,
216                  dummy           varchar2,
217                  final_info      xdb.xdb$derivationChoice,
218                  block           xdb.xdb$derivationChoice,
219                  glob_elements   xdb.xdb$xmltype_ref_list_t,
220                  local_elements  xdb.xdb$xmltype_ref_list_t,
221                  attributes      xdb.xdb$xmltype_ref_list_t,
222                  anyelems        xdb.xdb$xmltype_ref_list_t := null,
223                  mixed           raw := FALSE,
224                  model_ref       ref sys.xmltype := null
225          ) return ref sys.xmltype is
226                  complex_i xdb.xdb$complex_t;
227                  complex_ref ref sys.xmltype;
228                  model_r     ref sys.xmltype;
229          begin
230  
231              if model_ref is null then
232                model_r := xdb$insertSequence(parent_schema, local_elements,
233                                              anyelems);
234              else
235                model_r := model_ref;
236              end if;
237  
238              if base_type is null then
239                 complex_i := xdb.xdb$complex_t(null,parent_schema,base_type,name,
240                                  abstract,mixed,final_info, block,
241                                  attributes,null,null,null,null,model_r,null,
242                                  null,null,null,null,null,null,null,null,null);
243              else
244                 complex_i := xdb.xdb$complex_t(null,parent_schema,base_type,name,
245                                  abstract,mixed,final_info,block,
246                                  null, null, null, null, null,null,null,
247                                  xdb.xdb$content_t(null, FALSE, null,
248                                    xdb.xdb$complex_derivation_t(
249                                      null, base, attributes, null, null,
250                                      null,null,model_r,null,null,null), null,null),
251                                  null, null,null,FALSE,null,null,null,null);
252              end if;
253  
254  
255              execute immediate COMPLEX_SQL using complex_i
256                          returning into complex_ref;
257  
258              return complex_ref;
259          end;
260  
261          procedure xdb$updateComplex(
262                  complex_ref     ref sys.xmltype,
263                  parent_schema   ref sys.xmltype,
264                  base_type       ref sys.xmltype,
265                  name            varchar2,
266                  base            xdb.xdb$qname,
267                  abstract        raw,
268                  derived_by      xdb.xdb$derivationChoice,
269                  dummy           varchar2,
270                  final_info      xdb.xdb$derivationChoice,
271                  block           xdb.xdb$derivationChoice,
272                  glob_elements   xdb.xdb$xmltype_ref_list_t,
273                  local_elements  xdb.xdb$xmltype_ref_list_t,
274                  attributes      xdb.xdb$xmltype_ref_list_t,
275                  model_ref       ref sys.xmltype := null
276          ) is
277                  complex_i xdb.xdb$complex_t;
278                  model_r   ref sys.xmltype;
279          begin
280              if model_ref is null then
281                model_r := xdb$insertSequence(parent_schema, local_elements);
282              else
283                model_r := model_ref;
284              end if;
285  
286              if base_type is null then
287                 complex_i := xdb.xdb$complex_t(null,parent_schema,base_type,name,
288                                  abstract,FALSE,final_info, block,
289                                  attributes,null,null,null,null,model_r,null,
290                                  null,null,null,null,null,null,null,null,null);
291              else
292                 complex_i := xdb.xdb$complex_t(null,parent_schema,base_type,name,
293                                  abstract,FALSE,final_info,block,
294                                  null, null, null, null, null,null,null,
295                                  xdb.xdb$content_t(null,FALSE, null,
296                                    xdb.xdb$complex_derivation_t(
297                                      null,base, attributes, null, null,
298                                      null,null,model_r,null,null,null), null,null),
299                                  null, null,null,FALSE,null,null,null,null);
300              end if;
301  
302              execute immediate COMPLEX_UPDATE_SQL
303                 using complex_i, complex_ref;
304          end;
305  
306          function xdb$insertAttr(
307                  parent_schema   ref sys.xmltype,
308                  prop_number     integer,
309                  name            varchar2,
310                  typename        xdb.xdb$qname,
311                  min_occurs      integer,
312                  max_occurs      integer,
313                  mem_byte_length raw,
314                  mem_type_code   raw,
315                  system          raw,
316                  mutable         raw,
317                  fixed           raw,
318                  sqlname         varchar2,
319                  sqltype         varchar2,
320                  sqlschema       varchar2,
321                  java_type       xdb.xdb$javatype,
322                  default_value   varchar2,
323                  smpl_type_decl  ref sys.xmltype,
324                  type_ref        ref sys.xmltype,
325                  propref_name    xdb.xdb$qname,
326                  propref_ref     ref sys.xmltype,
327                  sqlcolltype     varchar2 := null,
328                  sqlcollschema   varchar2 := null,
329                  hidden          raw := null,
330                  transient       xdb.xdb$transientChoice := null,
331                  baseprop        raw := null
332          ) return ref sys.xmltype is
333                  attr_i xdb.xdb$property_t;
334                  attr_ref ref sys.xmltype;
335          begin
336                  attr_i := xdb.xdb$property_t(null,parent_schema,prop_number,name,
337                                  typename,
338                                  mem_byte_length,mem_type_code,
339                                  system,mutable,null,
340                                  sqlname,sqltype,sqlschema,java_type,
341                                  default_value,smpl_type_decl,type_ref,
342                                  propref_name, propref_ref,
343                                  null, null,null,null,sqlcolltype,sqlcollschema,
344                                  hidden, transient, null, baseprop);
345  
346                  execute immediate ATTR_SQL using attr_i
347                          returning into attr_ref;
348  
349                  return attr_ref;
350          end;
351  
352  
353          function xdb$insertElement(
354                  parent_schema   ref sys.xmltype,
355                  prop_number     integer,
356                  name            varchar2,
357                  typename        xdb.xdb$qname,
358                  min_occurs      integer,
359                  max_occurs      integer,
360                  mem_byte_length raw,
361                  mem_type_code   raw,
362                  system          raw,
363                  mutable         raw,
364                  fixed           raw,
365                  sqlname         varchar2,
366                  sqltype         varchar2,
367                  sqlschema       varchar2,
368                  java_type       xdb.xdb$javatype,
369                  default_value   varchar2,
370                  smpl_type_decl  ref sys.xmltype,
371                  type_ref        ref sys.xmltype,
372                  propref_name    xdb.xdb$qname,
373                  propref_ref     ref sys.xmltype,
374                  subs_group      xdb.xdb$qname,
375                  num_cols        integer,
376                  nillable        raw,
377                  final_info      xdb.xdb$derivationChoice,
378                  block           xdb.xdb$derivationChoice,
379                  abstract        raw,
380                  mem_inline      raw,
381                  sql_inline      raw,
382                  java_inline     raw,
383                  maintain_dom    raw,
384                  default_table   varchar2,
385                  table_storage   varchar2,
386                  java_classname  varchar2,
387                  bean_classname  varchar2,
388                  global          raw,
389                  base_sqlname    varchar2,
390                  cplx_type_decl  ref sys.xmltype,
391                  subs_group_refs xdb.xdb$xmltype_ref_list_t,
392                  sqlcolltype     varchar2 := null,
393                  sqlcollschema   varchar2 := null,
394                  hidden          raw := null,
395                  transient       xdb.xdb$transientChoice := null,
396                  baseprop        raw := null
397          ) return ref sys.xmltype is
398                  elem_i xdb.xdb$element_t;
399                  elem_ref ref sys.xmltype;
400          begin
401                  elem_i := xdb.xdb$element_t(
402                                  xdb.xdb$property_t(null,parent_schema,prop_number,
403                                    name,typename,
404                                    mem_byte_length,mem_type_code,system,
405                                    mutable,null,
406                                    sqlname,sqltype,sqlschema,java_type,
407                                    default_value,smpl_type_decl,type_ref,
408                                    propref_name,propref_ref,
409                                    null, null, global,null,
410                                    sqlcolltype, sqlcollschema,
411                                    hidden, transient, null, baseprop),
412                                  subs_group,num_cols,nillable,
413                                  final_info,block,abstract,
414                                  mem_inline,sql_inline,java_inline,
415                                  maintain_dom,default_table,'XDB',
416                                  table_storage,java_classname,bean_classname,
417                                  base_sqlname,cplx_type_decl,
418                                  subs_group_refs, null,
419                                  min_occurs,to_char(max_occurs),
420                                  null,null,null,null,null,null,null,null,null,null);
421  
422                  execute immediate ELEM_SQL using elem_i
423                          returning into elem_ref;
424  
425                  return elem_ref;
426          end;
427  
428          function xdb$insertAny(
429                  parent_schema   ref sys.xmltype,
430                  prop_number     integer,
431                  name            varchar2,
432                  typename        xdb.xdb$qname,
433                  anynamespace    varchar2,
434                  min_occurs      integer,
435                  max_occurs      integer,
436                  mem_byte_length raw,
437                  mem_type_code   raw,
438                  system          raw,
439                  mutable         raw,
440                  fixed           raw,
441                  sqlname         varchar2,
442                  sqltype         varchar2,
443                  sqlschema       varchar2,
444                  java_type       xdb.xdb$javatype,
445                  default_value   varchar2,
446                  smpl_type_decl  ref sys.xmltype,
447                  type_ref        ref sys.xmltype,
448                  propref_name    xdb.xdb$qname,
449                  propref_ref     ref sys.xmltype,
450                  sqlcolltype     varchar2 := null,
451                  sqlcollschema   varchar2 := null
452          ) return ref sys.xmltype is
453                  any_i xdb.xdb$any_t;
454                  any_ref ref sys.xmltype;
455          begin
456                  any_i := xdb.xdb$any_t(
457                               xdb.xdb$property_t(null,parent_schema,prop_number,
458                                  name,typename,
459                                  mem_byte_length,mem_type_code,
460                                  system,mutable,null,
461                                  sqlname,sqltype,sqlschema,java_type,
462                                  default_value,smpl_type_decl,type_ref,
463                                  propref_name,propref_ref,
464                                  null, null, null, null,
465                                  sqlcolltype,sqlcollschema,
466                                  null, null, null, null),
467                               anynamespace, null,min_occurs,to_char(max_occurs));
468  
469                  execute immediate ANY_SQL using any_i
470                          returning into any_ref;
471  
472                  return any_ref;
473          end;
474  
475  
476  procedure driver is
477          ellist          xdb.xdb$xmltype_ref_list_t;
478          ellist2        xdb.xdb$xmltype_ref_list_t;
479          simplelist      xdb.xdb$xmltype_ref_list_t;
480          complexlist     xdb.xdb$xmltype_ref_list_t;
481          schels          xdb.xdb$xmltype_ref_list_t;
482          attlist         xdb.xdb$xmltype_ref_list_t;
483          attlist2        xdb.xdb$xmltype_ref_list_t;
484          anylist         xdb.xdb$xmltype_ref_list_t;
485          choice_list     xdb.xdb$xmltype_ref_list_t;
486          schref          ref sys.xmltype;
487          ctyperef        ref sys.xmltype;
488          styperef        ref sys.xmltype;
489          list_t_ref      ref sys.xmltype;
490          union_t_ref     ref sys.xmltype;
491          simplederv_t_ref    ref sys.xmltype;
492          simple_t_ref    ref sys.xmltype;
493          attr_t_ref      ref sys.xmltype;
494          complex_t_ref   ref sys.xmltype;
495          model_t_ref     ref sys.xmltype;
496          complexderv_t_ref   ref sys.xmltype;
497          content_t_ref       ref sys.xmltype;
498          any_t_ref           ref sys.xmltype;
499          appinfo_t_ref       ref sys.xmltype;
500          documentation_t_ref ref sys.xmltype;
501          annotation_t_ref    ref sys.xmltype;
502          notation_t_ref       ref sys.xmltype;
503          xpathspec_t_ref       ref sys.xmltype;
504          keybase_t_ref       ref sys.xmltype;
505          groupdef_t_ref      ref sys.xmltype;
506          groupref_t_ref      ref sys.xmltype;
507          attrgroupdef_t_ref  ref sys.xmltype;
508          attrgroupref_t_ref  ref sys.xmltype;
509          simplecontExt_t_ref ref sys.xmltype;
510          simplecontRes_t_ref ref sys.xmltype;
511          smplcont_t_ref      ref sys.xmltype;
512          drv_choice_ref  ref sys.xmltype;
513          form_choice_ref ref sys.xmltype;
514          content_ref     ref sys.xmltype;
515          javatype_ref    ref sys.xmltype;
516          whitespace_ref  ref sys.xmltype;
517          use_choice_ref  ref sys.xmltype;
518          process_choice_ref  ref sys.xmltype;
519          transient_choice_ref  ref sys.xmltype;
520          facet_ref       ref sys.xmltype;
521          num_facet_ref   ref sys.xmltype;
522          time_facet_ref  ref sys.xmltype;
523          schel_ref       ref sys.xmltype;
524          simple_i        xdb.xdb$simple_t;
525          complex_i       xdb.xdb$complex_t;
526          elem_i          xdb.xdb$element_t;
527          attr_i          xdb.xdb$property_t;
528          schema_i        xdb.xdb$schema_t;
529          extras_i        sys.xmltypeextra;
530          seq_ref         ref sys.xmltype;
531  
532          element_propnum integer;
533          attr_propnum    integer;
534          stype_propnum   integer;
535          ctype_propnum   integer;
536          colcount        integer;
537          attr_colcount   integer;
538          elem_colcount   integer;
539          any_colcount    integer;
540          appinfo_colcount    integer;
541          documentation_colcount    integer;
542          annotation_colcount   integer;
543          notation_colcount    integer;
544          xpathspec_colcount    integer;
545          keybase_colcount    integer;
546          groupdef_colcount     integer;
547          groupref_colcount     integer;
548          attrgroupdef_colcount integer;
549          attrgroupref_colcount integer;
550          simple_colcount integer;
551          complex_colcount integer;
552          model_colcount  integer;
553          list_colcount   integer;
554          union_colcount   integer;
555          simpleder_colcount integer;
556          complexder_colcount integer;
557          content_colcount integer;
558          simplecontRes_colcount integer;
559          simplecontExt_colcount integer;
560          smplcont_colcount integer;
561          st              xdb.xdb$simple_t;
562  BEGIN
563          schema_i := xdb.xdb$schema_t('http://xmlns.oracle.com/xdb/XDBSchema.xsd',
564                'http://www.w3.org/2001/XMLSchema',
565                '1.0', 0, null, TD_ALL, FC_QUAL, null, null, null, null, null,
566                null, null, '17', null, null,FALSE,FALSE,
567                null,null,null,FALSE,'XDB',null,null);
568  
569          extras_i :=
570           sys.xmltypeextra(
571              sys.xmltypepi(
572                 xdb.xdb$getpickledns(
573                      'http://www.w3.org/2001/XMLSchema',
574                      null),
575                 xdb.xdb$getpickledns(
576                      'http://xmlns.oracle.com/xdb',
577                      'xdb'),
578                 xdb.xdb$getpickledns(
579                      'http://xmlns.oracle.com/xdb/XDBResource.xsd',
580                      'xdbres')
581                ),
582              null);
583  
584          execute immediate 'insert into xdb.xdb$schema s
585                  (sys_nc_oid$, xmlextra, xmldata) values (:1, :2, :3)
586                  returning ref(s) into :4'
587                  using '6C3FCF2D9D354DC1E03408002087A0B7', extras_i, schema_i
588                  returning into schref;
589  
590          simplelist := xdb.xdb$xmltype_ref_list_t();
591          simplelist.extend(7);
592  
593          complexlist := xdb.xdb$xmltype_ref_list_t();
594          complexlist.extend(29);
595  
596          select attributes into simple_colcount from all_types
597                  where type_name in ('XDB$SIMPLE_T') and owner = 'XDB';
598  
599          select sum(attributes) - 1 into elem_colcount from all_types
600                  where type_name in ('XDB$ELEMENT_T', 'XDB$PROPERTY_T')
601                  and owner = 'XDB';
602  
603          select attributes into attr_colcount from all_types
604                  where type_name in ('XDB$PROPERTY_T') and owner = 'XDB';
605  
606          select attributes into complex_colcount from all_types
607                  where type_name in ('XDB$COMPLEX_T') and owner = 'XDB';
608  
609          select attributes into model_colcount from all_types
610                  where type_name in ('XDB$MODEL_T') and owner = 'XDB';
611  
612          select attributes into list_colcount from all_types
613                  where type_name in ('XDB$LIST_T') and owner = 'XDB';
614  
615          select attributes into union_colcount from all_types
616                  where type_name in ('XDB$UNION_T') and owner = 'XDB';
617  
618          select attributes into simpleder_colcount from all_types
619                  where type_name in ('XDB$SIMPLE_DERIVATION_T') and owner = 'XDB';
620  
621          select attributes into complexder_colcount from all_types
622                  where type_name in ('XDB$COMPLEX_DERIVATION_T') and owner = 'XDB';
623  
624          select attributes into content_colcount from all_types
625                  where type_name in ('XDB$CONTENT_T') and owner = 'XDB';
626  
627          select attributes into simplecontRes_colcount from all_types
628                  where type_name in ('XDB$SIMPLECONT_RES_T') and owner = 'XDB';
629  
630          select attributes into simplecontExt_colcount from all_types
631                  where type_name in ('XDB$SIMPLECONT_EXT_T') and owner = 'XDB';
632  
633          select attributes into smplcont_colcount from all_types
634                  where type_name in ('XDB$SIMPLECONTENT_T') and owner = 'XDB';
635  
636          select sum(attributes) - 1 into any_colcount from all_types
637                  where type_name in ('XDB$ANY_T', 'XDB$PROPERTY_T') and owner = 'XDB';
638  
639          select attributes into appinfo_colcount from all_types
640                  where type_name in ('XDB$APPINFO_T') and owner = 'XDB';
641  
642          select attributes into documentation_colcount from all_types
643                  where type_name in ('XDB$DOCUMENTATION_T') and owner = 'XDB';
644  
645          select attributes into annotation_colcount from all_types
646                  where type_name in ('XDB$ANNOTATION_T') and owner = 'XDB';
647  
648          select attributes into notation_colcount from all_types
649                  where type_name in ('XDB$NOTATION_T') and owner = 'XDB';
650  
651          select attributes into xpathspec_colcount from all_types
652                  where type_name in ('XDB$XPATHSPEC_T') and owner = 'XDB';
653  
654          select attributes into keybase_colcount from all_types
655                  where type_name in ('XDB$KEYBASE_T') and owner = 'XDB';
656  
657          select attributes into groupdef_colcount from all_types
658                  where type_name in ('XDB$GROUP_DEF_T') and owner = 'XDB';
659  
660          select attributes into groupref_colcount from all_types
661                  where type_name in ('XDB$GROUP_REF_T') and owner = 'XDB';
662  
663          select attributes into attrgroupdef_colcount from all_types
664                  where type_name in ('XDB$ATTRGROUP_DEF_T') and owner = 'XDB';
665  
666          select attributes into attrgroupref_colcount from all_types
667                  where type_name in ('XDB$ATTRGROUP_REF_T') and owner = 'XDB';
668  
669  /*--------------------------------------------------------------------------*/
670  /* Forward declarations (of some complex types) */
671  /*--------------------------------------------------------------------------*/
672  
673          /* Forward decl for "simpleType" */
674          simple_t_ref := xdb$insertEmptyComplex();
675  
676          /* Forward decl for "anyType" */
677          any_t_ref := xdb$insertEmptyComplex();
678  
679  
680  /*--------------------------------------------------------------------------*/
681  /* Simple type definition for "derivationChoice" */
682  /*--------------------------------------------------------------------------*/
683          drv_choice_ref := xdb$insertSimple(schref, null, 'derivationChoice',
684                 TR_STRING, null, TD_LIST, '0',null, null, null, null, null,
685                 null, null, null, null, null,
686                 xdb.xdb$enum_values_t('','extension', 'restriction', 'list',
687                                        '#all', 'substitution', 'union'));
688  
689          simplelist(1) := drv_choice_ref;
690  
691  /*--------------------------------------------------------------------------*/
692  /* Simple type definition for "formChoice" */
693  /*--------------------------------------------------------------------------*/
694          form_choice_ref := xdb$insertSimple(schref, null, 'formChoice', TR_STRING,
695                 null, TD_RESTRICTION, '0',null, null, null, null, null,
696                 null, null, null, null, null,
697                 xdb.xdb$enum_values_t('unqualified', 'qualified'));
698          simplelist(2) := form_choice_ref;
699  
700  /*--------------------------------------------------------------------------*/
701  /* Simple type definition for "content" */
702  /*--------------------------------------------------------------------------*/
703          content_ref := xdb$insertSimple(schref, null, 'content', TR_STRING,
704                 null, TD_RESTRICTION, '0', null, null, null, null, null, null,
705                 null, null, null, null,
706                 xdb.xdb$enum_values_t('elementOnly','textOnly','mixed','empty'));
707  
708          simplelist(3) := content_ref;
709  
710  /*--------------------------------------------------------------------------*/
711  /* Simple type definition for "javatype" */
712  /*--------------------------------------------------------------------------*/
713          javatype_ref := xdb$insertSimple(schref, null, 'javatype', TR_STRING,
714                 null, TD_RESTRICTION, '0',null, null, null, null, null, null,
715                 null, null, null, null,
716                 xdb.xdb$enum_values_t('String','int','long','short','byte','float',
717                                   'double','BigDecimal','boolean','byteArray',
718                                   'Stream','CharStream','TimeStamp',
719                                   'Reference','QNAme','Enum','XMLType'));
720  
721          simplelist(4) := javatype_ref;
722  
723  /*--------------------------------------------------------------------------*/
724  /* Simple type definition for "useChoice" */
725  /*--------------------------------------------------------------------------*/
726          use_choice_ref := xdb$insertSimple(schref, null, 'useChoice',
727                                             TR_STRING,
728                 null, TD_LIST, '0',null, null, null, null, null, null, null,
729                 null, null, null,
730                 xdb.xdb$enum_values_t('optional','required','prohibited'));
731  
732          simplelist(5) := use_choice_ref;
733  
734  /*--------------------------------------------------------------------------*/
735  /* Simple type definition for "processChoice" */
736  /*--------------------------------------------------------------------------*/
737          process_choice_ref := xdb$insertSimple(schref, null, 'processChoice',
738                                             TR_STRING,
739                 null, TD_LIST, '0',null, null, null, null, null, null, null,
740                 null, null, null,
741                 xdb.xdb$enum_values_t('skip','lax','strict'));
742  
743          simplelist(6) := process_choice_ref;
744  
745  /*--------------------------------------------------------------------------*/
746  /* Simple type definition for "transientChoice" */
747  /*--------------------------------------------------------------------------*/
748          transient_choice_ref := xdb$insertSimple(schref, null,
749                                        'transientChoice', TR_STRING,
750                 null, TD_LIST, '0',null, null, null, null, null, null, null,
751                 null, null, null,
752                 xdb.xdb$enum_values_t('','generated','manifested'));
753  
754          simplelist(7) := transient_choice_ref;
755  
756  /*--------------------------------------------------------------------------*/
757  /* Complex type definition for "annotation", and its related */
758  /* "appInfo", "documentation"                                */
759  /*--------------------------------------------------------------------------*/
760  
761          /* appInfo complextype */
762          attlist := xdb.xdb$xmltype_ref_list_t();
763          attlist.extend(1);
764  
765          attlist(1) := xdb$insertAttr(schref, PN_APPINFO_SOURCE,
766                                       'source', TR_STRING, 1, 1, null,
767                                       T_CSTRING, FALSE, FALSE, FALSE,
768                                       'SOURCE', 'VARCHAR2', null,
769                                       JT_STRING, null, null, null,null,null);
770  
771          anylist := xdb.xdb$xmltype_ref_list_t();
772          anylist.extend(1);
773  
774          anylist(1) := xdb$insertAny(schref, PN_APPINFO_ANY, null,
775                                      null, null, 0, 1000, null,
776                                      T_XOB , FALSE, FALSE, FALSE,
777                                      'ANYPART', 'VARCHAR2', null,
778                                      JT_XMLTYPE, null, null, null, null, null);
779  
780          appinfo_t_ref := xdb$insertComplex(schref, null, 'appinfo',
781                            null, FALSE, null, '0',
782                            null, null, null, null, null, null, null, null, null,
783                            null, null, null, null, null, null, null, attlist,
784                            anylist, TRUE);
785          complexlist(16) := appinfo_t_ref;
786  
787          /* documentation complextype */
788          attlist := xdb.xdb$xmltype_ref_list_t();
789          attlist.extend(2);
790  
791          attlist(1) := xdb$insertAttr(schref, PN_DOCUMENTATION_SOURCE,
792                                       'source', TR_STRING, 1, 1, null,
793                                       T_CSTRING, FALSE, FALSE, FALSE,
794                                       'SOURCE', 'VARCHAR2', null,
795                                       JT_STRING, null, null, null,null,null);
796  
797          attlist(2) := xdb$insertAttr(schref, PN_DOCUMENTATION_LANG,
798                                       'lang', TR_STRING, 1, 1, null,
799                                       T_CSTRING, FALSE, FALSE, FALSE,
800                                       'LANG', 'VARCHAR2', null,
801                                       JT_STRING, null, null, null,null,null);
802  
803          anylist := xdb.xdb$xmltype_ref_list_t();
804          anylist.extend(1);
805  
806          anylist(1) := xdb$insertAny(schref, PN_DOCUMENTATION_ANY, null,
807                                      null, null, 0, 1000, null,
808                                      T_XOB, FALSE, FALSE, FALSE,
809                                      'ANYPART', 'VARCHAR2', null,
810                                      JT_XMLTYPE, null, null, null, null, null);
811  
812          documentation_t_ref := xdb$insertComplex(schref, null,'documentation',
813                            null, FALSE, null, '0',
814                            null, null, null, null, null, null, null, null, null,
815                            null, null, null, null, null, null, null, attlist,
816                            anylist, TRUE);
817          complexlist(17) := documentation_t_ref;
818  
819          /* annotation complextype */
820          ellist := xdb.xdb$xmltype_ref_list_t();
821          ellist.extend(2);
822  
823          ellist(1) := xdb$insertElement(schref, PN_ANNOTATION_APPINFO,
824                                         'appinfo',
825                                         xdb.xdb$qname('01', 'appinfo'),
826                                         0, 1000, null,
827                                         T_XOB, FALSE, FALSE, FALSE,
828                                         'APPINFO',
829                                         'XDB$APPINFO_T', 'XDB',
830                                         JT_XMLTYPE,
831                                         null, null, appinfo_t_ref,null,null,
832                                         null, appinfo_colcount,
833                                         FALSE, null, null, FALSE, FALSE,
834                                         TRUE, FALSE, FALSE,
835                                         null, null,
836                                         'oracle.xdb.appinfoBean',
837                                         'oracle.xdb.appinfoBean',
838                                         FALSE, null, null, null,
839                                         'XDB$APPINFO_LIST_T', 'XDB');
840  
841          ellist(2) := xdb$insertElement(schref, PN_ANNOTATION_DOCUMENTATION,
842                                         'documentation',
843                                         xdb.xdb$qname('01', 'documentation'),
844                                         0, 1000, null,
845                                         T_XOB, FALSE, FALSE, FALSE,
846                                         'DOCUMENTATION',
847                                         'XDB$DOCUMENTATION_T', 'XDB',
848                                         JT_XMLTYPE,
849                                         null, null, documentation_t_ref,
850                                         null,null,
851                                         null, documentation_colcount,
852                                         FALSE, null, null, FALSE, FALSE,
853                                         TRUE, FALSE, FALSE,
854                                         null, null,
855                                         'oracle.xdb.documentationBean',
856                                         'oracle.xdb.documentationBean',
857                                         FALSE, null, null, null,
858                                         'XDB$DOCUMENTATION_LIST_T','XDB');
859  
860          annotation_t_ref := xdb$insertComplex(schref, null,'annotation',
861                            null, FALSE, null, '0',
862                            null, null, null, null, null, null, null, null, null,
863                            null, null, null, null, null, null, ellist, null);
864          complexlist(18) := annotation_t_ref;
865  
866  
867  /*--------------------------------------------------------------------------*/
868  /* Complex type definition for "notation" */
869  /*--------------------------------------------------------------------------*/
870  
871          attlist := xdb.xdb$xmltype_ref_list_t();
872          attlist.extend(3);
873  
874          attlist(1) := xdb$insertAttr(schref, PN_NOTATION_NAME, 'name',
875                                  TR_STRING, 1, 1, null,
876                                 T_CSTRING, FALSE, FALSE, FALSE, 'NAME',
877                                 'VARCHAR2', null, JT_STRING, null, null,
878                                 null,null,null);
879  
880          attlist(2) := xdb$insertAttr(schref, PN_NOTATION_PUBLIC, 'public',
881                                  TR_STRING, 1, 1, null,
882                                 T_CSTRING, FALSE, FALSE, FALSE, 'PUBLICVAL',
883                                 'VARCHAR2', null, JT_STRING, null, null,
884                                 null,null,null);
885  
886          attlist(3) := xdb$insertAttr(schref, PN_NOTATION_SYSTEM, 'system',
887                                  TR_STRING, 1, 1, null,
888                                 T_CSTRING, FALSE, FALSE, FALSE, 'SYSTEM',
889                                 'VARCHAR2', null, JT_STRING, null, null,
890                                 null,null,null);
891  
892          ellist := xdb.xdb$xmltype_ref_list_t();
893          ellist.extend(1);
894          ellist(1) := xdb$insertElement(schref, PN_NOTATION_ANNOTATION,
895                          'annotation', xdb.xdb$qname('01', 'annotation'),
896                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
897                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
898                          JT_STRING, null, null, annotation_t_ref,null,null,
899                          null, annotation_colcount, FALSE, null, null,
900                          FALSE, FALSE, TRUE, FALSE, FALSE,
901                          null, null, null, null, FALSE, null, null, null);
902  
903          notation_t_ref := xdb$insertComplex(schref, null,'notation',
904                            null, FALSE, null, '0',
905                            null, null, null, null, null, null, null, null, null,
906                            null, null, null, null, null, null, ellist, attlist);
907          complexlist(24) := notation_t_ref;
908  
909  
910  /*--------------------------------------------------------------------------*/
911  /* Complex type definition for "xpathspec", "keybase" */
912  /*--------------------------------------------------------------------------*/
913  
914          attlist := xdb.xdb$xmltype_ref_list_t();
915          attlist.extend(1);
916  
917          attlist(1) := xdb$insertAttr(schref, PN_XPATHSPEC_XPATH, 'xpath',
918                                  TR_STRING, 1, 1, null,
919                                 T_CSTRING, FALSE, FALSE, FALSE, 'XPATH',
920                                 'VARCHAR2', null, JT_STRING, null, null,
921                                 null,null,null);
922  
923          ellist := xdb.xdb$xmltype_ref_list_t();
924          ellist.extend(1);
925          ellist(1) := xdb$insertElement(schref, PN_XPATHSPEC_ANNOTATION,
926                          'annotation', xdb.xdb$qname('01', 'annotation'),
927                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
928                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
929                          JT_STRING, null, null, annotation_t_ref,null,null,
930                          null, annotation_colcount, FALSE, null, null,
931                          FALSE, FALSE, TRUE, FALSE, FALSE,
932                          null, null, null, null, FALSE, null, null, null);
933  
934          xpathspec_t_ref := xdb$insertComplex(schref, null,'xpathspec',
935                            null, FALSE, null, '0',
936                            null, null, null, null, null, null, null, null, null,
937                            null, null, null, null, null, null, ellist, attlist);
938          complexlist(25) := xpathspec_t_ref;
939  
940  
941          attlist := xdb.xdb$xmltype_ref_list_t();
942          attlist.extend(2);
943  
944          attlist(1) := xdb$insertAttr(schref, PN_KEYBASE_NAME, 'name',
945                                  TR_STRING, 1, 1, null,
946                                 T_CSTRING, FALSE, FALSE, FALSE, 'NAME',
947                                 'VARCHAR2', null, JT_STRING, null, null,
948                                 null,null,null);
949  
950          attlist(2) := xdb$insertAttr(schref, PN_KEYBASE_REFER, 'refer',
951                                     xdb.xdb$qname('00', 'QName'), 0, 1, null,
952                                 T_QNAME, FALSE, FALSE, FALSE, 'REFER',
953                                 'XDB$QNAME', 'XDB', JT_QNAME, null, null,
954                                 null,null,null);
955  
956          ellist := xdb.xdb$xmltype_ref_list_t();
957          ellist.extend(3);
958          ellist(1) := xdb$insertElement(schref, PN_KEYBASE_ANNOTATION,
959                          'annotation', xdb.xdb$qname('01', 'annotation'),
960                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
961                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
962                          JT_STRING, null, null, annotation_t_ref,null,null,
963                          null, annotation_colcount, FALSE, null, null,
964                          FALSE, FALSE, TRUE, FALSE, FALSE,
965                          null, null, null, null, FALSE, null, null, null);
966  
967          ellist(2) := xdb$insertElement(schref, PN_KEYBASE_SELECTOR,
968                                         'selector',
969                                       xdb.xdb$qname('01', 'xpathspec'),
970                                         0, 1, null,
971                                         T_XOB, FALSE, FALSE, FALSE,
972                                         'SELECTOR',
973                                         'XDB$XPATHSPEC_T', 'XDB',
974                                         JT_XMLTYPE,
975                                         null, null, xpathspec_t_ref,null,null,
976                                         null, xpathspec_colcount,
977                                         FALSE, null, null, FALSE, FALSE,
978                                         TRUE, FALSE, FALSE,
979                                         null, null, null, null,
980                                         FALSE, null, null, null);
981  
982          ellist(3) := xdb$insertElement(schref, PN_KEYBASE_FIELD,
983                                         'field',
984                                       xdb.xdb$qname('01', 'xpathspec'),
985                                         0, 1000, null,
986                                         T_XOB, FALSE, FALSE, FALSE,
987                                         'FIELDS',
988                                         'XDB$XPATHSPEC_T', 'XDB',
989                                         JT_XMLTYPE,
990                                         null, null, xpathspec_t_ref,null,null,
991                                         null, xpathspec_colcount,
992                                         FALSE, null, null, FALSE, FALSE,
993                                         TRUE, FALSE, FALSE,
994                                         null, null, null, null,
995                                         FALSE, null, null, null,
996                                         'XDB$XPATHSPEC_LIST_T','XDB');
997  
998          keybase_t_ref := xdb$insertComplex(schref, null,'keybase',
999                            null, FALSE, null, '0',
1000                            null, null, null, null, null, null, null, null, null,
1001                            null, null, null, null, null, null, ellist, attlist);
1002          complexlist(26) := keybase_t_ref;
1003  
1004  
1005  /*--------------------------------------------------------------------------*/
1006  /* Complex type definition for "facet" (strings only) */
1007  /*--------------------------------------------------------------------------*/
1008          attlist := xdb.xdb$xmltype_ref_list_t();
1009          attlist.extend(3);
1010  
1011          attlist(1) := xdb$insertAttr(schref, 0, 'value', TR_STRING,
1012                                 1, 1, null, T_CSTRING, FALSE, FALSE, FALSE,
1013                                 'VALUE', 'VARCHAR2', null, JT_STRING, null,
1014                                 null,null,null,null);
1015  
1016          attlist(2) := xdb$insertAttr(schref, PN_FACET_FIXED, 'fixed', TR_BOOLEAN,
1017                                 0, 1, null, T_BOOLEAN, FALSE, FALSE, FALSE,
1018                                 'FIXED', 'RAW', null, JT_BOOLEAN, 'false',
1019                                 null,null,null,null);
1020  
1021          attlist(3) := xdb$insertAttr(schref, PN_FACET_ID, 'id',
1022                                  TR_STRING, 0, 1, null,
1023                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
1024                                 'VARCHAR2', null, JT_STRING, null, null,
1025                                 null,null,null);
1026  
1027          ellist := xdb.xdb$xmltype_ref_list_t();
1028          ellist.extend(1);
1029  
1030          ellist(1) := xdb$insertElement(schref, PN_FACET_ANNOTATION,
1031                          'annotation', xdb.xdb$qname('01', 'annotation'),
1032                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1033                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
1034                          JT_STRING, null, null, annotation_t_ref,null,null,
1035                          null, annotation_colcount, FALSE, null, null,
1036                          FALSE, FALSE, TRUE, FALSE, FALSE,
1037                          null, null, null, null, FALSE, null, null, null);
1038  
1039          facet_ref := xdb$insertComplex(schref, null, 'facet',
1040                          null, FALSE, null, '0', null, null,
1041                          null, null, null, null, null, null, null, null, null,
1042                          null, null, null, null, ellist, attlist);
1043          complexlist(1) := facet_ref;
1044  
1045  /*--------------------------------------------------------------------------*/
1046  /* Complex type definition for "numFacet" */
1047  /*--------------------------------------------------------------------------*/
1048  
1049          attlist := xdb.xdb$xmltype_ref_list_t();
1050          attlist.extend(3);
1051          attlist(1) := xdb$insertAttr(schref, 1, 'value', TR_NNEGINT,
1052                                 1, 1, '02', T_INTEGER, FALSE, FALSE, FALSE,
1053                                 'VALUE', 'NUMBER', null, JT_INT, null, null,
1054                                 null,null,null);
1055  
1056          attlist(2) := xdb$insertAttr(schref, PN_NUMFACET_FIXED, 'fixed', TR_BOOLEAN,
1057                                 0, 1, null, T_BOOLEAN, FALSE, FALSE, FALSE,
1058                                 'FIXED', 'RAW', null, JT_BOOLEAN, 'false',
1059                                 null,null,null,null);
1060  
1061          attlist(3) := xdb$insertAttr(schref, PN_NUMFACET_ID, 'id',
1062                                  TR_STRING, 0, 1, null,
1063                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
1064                                 'VARCHAR2', null, JT_STRING, null, null,
1065                                 null,null,null);
1066  
1067          ellist := xdb.xdb$xmltype_ref_list_t();
1068          ellist.extend(1);
1069  
1070          ellist(1) := xdb$insertElement(schref, PN_NUMFACET_ANNOTATION,
1071                          'annotation', xdb.xdb$qname('01', 'annotation'),
1072                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1073                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
1074                          JT_STRING, null, null, annotation_t_ref,null,null,
1075                          null, annotation_colcount, FALSE, null, null,
1076                          FALSE, FALSE, TRUE, FALSE, FALSE,
1077                          null, null, null, null, FALSE, null, null, null);
1078  
1079          num_facet_ref := xdb$insertComplex(schref, null, 'numFacet',
1080                          null, FALSE, null, '0', null, null,
1081                          null, null, null, null, null, null, null, null, null,
1082                          null, null, null, null, ellist, attlist);
1083          complexlist(2) := num_facet_ref;
1084  
1085  /*--------------------------------------------------------------------------*/
1086  /* Complex type definition for "timeFacet" */
1087  /*--------------------------------------------------------------------------*/
1088          attlist := xdb.xdb$xmltype_ref_list_t();
1089          attlist.extend(3);
1090          attlist(1) := xdb$insertAttr(schref, 2, 'value',
1091                                 xdb.xdb$qname('00', 'dateTime'),
1092                                 1, 1, null, T_DATE, FALSE, FALSE, FALSE,
1093                                 'VALUE', 'DATE', null, JT_TIMESTAMP, null,
1094                                 null,null,null,null);
1095  
1096          attlist(2) := xdb$insertAttr(schref, PN_TIMEFACET_FIXED, 'fixed', TR_BOOLEAN,
1097                                 0, 1, null, T_BOOLEAN, FALSE, FALSE, FALSE,
1098                                 'FIXED', 'RAW', null, JT_BOOLEAN, 'false',
1099                                 null,null,null,null);
1100  
1101          attlist(3) := xdb$insertAttr(schref, PN_TIMEFACET_ID, 'id',
1102                                  TR_STRING, 0, 1, null,
1103                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
1104                                 'VARCHAR2', null, JT_STRING, null, null,
1105                                 null,null,null);
1106  
1107          ellist := xdb.xdb$xmltype_ref_list_t();
1108          ellist.extend(1);
1109  
1110          ellist(1) := xdb$insertElement(schref, PN_TIMEFACET_ANNOTATION,
1111                          'annotation', xdb.xdb$qname('01', 'annotation'),
1112                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1113                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
1114                          JT_STRING, null, null, annotation_t_ref,null,null,
1115                          null, annotation_colcount, FALSE, null, null,
1116                          FALSE, FALSE, TRUE, FALSE, FALSE,
1117                          null, null, null, null, FALSE, null, null, null);
1118  
1119          time_facet_ref := xdb$insertComplex(schref, null, 'timeFacet',
1120                          null, FALSE, null, '0',
1121                          null, null, null, null, null, null, null, null, null,
1122                          null, null,
1123                          null, null, null, null, ellist, attlist);
1124          complexlist(3) := time_facet_ref;
1125  
1126  /*--------------------------------------------------------------------------*/
1127  /* Anonymous type for "whitespace"--derived from facet */
1128  /*--------------------------------------------------------------------------*/
1129  
1130          /* Anonymous type for "value" attribute for enumeration */
1131  
1132          styperef := xdb$insertSimple(schref, null,null,xdb.xdb$qname('00', 'NMTOKEN'),
1133                 null, TD_RESTRICTION, '0', null, null, null, null, null, null,
1134                 null, null, null, null, xdb.xdb$enum_values_t('preserve','replace','collapse'));
1135  
1136          attlist := xdb.xdb$xmltype_ref_list_t();
1137          attlist.extend(3);
1138          attlist(1) := xdb$insertAttr(schref, 3, 'value', null, 1, 1, null,
1139                                 T_ENUM, FALSE, FALSE, FALSE, 'VALUE',
1140                                 'XDB$WHITESPACECHOICE', 'XDB', JT_ENUM,
1141                                 null, styperef, styperef,null,null);
1142  
1143          attlist(2) := xdb$insertAttr(schref, PN_WHITESPACE_FIXED, 'fixed', TR_BOOLEAN,
1144                                 0, 1, null, T_BOOLEAN, FALSE, FALSE, FALSE,
1145                                 'FIXED', 'RAW', null, JT_BOOLEAN, 'false',
1146                                 null,null,null,null);
1147  
1148          attlist(3) := xdb$insertAttr(schref, PN_WHITESPACE_ID, 'id',
1149                                  TR_STRING, 0, 1, null,
1150                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
1151                                 'VARCHAR2', null, JT_STRING, null, null,
1152                                 null,null,null);
1153  
1154          ellist := xdb.xdb$xmltype_ref_list_t();
1155          ellist.extend(1);
1156  
1157          ellist(1) := xdb$insertElement(schref, PN_WHITESPACE_ANNOTATION,
1158                          'annotation', xdb.xdb$qname('01', 'annotation'),
1159                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1160                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
1161                          JT_STRING, null, null, annotation_t_ref,null,null,
1162                          null, annotation_colcount, FALSE, null, null,
1163                          FALSE, FALSE, TRUE, FALSE, FALSE,
1164                          null, null, null, null, FALSE, null, null, null);
1165  
1166          whitespace_ref := xdb$insertComplex(schref, null, 'whiteSpace',
1167                                  null, FALSE, null, '0',
1168                          null, null, null, null, null, null, null, null, null,
1169                          null, null,
1170                          null, null, null, null, ellist, attlist);
1171          complexlist(4) := whitespace_ref;
1172  
1173          /* VARRAY tracking top-level schema elements */
1174          schels := xdb.xdb$xmltype_ref_list_t();
1175          schels.extend(14);
1176  
1177  /*--------------------------------------------------------------------------*/
1178  /* Definition of "annotation" global element */
1179  /*--------------------------------------------------------------------------*/
1180  
1181          schels(1) := xdb$insertElement(schref, PN_SCHEMA_ANNOTATION,
1182                          'annotation', xdb.xdb$qname('01', 'annotation'),
1183                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1184                          'ANNOTATIONS', 'XDB$ANNOTATION_T', 'XDB',
1185                          JT_STRING, null, null, annotation_t_ref,null,null,
1186                          null, annotation_colcount, FALSE, null, null,
1187                          FALSE, FALSE, TRUE, FALSE, FALSE,
1188                          null, null, null, null, FALSE, null, null, null,
1189                          'XDB$ANNOTATION_LIST_T','XDB');
1190  
1191  
1192  /*--------------------------------------------------------------------------*/
1193  /* Definition of "xdb:listType" complex type */
1194  /*--------------------------------------------------------------------------*/
1195  
1196          attlist := xdb.xdb$xmltype_ref_list_t();
1197          attlist.extend(2);
1198  
1199          attlist(1) := xdb$insertAttr(schref, PN_LIST_ITEMTYPE, 'itemType',
1200                                     xdb.xdb$qname('00', 'QName'), 0, 1, null,
1201                                 T_QNAME, FALSE, FALSE, FALSE, 'ITEM_TYPE',
1202                                 'XDB$QNAME', 'XDB', JT_QNAME, null, null,
1203                                 null,null,null);
1204  
1205          attlist(2) := xdb$insertAttr(schref, PN_LIST_TYPEREF, 'typeRef',
1206                                 xdb.xdb$qname('00', 'REF'), 0, 1,null,
1207                                 T_REF, TRUE, FALSE, FALSE, 'TYPE_REF',
1208                                 'REF', null, JT_REFERENCE, null, null, null,
1209                                 null,null,null,null,'01');
1210  
1211          ellist := xdb.xdb$xmltype_ref_list_t();
1212          ellist.extend(2);
1213  
1214          ellist(1) := xdb$insertElement(schref, PN_LIST_SIMPLETYPE,
1215                          'simpleType', xdb.xdb$qname('01','simpleType'),
1216                           0, 1, null,
1217                           T_XOB, FALSE, FALSE, FALSE, 'SIMPLE_TYPE',
1218                           'XDB$SIMPLE_T', 'XDB', JT_XMLTYPE, null, null,
1219                           simple_t_ref,null,null,
1220                           null, simple_colcount,
1221                  FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
1222                  'XDB$SIMPLE_TYPE', null, 'oracle.xdb.SimpleType',
1223                  'oracle.xdb.SimpleTypeBean', FALSE, null, null, null);
1224  
1225          ellist(2) := xdb$insertElement(schref, PN_LIST_ANNOTATION,
1226                          'annotation', xdb.xdb$qname('01', 'annotation'),
1227                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1228                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
1229                          JT_STRING, null, null, annotation_t_ref,null,null,
1230                          null, annotation_colcount, FALSE, null, null,
1231                          FALSE, FALSE, TRUE, FALSE, FALSE,
1232                          null, null, null, null, FALSE, null, null, null);
1233  
1234          list_t_ref := xdb$insertComplex(schref, null,
1235                                  'listType',
1236                                  null, FALSE, null, '0',
1237                         null, null, null, null, null, null, null, null, null,
1238                         null, null,
1239                 null, null, null, null, ellist, attlist);
1240          complexlist(13) := list_t_ref;
1241  
1242  /*--------------------------------------------------------------------------*/
1243  /* Definition of "xdb:unionType" complex type */
1244  /*--------------------------------------------------------------------------*/
1245          attlist := xdb.xdb$xmltype_ref_list_t();
1246          attlist.extend(1);
1247  
1248          attlist(1) := xdb$insertAttr(schref, PN_UNION_MEMBERTYPES,
1249                          'memberTypes', xdb.xdb$qname('00', 'QNames'),
1250                          0, 1, null, T_CSTRING, FALSE, FALSE, FALSE,
1251                          'MEMBER_TYPES', 'VARCHAR2', null,
1252                          JT_QNAME, null, null,
1253                          null,null,null);
1254  
1255          ellist := xdb.xdb$xmltype_ref_list_t();
1256          ellist.extend(3);
1257  
1258          ellist(1) := xdb$insertElement(schref, PN_UNION_SIMPLETYPE,
1259                          'simpleType', xdb.xdb$qname('01','simpleType'),
1260                           0, 1000, null,
1261                           T_XOB, FALSE, FALSE, FALSE, 'SIMPLE_TYPES',
1262                           'XDB$SIMPLE_T', 'XDB', JT_XMLTYPE, null, null,
1263                           simple_t_ref,null,null,
1264                           null, simple_colcount,
1265                  FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
1266                  'XDB$SIMPLE_TYPE', null, 'oracle.xdb.SimpleType',
1267                  'oracle.xdb.SimpleTypeBean', FALSE, null, null, null,
1268                   'XDB$XMLTYPE_REF_LIST_T','XDB');
1269  
1270          ellist(2) := xdb$insertElement(schref, PN_UNION_TYPEREF,
1271                           'typeRef', xdb.xdb$qname('00', 'REF'), 0, 1000,null,
1272                           T_REF, TRUE, FALSE, FALSE, 'TYPE_REFS',
1273                           'REF', null, JT_REFERENCE, null, null, null,null,null,
1274                   null, 0, FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
1275                   null, null, null, null, FALSE, null, null, null,
1276                   'XDB$XMLTYPE_REF_LIST_T','XDB', '01');
1277  
1278          ellist(3) := xdb$insertElement(schref, PN_UNION_ANNOTATION,
1279                          'annotation', xdb.xdb$qname('01', 'annotation'),
1280                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1281                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
1282                          JT_STRING, null, null, annotation_t_ref,null,null,
1283                          null, annotation_colcount, FALSE, null, null,
1284                          FALSE, FALSE, TRUE, FALSE, FALSE,
1285                          null, null, null, null, FALSE, null, null, null);
1286  
1287          union_t_ref := xdb$insertComplex(schref, null, 'unionType',
1288                            null, FALSE, null, '0',
1289                            null, null, null, null, null, null, null, null, null,
1290                            null, null, null, null, null, null, ellist, attlist);
1291          complexlist(14) := union_t_ref;
1292  
1293  /*--------------------------------------------------------------------------*/
1294  /* Definition of "xdb:simpleDerivationType" XML element */
1295  /*--------------------------------------------------------------------------*/
1296  
1297          attlist := xdb.xdb$xmltype_ref_list_t();
1298          attlist.extend(3);
1299  
1300          attlist(1) := xdb$insertAttr(schref, PN_SIMPLE_BASETYPE, 'baseType',
1301                                 xdb.xdb$qname('00', 'REF'), 0, 1,null,
1302                                 T_REF, TRUE, FALSE, FALSE, 'BASE_TYPE',
1303                                 'REF', null, JT_REFERENCE, null, null, null,
1304                                 null,null,null,null,'01');
1305  
1306          attlist(2) := xdb$insertAttr(schref, PN_SIMPLE_BASE, 'base',
1307                                     xdb.xdb$qname('00', 'QName'), 0, 1, null,
1308                                 T_QNAME, FALSE, FALSE, FALSE, 'BASE',
1309                                 'XDB$QNAME', 'XDB', JT_QNAME, null, null,
1310                                 null,null,null);
1311  
1312          attlist(3) := xdb$insertAttr(schref, PN_SIMPLEDER_ID, 'id',
1313                                  TR_STRING, 0, 1, null,
1314                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
1315                                 'VARCHAR2', null, JT_STRING, null, null,
1316                                 null,null,null);
1317  
1318          ellist := xdb.xdb$xmltype_ref_list_t();
1319          ellist.extend(16);
1320  
1321          ellist(1) := xdb$insertElement(schref, PN_SIMPLEDER_ANNOTATION,
1322                          'annotation', xdb.xdb$qname('01', 'annotation'),
1323                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1324                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
1325                          JT_STRING, null, null, annotation_t_ref,null,null,
1326                          null, annotation_colcount, FALSE, null, null,
1327                          FALSE, FALSE, TRUE, FALSE, FALSE,
1328                          null, null, null, null, FALSE, null, null, null);
1329  
1330          ellist(2) := xdb$insertElement(schref, PN_SIMPLE_PRECISION,
1331                          'fractionDigits',
1332                          xdb.xdb$qname('01', 'numFacet'), 0, 1, null,
1333                          T_XOB, FALSE, FALSE, FALSE, 'FRACTIONDIGITS',
1334                          'XDB$NUMFACET_T', 'XDB', JT_SHORT, null, null,
1335                          num_facet_ref,null,null,
1336                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1337                  null, null, null, null, FALSE, null, null, null);
1338  
1339          ellist(3) := xdb$insertElement(schref, PN_SIMPLE_SCALE, 'totalDigits',
1340                          xdb.xdb$qname('01', 'numFacet'),
1341                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1342                          'TOTALDIGITS', 'XDB$NUMFACET_T', 'XDB', JT_SHORT, null,null,
1343                          num_facet_ref,null,null,
1344                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1345                  null, null, null, null, FALSE, null, null, null);
1346  
1347          ellist(4) := xdb$insertElement(schref,PN_SIMPLE_MINLENGTH,
1348                                  'minLength',
1349                                xdb.xdb$qname('01', 'numFacet'), 0, 1, null,
1350                                T_XOB, FALSE, FALSE, FALSE, 'MINLENGTH',
1351                                'XDB$NUMFACET_T', 'XDB', JT_INT, null, null,
1352                                num_facet_ref,null,null,
1353                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1354                  null, null, null, null, FALSE, null, null, null) ;
1355  
1356          ellist(5) := xdb$insertElement(schref, PN_SIMPLE_MAXLENGTH,
1357                                'maxLength', xdb.xdb$qname('01', 'numFacet'),
1358                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1359                          'MAXLENGTH', 'XDB$NUMFACET_T', 'XDB', JT_INT, null,
1360                          null, num_facet_ref,null,null,
1361                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1362                  null, null, null, null, FALSE, null, null, null);
1363  
1364          ellist(6) := xdb$insertElement(schref, PN_SIMPLE_WHITESPACE, 'whiteSpace',
1365                          xdb.xdb$qname('01', 'whiteSpace'), 0, 1, '1',
1366                           T_XOB, FALSE, FALSE, FALSE, 'WHITESPACE',
1367                          'XDB$WHITESPACE_T', 'XDB', JT_ENUM, null, null,
1368                          whitespace_ref,null,null,
1369                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1370                  null, null, null, null, FALSE, null, null, null);
1371  
1372          ellist(7) := xdb$insertElement(schref, PN_SIMPLE_PERIOD, 'period',
1373                                           xdb.xdb$qname('01', 'timeFacet'),
1374                           0, 1, null, T_XOB, FALSE, FALSE, FALSE, 'PERIOD',
1375                          'XDB$TIMEFACET_T', 'XDB', JT_TIMESTAMP, null, null,
1376                          time_facet_ref,null,null,
1377                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1378                  null, null, null, null, FALSE, null, null, null);
1379  
1380          ellist(8) := xdb$insertElement(schref, PN_SIMPLE_DURATION,'duration',
1381                                           xdb.xdb$qname('01', 'timeFacet'),
1382                           0, 1, null, T_XOB, FALSE, FALSE, FALSE, 'DURATION',
1383                          'XDB$TIMEFACET_T','XDB',JT_TIMESTAMP, null, null,
1384                          time_facet_ref,null,null,
1385                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1386                  null, null, null, null, FALSE, null, null, null);
1387  
1388          ellist(9) := xdb$insertElement(schref, PN_SIMPLE_MININCLUSIVE,
1389                                  'minInclusive',
1390                                  xdb.xdb$qname('01', 'facet'),
1391                   0, 1, null, T_XOB, FALSE, FALSE, FALSE, 'MIN_INCLUSIVE',
1392                          'XDB$FACET_T', 'XDB', JT_INT, null, null, facet_ref,null,null,
1393                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1394                  null, null, null, null, FALSE, null, null, null);
1395  
1396          ellist(10) := xdb$insertElement(schref, PN_SIMPLE_MAXINCLUSIVE,
1397                                                 'maxInclusive',
1398                                          xdb.xdb$qname('01', 'facet'),
1399                           0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1400                           'MAX_INCLUSIVE', 'XDB$FACET_T', 'XDB', JT_INT, null, null,
1401                           facet_ref,null,null,
1402                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1403                  null, null, null, null, FALSE, null, null, null);
1404  
1405          ellist(11) := xdb$insertElement(schref, PN_SIMPLE_PATTERN, 'pattern',
1406                                  xdb.xdb$qname('01', 'facet'),
1407                          0, 65535, null, T_XOB, FALSE, FALSE, FALSE, 'PATTERN',
1408                          'XDB$FACET_T', 'XDB', JT_STRING, null, null, facet_ref,null,null,
1409                  null, 2, FALSE, null, null, FALSE, FALSE, TRUE, TRUE, FALSE,
1410                  null, null, null, null, FALSE, null, null, null,
1411                  'XDB$FACET_LIST_T','XDB');
1412  
1413  
1414          ellist(12) := xdb$insertElement(schref, PN_SIMPLE_ENUMERATION,
1415                                  'enumeration', xdb.xdb$qname('01', 'facet'),
1416                          0, 65535, null, T_XOB, FALSE, FALSE, FALSE,
1417                          'ENUMERATION', 'XDB$FACET_T', 'XDB',
1418                          JT_STRING, null, null, facet_ref,null,null,
1419                  null, 2, FALSE, null, null, FALSE, FALSE, TRUE, TRUE, FALSE,
1420                  null, null, null, null, FALSE, null, null, null,
1421                  'XDB$FACET_LIST_T','XDB');
1422  
1423          ellist(13) := xdb$insertElement(schref, PN_SIMPLE_MINEXCLUSIVE,
1424                              'minExclusive', xdb.xdb$qname('01', 'facet'),
1425                   0, 1, null, T_XOB, FALSE, FALSE, FALSE, 'MIN_EXCLUSIVE',
1426                          'XDB$FACET_T', 'XDB', JT_INT, null, null, facet_ref,null,null,
1427                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1428                  null, null, null, null, FALSE, null, null, null);
1429  
1430          ellist(14) := xdb$insertElement(schref, PN_SIMPLE_MAXEXCLUSIVE,
1431                                  'maxExclusive', xdb.xdb$qname('01', 'facet'),
1432                           0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1433                           'MAX_EXCLUSIVE', 'XDB$FACET_T', 'XDB', JT_INT, null, null,
1434                           facet_ref,null,null,
1435                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1436                  null, null, null, null, FALSE, null, null, null);
1437  
1438          ellist(15) := xdb$insertElement(schref, PN_SIMPLE_LENGTH,
1439                                'length', xdb.xdb$qname('01', 'numFacet'),
1440                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1441                          'LENGTH', 'XDB$NUMFACET_T', 'XDB', JT_INT, null,
1442                          null, num_facet_ref,null,null,
1443                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1444                  null, null, null, null, FALSE, null, null, null);
1445  
1446          ellist(16) := xdb$insertElement(schref, PN_SIMPLEDER_SIMPLETYPE,
1447                          'simpleType', xdb.xdb$qname('01','simpleType'),
1448                           0, 1, null,
1449                           T_XOB, FALSE, FALSE, FALSE, 'LCL_SMPL_DECL',
1450                           'XDB$SIMPLE_T', 'XDB', JT_XMLTYPE, null, null,
1451                           simple_t_ref,null,null,
1452                           null, simple_colcount,
1453                  FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
1454                  'XDB$SIMPLE_TYPE', null, 'oracle.xdb.SimpleType',
1455                  'oracle.xdb.SimpleTypeBean', FALSE, null, null, null);
1456  
1457          simplederv_t_ref := xdb$insertComplex(schref, null,
1458                                  'simpleDerivationType',
1459                                  null, FALSE, null, '0',
1460                         null, null, null, null, null, null, null, null, null,
1461                         null, null,
1462                 null, null, null, null, ellist, attlist);
1463          complexlist(12) := simplederv_t_ref;
1464  
1465  
1466  /*--------------------------------------------------------------------------*/
1467  /* Definition of "xdb:simpleType" XML element */
1468  /*--------------------------------------------------------------------------*/
1469          attlist := xdb.xdb$xmltype_ref_list_t();
1470          attlist.extend(7);
1471  
1472          attlist(1) := xdb$insertAttr(schref, PN_SIMPLE_PARENTSCHEMA,
1473                                 'parent_schema',
1474                                 xdb.xdb$qname('00', 'REF'), 0, 1,null,
1475                                 T_REF, TRUE, FALSE, FALSE, 'PARENT_SCHEMA',
1476                                 'REF', null, JT_REFERENCE, null, null,
1477                                 null,null,null,null,null,'01');
1478          attlist(2) := xdb$insertAttr(schref, PN_SIMPLE_NAME, 'name',
1479                                  TR_STRING, 1, 1, null,
1480                                 T_CSTRING, FALSE, FALSE, FALSE, 'NAME',
1481                                 'VARCHAR2', null, JT_STRING, null, null,
1482                                 null,null,null);
1483          attlist(3) := xdb$insertAttr(schref, PN_SIMPLE_ABSTRACT, 'abstract',
1484                                  TR_BOOLEAN, 0, 1,null,
1485                                 T_BOOLEAN, FALSE, FALSE, FALSE, 'ABSTRACT',
1486                                 'RAW', null, JT_BOOLEAN, 'false', null,
1487                                 null,null,null);
1488          attlist(4) := xdb$insertAttr(schref, PN_SIMPLE_ID, 'id',
1489                                  TR_STRING, 0, 1, null,
1490                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
1491                                 'VARCHAR2', null, JT_STRING, null, null,
1492                                 null,null,null);
1493          attlist(5) := xdb$insertAttr(schref, PN_SIMPLE_FINAL, 'final',
1494                                 xdb.xdb$qname('01', 'derivationChoice'), 0, 1,
1495                                 null, T_ENUM, FALSE, FALSE, FALSE, 'FINAL_INFO',
1496                                 'XDB$DERIVATIONCHOICE', 'XDB', JT_ENUM,
1497                                 null, null, drv_choice_ref,null,null);
1498          attlist(6) := xdb$insertAttr(schref, PN_SIMPLE_TYPEID, 'typeID',
1499                                 TR_INT, 0, 1, null,
1500                                 T_UNSIGNINT, TRUE, FALSE, FALSE, 'TYPEID',
1501                                 'NUMBER', null, JT_INT, null, null, null,null,
1502                                 null);
1503  
1504          attlist(7) := xdb$insertAttr(schref, PN_SIMPLE_SQLTYPE,
1505                                 'SQLType', TR_STRING, 1, 1,null,
1506                                 T_CSTRING, TRUE, FALSE, FALSE, 'SQLTYPE',
1507                                 'VARCHAR2', null, JT_STRING, null, null,
1508                                 null,null,null);
1509  
1510          ellist := xdb.xdb$xmltype_ref_list_t();
1511          ellist.extend(4);
1512  
1513          ellist(1) := xdb$insertElement(schref, PN_SIMPLE_ANNOTATION,
1514                          'annotation', xdb.xdb$qname('01', 'annotation'),
1515                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1516                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
1517                          JT_STRING, null, null, annotation_t_ref,null,null,
1518                          null, annotation_colcount, FALSE, null, null,
1519                          FALSE, FALSE, TRUE, FALSE, FALSE,
1520                          null, null, null, null, FALSE, null, null, null);
1521  
1522          ellist(2) := xdb$insertElement(schref, PN_SIMPLE_RESTRICTION,
1523                                         'restriction',
1524                                       xdb.xdb$qname('01', 'simpleDerivationType'),
1525                                         0, 1, null,
1526                                         T_XOB, FALSE, FALSE, FALSE,
1527                                         'RESTRICTION',
1528                                         'XDB$SIMPLE_DERIVATION_T', 'XDB',
1529                                         JT_XMLTYPE,
1530                                         null, null, simplederv_t_ref,null,null,
1531                                         null, simpleder_colcount,
1532                                         FALSE, null, null, FALSE, TRUE,
1533                                         TRUE, FALSE, FALSE,
1534                                         null, null,
1535                                         'oracle.xdb.simpleDerivation',
1536                                         'oracle.xdb.simpleDerivationBean',
1537                                         FALSE, null, null, null);
1538  
1539          ellist(3) := xdb$insertElement(schref, PN_SIMPLE_LIST,
1540                                         'list',
1541                                       xdb.xdb$qname('01', 'listType'),
1542                                         0, 1, null,
1543                                         T_XOB, FALSE, FALSE, FALSE,
1544                                         'LIST_TYPE',
1545                                         'XDB$LIST_T', 'XDB',
1546                                         JT_XMLTYPE,
1547                                         null, null, list_t_ref,null,null,
1548                                         null, list_colcount,
1549                                         FALSE, null, null, FALSE, TRUE,
1550                                         TRUE, FALSE, FALSE,
1551                                         null, null,
1552                                         'oracle.xdb.listBean',
1553                                         'oracle.xdb.listBean',
1554                                         FALSE, null, null, null);
1555  
1556          ellist(4) := xdb$insertElement(schref, PN_SIMPLE_UNION,
1557                                         'union',
1558                                       xdb.xdb$qname('01', 'unionType'),
1559                                         0, 1, null,
1560                                         T_XOB, FALSE, FALSE, FALSE,
1561                                         'UNION_TYPE',
1562                                         'XDB$UNION_T', 'XDB',
1563                                         JT_XMLTYPE,
1564                                         null, null, union_t_ref,null,null,
1565                                         null, union_colcount,
1566                                         FALSE, null, null, FALSE, TRUE,
1567                                         TRUE, FALSE, FALSE,
1568                                         null, null,
1569                                         'oracle.xdb.unionBean',
1570                                         'oracle.xdb.unionBean',
1571                                         FALSE, null, null, null);
1572  
1573          xdb$updateComplex(simple_t_ref, schref, null, 'simpleType',
1574                                  null, FALSE, null, null,
1575                                  null, null, null,
1576                                  ellist, attlist);
1577          complexlist(5) := simple_t_ref;
1578  
1579  
1580          stype_propnum := 22;
1581          schels(2) := xdb$insertElement(schref, stype_propnum,
1582                                  'simpleType',
1583                           xdb.xdb$qname('01', 'simpleType'), 0, 1, null,
1584                           T_XOB, FALSE, FALSE, FALSE, 'SIMPLE_TYPE',
1585                           'XDB$SIMPLE_T', 'XDB', JT_XMLTYPE, null, null,
1586                           simple_t_ref,null,null,
1587                  xdb.xdb$qname('01', 'schemaTop'), simple_colcount, FALSE, null, null,
1588                  FALSE, FALSE, FALSE, FALSE, FALSE,
1589                  'XDB$SIMPLE_TYPE', null, 'oracle.xdb.SimpleType',
1590                  'oracle.xdb.SimpleTypeBean', TRUE, null, null, null,
1591                          'XDB$XMLTYPE_REF_LIST_T','XDB');
1592  
1593  /*--------------------------------------------------------------------------*/
1594  /* Forward definitions of "xdb:groupRefType" and "xdb:attrGroupRefType" */
1595  /*--------------------------------------------------------------------------*/
1596          groupref_t_ref := xdb$insertEmptyComplex();
1597          attrgroupref_t_ref := xdb$insertEmptyComplex();
1598  
1599  /*--------------------------------------------------------------------------*/
1600  /* Definition of "xdb:modelType" XML element */
1601  /*
1602   *   modelType :=                    -- annotation (0..1)
1603   *                                  |
1604   *                    sequence  ----
1605   *                     (1..1)       |
1606   *                                   -- choice (0..unb)
1607   *                                         -- all       (0..1)
1608   *                                         -- choice    (0..1)
1609   *                                         -- sequence  (0..1)
1610   *                                         -- any       (0..1)
1611   *                                         -- group     (0..1)
1612   */
1613  /*--------------------------------------------------------------------------*/
1614          attlist := xdb.xdb$xmltype_ref_list_t();
1615          attlist.extend(4);
1616  
1617          /* Forward definition of modelType */
1618          model_t_ref := xdb$insertEmptyComplex();
1619  
1620          attlist(1) := xdb$insertAttr(schref, PN_MODEL_PARENTSCHEMA,
1621                                       'parentSchema',
1622                                       xdb.xdb$qname('00','REF'), 0, 1,
1623                                       null, T_REF, TRUE, FALSE, FALSE,
1624                                       'PARENT_SCHEMA', 'REF', null,
1625                                       JT_REFERENCE,
1626                                       null, null, null,null,null,
1627                                       null,null,'01');
1628          attlist(2) := xdb$insertAttr(schref, PN_MODEL_MINOCCURS,
1629                                       'minOccurs', TR_INT, 0, 1, null,
1630                                       T_INTEGER, FALSE, FALSE, FALSE,
1631                                       'MIN_OCCURS', 'NUMBER', null,
1632                                       JT_INT, '0', null, null,null,null);
1633  
1634          attlist(3) := xdb$insertAttr(schref, PN_MODEL_MAXOCCURS,
1635                                       'maxOccurs', TR_STRING, 0, 1, null,
1636                                       T_CSTRING, FALSE, FALSE, FALSE,
1637                                       'MAX_OCCURS', 'VARCHAR2', null,
1638                                       JT_STRING, null, null, null,null,null);
1639  
1640          attlist(4) := xdb$insertAttr(schref, PN_MODEL_ID, 'id',
1641                                  TR_STRING, 0, 1, null,
1642                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
1643                                 'VARCHAR2', null, JT_STRING, null, null,
1644                                 null,null,null);
1645  
1646          ellist := xdb.xdb$xmltype_ref_list_t();
1647          ellist.extend(5);
1648  
1649          ellist(1) := xdb$insertElement(schref, PN_MODEL_ELEMENT,
1650                           'element', xdb.xdb$qname('01', 'element'),
1651                           0, 1, null,
1652                           T_XOB, FALSE, FALSE, FALSE, 'ELEMENTS',
1653                           'XDB$ELEMENT_T', 'XDB', JT_XMLTYPE,
1654                                         null, null, null,null,null,
1655                                         null, elem_colcount,
1656                   FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
1657                  'XDB$ELEMENT', null, 'oracle.xdb.Element',
1658                  'oracle.xdb.ElementBean', FALSE, 'PROPERTY', null, null,
1659                  'XDB$XMLTYPE_REF_LIST_T','XDB');
1660  
1661  
1662          ellist(2) := xdb$insertElement(schref, PN_MODEL_CHOICE,
1663                           'choice', xdb.xdb$qname('01', 'modelType'),
1664                           0, 1, null,
1665                           T_XOB, FALSE, FALSE, FALSE, 'CHOICE_KIDS',
1666                           'XDB$MODEL_T', 'XDB', JT_XMLTYPE,
1667                                         null, null, model_t_ref,null,null,
1668                                         null, model_colcount,
1669                   FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
1670                  'XDB$CHOICE_MODEL', null, 'oracle.xdb.Model',
1671                  'oracle.xdb.ModelBean', FALSE, null, null, null,
1672                 'XDB$XMLTYPE_REF_LIST_T','XDB');
1673  
1674          ellist(3) := xdb$insertElement(schref, PN_MODEL_SEQUENCE,
1675                           'sequence', xdb.xdb$qname('01', 'modelType'),
1676                           0, 1, null,
1677                           T_XOB, FALSE, FALSE, FALSE, 'SEQUENCE_KIDS',
1678                           'XDB$MODEL_T', 'XDB', JT_XMLTYPE,
1679                                         null, null, model_t_ref,null,null,
1680                                         null, model_colcount,
1681                   FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
1682                  'XDB$SEQUENCE_MODEL', null, 'oracle.xdb.Model',
1683                  'oracle.xdb.ModelBean', FALSE, null, null, null,
1684                 'XDB$XMLTYPE_REF_LIST_T','XDB');
1685  
1686          ellist(4) := xdb$insertElement(schref, PN_MODEL_ANY,
1687                           'any', xdb.xdb$qname('01', 'anyType'),
1688                           0, 1, null,
1689                           T_XOB, FALSE, FALSE, FALSE, 'ANYS',
1690                           'XDB$ANY_T', 'XDB', JT_XMLTYPE,
1691                                         null, null, any_t_ref,null,null,
1692                                         null, any_colcount,
1693                   FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
1694                  'XDB$ANY', null, 'oracle.xdb.Any',
1695                  'oracle.xdb.AnyBean', FALSE, 'PROPERTY', null, null,
1696                 'XDB$XMLTYPE_REF_LIST_T','XDB');
1697  
1698          ellist(5) := xdb$insertElement(schref, PN_MODEL_GROUP,
1699                           'group', xdb.xdb$qname('01', 'groupRefType'),
1700                           0, 1, null,
1701                           T_XOB, FALSE, FALSE, FALSE, 'GROUPS',
1702                           'XDB$GROUP_REF_T', 'XDB', JT_XMLTYPE,
1703                                         null, null, groupref_t_ref,null,null,
1704                                         null, groupref_colcount,
1705                   FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
1706                  'XDB$GROUP_REF', null, 'oracle.xdb.Group',
1707                  'oracle.xdb.GroupBean', FALSE, null, null, null,
1708                 'XDB$XMLTYPE_REF_LIST_T','XDB');
1709  
1710          /* choice 0..unbounded of above elements */
1711          choice_list := xdb.xdb$xmltype_ref_list_t();
1712          choice_list.extend(1);
1713          choice_list(1) := xdb$insertChoice(schref, ellist);
1714  
1715          ellist := xdb.xdb$xmltype_ref_list_t();
1716          ellist.extend(1);
1717          ellist(1) := xdb$insertElement(schref, PN_MODEL_ANNOTATION,
1718                          'annotation', xdb.xdb$qname('01', 'annotation'),
1719                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1720                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
1721                          JT_STRING, null, null, annotation_t_ref,null,null,
1722                          null, annotation_colcount, FALSE, null, null,
1723                          FALSE, FALSE, TRUE, FALSE, FALSE,
1724                          null, null, null, null, FALSE, null, null, null);
1725  
1726          /* sequence of annotation and choice */
1727          seq_ref    := xdb$insertSequence(schref, ellist, null, choice_list);
1728  
1729          xdb$updateComplex(model_t_ref, schref, null,
1730                         'modelType', null, FALSE,
1731                         null, null, null, null, null, null, attlist, seq_ref);
1732          complexlist(9) := model_t_ref;
1733  
1734  /*--------------------------------------------------------------------------*/
1735  /* Definition of "xdb:simpleContentResType"
1736   * This captures the simpleContent -> restriction case.
1737   * Strictly speaking, the W3C schema allows the facets like minInclusive
1738   * etc to appear in any order. They really should be part of the choice (unb)
1739   * but that would map them to arrays. Since we know there can be only one
1740   * minInclusive it seems to be an overkill to map them to arrays. Hence
1741   * we make them as a sequence
1742   *
1743   *    simpleContRes :=
1744   *                             -- annotation   (0..1)
1745   *                            |
1746   *                             -- simpleType   (0..1)
1747   *                            |
1748   *                            |-- minExclusive (0..1)
1749   *                            |-- minInclusive (0..1)
1750   *                            |     ....
1751   *          sequence ---------|-- pattern      (0..1)
1752   *                            |
1753   *                            |
1754   *                            |             attribute      (0..1)
1755   *                             -- choice -- attributeGrp   (0..1)
1756   *                               (0..unb)   anyAttribute   (0..1)
1757   *
1758   *--------------------------------------------------------------------------*/
1759  
1760          attlist := xdb.xdb$xmltype_ref_list_t();
1761          attlist.extend(2);
1762  
1763          attlist(1) := xdb$insertAttr(schref, PN_SIMPLECONTRES_BASE,
1764                                       'base', xdb.xdb$qname('00', 'QName'), 0,1,
1765                                       null, T_QNAME, FALSE, FALSE, FALSE,
1766                                       'BASE', 'XDB$QNAME', 'XDB',
1767                                       JT_QNAME, null, null, null,null,null);
1768  
1769          attlist(2) := xdb$insertAttr(schref, PN_SIMPLECONTRES_ID, 'id',
1770                                  TR_STRING, 0, 1, null,
1771                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
1772                                 'VARCHAR2', null, JT_STRING, null, null,
1773                                 null,null,null);
1774  
1775          /* Construct choice of <attribute>, <attributeGroup>, <anyAttrib> */
1776          ellist := xdb.xdb$xmltype_ref_list_t();
1777          ellist.extend(3);
1778  
1779          ellist(1) := xdb$insertElement(schref, PN_SIMPLECONTRES_ATTRIBUTE,
1780                                         'attribute',
1781                                         xdb.xdb$qname('01', 'attribute'),
1782                                         0, 1, null, T_XOB, FALSE, FALSE,
1783                                         FALSE, 'ATTRIBUTES',
1784                                         'XDB$PROPERTY_T','XDB',
1785                                         JT_XMLTYPE, null, null, null,null,null,
1786                                         null, attr_colcount,
1787                                         FALSE, null, null, FALSE, FALSE,
1788                                         FALSE, FALSE, FALSE,
1789                                         'XDB$ATTRIBUTE', null,
1790                                         'oracle.xdb.Attribute',
1791                                         'oracle.xdb.AttributeBean',
1792                                         FALSE, null, null, null,
1793                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
1794  
1795          ellist(2) := xdb$insertElement(schref, PN_SIMPLECONTRES_ANYATTR,
1796                                         'anyAttribute',
1797                                         xdb.xdb$qname('01', 'anyType'),
1798                                         0, 1, null, T_XOB, FALSE, FALSE,
1799                                         FALSE, 'ANY_ATTRS',
1800                                         'XDB$ANY_T','XDB',
1801                                         JT_XMLTYPE, null, null, any_t_ref,null,null,
1802                                         null, any_colcount,
1803                                         FALSE, null, null, FALSE, FALSE,
1804                                         FALSE, FALSE, FALSE,
1805                                         'XDB$ANYATTR', null,
1806                                         'oracle.xdb.anyAttribute',
1807                                         'oracle.xdb.anyAttributeBean',
1808                                         FALSE, 'PROPERTY', null, null,
1809                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
1810  
1811          ellist(3) := xdb$insertElement(schref, PN_SIMPLECONTRES_ATTRGROUP,
1812                                         'attributeGroup',
1813                                         xdb.xdb$qname('01', 'attrGroupRefType'),
1814                                         0, 1, null, T_XOB, FALSE, FALSE,
1815                                         FALSE, 'ATTR_GROUPS',
1816                                         'XDB$ATTRGROUP_REF_T','XDB',
1817                                         JT_XMLTYPE, null, null,
1818                                         attrgroupref_t_ref,null,null,
1819                                         null, attrgroupref_colcount,
1820                                         FALSE, null, null, FALSE, FALSE,
1821                                         FALSE, FALSE, FALSE,
1822                                         'XDB$ATTRGROUP_REF', null,
1823                                         'oracle.xdb.attributeGroup',
1824                                         'oracle.xdb.attributeGroupBean',
1825                                         FALSE, null, null, null,
1826                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
1827  
1828          /* insert choice of above */
1829          choice_list := xdb.xdb$xmltype_ref_list_t();
1830          choice_list.extend(1);
1831          choice_list(1) := xdb$insertChoice(schref, ellist);
1832  
1833          /* Construct sequence of <annotation>...<minExclusive> etc */
1834          ellist := xdb.xdb$xmltype_ref_list_t();
1835          ellist.extend(16);
1836  
1837          ellist(1) := xdb$insertElement(schref, PN_SIMPLECONTRES_ANNOTATION,
1838                          'annotation', xdb.xdb$qname('01', 'annotation'),
1839                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1840                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
1841                          JT_STRING, null, null, annotation_t_ref,null,null,
1842                          null, annotation_colcount, FALSE, null, null,
1843                          FALSE, FALSE, TRUE, FALSE, FALSE,
1844                          null, null, null, null, FALSE, null, null, null);
1845  
1846          ellist(2) := xdb$insertElement(schref, PN_SIMPLECONTRES_FRACDIGITS,
1847                          'fractionDigits',
1848                          xdb.xdb$qname('01', 'numFacet'), 0, 1, null,
1849                          T_XOB, FALSE, FALSE, FALSE, 'FRACTIONDIGITS',
1850                          'XDB$NUMFACET_T', 'XDB', JT_SHORT, null, null,
1851                          num_facet_ref,null,null,
1852                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1853                  null, null, null, null, FALSE, null, null, null);
1854  
1855          ellist(3) := xdb$insertElement(schref, PN_SIMPLECONTRES_TOTALDIGITS, 'totalDigits',
1856                          xdb.xdb$qname('01', 'numFacet'),
1857                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1858                          'TOTALDIGITS', 'XDB$NUMFACET_T', 'XDB', JT_SHORT, null,null,
1859                          num_facet_ref,null,null,
1860                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1861                  null, null, null, null, FALSE, null, null, null);
1862  
1863          ellist(4) := xdb$insertElement(schref,PN_SIMPLECONTRES_MINLENGTH,
1864                                  'minLength',
1865                                xdb.xdb$qname('01', 'numFacet'), 0, 1, null,
1866                                T_XOB, FALSE, FALSE, FALSE, 'MINLENGTH',
1867                                'XDB$NUMFACET_T', 'XDB', JT_INT, null, null,
1868                                num_facet_ref,null,null,
1869                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1870                  null, null, null, null, FALSE, null, null, null) ;
1871  
1872          ellist(5) := xdb$insertElement(schref, PN_SIMPLECONTRES_MAXLENGTH,
1873                                'maxLength', xdb.xdb$qname('01', 'numFacet'),
1874                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1875                          'MAXLENGTH', 'XDB$NUMFACET_T', 'XDB', JT_INT, null,
1876                          null, num_facet_ref,null,null,
1877                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1878                  null, null, null, null, FALSE, null, null, null);
1879  
1880          ellist(6) := xdb$insertElement(schref, PN_SIMPLECONTRES_WHITESPACE, 'whiteSpace',
1881                          xdb.xdb$qname('01', 'whiteSpace'), 0, 1, '1',
1882                           T_XOB, FALSE, FALSE, FALSE, 'WHITESPACE',
1883                          'XDB$WHITESPACE_T', 'XDB', JT_ENUM, null, null,
1884                          whitespace_ref,null,null,
1885                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1886                  null, null, null, null, FALSE, null, null, null);
1887  
1888          ellist(7) := xdb$insertElement(schref, PN_SIMPLECONTRES_PERIOD, 'period',
1889                                           xdb.xdb$qname('01', 'timeFacet'),
1890                           0, 1, null, T_XOB, FALSE, FALSE, FALSE, 'PERIOD',
1891                          'XDB$TIMEFACET_T', 'XDB', JT_TIMESTAMP, null, null,
1892                          time_facet_ref,null,null,
1893                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1894                  null, null, null, null, FALSE, null, null, null);
1895  
1896          ellist(8) := xdb$insertElement(schref, PN_SIMPLECONTRES_DURATION,'duration',
1897                                           xdb.xdb$qname('01', 'timeFacet'),
1898                           0, 1, null, T_XOB, FALSE, FALSE, FALSE, 'DURATION',
1899                          'XDB$TIMEFACET_T','XDB',JT_TIMESTAMP, null, null,
1900                          time_facet_ref,null,null,
1901                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1902                  null, null, null, null, FALSE, null, null, null);
1903  
1904          ellist(9) := xdb$insertElement(schref, PN_SIMPLECONTRES_MININCLUSIVE,
1905                                  'minInclusive',
1906                                  xdb.xdb$qname('01', 'facet'),
1907                   0, 1, null, T_XOB, FALSE, FALSE, FALSE, 'MIN_INCLUSIVE',
1908                          'XDB$FACET_T', 'XDB', JT_INT, null, null, facet_ref,null,null,
1909                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1910                  null, null, null, null, FALSE, null, null, null);
1911  
1912          ellist(10) := xdb$insertElement(schref, PN_SIMPLECONTRES_MAXINCLUSIVE,
1913                                                 'maxInclusive',
1914                                          xdb.xdb$qname('01', 'facet'),
1915                           0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1916                           'MAX_INCLUSIVE', 'XDB$FACET_T', 'XDB', JT_INT, null, null,
1917                           facet_ref,null,null,
1918                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1919                  null, null, null, null, FALSE, null, null, null);
1920  
1921          ellist(11) := xdb$insertElement(schref, PN_SIMPLECONTRES_PATTERN, 'pattern',
1922                                  xdb.xdb$qname('01', 'facet'),
1923                          0, 65535, null, T_XOB, FALSE, FALSE, FALSE, 'PATTERN',
1924                          'XDB$FACET_T', 'XDB', JT_STRING, null, null, facet_ref,null,null,
1925                  null, 2, FALSE, null, null, FALSE, FALSE, TRUE, TRUE, FALSE,
1926                  null, null, null, null, FALSE, null, null, null,
1927                  'XDB$FACET_LIST_T','XDB');
1928  
1929  
1930          ellist(12) := xdb$insertElement(schref, PN_SIMPLECONTRES_ENUMERATION,
1931                                  'enumeration', xdb.xdb$qname('01', 'facet'),
1932                          0, 65535, null, T_XOB, FALSE, FALSE, FALSE,
1933                          'ENUMERATION', 'XDB$FACET_T', 'XDB',
1934                          JT_STRING, null, null, facet_ref,null,null,
1935                  null, 2, FALSE, null, null, FALSE, FALSE, TRUE, TRUE, FALSE,
1936                  null, null, null, null, FALSE, null, null, null,
1937                  'XDB$FACET_LIST_T','XDB');
1938  
1939          ellist(13) := xdb$insertElement(schref, PN_SIMPLECONTRES_MINEXCLUSIVE,
1940                              'minExclusive', xdb.xdb$qname('01', 'facet'),
1941                   0, 1, null, T_XOB, FALSE, FALSE, FALSE, 'MIN_EXCLUSIVE',
1942                          'XDB$FACET_T', 'XDB', JT_INT, null, null, facet_ref,null,null,
1943                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1944                  null, null, null, null, FALSE, null, null, null);
1945  
1946          ellist(14) := xdb$insertElement(schref, PN_SIMPLECONTRES_MAXEXCLUSIVE,
1947                                  'maxExclusive', xdb.xdb$qname('01', 'facet'),
1948                           0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1949                           'MAX_EXCLUSIVE', 'XDB$FACET_T', 'XDB', JT_INT, null, null,
1950                           facet_ref,null,null,
1951                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1952                  null, null, null, null, FALSE, null, null, null);
1953  
1954          ellist(15) := xdb$insertElement(schref, PN_SIMPLECONTRES_LENGTH,
1955                                'length', xdb.xdb$qname('01', 'numFacet'),
1956                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
1957                          'LENGTH', 'XDB$NUMFACET_T', 'XDB', JT_INT, null,
1958                          null, num_facet_ref,null,null,
1959                  null, 2, FALSE, null, null, FALSE, TRUE, TRUE, TRUE, FALSE,
1960                  null, null, null, null, FALSE, null, null, null);
1961  
1962          ellist(16) := xdb$insertElement(schref, PN_SIMPLECONTRES_SIMPLETYPE,
1963                          'simpleType', xdb.xdb$qname('01','simpleType'),
1964                           0, 1, null,
1965                           T_XOB, FALSE, FALSE, FALSE, 'LCL_SMPL_DECL',
1966                           'XDB$SIMPLE_T', 'XDB', JT_XMLTYPE, null, null,
1967                           simple_t_ref,null,null,
1968                           null, simple_colcount,
1969                  FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
1970                  'XDB$SIMPLE_TYPE', null, 'oracle.xdb.SimpleType',
1971                  'oracle.xdb.SimpleTypeBean', FALSE, null, null, null);
1972  
1973          /* insert sequence of above */
1974          seq_ref := xdb$insertSequence(schref, ellist, null, choice_list);
1975  
1976          simplecontRes_t_ref := xdb$insertComplex(schref, null,
1977                                                 'simpleContentResType',
1978                                                 null, FALSE, null, '0',
1979                                                 null, null, null, null, null,
1980                                                 null, null, null, null,
1981                                                 null, null,
1982                                                 null, null,
1983                                                 null, null, null, attlist,
1984                                                 null, FALSE, seq_ref);
1985          complexlist(27) := simplecontRes_t_ref;
1986  
1987  /*--------------------------------------------------------------------------*/
1988  /* Definition of "xdb:simpleContentExtType"
1989   * This captures the simpleContent -> extension case.
1990   * It allows a superset of W3C schemas.
1991   *
1992   *   simpleContExt :=                -- annotation (0..1)
1993   *                                  |
1994   *                    sequence  ----
1995   *                     (1..1)       |
1996   *                                   -- choice (0..unb)
1997   *                                         -- attribute      (0..1)
1998   *                                         -- attributeGroup (0..1)
1999   *                                         -- anyAttribute   (0..1)
2000   *--------------------------------------------------------------------------*/
2001  
2002          attlist := xdb.xdb$xmltype_ref_list_t();
2003          attlist.extend(2);
2004  
2005          attlist(1) := xdb$insertAttr(schref, PN_SIMPLECONTEXT_BASE,
2006                                       'base', xdb.xdb$qname('00', 'QName'), 0,1,
2007                                       null, T_QNAME, FALSE, FALSE, FALSE,
2008                                       'BASE', 'XDB$QNAME', 'XDB',
2009                                       JT_QNAME, null, null, null,null,null);
2010  
2011          attlist(2) := xdb$insertAttr(schref, PN_SIMPLECONTEXT_ID, 'id',
2012                                  TR_STRING, 0, 1, null,
2013                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
2014                                 'VARCHAR2', null, JT_STRING, null, null,
2015                                 null,null,null);
2016  
2017          /* Construct choice of <attribute>, <attributeGroup>, <anyAttrib> */
2018          ellist := xdb.xdb$xmltype_ref_list_t();
2019          ellist.extend(3);
2020  
2021          ellist(1) := xdb$insertElement(schref, PN_SIMPLECONTEXT_ATTRIBUTE,
2022                                         'attribute',
2023                                         xdb.xdb$qname('01', 'attribute'),
2024                                         0, 1, null, T_XOB, FALSE, FALSE,
2025                                         FALSE, 'ATTRIBUTES',
2026                                         'XDB$PROPERTY_T','XDB',
2027                                         JT_XMLTYPE, null, null, null,null,null,
2028                                         null, attr_colcount,
2029                                         FALSE, null, null, FALSE, FALSE,
2030                                         FALSE, FALSE, FALSE,
2031                                         'XDB$ATTRIBUTE', null,
2032                                         'oracle.xdb.Attribute',
2033                                         'oracle.xdb.AttributeBean',
2034                                         FALSE, null, null, null,
2035                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
2036  
2037          ellist(2) := xdb$insertElement(schref, PN_SIMPLECONTEXT_ANYATTR,
2038                                         'anyAttribute',
2039                                         xdb.xdb$qname('01', 'anyType'),
2040                                         0, 1, null, T_XOB, FALSE, FALSE,
2041                                         FALSE, 'ANY_ATTRS',
2042                                         'XDB$ANY_T','XDB',
2043                                         JT_XMLTYPE, null, null, any_t_ref,null,null,
2044                                         null, any_colcount,
2045                                         FALSE, null, null, FALSE, FALSE,
2046                                         FALSE, FALSE, FALSE,
2047                                         'XDB$ANYATTR', null,
2048                                         'oracle.xdb.anyAttribute',
2049                                         'oracle.xdb.anyAttributeBean',
2050                                         FALSE, 'PROPERTY', null, null,
2051                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
2052  
2053          ellist(3) := xdb$insertElement(schref, PN_SIMPLECONTEXT_ATTRGROUP,
2054                                         'attributeGroup',
2055                                         xdb.xdb$qname('01', 'attrGroupRefType'),
2056                                         0, 1, null, T_XOB, FALSE, FALSE,
2057                                         FALSE, 'ATTR_GROUPS',
2058                                         'XDB$ATTRGROUP_REF_T','XDB',
2059                                         JT_XMLTYPE, null, null,
2060                                         attrgroupref_t_ref,null,null,
2061                                         null, attrgroupref_colcount,
2062                                         FALSE, null, null, FALSE, FALSE,
2063                                         FALSE, FALSE, FALSE,
2064                                         'XDB$ATTRGROUP_REF', null,
2065                                         'oracle.xdb.attributeGroup',
2066                                         'oracle.xdb.attributeGroupBean',
2067                                         FALSE, null, null, null,
2068                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
2069  
2070          /* insert choice of above */
2071          choice_list := xdb.xdb$xmltype_ref_list_t();
2072          choice_list.extend(1);
2073          choice_list(1) := xdb$insertChoice(schref, ellist);
2074  
2075          /* build annotation element */
2076          ellist := xdb.xdb$xmltype_ref_list_t();
2077          ellist.extend(1);
2078          ellist(1) := xdb$insertElement(schref,PN_SIMPLECONTEXT_ANNOTATION,
2079                          'annotation', xdb.xdb$qname('01', 'annotation'),
2080                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
2081                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
2082                          JT_STRING, null, null, annotation_t_ref,null,null,
2083                          null, annotation_colcount, FALSE, null, null,
2084                          FALSE, FALSE, TRUE, FALSE, FALSE,
2085                          null, null, null, null, FALSE, null, null, null);
2086  
2087          /* insert sequence of above */
2088          seq_ref := xdb$insertSequence(schref, ellist, null, choice_list);
2089  
2090          simplecontExt_t_ref := xdb$insertComplex(schref, null,
2091                                                 'simpleContentExtType',
2092                                                 null, FALSE, null, '0',
2093                                                 null, null, null, null, null,
2094                                                 null, null, null, null,
2095                                                 null, null,
2096                                                 null, null,
2097                                                 null, null, null, attlist,
2098                                                 null, FALSE, seq_ref);
2099          complexlist(28) := simplecontExt_t_ref;
2100  
2101  
2102  /*--------------------------------------------------------------------------*/
2103  /* Definition of "xdb:complexDerivationType" XML element
2104   * Again, this does not strictly reflect the W3C schema for schemas but
2105   * only serves to define our O-R mapping and allow a superset.
2106   *
2107   *      complexDerivation :=
2108   *                             -- annotation (0..1)
2109   *                            |
2110   *                            |             choice         (0..1)
2111   *                             -- choice -- sequence       (0..1)
2112   *                            |             group          (0..1)
2113   *          sequence ---------|             all            (0..1)
2114   *                            |
2115   *                            |
2116   *                            |             attribute      (0..1)
2117   *                             -- choice -- attributeGrp   (0..1)
2118   *                               (0..unb)   anyAttribute   (0..1)
2119   *
2120   *--------------------------------------------------------------------------*/
2121          attlist := xdb.xdb$xmltype_ref_list_t();
2122          attlist.extend(2);
2123  
2124          attlist(1) := xdb$insertAttr(schref, PN_COMPLEXDERIVATION_BASE,
2125                                       'base', xdb.xdb$qname('00', 'QName'), 0, 1,
2126                                       null, T_QNAME, FALSE, FALSE, FALSE,
2127                                       'BASE', 'XDB$QNAME', 'XDB',
2128                                       JT_QNAME, null, null, null,null,null);
2129  
2130          attlist(2) := xdb$insertAttr(schref, PN_COMPLEXDERIVATION_ID, 'id',
2131                                  TR_STRING, 0, 1, null,
2132                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
2133                                 'VARCHAR2', null, JT_STRING, null, null,
2134                                 null,null,null);
2135  
2136          /* Construct choice of <group>, <choice>, <all>, <sequence> */
2137          ellist := xdb.xdb$xmltype_ref_list_t();
2138          ellist.extend(4);
2139  
2140          ellist(1) := xdb$insertElement(schref, PN_COMPLEXDERIVATION_ALL,
2141                                         'all', xdb.xdb$qname('01', 'modelType'),
2142                                         0, 1, null,
2143                                         T_XOB, FALSE, FALSE, FALSE,
2144                                         'ALL_KID', 'XDB$MODEL_T', 'XDB',
2145                                         JT_XMLTYPE,
2146                                         null, null, model_t_ref,null,null,
2147                                         null, model_colcount,
2148                                         FALSE, null, null, FALSE, FALSE,
2149                                         FALSE, FALSE, FALSE,
2150                                         'XDB$ALL_MODEL', null,
2151                                         'oracle.xdb.Model',
2152                                         'oracle.xdb.ModelBean',
2153                                         FALSE, null, null, null);
2154  
2155          ellist(2) := xdb$insertElement(schref, PN_COMPLEXDERIVATION_CHOICE,
2156                                         'choice', xdb.xdb$qname('01', 'modelType'),
2157                                         0, 1, null,
2158                                         T_XOB, FALSE, FALSE, FALSE,
2159                                         'CHOICE_KID', 'XDB$MODEL_T', 'XDB',
2160                                         JT_XMLTYPE,
2161                                         null, null, model_t_ref,null,null,
2162                                         null, model_colcount,
2163                                         FALSE, null, null, FALSE, FALSE,
2164                                         FALSE, FALSE, FALSE,
2165                                         'XDB$CHOICE_MODEL', null,
2166                                         'oracle.xdb.Model',
2167                                         'oracle.xdb.ModelBean',
2168                                         FALSE, null, null, null);
2169  
2170          ellist(3) := xdb$insertElement(schref, PN_COMPLEXDERIVATION_SEQUENCE,
2171                                         'sequence', xdb.xdb$qname('01', 'modelType'),
2172                                         0, 1, null,
2173                                         T_XOB, FALSE, FALSE, FALSE,
2174                                         'SEQUENCE_KID', 'XDB$MODEL_T', 'XDB',
2175                                         JT_XMLTYPE,
2176                                         null, null, model_t_ref,null,null,
2177                                         null, model_colcount,
2178                                         FALSE, null, null, FALSE, FALSE,
2179                                         FALSE, FALSE, FALSE,
2180                                         'XDB$SEQUENCE_MODEL', null,
2181                                         'oracle.xdb.Model',
2182                                         'oracle.xdb.ModelBean',
2183                                         FALSE, null, null, null);
2184  
2185          ellist(4) := xdb$insertElement(schref, PN_COMPLEXDERIVATION_GROUP,
2186                                         'group', xdb.xdb$qname('01', 'groupRefType'),
2187                                         0, 1, null,
2188                                         T_XOB, FALSE, FALSE, FALSE,
2189                                         'GROUP_KID', 'XDB$GROUP_REF_T', 'XDB',
2190                                         JT_XMLTYPE,
2191                                         null, null, groupref_t_ref,null,null,
2192                                         null, groupref_colcount,
2193                                         FALSE, null, null, FALSE, FALSE,
2194                                         FALSE, FALSE, FALSE,
2195                                         'XDB$GROUP_REF', null,
2196                                         'oracle.xdb.Group',
2197                                         'oracle.xdb.GroupBean',
2198                                         FALSE, null, null, null);
2199  
2200  
2201          /* insert choice */
2202          choice_list := xdb.xdb$xmltype_ref_list_t();
2203          choice_list.extend(2);
2204          choice_list(1) := xdb$insertChoice(schref, ellist, null, '1');
2205  
2206          /* construct choice of <attribute>, <anyAttribute> and <attribGrp> */
2207          ellist := xdb.xdb$xmltype_ref_list_t();
2208          ellist.extend(3);
2209          ellist(1) := xdb$insertElement(schref, PN_COMPLEXDERIVATION_ATTRIBUTE,
2210                                         'attribute',
2211                                         xdb.xdb$qname('01', 'attribute'),
2212                                         0, 1, null, T_XOB, FALSE, FALSE,
2213                                         FALSE, 'ATTRIBUTES',
2214                                         'XDB$PROPERTY_T','XDB',
2215                                         JT_XMLTYPE, null, null, null,null,null,
2216                                         null, attr_colcount,
2217                                         FALSE, null, null, FALSE, FALSE,
2218                                         FALSE, FALSE, FALSE,
2219                                         'XDB$ATTRIBUTE', null,
2220                                         'oracle.xdb.Attribute',
2221                                         'oracle.xdb.AttributeBean',
2222                                         FALSE, null, null, null,
2223                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
2224  
2225          ellist(2) := xdb$insertElement(schref, PN_COMPLEXDERIVATION_ANYATTR,
2226                                         'anyAttribute',
2227                                         xdb.xdb$qname('01', 'anyType'),
2228                                         0, 1, null, T_XOB, FALSE, FALSE,
2229                                         FALSE, 'ANY_ATTRS',
2230                                         'XDB$ANY_T','XDB',
2231                                         JT_XMLTYPE, null, null, any_t_ref,null,null,
2232                                         null, any_colcount,
2233                                         FALSE, null, null, FALSE, FALSE,
2234                                         FALSE, FALSE, FALSE,
2235                                         'XDB$ANYATTR', null,
2236                                         'oracle.xdb.anyAttribute',
2237                                         'oracle.xdb.anyAttributeBean',
2238                                         FALSE, 'PROPERTY', null, null,
2239                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
2240  
2241          ellist(3) := xdb$insertElement(schref, PN_COMPLEXDERIVATION_ATTRGROUP,
2242                                         'attributeGroup',
2243                                         xdb.xdb$qname('01', 'attrGroupRefType'),
2244                                         0, 1, null, T_XOB, FALSE, FALSE,
2245                                         FALSE, 'ATTR_GROUPS',
2246                                         'XDB$ATTRGROUP_REF_T','XDB',
2247                                         JT_XMLTYPE, null, null,
2248                                         attrgroupref_t_ref,null,null,
2249                                         null, attrgroupref_colcount,
2250                                         FALSE, null, null, FALSE, FALSE,
2251                                         FALSE, FALSE, FALSE,
2252                                         'XDB$ATTRGROUP_REF', null,
2253                                         'oracle.xdb.attributeGroup',
2254                                         'oracle.xdb.attributeGroupBean',
2255                                         FALSE, null, null, null,
2256                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
2257  
2258          /* insert choice of above */
2259          choice_list(2) := xdb$insertChoice(schref, ellist);
2260  
2261          /* build annotation element */
2262          ellist := xdb.xdb$xmltype_ref_list_t();
2263          ellist.extend(1);
2264          ellist(1) := xdb$insertElement(schref,PN_COMPLEXDERIVATION_ANNOT,
2265                          'annotation', xdb.xdb$qname('01', 'annotation'),
2266                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
2267                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
2268                          JT_STRING, null, null, annotation_t_ref,null,null,
2269                          null, annotation_colcount, FALSE, null, null,
2270                          FALSE, FALSE, TRUE, FALSE, FALSE,
2271                          null, null, null, null, FALSE, null, null, null);
2272  
2273          /* insert sequence of above */
2274          seq_ref := xdb$insertSequence(schref, ellist, null, choice_list);
2275  
2276          complexderv_t_ref := xdb$insertComplex(schref, null,
2277                                                 'complexDerivationType',
2278                                                 null, FALSE, null, '0',
2279                                                 null, null, null, null, null,
2280                                                 null, null, null, null,
2281                                                 null, null,
2282                                                 null, null,
2283                                                 null, null, null, attlist,
2284                                                 null, FALSE, seq_ref);
2285          complexlist(10) := complexderv_t_ref;
2286  
2287  /*--------------------------------------------------------------------------*/
2288  /* Definition of "xdb:smplcontentType" XML element */
2289  /*--------------------------------------------------------------------------*/
2290          attlist := xdb.xdb$xmltype_ref_list_t();
2291          attlist.extend(1);
2292          ellist := xdb.xdb$xmltype_ref_list_t();
2293          ellist.extend(3);
2294  
2295          attlist(1) := xdb$insertAttr(schref, PN_SIMPLECONTENT_ID, 'id',
2296                                  TR_STRING, 0, 1, null,
2297                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
2298                                 'VARCHAR2', null, JT_STRING, null, null,
2299                                 null,null,null);
2300  
2301          ellist(1) := xdb$insertElement(schref,PN_SIMPLECONTENT_ANNOTATION,
2302                          'annotation', xdb.xdb$qname('01', 'annotation'),
2303                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
2304                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
2305                          JT_STRING, null, null, annotation_t_ref,null,null,
2306                          null, annotation_colcount, FALSE, null, null,
2307                          FALSE, FALSE, TRUE, FALSE, FALSE,
2308                          null, null, null, null, FALSE, null, null, null);
2309  
2310          ellist(2) := xdb$insertElement(schref, PN_SIMPLECONTENT_RESTRICTION,
2311                                         'restriction',
2312                                       xdb.xdb$qname('01', 'simpleContentResType'),
2313                                         0, 1, null,
2314                                         T_XOB, FALSE, FALSE, FALSE,
2315                                         'RESTRICTION',
2316                                         'XDB$SIMPLECONT_RES_T', 'XDB',
2317                                         JT_XMLTYPE,
2318                                         null, null, simplecontRes_t_ref,null,null,
2319                                         null, simplecontRes_colcount,
2320                                         FALSE, null, null, FALSE, FALSE,
2321                                         TRUE, FALSE, FALSE,
2322                                         null, null,
2323                                         'oracle.xdb.simpleContentRestriction',
2324                                         'oracle.xdb.simpleContentRestrictionBean',
2325                                         FALSE, null, null, null);
2326  
2327          ellist(3) := xdb$insertElement(schref, PN_SIMPLECONTENT_EXTENSION,
2328                                         'extension',
2329                                       xdb.xdb$qname('01', 'simpleContentExtType'),
2330                                         0, 1, null,
2331                                         T_XOB, FALSE, FALSE, FALSE,
2332                                         'EXTENSION',
2333                                         'XDB$SIMPLECONT_EXT_T', 'XDB',
2334                                         JT_XMLTYPE,
2335                                         null, null, simplecontExt_t_ref,null,null,
2336                                         null, simplecontExt_colcount,
2337                                         FALSE, null, null, FALSE, FALSE,
2338                                         TRUE, FALSE, FALSE,
2339                                         null, null,
2340                                         'oracle.xdb.simpleContentExtension',
2341                                         'oracle.xdb.simpleContentExtensionBean',
2342                                         FALSE, null, null, null);
2343  
2344          smplcont_t_ref := xdb$insertComplex(schref, null,
2345                                             'smplcontentType',
2346                                             null, FALSE, null, '0',
2347                                             null, null, null, null, null,
2348                                             null, null, null, null,
2349                                             null, null,
2350                                             null, null,
2351                                             null, null, ellist, attlist);
2352          complexlist(29) := smplcont_t_ref;
2353  
2354  /*--------------------------------------------------------------------------*/
2355  /* Definition of "xdb:cplxcontentType" XML element */
2356  /*--------------------------------------------------------------------------*/
2357          attlist := xdb.xdb$xmltype_ref_list_t();
2358          attlist.extend(2);
2359          ellist := xdb.xdb$xmltype_ref_list_t();
2360          ellist.extend(3);
2361  
2362          attlist(1) := xdb$insertAttr(schref, PN_CONTENT_MIXED,
2363                                       'mixed', TR_BOOLEAN, 0, 1,null,
2364                                       T_BOOLEAN, FALSE, FALSE, FALSE,
2365                                       'MIXED', 'RAW', null, JT_BOOLEAN,
2366                                       'false', null, null,null,null);
2367  
2368          attlist(2) := xdb$insertAttr(schref, PN_CONTENT_ID, 'id',
2369                                  TR_STRING, 0, 1, null,
2370                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
2371                                 'VARCHAR2', null, JT_STRING, null, null,
2372                                 null,null,null);
2373  
2374          ellist(1) := xdb$insertElement(schref,PN_CONTENT_ANNOTATION,
2375                          'annotation', xdb.xdb$qname('01', 'annotation'),
2376                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
2377                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
2378                          JT_STRING, null, null, annotation_t_ref,null,null,
2379                          null, annotation_colcount, FALSE, null, null,
2380                          FALSE, FALSE, TRUE, FALSE, FALSE,
2381                          null, null, null, null, FALSE, null, null, null);
2382  
2383          ellist(2) := xdb$insertElement(schref, PN_CONTENT_RESTRICTION,
2384                                         'restriction',
2385                                       xdb.xdb$qname('01', 'complexDerivationType'),
2386                                         0, 1, null,
2387                                         T_XOB, FALSE, FALSE, FALSE,
2388                                         'RESTRICTION',
2389                                         'XDB$COMPLEX_DERIVATION_T', 'XDB',
2390                                         JT_XMLTYPE,
2391                                         null, null, complexderv_t_ref,null,null,
2392                                         null, complexder_colcount,
2393                                         FALSE, null, null, FALSE, FALSE,
2394                                         TRUE, FALSE, FALSE,
2395                                         null, null,
2396                                         'oracle.xdb.complexDerivation',
2397                                         'oracle.xdb.complexDerivationBean',
2398                                         FALSE, null, null, null);
2399  
2400          ellist(3) := xdb$insertElement(schref, PN_CONTENT_EXTENSION,
2401                                         'extension',
2402                                       xdb.xdb$qname('01', 'complexDerivationType'),
2403                                         0, 1, null,
2404                                         T_XOB, FALSE, FALSE, FALSE,
2405                                         'EXTENSION',
2406                                         'XDB$COMPLEX_DERIVATION_T', 'XDB',
2407                                         JT_XMLTYPE,
2408                                         null, null, complexderv_t_ref,null,null,
2409                                         null, complexder_colcount,
2410                                         FALSE, null, null, FALSE, FALSE,
2411                                         TRUE, FALSE, FALSE,
2412                                         null, null,
2413                                         'oracle.xdb.complexDerivation',
2414                                         'oracle.xdb.complexDerivationBean',
2415                                         FALSE, null, null, null);
2416  
2417          content_t_ref := xdb$insertComplex(schref, null,
2418                                             'cplxcontentType',
2419                                             null, FALSE, null, '0',
2420                                             null, null, null, null, null,
2421                                             null, null, null, null,
2422                                             null, null,
2423                                             null, null,
2424                                             null, null, ellist, attlist);
2425          complexlist(11) := content_t_ref;
2426  
2427  
2428  /*--------------------------------------------------------------------------*/
2429  /* Definition of "xdb:complexType" XML element.
2430   * Note that this does not strictly match the W3C schema for schemas. We
2431   * will accept a superset of W3C schemas but schema validator will catch these.
2432   *
2433   *       complexType :=
2434   *                             -- annotation (0..1)
2435   *                            |
2436   *                            |             simpleContent  (0..1)
2437   *                             -- choice -- complexContent (0..1)
2438   *                            |             group          (0..1)
2439   *          sequence ---------|             all            (0..1)
2440   *                            |             sequence       (0..1)
2441   *                            |             choice         (0..1)
2442   *                            |
2443   *                            |             attribute      (0..1)
2444   *                             -- choice -- attributeGrp   (0..1)
2445   *                               (0..unb)   anyAttribute   (0..1)
2446   *
2447   *--------------------------------------------------------------------------*/
2448  
2449          attlist := xdb.xdb$xmltype_ref_list_t();
2450          attlist.extend(12);
2451  
2452          attlist(1) := xdb$insertAttr(schref, PN_COMPLEXTYPE_PARENTSCHEMA,
2453                                       'parentSchema',
2454                                       xdb.xdb$qname('00','REF'), 0, 1,
2455                                       null, T_REF, TRUE, FALSE, FALSE,
2456                                       'PARENT_SCHEMA', 'REF', null,
2457                                       JT_REFERENCE,
2458                                       null, null, null,null,null,
2459                                       null, null, '01');
2460          attlist(2) := xdb$insertAttr(schref, PN_COMPLEXTYPE_NAME,
2461                                       'name', TR_STRING, 1, 1, null,
2462                                       T_CSTRING, FALSE, FALSE, FALSE, 'NAME',
2463                                       'VARCHAR2', null, JT_STRING, null, null,
2464                                       null,null,null);
2465          attlist(3) := xdb$insertAttr(schref, PN_COMPLEXTYPE_ABSTRACT,
2466                                       'abstract', TR_BOOLEAN, 0, 1,null,
2467                                       T_BOOLEAN, FALSE, FALSE, FALSE,
2468                                       'ABSTRACT', 'RAW', null, JT_BOOLEAN,
2469                                       'false', null, null,null,null);
2470          attlist(4) := xdb$insertAttr(schref, PN_COMPLEXTYPE_MIXED,
2471                                       'mixed', TR_BOOLEAN, 0, 1,null,
2472                                       T_BOOLEAN, FALSE, FALSE, FALSE,
2473                                       'MIXED', 'RAW', null, JT_BOOLEAN,
2474                                       'false', null, null,null,null);
2475          attlist(5) := xdb$insertAttr(schref, PN_COMPLEXTYPE_FINAL, 'final',
2476                                 xdb.xdb$qname('01', 'derivationChoice'), 0, 1,
2477                                 null, T_ENUM, FALSE, FALSE, FALSE, 'FINAL_INFO',
2478                                 'XDB$DERIVATIONCHOICE', 'XDB', JT_ENUM,
2479                                 null, null, drv_choice_ref,null,null);
2480          attlist(6) := xdb$insertAttr(schref, PN_COMPLEXTYPE_BLOCK, 'block',
2481                                 xdb.xdb$qname('01', 'derivationChoice'), 0, 1,
2482                                 null, T_ENUM, FALSE, FALSE, FALSE, 'BLOCK',
2483                                 'XDB$DERIVATIONCHOICE', 'XDB', JT_ENUM,
2484                                 null, null, drv_choice_ref,null,null);
2485          attlist(7) := xdb$insertAttr(schref, PN_COMPLEXTYPE_SQLTYPE,
2486                                 'SQLType', TR_STRING, 1, 1,null,
2487                                 T_CSTRING, TRUE, FALSE, FALSE, 'SQLTYPE',
2488                                 'VARCHAR2', null, JT_STRING, null, null,
2489                                 null,null,null);
2490          attlist(8) := xdb$insertAttr(schref, PN_COMPLEXTYPE_SQLSCHEMA,
2491                                 'SQLSchema', TR_STRING, 1, 1,null,
2492                                 T_CSTRING, TRUE, FALSE, FALSE, 'SQLSCHEMA',
2493                                 'VARCHAR2', null, JT_STRING, null, null,
2494                                 null,null,null);
2495          attlist(9) := xdb$insertAttr(schref, PN_COMPLEXTYPE_MAINTAINDOM,
2496                                 'maintainDOM', TR_BOOLEAN, 0,1,
2497                                  null, T_BOOLEAN, TRUE, FALSE, FALSE,
2498                                 'MAINTAIN_DOM', 'RAW', null, JT_BOOLEAN,
2499                                 'true', null, null,null,null);
2500          attlist(10) := xdb$insertAttr(schref, PN_COMPLEXTYPE_BASETYPE,
2501                                       'baseType', xdb.xdb$qname('00', 'REF'), 0, 1,
2502                                       null, T_REF, TRUE, FALSE, FALSE,
2503                                       'BASE_TYPE', 'REF', null, JT_REFERENCE,
2504                                       null, null, null,null,null,
2505                                       null, null, '01');
2506          attlist(11) := xdb$insertAttr(schref, PN_COMPLEXTYPE_ID, 'id',
2507                                  TR_STRING, 0, 1, null,
2508                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
2509                                 'VARCHAR2', null, JT_STRING, null, null,
2510                                 null,null,null);
2511          attlist(12) := xdb$insertAttr(schref, PN_COMPLEXTYPE_TYPEID, 'typeID',
2512                                 TR_INT, 0, 1, null,
2513                                 T_UNSIGNINT, TRUE, FALSE, FALSE, 'TYPEID',
2514                                 'NUMBER', null, JT_INT, null, null, null,null,
2515                                  null);
2516  
2517  
2518          /* construct a choice of <simpleContent>, <complexContent>,
2519           * <group>, <all>, <seq>, <choice>
2520           */
2521          ellist := xdb.xdb$xmltype_ref_list_t();
2522          ellist.extend(6);
2523  
2524          ellist(1) := xdb$insertElement(schref, PN_COMPLEXTYPE_CHOICE,
2525                                       'choice', xdb.xdb$qname('01','modelType'),
2526                                         0, 1, null,
2527                                         T_XOB, FALSE, FALSE, FALSE,
2528                                         'CHOICE_KID', 'XDB$MODEL_T', 'XDB',
2529                                         JT_XMLTYPE,
2530                                         null, null, model_t_ref,null,null,
2531                                         null, model_colcount,
2532                                         FALSE, null, null, FALSE, FALSE,
2533                                         FALSE, FALSE, FALSE,
2534                                         'XDB$CHOICE_MODEL', null,
2535                                         'oracle.xdb.Model',
2536                                         'oracle.xdb.ModelBean',
2537                                         FALSE, null, null, null);
2538  
2539          ellist(2) := xdb$insertElement(schref, PN_COMPLEXTYPE_SEQUENCE,
2540                                         'sequence', xdb.xdb$qname('01', 'modelType'),
2541                                         0, 1, null,
2542                                         T_XOB, FALSE, FALSE, FALSE,
2543                                         'SEQUENCE_KID', 'XDB$MODEL_T', 'XDB',
2544                                         JT_XMLTYPE,
2545                                         null, null, model_t_ref,null,null,
2546                                         null, model_colcount,
2547                                         FALSE, null, null, FALSE, FALSE,
2548                                         FALSE, FALSE, FALSE,
2549                                         'XDB$SEQUENCE_MODEL', null,
2550                                         'oracle.xdb.Model',
2551                                         'oracle.xdb.ModelBean',
2552                                         FALSE, null, null, null);
2553  
2554          ellist(3) := xdb$insertElement(schref, PN_COMPLEXTYPE_GROUP,
2555                                         'group', xdb.xdb$qname('01', 'groupRefType'),
2556                                         0, 1, null,
2557                                         T_XOB, FALSE, FALSE, FALSE,
2558                                         'GROUP_KID', 'XDB$GROUP_REF_T', 'XDB',
2559                                         JT_XMLTYPE,
2560                                         null, null, groupref_t_ref,null,null,
2561                                         null, groupref_colcount,
2562                                         FALSE, null, null, FALSE, FALSE,
2563                                         FALSE, FALSE, FALSE,
2564                                         'XDB$GROUP_REF', null,
2565                                         'oracle.xdb.Group',
2566                                         'oracle.xdb.GroupBean',
2567                                         FALSE, null, null, null);
2568  
2569          ellist(4) := xdb$insertElement(schref, PN_COMPLEXTYPE_ALL,
2570                                         'all', xdb.xdb$qname('01', 'modelType'),
2571                                         0, 1, null,
2572                                         T_XOB, FALSE, FALSE, FALSE,
2573                                         'ALL_KID', 'XDB$MODEL_T', 'XDB',
2574                                         JT_XMLTYPE,
2575                                         null, null, model_t_ref,null,null,
2576                                         null, model_colcount,
2577                                         FALSE, null, null, FALSE, FALSE,
2578                                         FALSE, FALSE, FALSE,
2579                                         'XDB$ALL_MODEL', null,
2580                                         'oracle.xdb.Model',
2581                                         'oracle.xdb.ModelBean',
2582                                         FALSE, null, null, null);
2583  
2584          ellist(5) := xdb$insertElement(schref, PN_COMPLEXTYPE_SIMPLECONTENT,
2585                                         'simpleContent',
2586                                       xdb.xdb$qname('01', 'smplcontentType'),
2587                                         0, 1, null,
2588                                         T_XOB, FALSE, FALSE, FALSE,
2589                                         'SIMPLECONT',
2590                                         'XDB$SIMPLECONTENT_T', 'XDB',
2591                                         JT_XMLTYPE,
2592                                         null, null, smplcont_t_ref,null,null,
2593                                         null, smplcont_colcount,
2594                                         FALSE, null, null, FALSE, FALSE,
2595                                         TRUE, FALSE, FALSE,
2596                                         null, null,
2597                                         'oracle.xdb.simpleContent',
2598                                         'oracle.xdb.simpleContent',
2599                                         FALSE, null, null, null);
2600  
2601          ellist(6) := xdb$insertElement(schref, PN_COMPLEXTYPE_COMPLEXCONTENT,
2602                                         'complexContent',
2603                                         xdb.xdb$qname('01', 'cplxcontentType'),
2604                                         0, 1, null,
2605                                         T_XOB, FALSE, FALSE, FALSE,
2606                                         'COMPLEXCONTENT',
2607                                         'XDB$CONTENT_T', 'XDB',
2608                                         JT_XMLTYPE,
2609                                         null, null, content_t_ref,null,null,
2610                                         null, content_colcount,
2611                                         FALSE, null, null, FALSE, FALSE,
2612                                         TRUE, FALSE, FALSE,
2613                                         null, null,
2614                                         'oracle.xdb.content',
2615                                         'oracle.xdb.content',
2616                                         FALSE, null, null, null);
2617  
2618          /* Insert these as a choice */
2619          choice_list := xdb.xdb$xmltype_ref_list_t();
2620          choice_list.extend(2);
2621          choice_list(1) := xdb$insertChoice(schref, ellist, null, '1');
2622  
2623          /* Construct a choice of <attribute>, <attributeGroup> and
2624           * <anyAttribute>
2625           */
2626          ellist := xdb.xdb$xmltype_ref_list_t();
2627          ellist.extend(3);
2628  
2629          ellist(1) := xdb$insertElement(schref, PN_COMPLEXTYPE_ATTRIBUTE,
2630                                         'attribute',
2631                                         xdb.xdb$qname('01', 'attribute'),
2632                                         0, 1, null, T_XOB, FALSE,
2633                                         FALSE, FALSE, 'ATTRIBUTES',
2634                                         'XDB$PROPERTY_T','XDB',JT_XMLTYPE,
2635                                         null, null, null,null,null,
2636                                         null, attr_colcount,
2637                                         FALSE, null, null, FALSE, FALSE,
2638                                         FALSE, FALSE, FALSE,
2639                                         'XDB$ATTRIBUTE', null,
2640                                         'oracle.xdb.Attribute',
2641                                         'oracle.xdb.AttributeBean', FALSE,
2642                                         null, null, null,
2643                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
2644  
2645          ellist(2) := xdb$insertElement(schref, PN_COMPLEXTYPE_ATTRGROUP,
2646                                         'attributeGroup',
2647                                         xdb.xdb$qname('01', 'attrGroupRefType'),
2648                                         0, 1, null, T_XOB, FALSE, FALSE,
2649                                         FALSE, 'ATTR_GROUPS',
2650                                         'XDB$ATTRGROUP_REF_T','XDB',
2651                                         JT_XMLTYPE, null, null,
2652                                         attrgroupref_t_ref,null,null,
2653                                         null, attrgroupref_colcount,
2654                                         FALSE, null, null, FALSE, FALSE,
2655                                         FALSE, FALSE, FALSE,
2656                                         'XDB$ATTRGROUP_REF', null,
2657                                         'oracle.xdb.attributeGroup',
2658                                         'oracle.xdb.attributeGroupBean',
2659                                         FALSE, null, null, null,
2660                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
2661  
2662          ellist(3) := xdb$insertElement(schref, PN_COMPLEXTYPE_ANYATTR,
2663                                         'anyAttribute',
2664                                         xdb.xdb$qname('01', 'anyType'),
2665                                         0, 1, null, T_XOB, FALSE,
2666                                         FALSE, FALSE, 'ANY_ATTRS',
2667                                         'XDB$ANY_T','XDB',JT_XMLTYPE,
2668                                         null, null, any_t_ref,null,null,
2669                                         null, any_colcount,
2670                                         FALSE, null, null, FALSE, FALSE,
2671                                         FALSE, FALSE, FALSE,
2672                                         'XDB$ANYATTR', null,
2673                                         'oracle.xdb.anyAttribute',
2674                                         'oracle.xdb.anyAttributeBean', FALSE,
2675                                         'PROPERTY', null, null,
2676                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
2677  
2678          /* Insert these as a choice */
2679          choice_list(2) := xdb$insertChoice(schref, ellist);
2680  
2681          ellist := xdb.xdb$xmltype_ref_list_t();
2682          ellist.extend(2);
2683          ellist(1) := xdb$insertElement(schref, PN_COMPLEXTYPE_ANNOTATION,
2684                          'annotation', xdb.xdb$qname('01', 'annotation'),
2685                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
2686                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
2687                          JT_STRING, null, null, annotation_t_ref,null,null,
2688                          null, annotation_colcount, FALSE, null, null,
2689                          FALSE, FALSE, TRUE, FALSE, FALSE,
2690                          null, null, null, null, FALSE, null, null, null);
2691  
2692          ellist(2) := xdb$insertElement(schref, PN_COMPLEXTYPE_SUBTYPEREF,
2693                               'subtypeRef',xdb.xdb$qname('00', 'REF'), 0, 1000,null,
2694                                T_REF, TRUE, FALSE, FALSE, 'SUBTYPE_REFS',
2695                         'REF', null, JT_REFERENCE, null, null, null,null,null,
2696                   null, 0, FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
2697                   null, null, null, null, FALSE, null, null, null,
2698                                         'XDB$XMLTYPE_REF_LIST_T','XDB', '01');
2699  
2700  
2701          /* insert the sequence */
2702          seq_ref := xdb$insertSequence(schref, ellist, null, choice_list);
2703  
2704          complex_t_ref := xdb$insertComplex(schref, null,
2705                         'complexType', null, FALSE,
2706                         null, '0', null, null, null, null, null, null,
2707                         null, null, null, null, null,
2708                         null, null, null, null, null, attlist, null, FALSE,
2709                         seq_ref);
2710          complexlist(6) := complex_t_ref;
2711  
2712  
2713          ctype_propnum := 29;
2714          schels(3) := xdb$insertElement(schref, ctype_propnum,
2715                          'complexType',
2716                           xdb.xdb$qname('01','complexType'), 0, 1, null,
2717                           T_XOB, FALSE, FALSE, FALSE, 'COMPLEX_TYPES',
2718                           'XDB$COMPLEX_T', 'XDB', JT_XMLTYPE, null, null,
2719                           complex_t_ref,null,null,
2720                  xdb.xdb$qname('01', 'schemaTop'), complex_colcount,
2721                  FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
2722                  'XDB$COMPLEX_TYPE', null, 'oracle.xdb.ComplexType',
2723                  'oracle.xdb.ComplexTypeBean', TRUE, null, null, null,
2724                          'XDB$XMLTYPE_REF_LIST_T','XDB');
2725  
2726  /*--------------------------------------------------------------------------*/
2727  /* Definition of "xdb:attribute" XML element */
2728  /*--------------------------------------------------------------------------*/
2729  
2730  
2731          attlist := xdb.xdb$xmltype_ref_list_t();
2732          attlist.extend(26);
2733          attlist(1) := xdb$insertAttr(schref, 30, 'parentSchema',
2734                                 xdb.xdb$qname('00','REF'), 0, 1,
2735                                 null, T_REF, TRUE, FALSE, FALSE,
2736                                 'PARENT_SCHEMA', 'REF', null, JT_REFERENCE,
2737                                 null, null, null,null,null,
2738                                 null, null, '01');
2739          attlist(2) := xdb$insertAttr(schref, 31, 'propNumber', TR_INT, 0, 1, null,
2740                                 T_UNSIGNINT, TRUE, FALSE, FALSE, 'PROP_NUMBER',
2741                                 'NUMBER', null, JT_INT, '0', null, null,null,null);
2742          attlist(3) := xdb$insertAttr(schref, 32, 'name', TR_STRING, 1, 1, null,
2743                                 T_CSTRING, FALSE, FALSE, FALSE, 'NAME',
2744                                 'VARCHAR2', null, JT_STRING, null, null, null,null,null);
2745          attlist(4) := xdb$insertAttr(schref, 33, 'type',
2746                                 xdb.xdb$qname('00', 'QName'), 0, 1, null,
2747                                 T_QNAME, FALSE, FALSE, FALSE, 'TYPENAME',
2748                                 'XDB$QNAME', 'XDB', JT_QNAME,
2749                                 null, null, null,null,null);
2750  
2751          attlist(5) := xdb$insertAttr(schref, 36, 'memByteLength', TR_INT, 0,
2752                                  1, '2', T_INTEGER, TRUE, FALSE, FALSE,
2753                                 'MEM_BYTE_LENGTH', 'RAW', null, JT_SHORT, null,
2754                                 null, null,null,null);
2755  
2756          attlist(6) := xdb$insertAttr(schref, 37, 'memType', TR_INT, 0,
2757                                  1, '2', T_INTEGER, TRUE, FALSE, FALSE,
2758                                 'MEM_TYPE_CODE', 'RAW', null, JT_SHORT, null,
2759                                 null, null,null,null);
2760  
2761          attlist(7) := xdb$insertAttr(schref, 38, 'system', TR_BOOLEAN, 0, 1, null,
2762                                 T_BOOLEAN, TRUE, FALSE, FALSE, 'SYSTEM',
2763                                 'RAW', null, JT_BOOLEAN, 'false', null, null,null,null);
2764  
2765          attlist(8) := xdb$insertAttr(schref, 39, 'mutable', TR_BOOLEAN, 0, 1, null,
2766                                 T_BOOLEAN, TRUE, FALSE, FALSE, 'MUTABLE',
2767                                 'RAW', null, JT_BOOLEAN, 'false', null, null,null,null);
2768  
2769          attlist(9) := xdb$insertAttr(schref, 40, 'form',
2770                                 xdb.xdb$qname('01','formChoice'), 0, 1,
2771                                 '01', T_ENUM, FALSE, FALSE, FALSE,
2772                                 'FORM', 'XDB$FORMCHOICE', 'XDB',
2773                                 JT_ENUM, null, null, form_choice_ref,null,null);
2774  
2775          attlist(10) := xdb$insertAttr(schref, 41, 'SQLName', TR_STRING, 1, 1, null,
2776                                 T_CSTRING, TRUE, FALSE, FALSE, 'SQLNAME',
2777                                 'VARCHAR2', null, JT_STRING, null, null, null,null,null);
2778  
2779          attlist(11) := xdb$insertAttr(schref, 42, 'SQLType', TR_STRING, 1, 1,null,
2780                                 T_CSTRING, TRUE, FALSE, FALSE, 'SQLTYPE',
2781                                 'VARCHAR2', null, JT_STRING, null, null, null,null,null);
2782  
2783          attlist(12) := xdb$insertAttr(schref, 43, 'SQLSchema', TR_STRING, 1, 1,null,
2784                                 T_CSTRING, TRUE, FALSE, FALSE, 'SQLSCHEMA',
2785                                 'VARCHAR2', null, JT_STRING, null, null, null,null,null);
2786  
2787          attlist(13) := xdb$insertAttr(schref, 44, 'JavaType',
2788                                  xdb.xdb$qname('01', 'javatype'), 1, 1, null,
2789                                 T_ENUM, TRUE, FALSE, FALSE, 'JAVA_TYPE',
2790                                 'XDB$JAVATYPE', 'XDB', JT_ENUM, null, null,
2791                                 javatype_ref,null,null);
2792  
2793          attlist(14) := xdb$insertAttr(schref, 45, 'default', TR_STRING, 1, 1, null,
2794                                 T_CSTRING, FALSE, FALSE, FALSE, 'DEFAULT_VALUE',
2795                                 'VARCHAR2', null, JT_STRING, null, null, null,null,null);
2796  
2797          attlist(15) := xdb$insertAttr(schref, 46, 'typeRef',
2798                                 xdb.xdb$qname('00','REF'), 0, 1,
2799                                 null, T_REF, TRUE, FALSE, FALSE,
2800                                 'TYPE_REF', 'REF', null, JT_REFERENCE,
2801                                 null, null, null,null,null,
2802                                 null, null, '01');
2803  
2804          attlist(16) := xdb$insertAttr(schref, 84, 'ref',
2805                                   xdb.xdb$qname('00', 'QName'), 0,1, null,
2806                                   T_QNAME, FALSE, FALSE, FALSE,
2807                                   'PROPREF_NAME', 'XDB$QNAME', 'XDB',
2808                                   JT_QNAME, null, null,null,null,null);
2809  
2810          attlist(17) := xdb$insertAttr(schref, 85, 'refRef',
2811                                   xdb.xdb$qname('00', 'REF'), 0,1, null,
2812                                   T_REF, TRUE, FALSE, FALSE,
2813                                   'PROPREF_REF', 'REF', null,
2814                                   JT_REFERENCE, null, null,null,null,null,
2815                                   null, null, '01');
2816  
2817          attlist(18) := xdb$insertAttr(schref, PN_ATTRIBUTE_USE, 'use',
2818                                 xdb.xdb$qname('01','useChoice'), 0, 1,
2819                                 '01', T_ENUM, FALSE, FALSE, FALSE,
2820                                 'ATTR_USE', 'XDB$USECHOICE', 'XDB',
2821                                 JT_ENUM, null, null, use_choice_ref,null,null);
2822  
2823          attlist(19) := xdb$insertAttr(schref, PN_ATTRIBUTE_FIXED, 'fixed',
2824                                        TR_STRING, 1, 1, null,
2825                                        T_CSTRING, FALSE, FALSE, FALSE,
2826                                        'FIXED_VALUE', 'VARCHAR2', null,
2827                                        JT_STRING, null, null, null,null,null);
2828  
2829          attlist(20) := xdb$insertAttr(schref,63, 'global', TR_BOOLEAN,1,1,null,
2830                                        T_BOOLEAN, TRUE, FALSE, FALSE,
2831                                        'GLOBAL', 'RAW', null,
2832                                        JT_BOOLEAN, null, null, null,null,null);
2833  
2834          attlist(21) := xdb$insertAttr(schref, PN_ATTR_SQLCOLLTYPE,
2835                                 'SQLCollType', TR_STRING, 1, 1,null,
2836                                 T_CSTRING, TRUE, FALSE, FALSE, 'SQLCOLLTYPE',
2837                                 'VARCHAR2', null, JT_STRING, null, null, null,
2838                                 null,null);
2839  
2840          attlist(22) := xdb$insertAttr(schref, PN_ATTR_SQLCOLLSCHEMA,
2841                                 'SQLCollSchema', TR_STRING, 1, 1,null,
2842                                 T_CSTRING, TRUE, FALSE, FALSE, 'SQLCOLLSCHEMA',
2843                                 'VARCHAR2', null, JT_STRING, null, null,
2844                                 null,null,null);
2845  
2846          attlist(23) := xdb$insertAttr(schref, PN_ATTR_HIDDEN, 'hidden',
2847                                 TR_BOOLEAN, 0, 1, null,
2848                                 T_BOOLEAN, TRUE, FALSE, FALSE, 'HIDDEN',
2849                                 'RAW', null, JT_BOOLEAN, 'false', null,
2850                                 null,null,null);
2851  
2852          attlist(24) := xdb$insertAttr(schref, PN_ATTR_TRANSIENT, 'transient',
2853                                 xdb.xdb$qname('01','transientChoice'), 0, 1, '01',
2854                                 T_ENUM, TRUE, FALSE, FALSE, 'TRANSIENT',
2855                                 'XDB$TRANSIENTCHOICE', 'XDB', JT_ENUM,
2856                                 null, null, transient_choice_ref, null, null);
2857  
2858          attlist(25) := xdb$insertAttr(schref, PN_ATTR_ID, 'id',
2859                                  TR_STRING, 0, 1, null,
2860                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
2861                                 'VARCHAR2', null, JT_STRING, null, null,
2862                                 null,null,null);
2863  
2864          attlist(26) := xdb$insertAttr(schref, PN_ATTR_BASEPROP, 'baseProp',
2865                                 TR_BOOLEAN, 0, 1, null,
2866                                 T_BOOLEAN, TRUE, FALSE, FALSE, 'BASEPROP',
2867                                 'RAW', null, JT_BOOLEAN, 'false', null,
2868                                 null,null,null);
2869  
2870          ellist := xdb.xdb$xmltype_ref_list_t();
2871          ellist.extend(2);
2872  
2873          ellist(1) := xdb$insertElement(schref, PN_ATTRIBUTE_ANNOTATION,
2874                          'annotation', xdb.xdb$qname('01', 'annotation'),
2875                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
2876                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
2877                          JT_STRING, null, null, annotation_t_ref,null,null,
2878                          null, annotation_colcount, FALSE, null, null,
2879                          FALSE, FALSE, TRUE, FALSE, FALSE,
2880                          null, null, null, null, FALSE, null, null, null);
2881  
2882          ellist(2) := xdb$insertElement(schref, 47,
2883                          'simpleType', xdb.xdb$qname('01','simpleType'),
2884                           0, 1, null,
2885                           T_XOB, FALSE, FALSE, FALSE, 'SMPL_TYPE_DECL',
2886                           'XDB$SIMPLE_T', 'XDB', JT_XMLTYPE, null, null,
2887                           simple_t_ref,null,null,
2888                           null, simple_colcount,
2889                  FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
2890                  'XDB$SIMPLE_TYPE', null, 'oracle.xdb.SimpleType',
2891                  'oracle.xdb.SimpleTypeBean', FALSE, null, null, null);
2892  
2893          attr_t_ref := xdb$insertComplex(schref, null, 'attribute',
2894                                  null, FALSE, null, '0',
2895                         null, null, null, null, null, null, null, null, null,
2896                         null, null,
2897                  null, null, null, null, ellist, attlist);
2898          complexlist(7) := attr_t_ref;
2899  
2900  
2901          attr_propnum := 48;
2902          schels(4) := xdb$insertElement(schref, attr_propnum,
2903                          'attribute', xdb.xdb$qname('01','attribute'), 0,1,
2904                           null, T_XOB, FALSE, FALSE, FALSE, 'ATTRIBUTES',
2905                          'XDB$PROPERTY_T', 'XDB', JT_XMLTYPE, null, null,
2906                          attr_t_ref,null,null,
2907                  xdb.xdb$qname('01', 'schemaTop'), attr_colcount,
2908                  FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
2909                  'XDB$ATTRIBUTE', null, 'oracle.xdb.Attribute',
2910                  'oracle.xdb.AttributeBean', TRUE, null, null, null,
2911                          'XDB$XMLTYPE_REF_LIST_T','XDB');
2912  
2913          execute immediate 'update xdb.xdb$element e set
2914                  e.xmldata.property.type_ref =
2915                  :1 where e.xmldata.property.typename.name = ''attribute'''
2916                  using attr_t_ref;
2917  
2918  
2919  /*--------------------------------------------------------------------------*/
2920  /* Definition of "xdb:element" XML element */
2921  /*--------------------------------------------------------------------------*/
2922  
2923          attlist := xdb.xdb$xmltype_ref_list_t();
2924          attlist.extend(26);
2925  
2926          attlist(1) := xdb$insertAttr(schref, 49, 'baseSQLname',
2927                                 TR_STRING, 0, 1,
2928                                 null, T_CSTRING, TRUE, FALSE, FALSE,
2929                                 'BASE_SQLNAME', 'VARCHAR2', null, JT_STRING,
2930                                 null, null, null,null,null);
2931  
2932          attlist(2) := xdb$insertAttr(schref, 50, 'substitutionGroup',
2933                                  xdb.xdb$qname('00', 'QName'), 0,1,null,
2934                                 T_QNAME, FALSE, FALSE, FALSE, 'SUBS_GROUP',
2935                                 'XDB$QNAME', 'XDB', JT_QNAME, null, null, null,null,null);
2936  
2937          attlist(3) := xdb$insertAttr(schref, 51, 'nillable', TR_BOOLEAN, 0, 1,null,
2938                                 T_BOOLEAN, FALSE, FALSE, FALSE, 'NILLABLE',
2939                                 'RAW', null, JT_BOOLEAN, 'false', null, null,null,null);
2940  
2941          attlist(4) := xdb$insertAttr(schref, 52, 'final',
2942                                 xdb.xdb$qname('01','derivationChoice'), 0, 1,
2943                                 null, T_ENUM, FALSE, FALSE, FALSE, 'FINAL_INFO',
2944                                 'XDB$DERIVATIONCHOICE', 'XDB', JT_ENUM,
2945                                 null, null, drv_choice_ref,null,null);
2946  
2947          attlist(5) := xdb$insertAttr(schref, 53, 'block',
2948                                 xdb.xdb$qname('01','derivationChoice'), 0, 1,
2949                                 null, T_ENUM, FALSE, FALSE, FALSE, 'BLOCK',
2950                                 'XDB$DERIVATIONCHOICE', 'XDB', JT_ENUM,
2951                                 null, null, drv_choice_ref,null,null);
2952  
2953          attlist(6) := xdb$insertAttr(schref, 54, 'abstract', TR_BOOLEAN, 0, 1,null,
2954                                 T_BOOLEAN, FALSE, FALSE, FALSE, 'ABSTRACT',
2955                                 'RAW', null, JT_BOOLEAN, 'false', null, null,null,null);
2956  
2957          attlist(7) := xdb$insertAttr(schref, 55, 'SQLInline', TR_BOOLEAN,0,1,null,
2958                                 T_BOOLEAN, TRUE, FALSE, FALSE, 'SQL_INLINE',
2959                                 'RAW', null, JT_BOOLEAN, 'false', null, null,null,null);
2960  
2961          attlist(8) := xdb$insertAttr(schref, 56,'JavaInline', TR_BOOLEAN,0,1,null,
2962                                 T_BOOLEAN, TRUE, FALSE, FALSE, 'JAVA_INLINE',
2963                                 'RAW', null, JT_BOOLEAN, 'false', null, null,null,null);
2964  
2965          attlist(9) := xdb$insertAttr(schref, 57,'MemInline', TR_BOOLEAN, 0,1,null,
2966                                 T_BOOLEAN, TRUE, FALSE, FALSE, 'MEM_INLINE',
2967                                 'RAW', null, JT_BOOLEAN, 'false', null, null,null,null);
2968  
2969          attlist(10) := xdb$insertAttr(schref, 58, 'maintainDOM', TR_BOOLEAN, 0,1,
2970                                  null, T_BOOLEAN, TRUE, FALSE, FALSE,
2971                                 'MAINTAIN_DOM', 'RAW', null, JT_BOOLEAN,
2972                                 'true', null, null,null,null);
2973  
2974          attlist(11) := xdb$insertAttr(schref, 59,'defaultTable', TR_STRING,0,1,null,
2975                                 T_CSTRING, TRUE, FALSE, FALSE,'DEFAULT_TABLE',
2976                                 'VARCHAR2', null, JT_STRING, null, null, null,null,null);
2977  
2978          attlist(12) := xdb$insertAttr(schref, PN_ELEMENT_DEFTABLESCHEMA,
2979                                 'defaultTableSchema',
2980                                 TR_STRING,0,1,null,
2981                                 T_CSTRING, TRUE, FALSE, FALSE,
2982                                 'DEFAULT_TABLE_SCHEMA',
2983                                 'VARCHAR2', null, JT_STRING, null,
2984                                 null, null,null,null);
2985  
2986          attlist(13) := xdb$insertAttr(schref,60,'tableProps', TR_STRING,0,1,null,
2987                                 T_CSTRING, TRUE, FALSE, FALSE, 'TABLE_PROPS',
2988                                 'VARCHAR2', null, JT_STRING, null, null, null,null,null);
2989  
2990          attlist(14) := xdb$insertAttr(schref,61,'JavaClassname',TR_STRING,0,1,null,
2991                                 T_CSTRING, TRUE, FALSE, FALSE,'JAVA_CLASSNAME',
2992                                 'VARCHAR2', null, JT_STRING, null, null, null,null,null);
2993  
2994          attlist(15) := xdb$insertAttr(schref,62,'beanClassname', TR_STRING,0,1,null,
2995                                 T_CSTRING, TRUE, FALSE, FALSE,'BEAN_CLASSNAME',
2996                                 'VARCHAR2', null, JT_STRING, null, null, null,null,null);
2997  
2998          attlist(16) := xdb$insertAttr(schref, 64, 'numCols', TR_INT, 1,1,
2999                                   '02', T_INTEGER, TRUE, FALSE, FALSE,
3000                                 'NUM_COLS', 'INTEGER', null, JT_INT, null,
3001                                 null,null,null,null);
3002  
3003          attlist(17) := xdb$insertAttr(schref, PN_ELEMENT_DEFAULTXSL,
3004                                  'defaultXSL', TR_STRING,
3005                                  1,1,null, T_CSTRING, TRUE, FALSE, FALSE,
3006                                  'DEFAULT_XSL', 'VARCHAR2', null, JT_STRING,
3007                                  null, null, null,null,null);
3008  
3009          attlist(18) := xdb$insertAttr(schref, 34, 'minOccurs',
3010                                 TR_INT, 0, 1, null,
3011                                 T_INTEGER, FALSE, FALSE, FALSE, 'MIN_OCCURS',
3012                                 'NUMBER', null, JT_INT, '0',
3013                                 null, null,null,null);
3014  
3015          attlist(19) := xdb$insertAttr(schref, 35, 'maxOccurs',
3016                                 TR_STRING, 0, 1, null,
3017                                 T_CSTRING, FALSE, FALSE, FALSE, 'MAX_OCCURS',
3018                                 'VARCHAR2', null, JT_STRING, null,
3019                                 null, null,null,null);
3020  
3021          attlist(20) := xdb$insertAttr(schref, PN_ELEMENT_ISFOLDER, 'isFolder',
3022                                 TR_BOOLEAN, 0, 1, null,
3023                                 T_BOOLEAN, TRUE, FALSE, FALSE, 'IS_FOLDER',
3024                                 'RAW', null, JT_BOOLEAN, 'false', null,
3025                                 null,null,null);
3026  
3027          attlist(21) := xdb$insertAttr(schref, PN_ELEMENT_MAINTAINORDER,
3028                                'maintainOrder', TR_BOOLEAN, 0, 1, null,
3029                                 T_BOOLEAN, TRUE, FALSE, FALSE, 'MAINTAIN_ORDER',
3030                                 'RAW', null, JT_BOOLEAN, 'true', null,
3031                                 null,null,null);
3032  
3033          attlist(22) := xdb$insertAttr(schref,PN_ELEMENT_COLUMNPROPS,
3034                                 'columnProps', TR_STRING,0,1,null,
3035                                 T_CSTRING, TRUE, FALSE, FALSE, 'COL_PROPS',
3036                                 'VARCHAR2', null, JT_STRING, null, null,
3037                                 null,null,null);
3038  
3039          attlist(23) := xdb$insertAttr(schref, PN_ELEMENT_DEFAULTACL,
3040                                  'defaultACL', TR_STRING,
3041                                  1,1,null, T_CSTRING, TRUE, FALSE, FALSE,
3042                                  'DEFAULT_ACL', 'VARCHAR2', null, JT_STRING,
3043                                  null, null, null,null,null);
3044  
3045          attlist(24) := xdb$insertAttr(schref, PN_ELEMENT_HEADELEM_REF,
3046                                   'headElementRef',
3047                                   xdb.xdb$qname('00', 'REF'), 0,1, null,
3048                                   T_REF, TRUE, FALSE, FALSE,
3049                                   'HEAD_ELEM_REF', 'REF', null,
3050                                   JT_REFERENCE, null, null,null,null,null,
3051                                   null, null, '01');
3052  
3053          attlist(25) := xdb$insertAttr(schref, PN_ELEMENT_ISTRANSLATABLE, 'translate',
3054                                 TR_BOOLEAN, 0, 1, null,
3055                                 T_BOOLEAN, TRUE, FALSE, FALSE, 'IS_TRANSLATABLE',
3056                                 'RAW', null, JT_BOOLEAN, null, null,
3057                                 null,null,null);
3058  
3059          attlist(26) := xdb$insertAttr(schref, PN_ELEMENT_XDBMAXOCCURS, 'maxOccurs',
3060                                 TR_STRING, 0, 1, null,
3061                                 T_CSTRING, TRUE, FALSE, FALSE, 'XDB_MAX_OCCURS',
3062                                 'VARCHAR2', null, JT_STRING, null,
3063                                 null, null,null,null);
3064  
3065          ellist := xdb.xdb$xmltype_ref_list_t();
3066          ellist.extend(5);
3067  
3068          ellist(1) := xdb$insertElement(schref, 65,
3069                           'complexType', xdb.xdb$qname('01','complexType'), 0, 1,
3070                           null, T_XOB, FALSE, FALSE, FALSE, 'CPLX_TYPE_DECL',
3071                           'XDB$COMPLEX_T', 'XDB', JT_XMLTYPE, null, null,
3072                           complex_t_ref,null,null,
3073                  null, complex_colcount,
3074                  FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
3075                  'XDB$COMPLEX_TYPE', null, 'oracle.xdb.ComplexType',
3076                  'oracle.xdb.ComplexTypeBean', FALSE, null, null, null);
3077  
3078          ellist(2) := xdb$insertElement(schref, 66, 'substitutionGroupRef',
3079                                 xdb.xdb$qname('00', 'REF'), 0, 1000,null,
3080                                 T_REF, TRUE, FALSE, FALSE, 'SUBS_GROUP_REFS',
3081                                 'REF', null, JT_REFERENCE, null, null, null,null,null,
3082                   null, 0, FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
3083                   'XDB$ELEMENT', null, null, null, FALSE, null, null, null,
3084                                         'XDB$XMLTYPE_REF_LIST_T','XDB', '01');
3085  
3086          ellist(3) := xdb$insertElement(schref, PN_ELEMENT_UNIQUE,
3087                          'unique', xdb.xdb$qname('01','keybase'), 0,1000,
3088                           null, T_XOB, FALSE, FALSE, FALSE, 'UNIQUES',
3089                          'XDB$KEYBASE_T', 'XDB', JT_XMLTYPE, null, null,
3090                          keybase_t_ref,null,null, null, keybase_colcount,
3091                  FALSE, null, null, FALSE, FALSE, TRUE, TRUE, FALSE,
3092                  null, null, null, null, FALSE, null, null, null,
3093                          'XDB$KEYBASE_LIST_T','XDB');
3094  
3095          ellist(4) := xdb$insertElement(schref, PN_ELEMENT_KEY,
3096                          'key', xdb.xdb$qname('01','keybase'), 0,1000,
3097                           null, T_XOB, FALSE, FALSE, FALSE, 'KEYS',
3098                          'XDB$KEYBASE_T', 'XDB', JT_XMLTYPE, null, null,
3099                          keybase_t_ref,null,null, null, keybase_colcount,
3100                  FALSE, null, null, FALSE, FALSE, TRUE, TRUE, FALSE,
3101                  null, null, null, null, FALSE, null, null, null,
3102                          'XDB$KEYBASE_LIST_T','XDB');
3103  
3104          ellist(5) := xdb$insertElement(schref, PN_ELEMENT_KEYREF,
3105                          'keyref', xdb.xdb$qname('01','keybase'), 0,1000,
3106                           null, T_XOB, FALSE, FALSE, FALSE, 'KEYREFS',
3107                          'XDB$KEYBASE_T', 'XDB', JT_XMLTYPE, null, null,
3108                          keybase_t_ref,null,null, null, keybase_colcount,
3109                  FALSE, null, null, FALSE, FALSE, TRUE, TRUE, FALSE,
3110                  null, null, null, null, FALSE, null, null, null,
3111                          'XDB$KEYBASE_LIST_T','XDB');
3112  
3113          ctyperef := xdb$insertComplex(schref, attr_t_ref, 'element',
3114                                  xdb.xdb$qname('01', 'attribute'), FALSE, null,'0',
3115                         null, null, null, null, null, null, null, null, null,
3116                         null, null,
3117                           null, null, null, null, ellist, attlist);
3118          complexlist(8) := ctyperef;
3119  
3120          schels(5) := xdb$insertElement(schref, 67,
3121                          'element', xdb.xdb$qname('01', 'element'),
3122                           0, 1, null, T_XOB, FALSE, FALSE, FALSE,'ELEMENTS',
3123                           'XDB$ELEMENT_T', 'XDB', JT_XMLTYPE, null, null,
3124                           ctyperef,null,null,
3125                  xdb.xdb$qname('01', 'schemaTop'),
3126                  elem_colcount, FALSE, null, null,
3127                  FALSE, FALSE, FALSE, FALSE, FALSE,
3128                  'XDB$ELEMENT', null, 'oracle.xdb.Element',
3129                  'oracle.xdb.ElementBean', TRUE, 'PROPERTY', null, null,
3130                          'XDB$XMLTYPE_REF_LIST_T','XDB');
3131  
3132          /* Update all of the forward references for element */
3133          execute immediate 'update xdb.xdb$element e set
3134                  e.xmldata.property.type_ref =
3135                  :1 where e.xmldata.property.typename.name = ''element'''
3136                  using ctyperef;
3137  
3138  /*--------------------------------------------------------------------------*/
3139  /* Definition of "xdb:anyType" complex type */
3140  /*--------------------------------------------------------------------------*/
3141  
3142          attlist := xdb.xdb$xmltype_ref_list_t();
3143          attlist.extend(4);
3144  
3145          attlist(1) := xdb$insertAttr(schref, PN_ANYTYPE_NAMESPACE,
3146                                       'namespace', TR_STRING, 1, 1, null,
3147                                       T_CSTRING, FALSE, FALSE, FALSE,
3148                                       'NAMESPACE', 'VARCHAR2', null,
3149                                       JT_STRING, null, null, null,null,null);
3150  
3151          attlist(2) := xdb$insertAttr(schref, PN_ANYTYPE_PROCESSCONTENTS,
3152                                       'processContents',
3153                                       xdb.xdb$qname('01','processChoice'), 0, 1,
3154                                       '01', T_ENUM, FALSE, FALSE, FALSE,
3155                                       'PROCESS_CONTENTS',
3156                                       'XDB$PROCESSCHOICE', 'XDB',
3157                                       JT_ENUM, null, null,
3158                                       process_choice_ref,null,null);
3159  
3160          attlist(3) := xdb$insertAttr(schref, PN_ANYTYPE_MINOCCURS,'minOccurs',
3161                                 TR_INT, 0, 1, null,
3162                                 T_INTEGER, FALSE, FALSE, FALSE, 'MIN_OCCURS',
3163                                 'NUMBER', null, JT_INT, '0',
3164                                 null, null,null,null);
3165  
3166          attlist(4) := xdb$insertAttr(schref, PN_ANYTYPE_MAXOCCURS,'maxOccurs',
3167                                 TR_STRING, 0, 1, null,
3168                                 T_CSTRING, FALSE, FALSE, FALSE, 'MAX_OCCURS',
3169                                 'VARCHAR2', null, JT_STRING, null,
3170                                 null, null,null,null);
3171  
3172          xdb$updateComplex(any_t_ref, schref, attr_t_ref, 'anyType',
3173                            xdb.xdb$qname('01', 'attribute'), FALSE, null,null,
3174                            null, null, null, null, attlist);
3175  
3176          complexlist(15) := any_t_ref;
3177  
3178  /*--------------------------------------------------------------------------*/
3179  /* Definition of "xdb:groupDefType" complex type */
3180  /*--------------------------------------------------------------------------*/
3181  
3182          attlist := xdb.xdb$xmltype_ref_list_t();
3183          attlist.extend(3);
3184  
3185          attlist(1) := xdb$insertAttr(schref, PN_GROUPDEF_PARENTSCHEMA,
3186                                 'parentSchema', xdb.xdb$qname('00','REF'), 0, 1,
3187                                 null, T_REF, TRUE, FALSE, FALSE,
3188                                 'PARENT_SCHEMA', 'REF', null, JT_REFERENCE,
3189                                 null, null, null,null,null,
3190                                 null, null, '01');
3191  
3192          attlist(2) := xdb$insertAttr(schref, PN_GROUPDEF_NAME, 'name',
3193                                 TR_STRING, 1, 1, null,
3194                                 T_CSTRING, FALSE, FALSE, FALSE, 'NAME',
3195                                 'VARCHAR2', null, JT_STRING, null, null,
3196                                 null,null,null);
3197  
3198          attlist(3) := xdb$insertAttr(schref, PN_GROUPDEF_ID, 'id',
3199                                  TR_STRING, 0, 1, null,
3200                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
3201                                 'VARCHAR2', null, JT_STRING, null, null,
3202                                 null,null,null);
3203  
3204          ellist := xdb.xdb$xmltype_ref_list_t();
3205          ellist.extend(4);
3206  
3207          ellist(1) := xdb$insertElement(schref, PN_GROUPDEF_ANNOTATION,
3208                          'annotation', xdb.xdb$qname('01', 'annotation'),
3209                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
3210                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
3211                          JT_STRING, null, null, annotation_t_ref,null,null,
3212                          null, annotation_colcount, FALSE, null, null,
3213                          FALSE, FALSE, TRUE, FALSE, FALSE,
3214                          null, null, null, null, FALSE, null, null, null);
3215  
3216          ellist(2) := xdb$insertElement(schref, PN_GROUPDEF_ALL,
3217                                         'all', xdb.xdb$qname('01', 'modelType'),
3218                                         0, 1, null,
3219                                         T_XOB, FALSE, FALSE, FALSE,
3220                                         'ALL_KID', 'XDB$MODEL_T', 'XDB',
3221                                         JT_XMLTYPE,
3222                                         null, null, model_t_ref,null,null,
3223                                         null, model_colcount,
3224                                         FALSE, null, null, FALSE, FALSE,
3225                                         FALSE, FALSE, FALSE,
3226                                         'XDB$ALL_MODEL', null,
3227                                         'oracle.xdb.Model',
3228                                         'oracle.xdb.ModelBean',
3229                                         FALSE, null, null, null);
3230  
3231          ellist(3) := xdb$insertElement(schref, PN_GROUPDEF_CHOICE,
3232                                         'choice', xdb.xdb$qname('01', 'modelType'),
3233                                         0, 1, null,
3234                                         T_XOB, FALSE, FALSE, FALSE,
3235                                         'CHOICE_KID', 'XDB$MODEL_T', 'XDB',
3236                                         JT_XMLTYPE,
3237                                         null, null, model_t_ref,null,null,
3238                                         null, model_colcount,
3239                                         FALSE, null, null, FALSE, FALSE,
3240                                         FALSE, FALSE, FALSE,
3241                                         'XDB$CHOICE_MODEL', null,
3242                                         'oracle.xdb.Model',
3243                                         'oracle.xdb.ModelBean',
3244                                         FALSE, null, null, null);
3245  
3246          ellist(4) := xdb$insertElement(schref, PN_GROUPDEF_SEQUENCE,
3247                                         'sequence', xdb.xdb$qname('01', 'modelType'),
3248                                         0, 1, null,
3249                                         T_XOB, FALSE, FALSE, FALSE,
3250                                         'SEQUENCE_KID', 'XDB$MODEL_T', 'XDB',
3251                                         JT_XMLTYPE,
3252                                         null, null, model_t_ref,null,null,
3253                                         null, model_colcount,
3254                                         FALSE, null, null, FALSE, FALSE,
3255                                         FALSE, FALSE, FALSE,
3256                                         'XDB$SEQUENCE_MODEL', null,
3257                                         'oracle.xdb.Model',
3258                                         'oracle.xdb.ModelBean',
3259                                         FALSE, null, null, null);
3260  
3261          groupdef_t_ref := xdb$insertComplex(schref, null,
3262                         'groupDefType', null, FALSE,
3263                         null, '0', null, null, null, null, null, null,
3264                         null, null, null, null, null,
3265                         null, null, null, null, ellist, attlist);
3266          complexlist(20) := groupdef_t_ref;
3267  
3268  
3269  /*--------------------------------------------------------------------------*/
3270  /* Definition of "xdb:groupRefType" complex type */
3271  /*--------------------------------------------------------------------------*/
3272  
3273          attlist := xdb.xdb$xmltype_ref_list_t();
3274          attlist.extend(6);
3275  
3276          attlist(1) := xdb$insertAttr(schref, PN_GROUPREF_PARENTSCHEMA,
3277                                 'parentSchema', xdb.xdb$qname('00','REF'), 0, 1,
3278                                 null, T_REF, TRUE, FALSE, FALSE,
3279                                 'PARENT_SCHEMA', 'REF', null, JT_REFERENCE,
3280                                 null, null, null,null,null,
3281                                 null, null, '01');
3282  
3283          attlist(2) := xdb$insertAttr(schref,PN_GROUPREF_MINOCCURS,'minOccurs',
3284                                 TR_INT, 0, 1, null,
3285                                 T_INTEGER, FALSE, FALSE, FALSE, 'MIN_OCCURS',
3286                                 'NUMBER', null, JT_INT, '0',
3287                                 null, null,null,null);
3288  
3289          attlist(3) := xdb$insertAttr(schref,PN_GROUPREF_MAXOCCURS,'maxOccurs',
3290                                 TR_STRING, 0, 1, null,
3291                                 T_CSTRING, FALSE, FALSE, FALSE, 'MAX_OCCURS',
3292                                 'VARCHAR2', null, JT_STRING, null,
3293                                 null, null,null,null);
3294  
3295          attlist(4) := xdb$insertAttr(schref, PN_GROUPREF_NAME, 'ref',
3296                                   xdb.xdb$qname('00', 'QName'), 0,1, null,
3297                                   T_QNAME, FALSE, FALSE, FALSE,
3298                                   'GROUPREF_NAME', 'XDB$QNAME', 'XDB',
3299                                   JT_QNAME, null, null,null,null,null);
3300  
3301          attlist(5) := xdb$insertAttr(schref, PN_GROUPREF_REF, 'refRef',
3302                                   xdb.xdb$qname('00', 'REF'), 0,1, null,
3303                                   T_REF, TRUE, FALSE, FALSE,
3304                                   'GROUPREF_REF', 'REF', null,
3305                                   JT_REFERENCE, null, null,null,null,null,
3306                                   null, null, '01');
3307  
3308          attlist(6) := xdb$insertAttr(schref, PN_GROUPREF_ID, 'id',
3309                                  TR_STRING, 0, 1, null,
3310                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
3311                                 'VARCHAR2', null, JT_STRING, null, null,
3312                                 null,null,null);
3313  
3314          ellist := xdb.xdb$xmltype_ref_list_t();
3315          ellist.extend(1);
3316  
3317          ellist(1) := xdb$insertElement(schref, PN_GROUPREF_ANNOTATION,
3318                          'annotation', xdb.xdb$qname('01', 'annotation'),
3319                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
3320                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
3321                          JT_STRING, null, null, annotation_t_ref,null,null,
3322                          null, annotation_colcount, FALSE, null, null,
3323                          FALSE, FALSE, TRUE, FALSE, FALSE,
3324                          null, null, null, null, FALSE, null, null, null);
3325  
3326          xdb$updateComplex(groupref_t_ref, schref, null,
3327                         'groupRefType', null, FALSE,
3328                         null, null, null, null, null, ellist, attlist);
3329          complexlist(21) := groupref_t_ref;
3330  
3331  /*--------------------------------------------------------------------------*/
3332  /* Definition of "xdb:attrGroupDefType" complex type */
3333  /*--------------------------------------------------------------------------*/
3334  
3335          attlist := xdb.xdb$xmltype_ref_list_t();
3336          attlist.extend(3);
3337  
3338          attlist(1) := xdb$insertAttr(schref, PN_ATTRGROUPDEF_PARENTSCHEMA,
3339                                 'parentSchema', xdb.xdb$qname('00','REF'), 0, 1,
3340                                 null, T_REF, TRUE, FALSE, FALSE,
3341                                 'PARENT_SCHEMA', 'REF', null, JT_REFERENCE,
3342                                 null, null, null,null,null,
3343                                 null, null, '01');
3344  
3345          attlist(2) := xdb$insertAttr(schref, PN_ATTRGROUPDEF_NAME, 'name',
3346                                 TR_STRING, 1, 1, null,
3347                                 T_CSTRING, FALSE, FALSE, FALSE, 'NAME',
3348                                 'VARCHAR2', null, JT_STRING, null, null,
3349                                 null,null,null);
3350  
3351          attlist(3) := xdb$insertAttr(schref, PN_ATTRGROUPDEF_ID, 'id',
3352                                  TR_STRING, 0, 1, null,
3353                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
3354                                 'VARCHAR2', null, JT_STRING, null, null,
3355                                 null,null,null);
3356  
3357          ellist := xdb.xdb$xmltype_ref_list_t();
3358          ellist.extend(4);
3359  
3360          ellist(1) := xdb$insertElement(schref, PN_ATTRGROUPDEF_ANNOTATION,
3361                          'annotation', xdb.xdb$qname('01', 'annotation'),
3362                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
3363                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
3364                          JT_STRING, null, null, annotation_t_ref,null,null,
3365                          null, annotation_colcount, FALSE, null, null,
3366                          FALSE, FALSE, TRUE, FALSE, FALSE,
3367                          null, null, null, null, FALSE, null, null, null);
3368  
3369          ellist(2) := xdb$insertElement(schref, PN_ATTRGROUPDEF_ATTRIBUTE,
3370                                         'attribute',
3371                                         xdb.xdb$qname('01', 'attribute'),
3372                                         0, 1000, null, T_XOB, FALSE,
3373                                         FALSE, FALSE, 'ATTRIBUTES',
3374                                         'XDB$PROPERTY_T','XDB',JT_XMLTYPE,
3375                                         null, null, attr_t_ref,null,null,
3376                                         null, attr_colcount,
3377                                         FALSE, null, null, FALSE, FALSE,
3378                                         FALSE, FALSE, FALSE,
3379                                         'XDB$ATTRIBUTE', null,
3380                                         'oracle.xdb.Attribute',
3381                                         'oracle.xdb.AttributeBean', FALSE,
3382                                         null, null, null,
3383                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
3384  
3385          ellist(3) := xdb$insertElement(schref, PN_ATTRGROUPDEF_ANYATTR,
3386                                         'anyAttribute',
3387                                         xdb.xdb$qname('01', 'anyType'),
3388                                         0, 1000, null, T_XOB, FALSE,
3389                                         FALSE, FALSE, 'ANY_ATTRS',
3390                                         'XDB$ANY_T','XDB',JT_XMLTYPE,
3391                                         null, null, any_t_ref,null,null,
3392                                         null, any_colcount,
3393                                         FALSE, null, null, FALSE, FALSE,
3394                                         FALSE, FALSE, FALSE,
3395                                         'XDB$ANYATTR', null,
3396                                         'oracle.xdb.anyAttribute',
3397                                         'oracle.xdb.anyAttributeBean', FALSE,
3398                                         'PROPERTY', null, null,
3399                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
3400  
3401          ellist(4) := xdb$insertElement(schref, PN_ATTRGROUPDEF_ATTRGROUP,
3402                                         'attributeGroup',
3403                                         xdb.xdb$qname('01', 'attrGroupRefType'),
3404                                         0, 1000, null, T_XOB, FALSE, FALSE,
3405                                         FALSE, 'ATTR_GROUPS',
3406                                         'XDB$ATTRGROUP_REF_T','XDB',
3407                                         JT_XMLTYPE, null, null,
3408                                         attrgroupref_t_ref,null,null,
3409                                         null, attrgroupref_colcount,
3410                                         FALSE, null, null, FALSE, FALSE,
3411                                         FALSE, FALSE, FALSE,
3412                                         'XDB$ATTRGROUP_REF', null,
3413                                         'oracle.xdb.attributeGroup',
3414                                         'oracle.xdb.attributeGroupBean',
3415                                         FALSE, null, null, null,
3416                                         'XDB$XMLTYPE_REF_LIST_T','XDB');
3417  
3418          attrgroupdef_t_ref := xdb$insertComplex(schref, null,
3419                         'attrGroupDefType', null, FALSE,
3420                         null, '0', null, null, null, null, null, null,
3421                         null, null, null, null, null,
3422                         null, null, null, null, ellist, attlist);
3423          complexlist(22) := attrgroupdef_t_ref;
3424  
3425  /*--------------------------------------------------------------------------*/
3426  /* Definition of "xdb:attrGroupRefType" complex type */
3427  /*--------------------------------------------------------------------------*/
3428  
3429          attlist := xdb.xdb$xmltype_ref_list_t();
3430          attlist.extend(4);
3431  
3432          attlist(1) := xdb$insertAttr(schref, PN_ATTRGROUPREF_PARENTSCHEMA,
3433                                 'parentSchema', xdb.xdb$qname('00','REF'), 0, 1,
3434                                 null, T_REF, TRUE, FALSE, FALSE,
3435                                 'PARENT_SCHEMA', 'REF', null, JT_REFERENCE,
3436                                 null, null, null,null,null,
3437                                 null, null, '01');
3438  
3439          attlist(2) := xdb$insertAttr(schref, PN_ATTRGROUPREF_NAME, 'ref',
3440                                   xdb.xdb$qname('00', 'QName'), 0,1, null,
3441                                   T_QNAME, FALSE, FALSE, FALSE,
3442                                   'ATTRGROUP_NAME', 'XDB$QNAME', 'XDB',
3443                                   JT_QNAME, null, null,null,null,null);
3444  
3445          attlist(3) := xdb$insertAttr(schref, PN_ATTRGROUPREF_REF, 'refRef',
3446                                   xdb.xdb$qname('00', 'REF'), 0,1, null,
3447                                   T_REF, TRUE, FALSE, FALSE,
3448                                   'ATTRGROUP_REF', 'REF', null,
3449                                   JT_REFERENCE, null, null,null,null,null,
3450                                   null, null, '01');
3451  
3452          attlist(4) := xdb$insertAttr(schref, PN_ATTRGROUPREF_ID, 'id',
3453                                  TR_STRING, 0, 1, null,
3454                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
3455                                 'VARCHAR2', null, JT_STRING, null, null,
3456                                 null,null,null);
3457  
3458          ellist := xdb.xdb$xmltype_ref_list_t();
3459          ellist.extend(1);
3460  
3461          ellist(1) := xdb$insertElement(schref, PN_ATTRGROUPREF_ANNOTATION,
3462                          'annotation', xdb.xdb$qname('01', 'annotation'),
3463                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
3464                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
3465                          JT_STRING, null, null, annotation_t_ref,null,null,
3466                          null, annotation_colcount, FALSE, null, null,
3467                          FALSE, FALSE, TRUE, FALSE, FALSE,
3468                          null, null, null, null, FALSE, null, null, null);
3469  
3470          xdb$updateComplex(attrgroupref_t_ref, schref, null,
3471                         'attrGroupRefType', null, FALSE,
3472                         null, null, null, null, null, ellist, attlist);
3473          complexlist(23) := attrgroupref_t_ref;
3474  
3475  /*--------------------------------------------------------------------------*/
3476  /* Definition of "xdb:schema" XML element */
3477  /*--------------------------------------------------------------------------*/
3478  
3479          attlist := xdb.xdb$xmltype_ref_list_t();
3480          attlist.extend(15);
3481  
3482          attlist(1) := xdb$insertAttr(schref, 68, 'schemaURL', TR_STRING,
3483                                  1,1,null, T_CSTRING, TRUE, FALSE, FALSE,
3484                                  'SCHEMA_URL',
3485                                 'VARCHAR2', null, JT_STRING, null, null, null,null,null);
3486          attlist(2) := xdb$insertAttr(schref, 69, 'targetNamespace', TR_STRING,
3487                                  0,1,null, T_CSTRING, FALSE, FALSE, FALSE,
3488                                  'TARGET_NAMESPACE',
3489                                 'VARCHAR2', null, JT_STRING, null, null, null,null,null);
3490  
3491          attlist(3) := xdb$insertAttr(schref, 70, 'version', TR_STRING,
3492                                  0,1,null, T_CSTRING, FALSE, FALSE, FALSE,
3493                                  'VERSION', 'VARCHAR2', null, JT_STRING, null,
3494                                  null, null,null,null);
3495  
3496          attlist(4) := xdb$insertAttr(schref, 71, 'numProps', TR_NNEGINT,
3497                                  1,1,null, T_INTEGER, TRUE, FALSE, FALSE,
3498                                  'NUM_PROPS', 'INTEGER', null, JT_LONG, null,
3499                                  null, null,null,null);
3500  
3501          attlist(5) := xdb$insertAttr(schref, 72, 'finalDefault',
3502                                 xdb.xdb$qname('01','derivationChoice'), 0, 1,
3503                                 '01', T_ENUM, FALSE, FALSE, FALSE,
3504                                 'FINAL_DEFAULT','XDB$DERIVATIONCHOICE', 'XDB',
3505                                 JT_ENUM, null, null, drv_choice_ref,null,null);
3506  
3507          attlist(6) := xdb$insertAttr(schref, 73, 'blockDefault',
3508                                 xdb.xdb$qname('01','derivationChoice'), 0, 1,
3509                                 '01', T_ENUM, FALSE, FALSE, FALSE,
3510                                 'BLOCK_DEFAULT','XDB$DERIVATIONCHOICE', 'XDB',
3511                                 JT_ENUM, null, null, drv_choice_ref,null,null);
3512  
3513          attlist(7) := xdb$insertAttr(schref, 74, 'attributeFormDefault',
3514                                 xdb.xdb$qname('01','formChoice'), 0, 1,
3515                                 '01', T_ENUM, FALSE, FALSE, FALSE,
3516                                 'ATTRIBUTE_FORM_DFLT', 'XDB$FORMCHOICE', 'XDB',
3517                                 JT_ENUM, null, null, form_choice_ref,null,null);
3518  
3519          attlist(8) := xdb$insertAttr(schref, 75, 'elementFormDefault',
3520                                 xdb.xdb$qname('01','formChoice'), 0, 1,
3521                                 '01', T_ENUM, FALSE, FALSE, FALSE,
3522                                 'ELEMENT_FORM_DFLT', 'XDB$FORMCHOICE', 'XDB',
3523                                 JT_ENUM, null, null, form_choice_ref,null,null);
3524  
3525          attlist(9) := xdb$insertAttr(schref, 76, 'flags', TR_NNEGINT, 1, 1,
3526                                  '4', T_UNSIGNINT, TRUE, FALSE, FALSE,
3527                                  'FLAGS', 'RAW', null, JT_LONG, null,
3528                                  null, null,null,null);
3529  
3530          attlist(10) := xdb$insertAttr(schref, PN_SCHEMA_MAPTONCHAR,
3531                                 'mapStringToNCHAR', TR_BOOLEAN, 1, 1,
3532                                  null, T_BOOLEAN, TRUE, FALSE, FALSE,
3533                                  'MAP_TO_NCHAR', 'RAW', null, JT_BOOLEAN,
3534                                  'false', null, null,null,null);
3535  
3536          attlist(11) := xdb$insertAttr(schref, PN_SCHEMA_MAPTOLOB,
3537                                 'mapUnboundedStringToLob', TR_BOOLEAN, 1, 1,
3538                                  null, T_BOOLEAN, TRUE, FALSE, FALSE,
3539                                  'MAP_TO_LOB', 'RAW', null, JT_BOOLEAN,
3540                                  'false', null, null,null,null);
3541  
3542          attlist(12) := xdb$insertAttr(schref, PN_SCHEMA_ID, 'id',
3543                                  TR_STRING, 0, 1, null,
3544                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
3545                                 'VARCHAR2', null, JT_STRING, null, null,
3546                                 null,null,null);
3547  
3548          attlist(13) := xdb$insertAttr(schref, PN_SCHEMA_VARRAYTAB,
3549                                 'storeVarrayAsTable', TR_BOOLEAN, 1, 1,
3550                                  null, T_BOOLEAN, TRUE, FALSE, FALSE,
3551                                  'VARRAY_AS_TAB', 'RAW', null, JT_BOOLEAN,
3552                                  'false', null, null,null,null);
3553  
3554          attlist(14) := xdb$insertAttr(schref, PN_SCHEMA_OWNER, 'schemaOwner',
3555                                        TR_STRING, 1,1,null, T_CSTRING, TRUE,
3556                                        FALSE, FALSE, 'SCHEMA_OWNER', 'VARCHAR2',
3557                                        null, JT_STRING, null, null, null,null,null);
3558  
3559          attlist(15) := xdb$insertAttr(schref, PN_SCHEMA_LANG,
3560                                       'lang', TR_STRING, 1, 1, null,
3561                                       T_CSTRING, FALSE, FALSE, FALSE,
3562                                       'LANG', 'VARCHAR2', null,
3563                                       JT_STRING, null, null, null,null,null);
3564  
3565  /* ---------------------- local type for "import" ------------------------ */
3566          ellist := xdb.xdb$xmltype_ref_list_t();
3567          ellist.extend(1);
3568          ellist(1) := xdb$insertElement(schref, PN_IMPORT_ANNOTATION,
3569                          'annotation', xdb.xdb$qname('01', 'annotation'),
3570                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
3571                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
3572                          JT_STRING, null, null, annotation_t_ref,null,null,
3573                          null, annotation_colcount, FALSE, null, null,
3574                          FALSE, FALSE, TRUE, FALSE, FALSE,
3575                          null, null, null, null, FALSE, null, null, null);
3576          attlist2 := xdb.xdb$xmltype_ref_list_t();
3577          attlist2.extend(3);
3578          attlist2(1) := xdb$insertAttr(schref, 77, 'namespace', TR_STRING,
3579                                 0, 1, null, T_CSTRING, FALSE, FALSE, FALSE,
3580                                 'NAMESPACE', 'VARCHAR2', null, JT_STRING, null,
3581                                 null, null,null,null);
3582          attlist2(2) := xdb$insertAttr(schref, 78, 'schemaLocation', TR_STRING,
3583                                   0, 1, null, T_CSTRING, FALSE, FALSE, FALSE,
3584                                   'SCHEMA_LOCATION', 'VARCHAR2', null,
3585                                   JT_STRING, null, null, null,null,null);
3586          attlist2(3) := xdb$insertAttr(schref, PN_IMPORT_ID, 'id',
3587                                  TR_STRING, 0, 1, null,
3588                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
3589                                 'VARCHAR2', null, JT_STRING, null, null,
3590                                 null,null,null);
3591  
3592          ctyperef := xdb$insertComplex(schref, null, null,
3593                          null, FALSE, null, '0', null, null,
3594                          null, null, null, null, null, null, null, null, null,
3595                          null, null, null, null, ellist, attlist2);
3596  
3597          schels(6) := xdb$insertElement(schref, 79, 'import', null,
3598                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
3599                          'IMPORTS', 'XDB$IMPORT_T', 'XDB',
3600                          JT_XMLTYPE, null, null, null,null,null,
3601                  null, 3, FALSE, null, null, FALSE, FALSE, TRUE, TRUE, FALSE,
3602                  null, null, null, null, FALSE, null, ctyperef, null,
3603                          'XDB$IMPORT_LIST_T','XDB');
3604  
3605  /* ----------------------local  type for "include" ----------------------- */
3606          ellist := xdb.xdb$xmltype_ref_list_t();
3607          ellist.extend(1);
3608          ellist(1) := xdb$insertElement(schref, PN_INCLUDE_ANNOTATION,
3609                          'annotation', xdb.xdb$qname('01', 'annotation'),
3610                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
3611                          'ANNOTATION', 'XDB$ANNOTATION_T', 'XDB',
3612                          JT_STRING, null, null, annotation_t_ref,null,null,
3613                          null, annotation_colcount, FALSE, null, null,
3614                          FALSE, FALSE, TRUE, FALSE, FALSE,
3615                          null, null, null, null, FALSE, null, null, null);
3616          attlist2 := xdb.xdb$xmltype_ref_list_t();
3617          attlist2.extend(2);
3618          attlist2(1) := xdb$insertAttr(schref, PN_INCLUDE_SCHEMALOCATION,
3619                                   'schemaLocation', TR_STRING,
3620                                   0, 1, null, T_CSTRING, FALSE, FALSE, FALSE,
3621                                   'SCHEMA_LOCATION', 'VARCHAR2', null,
3622                                   JT_STRING, null, null, null,null,null);
3623          attlist2(2) := xdb$insertAttr(schref, PN_INCLUDE_ID, 'id',
3624                                  TR_STRING, 0, 1, null,
3625                                 T_CSTRING, FALSE, FALSE, FALSE, 'ID',
3626                                 'VARCHAR2', null, JT_STRING, null, null,
3627                                 null,null,null);
3628  
3629          ctyperef := xdb$insertComplex(schref, null, null,
3630                          null, FALSE, null, '0', null, null,
3631                          null, null, null, null, null, null, null, null, null,
3632                          null, null, null, null, ellist, attlist2);
3633  
3634          schels(7) := xdb$insertElement(schref, 80, 'include', null,
3635                          0, 1, null, T_XOB, FALSE, FALSE, FALSE,
3636                          'INCLUDES', 'XDB$INCLUDE_T', 'XDB',
3637                          JT_XMLTYPE, null, null, null,null,null,
3638                  null, 2, FALSE, null, null, FALSE, FALSE, TRUE, TRUE, FALSE,
3639                  null, null, null, null, FALSE, null, ctyperef, null,
3640                          'XDB$INCLUDE_LIST_T','XDB');
3641  
3642          schels(8) := xdb$insertElement(schref, PN_SCHEMA_GROUP,
3643                          'group', xdb.xdb$qname('01','groupDefType'), 0,1,
3644                           null, T_XOB, FALSE, FALSE, FALSE, 'GROUPS',
3645                          'XDB$GROUP_DEF_T', 'XDB', JT_XMLTYPE, null, null,
3646                          groupdef_t_ref,null,null,
3647                  xdb.xdb$qname('01', 'schemaTop'), groupdef_colcount,
3648                  FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
3649                  'XDB$GROUP_DEF', null, 'oracle.xdb.group',
3650                  'oracle.xdb.groupBean', TRUE, null, null, null,
3651                          'XDB$XMLTYPE_REF_LIST_T','XDB');
3652  
3653          schels(9) := xdb$insertElement(schref, PN_SCHEMA_ATTRGROUP,
3654                          'attributeGroup',xdb.xdb$qname('01','attrGroupDefType'),
3655                          0,1, null, T_XOB, FALSE, FALSE, FALSE,'ATTRGROUPS',
3656                          'XDB$ATTRGROUP_DEF_T', 'XDB', JT_XMLTYPE, null, null,
3657                          attrgroupdef_t_ref,null,null,
3658                  xdb.xdb$qname('01', 'schemaTop'), attrgroupdef_colcount,
3659                  FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
3660                  'XDB$ATTRGROUP_DEF', null, 'oracle.xdb.attributeGroup',
3661                  'oracle.xdb.attributeGroupBean', TRUE, null, null, null,
3662                          'XDB$XMLTYPE_REF_LIST_T','XDB');
3663  
3664          schels(10) := xdb$insertElement(schref, PN_SCHEMA_NOTATION,
3665                          'notation', xdb.xdb$qname('01','notation'), 0,1,
3666                           null, T_XOB, FALSE, FALSE, FALSE, 'NOTATIONS',
3667                          'XDB$NOTATION_T', 'XDB', JT_XMLTYPE, null, null,
3668                          notation_t_ref,null,null, null, notation_colcount,
3669                  FALSE, null, null, FALSE, FALSE, TRUE, TRUE, FALSE,
3670                  null, null, null, null, FALSE, null, null, null,
3671                          'XDB$NOTATION_LIST_T','XDB');
3672  
3673  
3674  /* ---------------------- type for "schema" -------------------------- */
3675          /* set up all elements occuring within "schema" element
3676           * Note that there are other elements within XDB schema but not
3677           * legal within user schema documents e.g. schemaTop, binary
3678           */
3679          ellist := xdb.xdb$xmltype_ref_list_t();
3680          ellist.extend(10);
3681          ellist(1) := schels(1);
3682          ellist(2) := schels(2);
3683          ellist(3) := schels(3);
3684          ellist(4) := schels(4);
3685          ellist(5) := schels(5);
3686          ellist(6) := schels(6);
3687          ellist(7) := schels(7);
3688          ellist(8) := schels(8);
3689          ellist(9) := schels(9);
3690          ellist(10) := schels(10);
3691  
3692          /* insert a choice */
3693          choice_list := xdb.xdb$xmltype_ref_list_t();
3694          choice_list.extend(1);
3695          choice_list(1) := xdb$insertChoice(schref, ellist);
3696          ctyperef := xdb$insertComplex(schref, null, 'schema',
3697                                  null, FALSE, null,'0',
3698                         null, null, null, null, null, null, null, null, null,
3699                         null, null,
3700                           null, null, null, null, ellist, attlist,
3701                           null, FALSE, choice_list(1));
3702          complexlist(19) := ctyperef;
3703  
3704          element_propnum := 81;
3705          select attributes into colcount from all_types
3706                  where type_name in ('XDB$SCHEMA_T') and owner = 'XDB';
3707          schels(11) := xdb$insertElement(schref, element_propnum,
3708                          'schema', xdb.xdb$qname('01','schema'),
3709                          0, null, null, T_XOB,
3710                          FALSE, FALSE, FALSE, null, 'XDB$SCHEMA_T', 'XDB',
3711                           JT_XMLTYPE, null, null, ctyperef,null,null,
3712                  null, colcount, FALSE, null, null,
3713                  FALSE, FALSE, FALSE, FALSE, TRUE,
3714                  'XDB$SCHEMA', null, 'oracle.xdb.Schema',
3715                  'oracle.xdb.SchemaBean', TRUE, null, null, null);
3716  
3717          /* Handle all of the substitution groups for schemaTop - why do we need this element at all ??? */
3718          ellist := xdb.xdb$xmltype_ref_list_t();
3719          ellist.extend(4);
3720          ellist(1) := schels(2);
3721          ellist(2) := schels(3);
3722          ellist(3) := schels(4);
3723          ellist(4) := schels(5);
3724  
3725          schels(12) := xdb$insertElement(schref, 82, 'schemaTop',
3726                                  xdb.xdb$qname('00', 'string'),
3727                                  0, null, null, T_CSTRING, FALSE, FALSE,
3728                                  FALSE, null, null,null,null,null, null,null,null,null,
3729                  null, 0, FALSE, null, null, TRUE, TRUE, TRUE, TRUE, FALSE,
3730                  null, null, null, null, TRUE, null, null, null);
3731  
3732          schels(13) := xdb$insertElement(schref, 83, 'binary', TR_BINARY,
3733                                  0, null, null, T_BLOB, FALSE, FALSE,
3734                                  FALSE, null, null,null,JT_STREAM,
3735                                  null, null,null,null,null,
3736                  null, 0, FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
3737                  null, null, null, null, TRUE, null, null, null);
3738  
3739          schels(14) := xdb$insertElement(schref, 269, 'text', TR_STRING,
3740                                  0, null, null, T_CLOB, FALSE, FALSE,
3741                                  FALSE, null, null,null,JT_STREAM,
3742                                  null, null,null,null,null,
3743                  null, 0, FALSE, null, null, FALSE, FALSE, FALSE, FALSE, FALSE,
3744                  null, null, null, null, TRUE, null, null, null);
3745  
3746          /* Update schema to have all toplevel property definitions */
3747          execute immediate 'update xdb.xdb$schema s set
3748                  s.xmldata.elements = :1,
3749                  s.xmldata.simple_type = :2,
3750                  s.xmldata.complex_types = :3,
3751                  s.xmldata.num_props = :4
3752                 where s.xmldata.schema_url =
3753                 ''http://xmlns.oracle.com/xdb/XDBSchema.xsd'''
3754                  using schels, simplelist, complexlist, PN_TOTAL_PROPNUMS;
3755  
3756  end;
3757  
3758  END;
3759  /

Package body created.

SQL> show errors
No errors.
SQL> 
SQL> Rem Function that creates the database schema object corr. to the root
SQL> Rem XDB schema.
SQL> create or replace procedure xdb.xdb$InitXDBSchema
  2   is language C name "INIT_XDBSCHEMA"
  3   library XMLSCHEMA_LIB;
  4  /

Procedure created.

SQL> 
SQL> Rem Function that converts an external schema name (URL) to
SQL> Rem the internal representation (XDxxxx). An optional schema owner
SQL> Rem name can be passed in. Of course, the executing user needs to
SQL> Rem have permissions to read the path corresponding to the URL.
SQL> create or replace function xdb.xdb$ExtName2IntName
  2    (schemaURL IN VARCHAR2, schemaOwner IN VARCHAR2 := '')
  3  return varchar2 authid current_user deterministic
  4  is external name "EXT2INT_NAME" library XMLSCHEMA_LIB with context
  5  parameters (context, schemaURL OCIString, schemaOwner OCIString,
  6              return INDICATOR sb4, return OCIString);
  7  /

Function created.

SQL> 
SQL> grant execute on xdb.xdb$ExtName2IntName to public;

Grant succeeded.

SQL> grant execute on xdb.xdb$bootstrap to public;

Grant succeeded.

SQL> 
SQL> /* ----------------------  INVOKE BOOTSTRAP DRIVER -------------------*/
SQL> 
SQL> begin
  2    xdb.xdb$bootstrap.driver();
  3    xdb.xdb$InitXDBSchema();
  4    commit;
  5  end;
  6  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Create XML resource schema related types and tables
SQL> @@catxdbrs.sql :usesecfiles
SQL> Rem
SQL> Rem $Header: rdbms/admin/catxdbrs.sql /st_rdbms_11.2.0/2 2011/05/20 09:12:32 spetride Exp $
SQL> Rem
SQL> Rem catxdbrs.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2011, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbrs.sql - XDB Resource Schema related types and tables
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script creates the types, tables, etc required for
SQL> Rem      XDB Resource schema.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script should be run as the user "XDB".
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    sidicula    09/25/08 -
> Rem    sichandr    09/11/08 - grant execute on xdb$nlocks_t
SQL> Rem    spetride    12/10/07 - option: use secure files for xdb$resource
SQL> Rem    spetride    10/03/07 - add XDB$RESOURCE_ACLOID_IDX index
SQL> Rem    pnath       10/07/04 - Introduce Locks element in Resource
SQL> Rem    mrafiq      09/20/05 - merging changes for upgrade/downgrade
SQL> Rem    thoang      09/23/03 - add RCLIST
SQL> Rem    smalde      05/26/05 - Add Content Size
SQL> Rem    spannala    06/28/04 - adding columns for attrcopy, contents copy
SQL> Rem    najain      05/13/04 - add snapshot in xdb$resource_t
SQL> Rem    abagrawa    02/19/04 - Add SBRESEXTRA to XDB$RESOURCE_T
SQL> Rem    spannala    07/27/03 - changing xdb$resource_oid_index to xdb ownership
SQL> Rem    njalali     01/17/03 - adding unique index on XMLREF column
SQL> Rem    fge         02/04/02 - grant execute on xdb$resource_t to public
SQL> Rem    spannala    01/08/02 - incorporating fge_caxdb_priv_indx_fix
SQL> Rem    spannala    12/27/01 - not switching users in xdb install
SQL> Rem    spannala    01/11/02 - making all systems types have standard TOIDs
SQL> Rem    njalali     12/04/01 - changed some integers to RAW in the resource type
SQL> Rem    mkrishna    11/01/01 - change xmldata to xmldata
SQL> Rem    njalali     10/27/01 - using timestamp
SQL> Rem    njalali     10/26/01 - fixing OIDs to be 16 bytes
SQL> Rem    nle         10/05/01 - versioning
SQL> Rem    nagarwal    08/28/01 - add version attrs
SQL> Rem    rmurthy     10/01/01 - allow primary key in xmlref col
SQL> Rem    rmurthy     08/10/01 - change XDB namespace
SQL> Rem    njalali     08/09/01 - resource format changes
SQL> Rem    spannala    08/03/01 - DAV
SQL> Rem    njalali     07/29/01 - Merged njalali_xmlres2
SQL> Rem    nagarwal    07/27/01 - add versionid, activityid to resource_t
SQL> Rem    njalali     07/19/01 - added column for the ANY element
SQL> Rem    njalali     07/06/01 - Created
SQL> Rem
SQL> 
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                   MISC TYPES                                        */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                   ENUM TYPES                                        */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> create or replace type xdb.xdb$nlocks_t OID '0000000000000000000000000002011C'
  2   AS OBJECT
  3  (
  4      PARENT_OID  RAW(16),
  5      CHILD_NAME  VARCHAR2(256),
  6      RAWTOKEN    RAW(18)
  7  );
  8  /

Type created.

SQL> 
SQL> create or replace type XDB.XDB$PREDECESSOR_LIST_T OID
  2  '0000000000000000000000000002011D' AS varray(1000) of raw(16);
  3  /

Type created.

SQL> 
SQL> grant execute on xdb.xdb$nlocks_t to public with grant option;

Grant succeeded.

SQL> grant execute on xdb.xdb$predecessor_list_t to public with grant option;

Grant succeeded.

SQL> 
SQL> create or replace type XDB.XDB$OID_LIST_T OID
  2  '0000000000000000000000000002011F' AS varray(65535) of raw(16);
  3  /

Type created.

SQL> 
SQL> grant execute on xdb.xdb$oid_list_t to public with grant option;

Grant succeeded.

SQL> 
SQL> create or replace type XDB.XDB$RCLIST_T OID
  2  '00000000000000000000000000020160' AS OBJECT
  3  (
  4    OID    XDB$OID_LIST_T
  5  )
  6  /

Type created.

SQL> 
SQL> grant execute on xdb.xdb$rclist_t to public with grant option;

Grant succeeded.

SQL> /* ------------------------------------------------------------------- */
SQL> /*                  RESOURCE RELATED TYPES                             */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> create or replace type XDB.XDB$RESOURCE_T OID
  2  '0000000000000000000000000002011E' as object
  3  (
  4    VERSIONID           INTEGER,
  5    CREATIONDATE        TIMESTAMP,
  6    MODIFICATIONDATE    TIMESTAMP,
  7    AUTHOR              VARCHAR2(128),
  8    DISPNAME            VARCHAR2(128),
  9    RESCOMMENT          VARCHAR2(128),
 10    LANGUAGE            VARCHAR2(128),
 11    CHARSET             VARCHAR2(128),
 12    CONTYPE             VARCHAR2(128),
 13    REFCOUNT            RAW(4),
 14    LOCKS               RAW(2000),
 15    ACLOID              RAW(16),
 16    OWNERID             RAW(16),
 17    CREATORID           RAW(16),
 18    LASTMODIFIERID      RAW(16),
 19    ELNUM               INTEGER,
 20    SCHOID              RAW(16),
 21    XMLREF              REF SYS.XMLTYPE,
 22    XMLLOB              BLOB,
 23    FLAGS               RAW(4),
 24    RESEXTRA            CLOB,
 25    ACTIVITYID          INTEGER,
 26    VCRUID              RAW(16),
 27    PARENTS             XDB.XDB$PREDECESSOR_LIST_T,
 28    SBRESEXTRA          XDB.XDB$XMLTYPE_REF_LIST_T,
 29    SNAPSHOT            RAW(6),
 30    ATTRCOPY            BLOB,
 31    CTSCOPY             BLOB,
 32    NODENUM             RAW(6),
 33    SIZEONDISK          INTEGER,
 34    RCLIST              XDB.XDB$RCLIST_T,
 35    CHECKEDOUTBYID      RAW(16),
 36    BASEVERSION         RAW(16)
 37  );
 38  /

Type created.

SQL> 
SQL> grant execute on xdb.xdb$resource_t to public with grant option;

Grant succeeded.

SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                      TABLES                                         */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> /* Well known ID for XDB schema for resources */
SQL> /* '8758D485E6004793E034080020B242C6' */
SQL> 
SQL> declare
  2   stmt_basiclob   varchar2(3000);
  3   stmt_seclob     varchar2(3000);
  4  begin
  5    stmt_basiclob := ' create table XDB.XDB$RESOURCE of sys.xmltype ' ||
  6                     ' xmlschema "http://xmlns.oracle.com/xdb/XDBResource.xsd" ' ||
  7                     '      id ''' || '8758D485E6004793E034080020B242C6' || ''' ' ||
  8                     ' element "Resource" id 734 ' ||
  9                     ' type XDB.XDB$RESOURCE_T ';
 10    stmt_seclob := stmt_basiclob || ' lob (xmldata.xmllob) store as securefile ';
 11  
 12    if (:usesecfiles = 'YES') then
 13     execute immediate stmt_seclob;
 14    else
 15     execute immediate stmt_basiclob;
 16    end if;
 17  end;
 18  /

PL/SQL procedure successfully completed.

SQL> 
SQL> --for reference: check if secure files used
SQL> set long 1000000
SQL> select dbms_metadata.get_ddl('TABLE', 'XDB$RESOURCE', 'XDB') from dual;

DBMS_METADATA.GET_DDL('TABLE','XDB$RESOURCE','XDB')
--------------------------------------------------------------------------------

  CREATE TABLE "XDB"."XDB$RESOURCE" OF XMLTYPE   (	REF ("XM
LDATA"."XMLREF") WITH ROWID
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MIN
EXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT
CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSAUX"
 LOB ("XMLDATA"."XMLLOB") STORE AS SECUREFILE (
  TABLESPACE "SYSAUX" ENABLE STORAGE IN ROW
 CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES
  STORAGE(INITIAL 106496 NEXT 1048576 MI
NEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLAS
H_CACHE DEFAULT))
 LOB ("XMLDATA"."RESEXTRA") STORE AS BASI
CFILE (
  TABLESPACE "SYSAUX" ENABLE STORAGE IN ROW CHUNK 81
92 RETENTION
  NOCACHE LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS
 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FL
ASH_CACHE DEFAULT))
 LOB ("XMLDATA"."ATTRCOPY") STORE AS SECUREFILE (
  TABLESPACE "SYSAUX" ENABLE STORAGE IN ROW CHUNK
 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTEN
TS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACH
E DEFAULT))
 LOB ("XMLDATA"."CTSCOPY") STORE AS SECUREFILE
(
  TABLESPACE "SYSAUX" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICA
TES
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXE
XTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL
_FLASH_CACHE DEFAULT))



1 row selected.

SQL> 
SQL> 
SQL> alter table XDB.XDB$RESOURCE add (ref(xmldata.XMLREF) with rowid);

Table altered.

SQL> alter table XDB.XDB$RESOURCE add (ref(xmldata.XMLREF) allow primary key);

Table altered.

SQL> 
SQL> create unique index xdb.xdb$resource_oid_index on XDB.XDB$RESOURCE e
  2    (sys_op_r2o(e.xmldata.xmlref));

Index created.

SQL> 
SQL> create index xdb.xdb$resource_acloid_idx on XDB.XDB$RESOURCE e (e.xmldata.ACLOID);

Index created.

SQL> 
SQL> /*
SQL> NOLOGGING LOB (xmllob) STORE AS
SQL>   (tablespace xdb_resinfo storage (initial 100m next 100m pctincrease 0)
SQL>    nocache nologging chunk 32k);
SQL> */
SQL> 
SQL> create table xdb.xdb$nlocks of xdb.xdb$nlocks_t;

Table created.

SQL> 
SQL> /* ------------------------------------------------------------------- */
SQL> /*                          INDEXES                                    */
SQL> /* ------------------------------------------------------------------- */
SQL> 
SQL> /*
SQL> create index xdb$resource_xmlref_i on xdb$resource (sys_op_r2o(xmldata.xmlref));
SQL> */
SQL> 
SQL> create index xdb.xdb$nlocks_rawtoken_idx on xdb.xdb$nlocks (rawtoken);

Index created.

SQL> create index xdb.xdb$nlocks_child_name_idx on xdb.xdb$nlocks (child_name);

Index created.

SQL> create index xdb.xdb$nlocks_parent_oid_idx on xdb.xdb$nlocks (parent_oid);

Index created.

SQL> /* None for now */
SQL> 
SQL> 
SQL> 
SQL> Rem Add XDB schema for resources
SQL> @@catxdbdr.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catxdbdr.sql /main/27 2010/03/16 12:15:55 vhosur Exp $
SQL> Rem
SQL> Rem catxdbdr.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2010, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbdr.sql -XDB initialization Data for Resource type
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Initialization data (schema for resource) for XDB.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Property numbers for resources start at 701.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    vhosur      01/16/10 - Fix for bug 9014297
SQL> Rem    vhosur      01/04/10 - Fix bug 4259338
SQL> Rem    ataracha    10/29/09 - make IsXMLIndexed unmutable
SQL> Rem    thbaby      05/11/06 - add IsXMLIndexed Resource attribute
SQL> Rem    pnath       03/05/06 - add res attr HasUnresolvedLinks
SQL> Rem    spannala    08/13/04 - changing contents copy type to hexbinary
SQL> Rem    spannala    06/28/04 - adding columns for attrcopy, contents copy
SQL> Rem    najain      05/13/04 - add snapshot
SQL> Rem    thbaby      01/24/06 - make versioning-related attributes hidden
SQL> Rem    mrafiq      09/20/05 - merging changes for upgrade/downgrade
SQL> Rem    ataracha    04/20/04 - Make OIDList inlined
SQL> Rem    thoang      09/23/03 - Add RCList element
SQL> Rem    smalde      05/26/05 - Add Content Size
SQL> Rem    spannala    08/13/04 - changing contents copy type to hexbinary
SQL> Rem    spannala    06/28/04 - adding columns for attrcopy, contents copy
SQL> Rem    najain      05/13/04 - add snapshot
SQL> Rem    rmurthy     02/17/05 - populate namespace array
SQL> Rem    pnath       01/19/05 - make Locks top level
SQL> Rem    pnath       10/05/04 - Introducing Locks element in Resource schema
SQL> Rem    abagrawa    02/10/04 - Add SBResExtra
SQL> Rem    najain      08/11/03 - add HierSchmBasedRes property
SQL> Rem    njalali     01/06/03 - making some props read-only
SQL> Rem    abagrawa    01/15/03 - Update insertSimple usage
SQL> Rem    najain      07/23/02 - sticky ref support
SQL> Rem    rmurthy     06/28/02 - change memtype from XOBD to XOB
SQL> Rem    mkrishna    04/03/02 - fix catxdbdr for XMLLob
SQL> Rem    rmurthy     03/15/02 - change to xdb$schema_t constructor
SQL> Rem    njalali     02/13/02 - adding boolan property VersionHistory
SQL> Rem    mkrishna    01/29/02 - fix xdb$resource to be non-PD
SQL> Rem    mkrishna    01/28/02 - fix xdb$resource to have ##other namespace
SQL> Rem    spannala    12/27/01 - not switching users in xdb install
SQL> Rem    njalali     12/19/01 - making versionid and activityid sb4''s
SQL> Rem    njalali     12/04/01 - transient properties
SQL> Rem    mkrishna    11/01/01 - change xmldata to xmldata
SQL> Rem    rmurthy     11/21/01 - specify sql colltype names
SQL> Rem    sichandr    11/28/01 - set global flag in bootstrap schemas
SQL> Rem    sichandr    10/31/01 - add ID attribute
SQL> Rem    nmontoya    11/02/01 - setting max namelen to 4000 for LDAP
SQL> Rem    njalali     10/27/01 - using timestamp
SQL> Rem    njalali     10/26/01 - changing to date
SQL> Rem    nle         10/05/01 - versioning
SQL> Rem    nagarwal    08/28/01 - add version attrs
SQL> Rem    njalali     10/25/01 - using GUIDs instead of kusr
SQL> Rem    njalali     09/26/01 - propagating H_INDEX flags to resource
SQL> Rem    sichandr    09/18/01 - support storeVarrayAsTable
SQL> Rem    rmurthy     08/26/01 - add support for substitutionGroup, named group
SQL> Rem    njalali     08/01/01 - changed ANY types
SQL> Rem    rmurthy     08/10/01 - change XDB namespace
SQL> Rem    njalali     07/29/01 - Merged njalali_xmlres2
SQL> Rem    njalali     07/19/01 - added versatile ANY element
SQL> Rem    njalali     07/02/01 - Created
SQL> Rem
SQL> 
SQL> 
SQL> create or replace package xdb.xdb$bootstrapres as
  2          PN_RES_HIDDEN           CONSTANT INTEGER := 705;
  3          PN_RES_INVALID          CONSTANT INTEGER := 706;
  4          PN_RES_VERSIONID        CONSTANT INTEGER := 707;
  5          PN_RES_ACTIVITYID       CONSTANT INTEGER := 708;
  6          PN_RES_CREDAT           CONSTANT INTEGER := 709;
  7          PN_RES_MODDAT           CONSTANT INTEGER := 710;
  8          PN_RES_AUTHOR           CONSTANT INTEGER := 711;
  9          PN_RES_DISPNAME         CONSTANT INTEGER := 712;
 10          PN_RES_RESCOMMENT       CONSTANT INTEGER := 713;
 11          PN_RES_LANGUAGE         CONSTANT INTEGER := 714;
 12          PN_RES_CHARSET          CONSTANT INTEGER := 715;
 13          PN_RES_CONTYPE          CONSTANT INTEGER := 716;
 14          PN_RES_REFCOUNT         CONSTANT INTEGER := 717;
 15          PN_RES_LOCKS            CONSTANT INTEGER := 718;
 16          PN_RES_ACLOID           CONSTANT INTEGER := 719;
 17          PN_RES_OWNER            CONSTANT INTEGER := 720;
 18          PN_RES_OWNERID          CONSTANT INTEGER := 721;
 19          PN_RES_CREATOR          CONSTANT INTEGER := 722;
 20          PN_RES_CREATORID        CONSTANT INTEGER := 723;
 21          PN_RES_LASTMODIFIER     CONSTANT INTEGER := 724;
 22          PN_RES_LASTMODIFIERID   CONSTANT INTEGER := 725;
 23          PN_RES_SCHELEM          CONSTANT INTEGER := 726;
 24          PN_RES_ELNUM            CONSTANT INTEGER := 727;
 25          PN_RES_SCHOID           CONSTANT INTEGER := 728;
 26          PN_RES_XMLREF           CONSTANT INTEGER := 729;
 27          PN_RES_XMLLOB           CONSTANT INTEGER := 730;
 28          PN_RES_FLAGS            CONSTANT INTEGER := 731;
 29          PN_RES_ACL              CONSTANT INTEGER := 732;
 30          PN_RES_CONTENTS         CONSTANT INTEGER := 733;
 31          PN_RES_RESOURCE         CONSTANT INTEGER := 734;
 32          PN_RES_RESEXTRA         CONSTANT INTEGER := 735;
 33          PN_RES_CONTENTS_ANY     CONSTANT INTEGER := 736;
 34          PN_RES_ACL_ANY          CONSTANT INTEGER := 737;
 35          PN_RES_CONTAINER        CONSTANT INTEGER := 738;
 36          PN_RES_CUSTRSLV         CONSTANT INTEGER := 739;
 37          PN_RES_VCRUID           CONSTANT INTEGER := 740;
 38          PN_RES_PARENTS          CONSTANT INTEGER := 741;
 39          PN_RES_VERHIS           CONSTANT INTEGER := 742;
 40          PN_RES_STICKYREF        CONSTANT INTEGER := 743;
 41          PN_RES_HIERSCHMRES      CONSTANT INTEGER := 744;
 42          PN_RES_SBRESEXTRA       CONSTANT INTEGER := 745;
 43          PN_RES_SNAPSHOT         CONSTANT INTEGER := 746;
 44          PN_RES_ATTRCOPY         CONSTANT INTEGER := 747;
 45          PN_RES_ATTRCOPY_ANY     CONSTANT INTEGER := 748;
 46          PN_RES_CTSCOPY          CONSTANT INTEGER := 749;
 47          PN_RES_NODENUM          CONSTANT INTEGER := 750;
 48          PN_RES_CONTENTSIZE      CONSTANT INTEGER := 751;
 49          PN_RES_SIZEONDISK       CONSTANT INTEGER := 752;
 50          PN_RES_SIZEACCURATE     CONSTANT INTEGER := 753;
 51          PN_RES_RCLIST           CONSTANT INTEGER := 754;
 52          PN_RES_OID_LIST         CONSTANT INTEGER := 755;
 53          PN_RES_ISVERSIONABLE    CONSTANT INTEGER := 756;
 54          PN_RES_ISCHECKEDOUT     CONSTANT INTEGER := 757;
 55          PN_RES_ISVERSION        CONSTANT INTEGER := 758;
 56          PN_RES_ISVCR            CONSTANT INTEGER := 759;
 57          PN_RES_ISVERSIONHISTORY CONSTANT INTEGER := 760;
 58          PN_RES_ISWORKSPACE      CONSTANT INTEGER := 761;
 59          PN_RES_BRANCH           CONSTANT INTEGER := 762;
 60          PN_RES_CHECKEDOUTBY     CONSTANT INTEGER := 763;
 61          PN_RES_CHECKEDOUTBYID   CONSTANT INTEGER := 764;
 62          PN_RES_BASEVERSION      CONSTANT INTEGER := 765;
 63          PN_RES_RESLOCKS         CONSTANT INTEGER := 766;
 64          PN_RES_LOCK             CONSTANT INTEGER := 767;
 65          PN_RES_LOCKOWNER        CONSTANT INTEGER := 768;
 66          PN_RES_LOCKMODE         CONSTANT INTEGER := 769;
 67          PN_RES_LOCKTYPE         CONSTANT INTEGER := 770;
 68          PN_RES_LOCKDEPTH        CONSTANT INTEGER := 771;
 69          PN_RES_LOCKEXPIRY       CONSTANT INTEGER := 772;
 70          PN_RES_LOCKTOKEN        CONSTANT INTEGER := 773;
 71          PN_RES_LOCKNODEID       CONSTANT INTEGER := 774;
 72          PN_RES_RESLOCKS_TOPELT  CONSTANT INTEGER := 775;
 73          PN_RES_HASUNRES         CONSTANT INTEGER := 776;
 74          PN_RES_ISXMLINDEXED     CONSTANT INTEGER := 777;
 75  
 76          /* When adding new property change the value of PN_RES_MAX_PROP */
 77  
 78          PN_RES_MIN_PROP         CONSTANT INTEGER := PN_RES_HIDDEN;
 79          PN_RES_MAX_PROP         CONSTANT INTEGER := PN_RES_ISXMLINDEXED;
 80          PN_RES_TOTAL_PROPNUMS   CONSTANT INTEGER := 1 +
 81                                         PN_RES_MAX_PROP - PN_RES_MIN_PROP;
 82          FALSE        CONSTANT RAW(1) := '0';
 83          TRUE         CONSTANT RAW(1) := '1';
 84  
 85          procedure driver;
 86  end;
 87  /

Package created.

SQL> show errors
No errors.
SQL> 
SQL> 
SQL> create or replace package body xdb.xdb$bootstrapres is
  2  
  3  procedure driver is
  4          choice_list     xdb.xdb$xmltype_ref_list_t;
  5          ellist          xdb.xdb$xmltype_ref_list_t;
  6          choice_ellist   xdb.xdb$xmltype_ref_list_t;
  7          simplelist      xdb.xdb$xmltype_ref_list_t;
  8          complexlist     xdb.xdb$xmltype_ref_list_t;
  9          schels          xdb.xdb$xmltype_ref_list_t;
 10          attlist         xdb.xdb$xmltype_ref_list_t;
 11          anylist         xdb.xdb$xmltype_ref_list_t;
 12          schref          ref sys.xmltype;
 13          oraclename_ref  ref sys.xmltype;
 14          resmetastr_ref  ref sys.xmltype;
 15          schelemtype_ref ref sys.xmltype;
 16          guid_ref        ref sys.xmltype;
 17          locksraw_ref    ref sys.xmltype;
 18          conttype_ref    ref sys.xmltype;
 19          attrcopytype_ref    ref sys.xmltype;
 20          acltype_ref     ref sys.xmltype;
 21          resource_ref    ref sys.xmltype;
 22          rcltype_ref     ref sys.xmltype;
 23          schema_i        xdb.xdb$schema_t;
 24          extras_i        sys.xmltypeextra;
 25          res_colcount    integer;
 26          lockmodetype_ref  ref sys.xmltype;
 27          locktypetype_ref  ref sys.xmltype;
 28          lockdepthtype_ref   ref sys.xmltype;
 29          lockcomponentseq_ref  ref sys.xmltype;
 30          lockseq_ref   ref sys.xmltype;
 31          lock_ref      ref sys.xmltype;
 32          locktype_ref  ref sys.xmltype;
 33          lockstype_ref   ref sys.xmltype;
 34          toplocksel_ref  ref sys.xmltype;
 35  
 36  BEGIN
 37          schema_i := xdb.xdb$schema_t('http://xmlns.oracle.com/xdb/XDBResource.xsd',
 38                'http://xmlns.oracle.com/xdb/XDBResource.xsd',
 39                '1.0', 0, null, null, XDB$BOOTSTRAP.FC_QUAL, null, null, null, null, null,
 40                null, null, '17', null, null, FALSE, FALSE, null, null,
 41                null, FALSE, 'XDB',null,null);
 42  
 43          extras_i :=
 44           sys.xmltypeextra(
 45              sys.xmltypepi(
 46                 xdb.xdb$getpickledns(
 47                      'http://www.w3.org/2001/XMLSchema',
 48                      null),
 49                 xdb.xdb$getpickledns(
 50                      'http://xmlns.oracle.com/xdb',
 51                      'xdb'),
 52                 xdb.xdb$getpickledns(
 53                      'http://xmlns.oracle.com/xdb/XDBResource.xsd',
 54                      'xdbres')
 55                ),
 56              null);
 57  
 58          execute immediate 'insert into xdb.xdb$schema s
 59                  (sys_nc_oid$, xmlextra, xmldata) values (:1, :2, :3)
 60                  returning ref(s) into :4'
 61                  using '8758D485E6004793E034080020B242C6', extras_i, schema_i
 62                  returning into schref;
 63  
 64          /* VARRAY tracking top-level schema elements */
 65          schels := xdb.xdb$xmltype_ref_list_t();
 66          schels.extend(2);
 67  
 68          simplelist := xdb.xdb$xmltype_ref_list_t();
 69          simplelist.extend(8);
 70  
 71          complexlist := xdb.xdb$xmltype_ref_list_t();
 72          complexlist.extend(7);
 73  
 74          select attributes into res_colcount from all_types
 75                  where type_name in ('XDB$RESOURCE_T') and owner = 'XDB';
 76  
 77  /*--------------------------------------------------------------------------*/
 78  /* Simple type definition for "OracleUserName"                              */
 79  /*--------------------------------------------------------------------------*/
 80  
 81          /* LDAP users require a 4000-byte maximum length */
 82          oraclename_ref := xdb.xdb$bootstrap.xdb$insertSimple(schref,
 83                 null, 'OracleUserName',
 84                 xdb.xdb$BOOTSTRAP.TR_STRING,
 85                 null, xdb.xdb$BOOTSTRAP.TD_RESTRICTION, '0',null, null,
 86                 1, 4000, null, null, null, null, null, null, null);
 87  
 88          simplelist(1) := oraclename_ref;
 89  
 90  
 91  /*--------------------------------------------------------------------------*/
 92  /* Simple type definition for "ResMetaStr"                                  */
 93  /*--------------------------------------------------------------------------*/
 94  
 95          resmetastr_ref := xdb.xdb$bootstrap.xdb$insertSimple(schref,
 96                 null, 'ResMetaStr',
 97                 xdb.xdb$BOOTSTRAP.TR_STRING,
 98                 null, xdb.xdb$BOOTSTRAP.TD_RESTRICTION, '0', null, null,
 99                 1, 128, null, null, null, null, null, null, null);
100  
101          simplelist(2) := resmetastr_ref;
102  
103  /*--------------------------------------------------------------------------*/
104  /* Simple type definition for "SchElemType"                                 */
105  /*--------------------------------------------------------------------------*/
106  
107          schelemtype_ref := xdb.xdb$bootstrap.xdb$insertSimple(schref,
108                 null, 'SchElemType',
109                 xdb.xdb$BOOTSTRAP.TR_STRING,
110                 null, xdb.xdb$BOOTSTRAP.TD_RESTRICTION, '0', null, null,
111                 1, 4000, null, null, null, null, null, null, null);
112  
113          simplelist(3) := schelemtype_ref;
114  
115  
116  /*--------------------------------------------------------------------------*/
117  /* Simple type definition for "GUID"                                        */
118  /*--------------------------------------------------------------------------*/
119  
120          /*
121           * DB users will continue to be stored as KUSRs (4 bytes), whereas
122           * LDAP users will be stored as GUIDs (16 bytes).  Doubling these
123           * values for hexBinary output, we end up with a range of 8 to 32
124           * characters for this simpletype.  We use hexBinary because it
125           * makes it easier to cut-and-paste OIDs into SQL*Plus.
126           */
127          guid_ref := xdb.xdb$bootstrap.xdb$insertSimple(schref, null, 'GUID',
128                 xdb.xdb$BOOTSTRAP.TR_BINARY,
129                 null, xdb.xdb$BOOTSTRAP.TD_RESTRICTION, '0', null, null,
130                 8, 32, null, null, null, null, null, null, null);
131  
132          simplelist(4) := guid_ref;
133  
134  
135  /*--------------------------------------------------------------------------*/
136  /* Simple type definition for "LocksRaw"                                    */
137  /*--------------------------------------------------------------------------*/
138  
139          locksraw_ref := xdb.xdb$bootstrap.xdb$insertSimple(schref, null,
140                 'LocksRaw', xdb.xdb$BOOTSTRAP.TR_BINARY,
141                 null, xdb.xdb$BOOTSTRAP.TD_RESTRICTION, '0', null, null,
142                 0, 2000, null, null, null, null, null, null, null);
143  
144          simplelist(5) := locksraw_ref;
145  
146  
147  /*-------------------------------------------------------------*/
148  /*                       Locks element starts                  */
149  /*-------------------------------------------------------------*/
150  
151          lockmodetype_ref := xdb.xdb$bootstrap.xdb$insertSimple(schref,
152                 null, 'lockModeType',
153                 xdb.xdb$BOOTSTRAP.TR_STRING,
154                 null, xdb.xdb$BOOTSTRAP.TD_RESTRICTION, '0', null, null,
155                 null, null, null, null, null, null, null, null,
156                 xdb.xdb$enum_values_t('exclusive', 'shared'));
157  
158          simplelist(6) := lockmodetype_ref;
159          locktypetype_ref := xdb.xdb$bootstrap.xdb$insertSimple(schref,
160                 null, 'lockTypeType',
161                 xdb.xdb$BOOTSTRAP.TR_STRING,
162                 null, xdb.xdb$BOOTSTRAP.TD_RESTRICTION, '0', null, null,
163                 null, null, null, null, null, null, null, null,
164                 xdb.xdb$enum_values_t('read-write', 'write', 'read'));
165          simplelist(7) := locktypetype_ref;
166  
167          lockdepthtype_ref := xdb.xdb$bootstrap.xdb$insertSimple(schref,
168                 null, 'lockDepthType',
169                 xdb.xdb$BOOTSTRAP.TR_STRING,
170                 null, xdb.xdb$BOOTSTRAP.TD_RESTRICTION, '0', null, null,
171                 null, null, null, null, null, null, null, null,
172                  xdb.xdb$enum_values_t('0', 'infinity'));
173          simplelist(8) := lockdepthtype_ref;
174  
175  
176          ellist := xdb.xdb$xmltype_ref_list_t();
177          ellist.extend(5);
178  
179          ellist(1) := xdb.xdb$bootstrap.xdb$insertElement(schref,
180                        PN_RES_LOCKOWNER,
181                        'LockOwner',  xdb.xdb$BOOTSTRAP.TR_STRING,
182                        1, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
183                        FALSE, TRUE, FALSE,
184                        null,null, null,
185                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
186                        null, null, null,
187                        null, 1, FALSE, null, null,
188                        FALSE, TRUE, TRUE, FALSE, FALSE,
189                        null, null, null, null, FALSE, null, null, null);
190  
191  
192  
193  
194          ellist(2) := xdb.xdb$bootstrap.xdb$insertElement(schref,
195                        PN_RES_LOCKMODE,
196                        'Mode', xdb.xdb$qname('01', 'lockModeType'),
197                        1, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
198                        FALSE, TRUE, FALSE,
199                        null, null, null,
200                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
201                        lockmodetype_ref, null, null,
202                        null, 1, FALSE, null, null,
203                        FALSE, TRUE, TRUE, FALSE, FALSE,
204                        null, null, null, null, FALSE, null, null, null);
205  
206  
207          ellist(3) := xdb.xdb$bootstrap.xdb$insertElement(schref,
208                        PN_RES_LOCKTYPE,
209                        'Type', xdb.xdb$qname('01', 'lockTypeType'),
210                        1, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
211                        FALSE, TRUE, FALSE,
212                        null, null, null,
213                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
214                        locktypetype_ref, null, null,
215                        null, 1, FALSE, null, null,
216                        FALSE, TRUE, TRUE, FALSE, FALSE,
217                        null, null, null, null, FALSE, null, null, null);
218  
219  
220          ellist(4) := xdb.xdb$bootstrap.xdb$insertElement(schref,
221                        PN_RES_LOCKDEPTH,
222                        'Depth', xdb.xdb$qname('01', 'lockDepthType'),
223                        1, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
224                        FALSE, TRUE, FALSE,
225                        null, null, null,
226                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
227                        lockdepthtype_ref, null, null,
228                        null, 1, FALSE, null, null,
229                        FALSE, TRUE, TRUE, FALSE, FALSE,
230                        null, null, null, null, FALSE, null, null, null);
231  
232  
233  
234          ellist(5) := xdb.xdb$bootstrap.xdb$insertElement(schref,
235                        PN_RES_LOCKEXPIRY,
236                        'Expiry', xdb.xdb$qname('00', 'dateTime'),
237                        0, 1, null, xdb.xdb$BOOTSTRAP.T_TIMESTAMP,
238                        FALSE, TRUE, FALSE,
239                        null, null, null,
240                        xdb.xdb$BOOTSTRAP.JT_TIMESTAMP, null, null,
241                        null, null, null,
242                        null, 1, FALSE, null, null,
243                        FALSE, TRUE, TRUE, FALSE, FALSE,
244                        null, null, null, null, FALSE, null, null, null);
245  
246  
247  
248          choice_ellist := xdb.xdb$xmltype_ref_list_t();
249          choice_ellist.extend(2);
250           choice_ellist(1) := xdb.xdb$bootstrap.xdb$insertElement(schref,
251                        PN_RES_LOCKTOKEN,
252                        'Token', xdb.xdb$BOOTSTRAP.TR_STRING,
253                        0, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING, FALSE,
254                        TRUE, FALSE,
255                        null, null, null,
256                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
257                        null, null, null,
258                        null, 1, FALSE, null, null,
259                        FALSE, TRUE, TRUE, FALSE, FALSE,
260                        null, null, null, null, FALSE, null, null, null);
261  
262          choice_ellist(2) := xdb.xdb$bootstrap.xdb$insertElement(schref,
263                        PN_RES_LOCKNODEID,
264                        'NodeId',  xdb.xdb$BOOTSTRAP.TR_STRING,
265                        0, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
266                        FALSE, TRUE, FALSE,
267                        null, null, null,
268                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
269                        null, null, null,
270                        null, 1, FALSE, null, null,
271                        FALSE, TRUE, TRUE, FALSE, FALSE,
272                        null, null, null, null, FALSE, null, null, null);
273  
274          choice_list := xdb.xdb$xmltype_ref_list_t();
275          choice_list.extend(1);
276          choice_list(1) := xdb.xdb$bootstrap.xdb$insertChoice(schref,
277                            choice_ellist);
278  
279  
280          lockcomponentseq_ref := xdb.xdb$bootstrap.xdb$insertSequence(schref,
281                                  ellist, null, choice_list);
282  
283          locktype_ref := xdb.xdb$bootstrap.xdb$insertEmptyComplex();
284           xdb.xdb$bootstrap.xdb$updateComplex(locktype_ref, schref, null,
285                         'lockType', null, FALSE,
286                         null, null, null, null, null, null, null,
287                         lockcomponentseq_ref);
288  
289          complexlist(1) := locktype_ref;
290  
291  --making lock element from lock complex type
292           lock_ref := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_LOCK,
293                                         'Lock',
294                                         xdb.xdb$qname('01', 'lockType'),
295                                         0, 2147483647, null,
296                                         xdb.xdb$BOOTSTRAP.T_XOB, FALSE,
297                                         TRUE, FALSE,
298                                         null, null, null,
299                                         xdb.xdb$BOOTSTRAP.JT_XMLTYPE,
300                                         null, null, locktype_ref,
301                                         null,null,
302                                         null,null,
303                                         FALSE, null, null, FALSE, TRUE,
304                                         TRUE, FALSE, FALSE,
305                                         null, null,
306                                         null,
307                                         null,
308                                         FALSE, null, null, null,
309                                         null, null, null, null, null);
310  
311  -- making sequence model with only 1 element in the array (lock element)
312          ellist := xdb.xdb$xmltype_ref_list_t();
313          ellist.extend(1);
314  
315          ellist(1) := lock_ref;
316  
317          lockseq_ref    := xdb.xdb$bootstrap.xdb$insertSequence(schref, ellist,
318                            null, null);
319  
320          lockstype_ref := xdb.xdb$bootstrap.xdb$insertEmptyComplex();
321           xdb.xdb$bootstrap.xdb$updateComplex(lockstype_ref, schref, null,
322                         'locksType', null, FALSE,
323                         null, null, null, null, null, null, null, lockseq_ref);
324  
325          complexlist(2) := lockstype_ref;
326  
327  /*--------------------------------------------------------------------------*/
328  /* Complex type definition for "ResContentsType"                            */
329  /*--------------------------------------------------------------------------*/
330  
331  
332        anylist := xdb.xdb$xmltype_ref_list_t();
333        anylist.extend(1);
334  
335        anylist(1) := xdb.xdb$bootstrap.xdb$insertAny(schref, PN_RES_CONTENTS_ANY,
336                                    'ContentsAny', null, null, 0, 1, null,
337                                    xdb.xdb$BOOTSTRAP.T_XOB, FALSE, FALSE, FALSE,
338                                    null, null, null,
339                                    xdb.xdb$BOOTSTRAP.JT_XMLTYPE, null,
340                                    null, null, null, null);
341  
342       conttype_ref := xdb.xdb$bootstrap.xdb$insertComplex(schref, null,
343                            'ResContentsType', null, FALSE, null, '0',
344                            null, null, null, null, null, null, null, null, null,
345                            null, null, null, null, null, null, null, null,
346                            anylist);
347       complexlist(3) := conttype_ref;
348  
349  
350  /*--------------------------------------------------------------------------*/
351  /* Complex type definition for "ResAclType"                                 */
352  /*--------------------------------------------------------------------------*/
353  
354  
355        anylist := xdb.xdb$xmltype_ref_list_t();
356        anylist.extend(1);
357  
358        anylist(1) := xdb.xdb$bootstrap.xdb$insertAny(schref, PN_RES_ACL_ANY,
359                                    'ACLAny', null, null, 0, 1, null,
360                                    xdb.xdb$BOOTSTRAP.T_XOB, FALSE, FALSE, FALSE,
361                                    null, null, null,
362                                    xdb.xdb$BOOTSTRAP.JT_XMLTYPE, null,
363                                    null, null, null, null);
364  
365       acltype_ref := xdb.xdb$bootstrap.xdb$insertComplex(schref, null,
366                            'ResAclType', null, FALSE, null, '0',
367                            null, null, null, null, null, null, null, null, null,
368                            null, null, null, null, null, null, null, null,
369                            anylist);
370       complexlist(4) := acltype_ref;
371  
372  
373  /* Top Level Locks Element */
374       toplocksel_ref := xdb.xdb$bootstrap.xdb$insertElement(schref,
375                        PN_RES_RESLOCKS_TOPELT,
376                        'Locks', xdb.xdb$qname('01', 'locksType'),
377                        0, 1, null, xdb.xdb$BOOTSTRAP.T_XOB,
378                        FALSE, TRUE, FALSE,
379                        null, null, null,
380                        xdb.xdb$BOOTSTRAP.JT_XMLTYPE, null, null,
381                         lockstype_ref,null, null,
382                        null, 1, FALSE, null, null,
383                        FALSE, FALSE, TRUE, FALSE, FALSE,
384                        null, null,null, null, FALSE, null ,null,null,
385                        null, null, FALSE,
386                        null, null);
387  
388  /*--------------------------------------------------------------------------*/
389  /* Complex type definition for "AttrCopyType"                               */
390  /*--------------------------------------------------------------------------*/
391  
392  
393        anylist := xdb.xdb$xmltype_ref_list_t();
394        anylist.extend(1);
395  
396        anylist(1) := xdb.xdb$bootstrap.xdb$insertAny(schref, PN_RES_ATTRCOPY_ANY,
397                                    'AttrCopyAny', null, null, 0, 65535, null,
398                                    xdb.xdb$BOOTSTRAP.T_XOB, FALSE, FALSE, FALSE,
399                                    null, null, null,
400                                    xdb.xdb$BOOTSTRAP.JT_XMLTYPE, null,
401                                    null, null, null, null);
402  
403       attrcopytype_ref := xdb.xdb$bootstrap.xdb$insertComplex(schref, null,
404                            'AttrCopyType', null, FALSE, null, '0',
405                            null, null, null, null, null, null, null, null, null,
406                            null, null, null, null, null, null, null, null,
407                            anylist);
408       complexlist(5) := attrcopytype_ref;
409  
410  /*--------------------------------------------------------------------------*/
411  /* Complex type definition for "RCList" */
412  /*--------------------------------------------------------------------------*/
413  
414       ellist := xdb.xdb$xmltype_ref_list_t();
415       ellist.extend(1);
416  
417       ellist(1) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_OID_LIST,
418                        'OID', xdb.xdb$BOOTSTRAP.TR_BINARY,
419                        1, 65535, '16', xdb.xdb$BOOTSTRAP.T_BINARY,
420                        FALSE, FALSE, FALSE, 'OID', 'RAW', null,
421                        xdb.xdb$BOOTSTRAP.JT_BYTEARRAY, null, null, null,
422                        null, null,
423                        null, 1, FALSE, null, null,
424                        FALSE, TRUE, TRUE, FALSE, FALSE,
425                        null, null, null, null, FALSE, null, null, null,
426                        'XDB$OID_LIST_T', 'XDB', FALSE, null);
427  
428       rcltype_ref := xdb.xdb$bootstrap.xdb$insertComplex(schref, null,
429                            'RCListType',
430                            null, FALSE, null, '0',
431                            null, null, null, null, null, null, null, null, null,
432                            null, null, null, null, null, null, ellist, null,
433                            null);
434       complexlist(6) := rcltype_ref;
435  
436  /*--------------------------------------------------------------------------*/
437  /* Complex type definition for "ResourceType" */
438  /*--------------------------------------------------------------------------*/
439  
440        attlist := xdb.xdb$xmltype_ref_list_t();
441        attlist.extend(18);
442  
443        attlist(1) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
444                                 PN_RES_HIDDEN, 'Hidden',
445                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
446                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
447                                 FALSE, FALSE,
448                                 null, null, null,
449                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
450                                 null, null, null, null, null, FALSE,
451                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
452  
453        attlist(2) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
454                                 PN_RES_INVALID, 'Invalid',
455                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
456                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
457                                 FALSE, FALSE,
458                                 null, null, null,
459                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
460                                 null, null, null, null, null, FALSE,
461                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
462  
463        attlist(3) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
464                                 PN_RES_VERSIONID, 'VersionID',
465                                 xdb.xdb$BOOTSTRAP.TR_INT, 0, 1,
466                                 '4', xdb.xdb$BOOTSTRAP.T_INTEGER, FALSE,
467                                 FALSE, FALSE,
468                                 'VERSIONID', 'INTEGER', null,
469                                 xdb.xdb$BOOTSTRAP.JT_LONG, null, null,
470                                 null, null, null);
471  
472        attlist(4) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
473                                 PN_RES_ACTIVITYID, 'ActivityID',
474                                 xdb.xdb$BOOTSTRAP.TR_INT, 0, 1,
475                                 '4', xdb.xdb$BOOTSTRAP.T_INTEGER, FALSE,
476                                 FALSE, FALSE,
477                                 'ACTIVITYID', 'INTEGER', null,
478                                 xdb.xdb$BOOTSTRAP.JT_LONG, null, null,
479                                 null, null, null);
480  
481        attlist(5) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
482                                 PN_RES_CONTAINER, 'Container',
483                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
484                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
485                                 TRUE, FALSE,
486                                 null, null, null,
487                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
488                                 null, null, null, null, null, FALSE,
489                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
490  
491        attlist(6) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
492                                 PN_RES_CUSTRSLV, 'CustomRslv',
493                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
494                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
495                                 FALSE, FALSE,
496                                 null, null, null,
497                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
498                                 null, null, null, null, null, FALSE,
499                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
500  
501        attlist(7) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
502                                 PN_RES_VERHIS, 'VersionHistory',
503                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
504                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
505                                 FALSE, FALSE,
506                                 null, null, null,
507                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
508                                 null, null, null, null, null, FALSE,
509                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
510  
511        attlist(8) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
512                                 PN_RES_STICKYREF, 'StickyRef',
513                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
514                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
515                                 FALSE, FALSE,
516                                 null, null, null,
517                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
518                                 null, null, null, null, null, FALSE,
519                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
520  
521        attlist(9) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
522                                 PN_RES_HIERSCHMRES, 'HierSchmResource',
523                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
524                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
525                                 FALSE, FALSE,
526                                 null, null, null,
527                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
528                                 null, null, null, null, null, TRUE,
529                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
530  
531        attlist(10):= xdb.xdb$bootstrap.xdb$insertAttr(schref,
532                                 PN_RES_SIZEACCURATE, 'SizeAccurate',
533                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 0, 1,
534                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
535                                 FALSE, FALSE,
536                                 null, null, null,
537                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
538                                 null, null, null, null, null, TRUE,
539                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
540  
541        attlist(11) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
542                                 PN_RES_ISVERSIONABLE, 'IsVersionable',
543                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
544                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
545                                 FALSE, FALSE,
546                                 null, null, null,
547                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
548                                 null, null, null, null, null, TRUE,
549                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
550  
551        attlist(12) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
552                                 PN_RES_ISCHECKEDOUT, 'IsCheckedOut',
553                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
554                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
555                                 FALSE, FALSE,
556                                 null, null, null,
557                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
558                                 null, null, null, null, null, TRUE,
559                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
560  
561        attlist(13) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
562                                 PN_RES_ISVERSION, 'IsVersion',
563                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
564                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
565                                 FALSE, FALSE,
566                                 null, null, null,
567                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
568                                 null, null, null, null, null, TRUE,
569                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
570  
571        attlist(14) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
572                                 PN_RES_ISVCR, 'IsVCR',
573                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
574                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
575                                 FALSE, FALSE,
576                                 null, null, null,
577                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
578                                 null, null, null, null, null, TRUE,
579                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
580  
581         attlist(15) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
582                                 PN_RES_ISVERSIONHISTORY, 'IsVersionHistory',
583                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
584                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
585                                 FALSE, FALSE,
586                                 null, null, null,
587                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
588                                 null, null, null, null, null, TRUE,
589                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
590  
591         attlist(16) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
592                                 PN_RES_ISWORKSPACE, 'IsWorkspace',
593                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
594                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
595                                 FALSE, FALSE,
596                                 null, null, null,
597                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
598                                 null, null, null, null, null, TRUE,
599                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
600  
601         attlist(17) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
602                                 PN_RES_HASUNRES, 'HasUnresolvedLinks',
603                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
604                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
605                                 FALSE, FALSE,
606                                 null, null, null,
607                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
608                                 null, null, null, null, null, FALSE,
609                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
610  
611        attlist(18) := xdb.xdb$bootstrap.xdb$insertAttr(schref,
612                                 PN_RES_ISXMLINDEXED, 'IsXMLIndexed',
613                                 xdb.xdb$BOOTSTRAP.TR_BOOLEAN, 1, 1,
614                                 '1', xdb.xdb$BOOTSTRAP.T_BOOLEAN, FALSE,
615                                 TRUE, FALSE,
616                                 null, null, null,
617                                 xdb.xdb$BOOTSTRAP.JT_BOOLEAN, 'false', null,
618                                 null, null, null, null, null, TRUE,
619                                 xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
620  
621        ellist := xdb.xdb$xmltype_ref_list_t();
622        ellist.extend(40);
623  
624        ellist(1) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_CREDAT,
625                        'CreationDate', xdb.xdb$qname('00', 'dateTime'), 1, 1,
626                        null, xdb.xdb$BOOTSTRAP.T_TIMESTAMP, FALSE, FALSE, FALSE,
627                        'CREATIONDATE', 'TIMESTAMP', null,
628                        xdb.xdb$BOOTSTRAP.JT_TIMESTAMP, null,
629                        null, null, null, null,
630                        null, 1, FALSE, null, null,
631                        FALSE, TRUE, TRUE, FALSE, FALSE,
632                        null, null, null, null, FALSE, null, null, null);
633  
634        ellist(2) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_MODDAT,
635                        'ModificationDate', xdb.xdb$qname('00', 'dateTime'), 1, 1,
636                        null, xdb.xdb$BOOTSTRAP.T_TIMESTAMP, FALSE, FALSE, FALSE,
637                        'MODIFICATIONDATE', 'TIMESTAMP', null,
638                        xdb.xdb$BOOTSTRAP.JT_TIMESTAMP, null,
639                        null, null, null, null,
640                        null, 1, FALSE, null, null,
641                        FALSE, TRUE, TRUE, FALSE, FALSE,
642                        null, null, null, null, FALSE, null, null, null);
643  
644        ellist(3) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_AUTHOR,
645                        'Author', xdb.xdb$qname('01', 'ResMetaStr'),
646                        0, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
647                        FALSE, FALSE, FALSE,
648                        'AUTHOR', 'VARCHAR2', null,
649                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
650                        resmetastr_ref, null, null,
651                        null, 1, FALSE, null, null,
652                        FALSE, FALSE, TRUE, FALSE, FALSE,
653                        null, null, null, null, FALSE, null, null, null);
654  
655        ellist(4) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_DISPNAME,
656                        'DisplayName', xdb.xdb$qname('01', 'ResMetaStr'),
657                        1, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
658                        FALSE, FALSE, FALSE,
659                        'DISPNAME', 'VARCHAR2', null,
660                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
661                        resmetastr_ref, null, null,
662                        null, 1, FALSE, null, null,
663                        FALSE, FALSE, TRUE, FALSE, FALSE,
664                        null, null, null, null, FALSE, null, null, null);
665  
666        ellist(5) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_RESCOMMENT,
667                        'Comment', xdb.xdb$qname('01', 'ResMetaStr'),
668                        1, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
669                        FALSE, FALSE, FALSE,
670                        'RESCOMMENT', 'VARCHAR2', null,
671                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
672                        resmetastr_ref, null, null,
673                        null, 1, FALSE, null, null,
674                        FALSE, FALSE, TRUE, FALSE, FALSE,
675                        null, null, null, null, FALSE, null, null, null);
676  
677        ellist(6) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_LANGUAGE,
678                        'Language', xdb.xdb$qname('01', 'ResMetaStr'),
679                        1, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
680                        FALSE, FALSE, FALSE,
681                        'LANGUAGE', 'VARCHAR2', null,
682                        xdb.xdb$BOOTSTRAP.JT_STRING, 'en', null,
683                        resmetastr_ref, null, null,
684                        null, 1, FALSE, null, null,
685                        FALSE, FALSE, TRUE, FALSE, FALSE,
686                        null, null, null, null, FALSE, null, null, null);
687  
688        ellist(7) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_CHARSET,
689                        'CharacterSet', xdb.xdb$qname('01', 'ResMetaStr'),
690                        0, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
691                        FALSE, FALSE, FALSE,
692                        'CHARSET', 'VARCHAR2', null,
693                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
694                        resmetastr_ref, null, null,
695                        null, 1, FALSE, null, null,
696                        FALSE, FALSE, TRUE, FALSE, FALSE,
697                        null, null, null, null, FALSE, null, null, null);
698  
699        ellist(8) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_CONTYPE,
700                        'ContentType', xdb.xdb$qname('01', 'ResMetaStr'),
701                        0, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
702                        FALSE, FALSE, FALSE,
703                        'CONTYPE', 'VARCHAR2', null,
704                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
705                        resmetastr_ref, null, null,
706                        null, 1, FALSE, null, null,
707                        FALSE, FALSE, TRUE, FALSE, FALSE,
708                        null, null, null, null, FALSE, null, null, null);
709  
710        ellist(9) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_REFCOUNT,
711                        'RefCount', xdb.xdb$BOOTSTRAP.TR_NNEGINT,
712                        1, 1, '4', xdb.xdb$BOOTSTRAP.T_UNSIGNINT,
713                        FALSE, TRUE, FALSE,
714                        'REFCOUNT', 'RAW', null,
715                        xdb.xdb$BOOTSTRAP.JT_LONG, null, null, null, null, null,
716                        null, 1, FALSE, null, null,
717                        FALSE, TRUE, TRUE, FALSE, FALSE,
718                        null, null, null, null, FALSE, null, null, null);
719  
720        ellist(10) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_LOCKS,
721                        'LockBuf',  xdb.xdb$qname('01', 'LocksRaw'),
722                        0, 1, null, xdb.xdb$BOOTSTRAP.T_BINARY,
723                        FALSE, TRUE, FALSE,
724                        'LOCKS', 'RAW', null,
725                        xdb.xdb$BOOTSTRAP.JT_BYTEARRAY, null, null, locksraw_ref,
726                        null, null, null, 1, FALSE, null, null,
727                        FALSE, FALSE, TRUE, FALSE, FALSE,
728                        null, null, null, null, FALSE, null, null, null);
729  
730        ellist(11) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_ACL,
731                        'ACL', xdb.xdb$qname('01', 'ResAclType'),
732                        0, 1, null, xdb.xdb$BOOTSTRAP.T_XOB, FALSE, FALSE, FALSE,
733                        null, null, null,
734                        xdb.xdb$BOOTSTRAP.JT_XMLTYPE, null, null, acltype_ref,
735                        null, null, null, 0, FALSE, null, null,
736                        FALSE, FALSE, TRUE, FALSE, FALSE, null, null,
737                        'oracle.xdb.ResAclType',
738                        'oracle.xdb.ResAclTypeBean',
739                        FALSE, null, null, null, null, null, FALSE,
740                        xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
741  
742        ellist(12) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_ACLOID,
743                        'ACLOID', xdb.xdb$BOOTSTRAP.TR_BINARY,
744                        1, 1, null, xdb.xdb$BOOTSTRAP.T_BINARY,
745                        FALSE, FALSE, FALSE,
746                        'ACLOID', 'RAW', null,
747                        xdb.xdb$BOOTSTRAP.JT_BYTEARRAY, null, null, null,
748                        null, null, null, 1, FALSE, null, null,
749                        FALSE, TRUE, TRUE, FALSE, FALSE,
750                        null, null, null, null,
751                        FALSE, null, null, null, null, null, TRUE, null, TRUE);
752  
753        ellist(13) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_OWNER,
754                        'Owner', xdb.xdb$qname('01', 'OracleUserName'),
755                        0, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
756                        FALSE, FALSE, FALSE,
757                        null, null, null,
758                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null, oraclename_ref,
759                        null, null, null, 0, FALSE, null, null,
760                        FALSE, FALSE, TRUE, FALSE, FALSE,
761                        null, null, null, null,
762                        FALSE, null, null, null, null, null, FALSE,
763                        xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
764  
765        ellist(14) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_OWNERID,
766                        'OwnerID', xdb.xdb$qname('01', 'GUID'),
767                        1, 1, null, xdb.xdb$BOOTSTRAP.T_BINARY,
768                        FALSE, FALSE, FALSE,
769                        'OWNERID', 'RAW', null,
770                        xdb.xdb$BOOTSTRAP.JT_BYTEARRAY, null, null, guid_ref,
771                        null, null, null, 1, FALSE, null, null,
772                        FALSE, TRUE, TRUE, FALSE, FALSE,
773                        null, null, null, null,
774                        FALSE, null, null, null, null, null, TRUE, null, TRUE);
775  
776        ellist(15) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_CREATOR,
777                        'Creator', xdb.xdb$qname('01', 'OracleUserName'),
778                        0, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
779                        FALSE, FALSE, FALSE,
780                        null, null, null,
781                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null, oraclename_ref,
782                        null, null, null, 0, FALSE, null, null,
783                        FALSE, FALSE, TRUE, FALSE, FALSE,
784                        null, null, null, null,
785                        FALSE, null, null, null, null, null, FALSE,
786                        xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
787  
788        ellist(16) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_CREATORID,
789                        'CreatorID', xdb.xdb$qname('01', 'GUID'),
790                        1, 1, null, xdb.xdb$BOOTSTRAP.T_BINARY,
791                        FALSE, FALSE, FALSE,
792                        'CREATORID', 'RAW', null,
793                        xdb.xdb$BOOTSTRAP.JT_BYTEARRAY, null, null, guid_ref,
794                        null, null, null, 1, FALSE, null, null,
795                        FALSE, TRUE, TRUE, FALSE, FALSE,
796                        null, null, null, null,
797                        FALSE, null, null, null, null, null, TRUE, null, TRUE);
798  
799        ellist(17) := xdb.xdb$bootstrap.xdb$insertElement(schref,
800                        PN_RES_LASTMODIFIER,
801                        'LastModifier', xdb.xdb$qname('01', 'OracleUserName'),
802                        0, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
803                        FALSE, FALSE, FALSE,
804                        null, null, null,
805                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null, oraclename_ref,
806                        null, null, null, 0, FALSE, null, null,
807                        FALSE, FALSE, TRUE, FALSE, FALSE,
808                        null, null, null, null,
809                        FALSE, null, null, null, null, null, FALSE,
810                        xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
811  
812        ellist(18) := xdb.xdb$bootstrap.xdb$insertElement(schref,
813                        PN_RES_LASTMODIFIERID,
814                        'LastModifierID', xdb.xdb$qname('01', 'GUID'),
815                        1, 1, null, xdb.xdb$BOOTSTRAP.T_BINARY,
816                        FALSE, FALSE, FALSE,
817                        'LASTMODIFIERID', 'RAW', null,
818                        xdb.xdb$BOOTSTRAP.JT_BYTEARRAY, null, null, guid_ref,
819                        null, null, null, 1, FALSE, null, null,
820                        FALSE, TRUE, TRUE, FALSE, FALSE,
821                        null, null, null, null,
822                        FALSE, null, null, null, null, null, TRUE, null, TRUE);
823  
824        ellist(19) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_SCHELEM,
825                        'SchemaElement', xdb.xdb$qname('01', 'SchElemType'),
826                        0, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
827                        FALSE, FALSE, FALSE,
828                        null, null, null,
829                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
830                        schelemtype_ref, null, null,
831                        null, 0, FALSE, null, null,
832                        FALSE, FALSE, TRUE, FALSE, FALSE,
833                        null, null, null, null, FALSE, null, null, null,
834                        null, null, FALSE,
835                        xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
836  
837        ellist(20) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_ELNUM,
838                        'ElNum', xdb.xdb$BOOTSTRAP.TR_NNEGINT,
839                        1, 1, '4', xdb.xdb$BOOTSTRAP.T_INTEGER,
840                        FALSE, FALSE, FALSE,
841                        'ELNUM', 'INTEGER', null,
842                        xdb.xdb$BOOTSTRAP.JT_LONG, null, null, null, null, null,
843                        null, 1, FALSE, null, null,
844                        FALSE, TRUE, TRUE, FALSE, FALSE,
845                        null, null, null, null, FALSE, null, null, null,
846                        null, null, TRUE, null, TRUE);
847  
848        ellist(21) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_SCHOID,
849                        'SchOID', xdb.xdb$BOOTSTRAP.TR_BINARY,
850                        1, 1, null, xdb.xdb$BOOTSTRAP.T_BINARY,
851                        FALSE, FALSE, FALSE,
852                        'SCHOID', 'RAW', null,
853                        xdb.xdb$BOOTSTRAP.JT_BYTEARRAY, null, null, null,
854                        null, null, null, 1, FALSE, null, null,
855                        FALSE, TRUE, TRUE, FALSE, FALSE,
856                        null, null, null, null,
857                        FALSE, null, null, null, null, null, TRUE, null, TRUE);
858  
859        ellist(22) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_CONTENTS,
860                        'Contents', xdb.xdb$qname('01', 'ResContentsType'),
861                        0, 1, null, xdb.xdb$BOOTSTRAP.T_XOB, FALSE, FALSE, FALSE,
862                        null, null, null,
863                        xdb.xdb$BOOTSTRAP.JT_XMLTYPE, null, null, conttype_ref,
864                        null, null, null, 0, FALSE, null, null,
865                        FALSE, FALSE, TRUE, FALSE, FALSE, null, null,
866                        'oracle.xdb.ResContentsType',
867                        'oracle.xdb.ResContentsTypeBean',
868                        FALSE, null, null, null, null, null, FALSE,
869                        xdb.xdb$BOOTSTRAP.TRANSIENT_MANIFESTED, FALSE);
870  
871        ellist(23) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_XMLREF,
872                        'XMLRef', xdb.xdb$qname('00', 'REF'),
873                        0, 1, null, xdb.xdb$BOOTSTRAP.T_REF, FALSE, TRUE, FALSE,
874                        'XMLREF', 'REF', null,
875                        xdb.xdb$BOOTSTRAP.JT_REFERENCE, null, null,
876                        null, null, null,
877                        null, 0, FALSE, null, null,
878                        FALSE, FALSE, TRUE, FALSE, FALSE,
879                        null, null, null, null, FALSE, null, null, null,
880                        null, null, TRUE, null, FALSE);
881  
882        ellist(24) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_XMLLOB,
883                        'XMLLob', xdb.xdb$BOOTSTRAP.TR_BINARY,
884                        0, 1, null, '71',
885                        FALSE, TRUE, FALSE,
886                        'XMLLOB', 'BLOB', null,
887                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null, null, null, null,
888                        null, 0, FALSE, null, null,
889                        FALSE, FALSE, TRUE, FALSE, FALSE,
890                        null, null, null, null, FALSE, null, null, null,
891                        null, null, TRUE, null, FALSE);
892  
893        ellist(25) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_FLAGS,
894                        'Flags', xdb.xdb$BOOTSTRAP.TR_NNEGINT,
895                        1, 1, '4', xdb.xdb$BOOTSTRAP.T_INTEGER,
896                        FALSE, TRUE, FALSE,
897                        'FLAGS', 'RAW', null,
898                        xdb.xdb$BOOTSTRAP.JT_LONG, null, null, null, null, null,
899                        null, 0, FALSE, null, null,
900                        FALSE, TRUE, TRUE, FALSE, FALSE,
901                        null, null, null, null, FALSE, null, null, null,
902                        null, null, TRUE, null, TRUE);
903  
904        ellist(26) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_VCRUID,
905                        'VCRUID', xdb.xdb$qname('01', 'GUID'),
906                        1, 1, null, xdb.xdb$BOOTSTRAP.T_BINARY,
907                        FALSE, FALSE, FALSE,
908                        'VCRUID', 'RAW', null,
909                        xdb.xdb$BOOTSTRAP.JT_BYTEARRAY, null, null, guid_ref,
910                        null, null, null, 1, FALSE, null, null,
911                        FALSE, FALSE, TRUE, FALSE, FALSE,
912                        null, null, null, null,
913                        FALSE, null, null, null);
914  
915        ellist(27) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_PARENTS,
916                        'Parents', xdb.xdb$BOOTSTRAP.TR_BINARY,
917                        0, 1000,null, xdb.xdb$BOOTSTRAP.T_BINARY,
918                        FALSE, FALSE, FALSE,
919                        'PARENTS', 'RAW', null,
920                        xdb.xdb$BOOTSTRAP.JT_REFERENCE, null, null, null,
921                        null, null, null, 0, FALSE, null, null,
922                        FALSE, FALSE, TRUE, FALSE, FALSE,
923                        null, null, null, null,
924                        FALSE, null, null, null, 'XDB$PREDECESSOR_LIST_T','XDB');
925  
926        ellist(28) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_SBRESEXTRA,
927                        'SBResExtra', xdb.xdb$qname('00', 'REF'),
928                        0, 2147483647, null, xdb.xdb$BOOTSTRAP.T_REF, FALSE, TRUE,
929                        FALSE, 'SBRESEXTRA', 'REF', null,
930                        xdb.xdb$BOOTSTRAP.JT_REFERENCE, null, null,
931                        null, null, null,
932                        null, 0, FALSE, null, null,
933                        FALSE, FALSE, TRUE, FALSE, FALSE,
934                        null, null, null, null, FALSE, null, null, null,
935                        'XDB$XMLTYPE_REF_LIST_T', 'XDB', TRUE, null, FALSE);
936        ellist(29) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_SNAPSHOT,
937                        'Snapshot', xdb.xdb$BOOTSTRAP.TR_BINARY,
938                        1, 1, null, xdb.xdb$BOOTSTRAP.T_BINARY,
939                        FALSE, TRUE, FALSE,
940                        'SNAPSHOT', 'RAW', null,
941                        xdb.xdb$BOOTSTRAP.JT_BYTEARRAY, null, null, null,
942                        null, null, null, 0, FALSE, null, null,
943                        FALSE, TRUE, TRUE, FALSE, FALSE,
944                        null, null, null, null, FALSE, null, null, null,
945                        null, null, TRUE, null, TRUE);
946  
947        ellist(30) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_ATTRCOPY,
948                 'AttrCopy', xdb.xdb$qname('01', 'AttrCopyType'),
949                 0, /* minoccurs */
950                 1, null, xdb.xdb$BOOTSTRAP.T_XOB, FALSE, TRUE, /* mutable */
951                 FALSE, 'ATTRCOPY', 'BLOB', null,
952                 xdb.xdb$BOOTSTRAP.JT_XMLTYPE, /* java_type */
953                 null, null, attrcopytype_ref, null, null,  /* propref_ref */
954                 null, 0, FALSE, null, null,  /* block */
955                 FALSE, FALSE, TRUE, FALSE, FALSE,/* maintain_dom */
956                 null, null, null, null, FALSE,  /* global */
957                 null, null, null, null, null, /* sqlcollschema */
958                 TRUE, null, TRUE);
959  
960        ellist(31) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_CTSCOPY,
961                        'CtsCopy', xdb.xdb$BOOTSTRAP.TR_BINARY, 0, 1, null, '71',
962                        FALSE, TRUE, FALSE, 'CTSCOPY', 'BLOB', null,
963                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null, null, null,
964                        null, null, 1, FALSE, null, null, FALSE, FALSE, TRUE,
965                        FALSE, FALSE, null, null, null, null, FALSE, null, null,
966                        null, null, null, TRUE, null, FALSE);
967  
968  
969        ellist(32) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_NODENUM,
970                        'NodeNum', xdb.xdb$BOOTSTRAP.TR_BINARY,
971                        1, 1, null, xdb.xdb$BOOTSTRAP.T_BINARY,
972                        FALSE, TRUE, FALSE,
973                        'NODENUM', 'RAW', null,
974                        xdb.xdb$BOOTSTRAP.JT_BYTEARRAY, null, null, null,
975                        null, null, null, 0, FALSE, null, null,
976                        FALSE, TRUE, TRUE, FALSE, FALSE,
977                        null, null, null, null, FALSE, null, null, null,
978                        null, null, TRUE, null, TRUE);
979  
980        ellist(33) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_CONTENTSIZE,
981                        'ContentSize', xdb.xdb$BOOTSTRAP.TR_INT,
982                        0, 1, '8', xdb.xdb$BOOTSTRAP.T_INTEGER, FALSE, FALSE,
983                        FALSE, null, null, null,
984                        xdb.xdb$BOOTSTRAP.JT_LONG, null, null,
985                        null, null, null,
986                        null, 0, FALSE, null, null,
987                        FALSE, TRUE, TRUE, FALSE, FALSE,
988                        null, null, null, null,
989                        FALSE, null, null, null, null, null, TRUE,
990                        xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
991  
992        ellist(34) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_SIZEONDISK,
993                        'SizeOnDisk', xdb.xdb$BOOTSTRAP.TR_NNEGINT,
994                        0, 1, '8', xdb.xdb$BOOTSTRAP.T_INTEGER, FALSE, FALSE,
995                        FALSE, 'SIZEONDISK', 'INTEGER', null,
996                        xdb.xdb$BOOTSTRAP.JT_LONG, null, null,
997                        null, null, null,
998                        null, 0, FALSE, null, null,
999                        FALSE, TRUE, TRUE, FALSE, FALSE,
1000                        null, null, null, null,
1001                        FALSE, null, null, null, null, null, TRUE, null, TRUE);
1002  
1003        ellist(35) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_RCLIST,
1004                        'RCList', xdb.xdb$qname('01', 'RCListType'),
1005                        0, 1, null, xdb.xdb$BOOTSTRAP.T_XOB, FALSE, FALSE,
1006                        FALSE, 'RCLIST', 'XDB$RCLIST_T', 'XDB',
1007                        xdb.xdb$BOOTSTRAP.JT_XMLTYPE, null, null,
1008                        rcltype_ref, null, null, null,
1009                        1, FALSE, null, null,
1010                        FALSE, FALSE, TRUE, FALSE, FALSE,
1011                        FALSE, null, 'oracle.xdb.RCList',
1012                        'oracle.xdb.RCListBean', TRUE, null, null, null,
1013                        null, null, TRUE, null, TRUE);
1014  
1015          ellist(36) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_BRANCH,
1016                        'Branch', xdb.xdb$BOOTSTRAP.TR_STRING,
1017                        0, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
1018                        FALSE, FALSE, FALSE,
1019                        'BRANCH', 'VARCHAR2', null,
1020                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null,
1021                        null, null, null,
1022                        null, 1, FALSE, null, null,
1023                        FALSE, FALSE, TRUE, FALSE, FALSE,
1024                        null, null, null, null,
1025                        FALSE, null, null, null, null, null, FALSE,
1026                        xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
1027  
1028          ellist(37) := xdb.xdb$bootstrap.xdb$insertElement(schref,
1029                        PN_RES_CHECKEDOUTBY,
1030                        'CheckedOutBy', xdb.xdb$qname('01', 'OracleUserName'),
1031                        0, 1, null, xdb.xdb$BOOTSTRAP.T_CSTRING,
1032                        FALSE, FALSE, FALSE,
1033                        null, null, null,
1034                        xdb.xdb$BOOTSTRAP.JT_STRING, null, null, oraclename_ref,
1035                        null, null, null, 0, FALSE, null, null,
1036                        FALSE, FALSE, TRUE, FALSE, FALSE,
1037                        null, null, null, null,
1038                        FALSE, null, null, null, null, null, FALSE,
1039                        xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, FALSE);
1040  
1041        ellist(38) := xdb.xdb$bootstrap.xdb$insertElement(schref,
1042                        PN_RES_CHECKEDOUTBYID,
1043                        'CheckedOutByID', xdb.xdb$qname('01', 'GUID'),
1044                        0, 1, null, xdb.xdb$BOOTSTRAP.T_BINARY,
1045                        FALSE, FALSE, FALSE,
1046                        'CHECKEDOUTBYID', 'RAW', null,
1047                        xdb.xdb$BOOTSTRAP.JT_BYTEARRAY, null, null, guid_ref,
1048                        null, null, null, 1, FALSE, null, null,
1049                        FALSE, TRUE, TRUE, FALSE, FALSE,
1050                        null, null, null, null,
1051                        FALSE, null, null, null, null, null, TRUE, null, TRUE);
1052  
1053        ellist(39) := xdb.xdb$bootstrap.xdb$insertElement(schref,
1054                        PN_RES_BASEVERSION,
1055                        'BaseVersion', xdb.xdb$BOOTSTRAP.TR_BINARY,
1056                        0, 1, null, xdb.xdb$BOOTSTRAP.T_BINARY,
1057                        FALSE, FALSE, FALSE,
1058                        'BASEVERSION', 'RAW', null,
1059                        xdb.xdb$BOOTSTRAP.JT_BYTEARRAY, null, null, null,
1060                        null, null, null, 1, FALSE, null, null,
1061                        FALSE, TRUE, TRUE, FALSE, FALSE,
1062                        null, null, null, null,
1063                        FALSE, null, null, null, null, null, FALSE, null, FALSE);
1064  
1065  
1066        ellist(40) := xdb.xdb$bootstrap.xdb$insertElement(schref,
1067                        PN_RES_RESLOCKS,
1068                        'Locks', xdb.xdb$qname('01', 'locksType'),
1069                        0, 1, null, xdb.xdb$BOOTSTRAP.T_XOB,
1070                        FALSE, TRUE, FALSE,
1071                        null, null, null,
1072                        xdb.xdb$BOOTSTRAP.JT_XMLTYPE, null, null,
1073                        lockstype_ref,null, null,
1074                        null, 1, FALSE, null, null,
1075                        FALSE, FALSE, TRUE, FALSE, FALSE,
1076                        null, null,null, null, FALSE, null ,null,null,
1077                        null, null, TRUE,
1078                        xdb.xdb$BOOTSTRAP.TRANSIENT_GENERATED, null);
1079  
1080        anylist := xdb.xdb$xmltype_ref_list_t();
1081        anylist.extend(1);
1082  
1083        anylist(1) := xdb.xdb$bootstrap.xdb$insertAny(schref, PN_RES_RESEXTRA,
1084                                  'ResExtra', null, '##other', 0, 65535, null,
1085                                  xdb.xdb$BOOTSTRAP.T_XOB, FALSE, FALSE, FALSE,
1086                                  'RESEXTRA', 'CLOB', null,
1087                                  xdb.xdb$BOOTSTRAP.JT_XMLTYPE, null,
1088                                  null, null, null, null);
1089  
1090       resource_ref := xdb.xdb$bootstrap.xdb$insertComplex(schref,
1091                            null, 'ResourceType',
1092                            null, FALSE, null, '0',
1093                            null, null, null, null, null, null, null, null, null,
1094                            null, null, null, null, null, null, ellist, attlist,
1095                            anylist);
1096       complexlist(7) := resource_ref;
1097  
1098  /*--------------------------------------------------------------------------*/
1099  /* "Resource" top-level element */
1100  /*--------------------------------------------------------------------------*/
1101  
1102       schels(1) := xdb.xdb$bootstrap.xdb$insertElement(schref, PN_RES_RESOURCE,
1103                  'Resource', xdb.xdb$qname('01', 'ResourceType'),
1104                   1, 1, null, xdb.xdb$BOOTSTRAP.T_XOB, FALSE, FALSE,
1105                   FALSE, 'RESOURCE', 'XDB$RESOURCE_T', 'XDB',
1106                   xdb.xdb$BOOTSTRAP.JT_XMLTYPE, null, null,
1107                   resource_ref, null, null, null,
1108                   res_colcount, FALSE, null, null,
1109                   FALSE, FALSE, FALSE, FALSE, FALSE,
1110                  'XDB$RESOURCE', null, 'oracle.xdb.Resource',
1111                  'oracle.xdb.ResourceBean', TRUE, null, null, null);
1112       schels(2) := toplocksel_ref;
1113  
1114  /*--------------------------------------------------------------------------*/
1115  /* Update schema to have all top-level property definitions */
1116  /*--------------------------------------------------------------------------*/
1117  
1118          execute immediate 'update xdb.xdb$schema s set
1119                  s.xmldata.elements = :1,
1120                  s.xmldata.simple_type = :2,
1121                  s.xmldata.complex_types = :3,
1122                  s.xmldata.num_props = :4
1123                 where s.xmldata.schema_url =
1124                 ''http://xmlns.oracle.com/xdb/XDBResource.xsd'''
1125                  using schels, simplelist, complexlist, PN_RES_TOTAL_PROPNUMS;
1126  
1127  end;
1128  
1129  END;
1130  /

Package body created.

SQL> show errors
No errors.
SQL> 
SQL> 
SQL> /***** KGL initialization is invoked internally ******/
SQL> 
SQL> /* -------------  INVOKE BOOTSTRAP DRIVER FOR RESOURCE SCHEMA -------------- */
SQL> 
SQL> begin
  2    xdb.xdb$bootstrapres.driver();
  3    commit;
  4  end;
  5  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> /* turn off the ref cascade event */
SQL> alter session set events '22830 trace name context off';

Session altered.

SQL> 
SQL> Rem Add the schema registration/compilation module
SQL> @@dbmsxsch.sql
SQL> Rem Copyright (c) 2000, 2009, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxsch.sql - XML Schema Package
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Contains package to register XML schemas with XDB.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Must be run connected as XDB
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    spetride    06/09/09 - add schemoid to registerSchema (CLOB) for expdp
SQL> Rem    thbaby      02/13/09 - remove REGISTER_AUTO_OOL
SQL> Rem    ajadams     11/07/08 - add with_commit to supplemental_log pragma
SQL> Rem    sichandr    11/05/08 - remove WITH GRANT OPTION
SQL> Rem    thbaby      05/17/07 - rename flags
SQL> Rem    jwwarner    04/06/07 - add option for automatically moving elements
SQL> Rem                           out-of-line
SQL> Rem    thbaby      04/27/07 - add evolve_trace_only flag for InPlaceEvolve
SQL> Rem    schakrab    02/07/07 - add REGISTER_NT_AS_IOT option to registerschema
SQL> Rem    qiwang      01/05/07 - pragma newly-added procedure InPlaceEvolve
SQL> Rem    qiwang      09/07/06 - progma DBMS_XMLSCHEMA for logmnr PLSQL support
SQL> Rem    sidicula    06/15/06 - Add flags to CopyEvolve
SQL> Rem    pnath       05/24/06 - add ENABLE_LINKS hierarchy type
SQL> Rem    sidicula    06/15/06 - Add flags to CopyEvolve
SQL> Rem    pnath       05/24/06 - add ENABLE_LINKS hierarchy type
SQL> Rem    thbaby      06/04/06 - coalesce versioning-related constants
SQL> Rem    abagrawa    04/04/06 - Add purgeSchema
SQL> Rem    abagrawa    03/14/06 - Add new deleteschema option
SQL> Rem    thbaby      12/29/05 - add new modes for enabling hierarchy
SQL> Rem    abagrawa    08/30/05 - Add binaryxml option to registerschema
SQL> Rem    sidicula    04/05/05 - Fix bug 4285311
SQL> Rem    thbaby      03/28/05 - add InPlaceEvolve
SQL> Rem    abagrawa    05/17/04 - Merge csid signaures of registerschema
SQL> Rem    abagrawa    04/13/04 - Add enable hierarchy parameter to reg schema
SQL> Rem    abagrawa    05/09/04 - Add options argument to registerSchema
SQL> Rem    rmurthy     09/23/03 - helper routines for type conversion
SQL> Rem    abagrawa    03/09/03 - Separate dbmsxsch and prvtxsch
SQL> Rem    thoang      11/07/02 - required csid for blob and bfile
SQL> Rem    sidicula    10/04/02 - Prototype change for CopyEvolve
SQL> Rem    sidicula    09/13/02 - Schema Evolution Support
SQL> Rem    thoang      07/18/02 - add csid parameter to registerSchema
SQL> Rem    gviswana    01/29/02 - CREATE OR REPLACE SYNONYM
SQL> Rem    jwwarner    01/29/02 - make generateschema(s) embedcoll by default
SQL> Rem    spannala    12/27/01 - not switching users in xdb install
SQL> Rem    rmurthy     11/19/01 - invoke wrapped implementation
SQL> Rem    sichandr    11/20/01 - optional user name for register
SQL> Rem    sichandr    10/15/01 - add FORCE flag for register
SQL> Rem    rmurthy     10/01/01 - add genTables as separate flag
SQL> Rem    rmurthy     09/12/01 - add register schema based on URI
SQL> Rem    jwwarner    09/10/01 - Add schema location hint to generateSchemas
SQL> Rem    sichandr    10/03/01 - add compileSchema
SQL> Rem    jwwarner    08/09/01 - Add generateSchema
SQL> Rem    rmurthy     08/03/01 - add register from xmltype, uritype
SQL> Rem    tsingh      06/30/01 - XDB: XML Database merge
SQL> Rem    rmurthy     05/18/01 - add invalidate option for schema deletion
SQL> Rem    rmurthy     05/09/01 - make registration always invokers rights
SQL> Rem    bkhaladk    03/07/01 - update register schema calls..
SQL> Rem    rmurthy     02/09/01 - change functions to procedures
SQL> Rem    rmurthy     02/07/01 - add invokers rights entry points
SQL> Rem    rmurthy     01/02/01 - add register functions for clobs, bfiles
SQL> Rem    rmurthy     12/01/00 - Created
SQL> Rem
SQL> 
SQL> 
SQL> 
SQL> create or replace package xdb.dbms_xmlschema authid current_user is
  2    ---------------------------------------------
  3    --  OVERVIEW
  4    --
  5    --  This package provides procedures to
  6    --  (*) register an XML schema
  7    --  (*) delete a previously registered XML schema
  8    --  (*) re-compile a previously registered XML schema
  9    --  (*) generate an XML schema
 10    --
 11    ---------------------------------------------
 12  
 13    ------------
 14    -- CONSTANTS
 15    --
 16    ------------
 17    DELETE_RESTRICT CONSTANT NUMBER := 1;
 18    DELETE_INVALIDATE CONSTANT NUMBER := 2;
 19    DELETE_CASCADE  CONSTANT NUMBER := 3;
 20    DELETE_CASCADE_FORCE CONSTANT NUMBER := 4;
 21    DELETE_MIGRATE CONSTANT NUMBER := 8;
 22  
 23    ENABLE_HIERARCHY_NONE CONSTANT PLS_INTEGER        := 1;
 24    ENABLE_HIERARCHY_CONTENTS CONSTANT PLS_INTEGER    := 2;
 25    ENABLE_HIERARCHY_RESMETADATA CONSTANT PLS_INTEGER := 3;
 26    ENABLE_HIERARCHY_VERSION  CONSTANT PLS_INTEGER    := 4;
 27    ENABLE_HIERARCHY_LINKS  CONSTANT PLS_INTEGER      := 8;
 28  
 29    REGISTER_NODOCID   CONSTANT NUMBER := 1;
 30    REGISTER_BINARYXML CONSTANT NUMBER := 2;
 31    REGISTER_NT_AS_IOT CONSTANT NUMBER := 4;
 32  
 33    REGISTER_CSID_NULL CONSTANT NUMBER := -1;
 34  
 35    COPYEVOLVE_BINARY_XML CONSTANT NUMBER := 1;
 36  
 37    INPLACE_EVOLVE CONSTANT NUMBER := 1;
 38    INPLACE_TRACE  CONSTANT NUMBER := 2;
 39  
 40    PRESERVE_PROP_NUMBERS CONSTANT NUMBER := 1;
 41  
 42    ------------
 43    -- TYPES
 44    ------------
 45    TYPE URLARR is VARRAY(1000) of VARCHAR2(1000);
 46    TYPE XMLARR is VARRAY(1000) of XMLType;
 47    TYPE UNAME_ARR is VARRAY(1000) of VARCHAR2(100);
 48  
 49    ---------------------------------------------
 50    -- PROCEDURE - registerSchema
 51    -- PARAMETERS -
 52    --  schemaURL
 53    --     A name that uniquely identifies the schema document.
 54    --  schemaDoc
 55    --     a valid XML schema document
 56    --  local
 57    --     Is this a local or global schema ? By default, all schemas
 58    --     are registered as local schemas i.e. under
 59    --       /sys/schemas/<username>/...
 60    --     If a schema is registered as global, it is added under
 61    --       /sys/schemas/PUBLIC/...
 62    --     You need write privileges on the above directory to be
 63    --     able to register a schema as global.
 64    --  genTypes
 65    --     Should the schema compiler generate object types ?
 66    --  genbean
 67    --     Should the schema compiler generate Java beans ?
 68    --  genTables
 69    --     Should the schema compiler generate default tables ?
 70    --  force
 71    --     Should the schema be created/stored even with errors?
 72    --       Setting this to TRUE will register the schema in the
 73    --       hierarchy even if there were compilation errors, but
 74    --       the schema cannot be used until it is made valid.
 75    --  csid
 76    --     Character set id of the input blob or bfile.
 77    --     The value REGISTER_CSID_NULL indicates that the CSID was
 78    --     not passed in. If users pass in REGISTER_CSID_NULL as the value
 79    --     of the csid parameter, then the behavior will be the same as
 80    --     when csid was not passed in.
 81    --  options
 82    --     Additional options to specify how the schema should be
 83    --     registered. The various options are represented as bits
 84    --     of an integer and the options parameter should be
 85    --     constructed by doing a bitor of the desired bits.
 86    --     The possible bits for this are:
 87    --       REGISTER_NODOCID :: this will suppress the creation
 88    --       of the DOCID column for out of line tables. This is a
 89    --       storage optimization which might be desirable when
 90    --       we do not need to join back to the document table (for example
 91    --       if we do not care about rewriting certain queries that could
 92    --       be rewritten by making use of the DOCID column)
 93    --       REGISTER_BINARYXML :: this scema is used for CSX
 94    --      REGISTER_NT_AS_IOT  :: this will store the
 95    --       nested tables as IOTs instead of heap (which is the default storage)
 96    --  enableHierarchy
 97    --     Specifies how the tables generated during schema registration
 98    --     should be hierarchically enabled. It must be one of the following:
 99    --     ENABLE_HIERARCHY_NONE : none of the tables will have hierarchy
100    --     enabled on them
101    --     ENABLE_HIERARCHY_CONTENTS : enables hierarchy for contents i.e.
102    --     the tables can be used to store contents of resources
103    --     ENABLE_HIERARCHY_RESMETADATA : enables hierarchy for resource metadata
104    --     i.e. the tables can be used to store resource metadata
105    --     ENABLE_HIERARCHY_VERSION : version-enable all table created during
106    --     registration. Must be combined with either ENABLE_HIERARCHY_CONTENTS
107    --     or ENABLE_HIERARCHY_RESMETADATA.
108    --     ENABLE_HIERARCHY_LINKS : enable hierarchy and enable link processing on
109    --     the table. Must be combined with ENABLE_HIERARCHY_CONTENTS
110    --
111    -- EXCEPTIONS
112    --   ORA-31001: Invalid resource handle or path name
113    --   todo
114    ---------------------------------------------
115    procedure registerSchema(schemaURL IN varchar2,
116                             schemaDoc IN VARCHAR2,
117                             local IN BOOLEAN := TRUE,
118                             genTypes IN BOOLEAN := TRUE,
119                             genbean IN BOOLEAN := FALSE,
120                             genTables IN BOOLEAN := TRUE,
121                             force IN BOOLEAN := FALSE,
122                             owner IN VARCHAR2 := '',
123                             enableHierarchy IN pls_integer :=
124                             ENABLE_HIERARCHY_CONTENTS,
125                             options IN pls_integer := 0);
126    PRAGMA SUPPLEMENTAL_LOG_DATA(registerSchema, UNSUPPORTED_WITH_COMMIT);
127  
128    procedure registerSchema(schemaURL IN varchar2,
129                             schemaDoc IN CLOB,
130                             local IN BOOLEAN := TRUE,
131                             genTypes IN BOOLEAN := TRUE,
132                             genbean IN BOOLEAN := FALSE,
133                             genTables IN BOOLEAN := TRUE,
134                             force IN BOOLEAN := FALSE,
135                             owner IN VARCHAR2 := '',
136                             enableHierarchy IN pls_integer :=
137                             ENABLE_HIERARCHY_CONTENTS,
138                             options IN pls_integer := 0,
139                             schemaoid IN RAW := NULL,
140                             import_options IN pls_integer := 0);
141    PRAGMA SUPPLEMENTAL_LOG_DATA(registerSchema, UNSUPPORTED_WITH_COMMIT);
142  
143    procedure registerSchema(schemaURL IN varchar2,
144                             schemaDoc IN BLOB,
145                             local IN BOOLEAN := TRUE,
146                             genTypes IN BOOLEAN := TRUE,
147                             genbean IN BOOLEAN := FALSE,
148                             genTables IN BOOLEAN := TRUE,
149                             force IN BOOLEAN := FALSE,
150                             owner IN VARCHAR2 := '',
151                             csid IN NUMBER := REGISTER_CSID_NULL,
152                             enableHierarchy IN pls_integer :=
153                             ENABLE_HIERARCHY_CONTENTS,
154                             options IN pls_integer := 0);
155    PRAGMA SUPPLEMENTAL_LOG_DATA(registerSchema, UNSUPPORTED_WITH_COMMIT);
156  
157    procedure registerSchema(schemaURL IN varchar2,
158                             schemaDoc IN BFILE,
159                             local IN BOOLEAN := TRUE,
160                             genTypes IN BOOLEAN := TRUE,
161                             genbean IN BOOLEAN := FALSE,
162                             genTables IN BOOLEAN := TRUE,
163                             force IN BOOLEAN := FALSE,
164                             owner IN VARCHAR2 := '',
165                             csid IN NUMBER := REGISTER_CSID_NULL,
166                             enableHierarchy IN pls_integer :=
167                             ENABLE_HIERARCHY_CONTENTS,
168                             options IN pls_integer := 0);
169    PRAGMA SUPPLEMENTAL_LOG_DATA(registerSchema, UNSUPPORTED_WITH_COMMIT);
170  
171    procedure registerSchema(schemaURL IN varchar2,
172                             schemaDoc IN sys.XMLType,
173                             local IN BOOLEAN := TRUE,
174                             genTypes IN BOOLEAN := TRUE,
175                             genbean IN BOOLEAN := FALSE,
176                             genTables IN BOOLEAN := TRUE,
177                             force IN BOOLEAN := FALSE,
178                             owner IN VARCHAR2 := '',
179                             enableHierarchy IN pls_integer :=
180                             ENABLE_HIERARCHY_CONTENTS,
181                             options IN pls_integer := 0);
182    PRAGMA SUPPLEMENTAL_LOG_DATA(registerSchema, UNSUPPORTED_WITH_COMMIT);
183  
184    procedure registerSchema(schemaURL IN varchar2,
185                             schemaDoc IN sys.UriType,
186                             local IN BOOLEAN := TRUE,
187                             genTypes IN BOOLEAN := TRUE,
188                             genbean IN BOOLEAN := FALSE,
189                             genTables IN BOOLEAN := TRUE,
190                             force IN BOOLEAN := FALSE,
191                             owner IN VARCHAR2 := '',
192                             enableHierarchy IN pls_integer :=
193                             ENABLE_HIERARCHY_CONTENTS,
194                             options IN pls_integer := 0);
195    PRAGMA SUPPLEMENTAL_LOG_DATA(registerSchema, UNSUPPORTED_WITH_COMMIT);
196  
197    ---------------------------------------------
198    -- PROCEDURE - registerURI
199    -- PARAMETERS -
200    --  schemaURL
201    --     A name that uniquely identifies the schema document.
202    --  schemaDocURI
203    --     A pathname (URI) corresponding to the physical location of the
204    --     schema document. The URI path could be based on HTTP, FTP, DB or XDB
205    --     protocols. This function constructs a URIType instance using
206    --     the URIFactory - and invokes the regiserSchema function above.
207    --  <all other paramaters> Same as above
208    ---------------------------------------------
209    procedure registerURI(schemaURL IN varchar2,
210                          schemaDocURI IN varchar2,
211                          local IN BOOLEAN := TRUE,
212                          genTypes IN BOOLEAN := TRUE,
213                          genbean IN BOOLEAN := FALSE,
214                          genTables IN BOOLEAN := TRUE,
215                          force IN BOOLEAN := FALSE,
216                          owner IN VARCHAR2 := '',
217                          enableHierarchy IN pls_integer :=
218                          ENABLE_HIERARCHY_CONTENTS,
219                          options IN pls_integer := 0);
220    PRAGMA SUPPLEMENTAL_LOG_DATA(registerURI, UNSUPPORTED_WITH_COMMIT);
221  
222    ---------------------------------------------
223    -- PROCEDURE - deleteSchema
224    -- PARAMETERS -
225    --  schemaURL : Name identifying the schema to be deleted
226    --  option : one of the following
227    --    DELETE_RESTRICT ::
228    --      Schema deletion fails if there are any tables or schemas that
229    --      depend on this schema.
230    --    DELETE_INVALIDATE :
231    --      Schema deletion does not fail if there are any dependencies.
232    --      Instead, it simply invalidates all dependent objects.
233    --    DELETE_CASCADE ::
234    --      Schema deletion will also drop all default SQL types and
235    --      default tables. However the deletion fails if there are
236    --      any stored instances conforming to this schema.
237    --    DELETE_CASCADE_FORCE ::
238    --      Similar to CASCADE except that it does not check for any stored
239    --      instances conforming to this schema. Also it ignores any errors.
240    --    DELETE_MIGRATE
241    --      This delete is happening during migrate mode.
242    --
243    -- EXCEPTIONS
244    --   ORA-31001: Invalid resource handle or path name
245    --   todo
246    ---------------------------------------------
247    procedure deleteSchema(schemaURL IN varchar2,
248                           delete_option IN pls_integer := DELETE_RESTRICT);
249    PRAGMA SUPPLEMENTAL_LOG_DATA(deleteSchema, UNSUPPORTED_WITH_COMMIT);
250  
251    ---------------------------------------------
252    -- PROCEDURE - purgeSchema
253    --  Purges a schema that was previously marked delete with hide mode
254    -- PARAMETERS -
255    --  schemaURL : Name identifying the schema to be purge
256    --
257    -- EXCEPTIONS
258    --   ORA-31001: Invalid resource handle or path name
259    --   todo
260    ---------------------------------------------
261    procedure purgeSchema(schema_id IN raw);
262    PRAGMA SUPPLEMENTAL_LOG_DATA(purgeSchema, UNSUPPORTED_WITH_COMMIT);
263  
264    ---------------------------------------------
265    -- PROCEDURE - generateBean
266    --  This procedure can be used to generate the Java bean code
267    --  corresponding to a registered XML schema.
268    --  Note that there is also an option to generate the beans
269    --  as part of the registration procedure itself.
270    -- PARAMETERS -
271    --  schemaURL : Name identifying a registered XML schema.
272    -- EXCEPTIONS
273    --   ORA-31001: Invalid resource handle or path name
274    --   todo
275    ---------------------------------------------
276    procedure generateBean(schemaURL IN varchar2);
277  
278    ---------------------------------------------
279    -- PROCEDURE - compileSchema
280    --  This procedure can be used to re-compile an already registered XML
281    --  schema. This is useful for bringing a schema in an invalid
282    --  state to a valid state.
283    -- PARAMETERS -
284    --  schemaURL : URL identifying the schema
285    -- EXCEPTIONS
286    --   ORA-31001: Invalid resource handle or path name
287    ---------------------------------------------
288    procedure compileSchema(schemaURL IN varchar2);
289    PRAGMA SUPPLEMENTAL_LOG_DATA(compileSchema, UNSUPPORTED_WITH_COMMIT);
290  
291    ---------------------------------------------
292    -- FUNCTION - generateSchema(s)
293    --  These functions generate XML schema(s) from
294    --  an oracle type name.  generateSchemas returns a collection
295    --  of XMLTypes, one XMLSchema document for each database schema.
296    --  generateSchema inlines them all in one schema (XMLType).
297    -- PARAMETERS -
298    --  schemaName  : the name of the database schema containing the type
299    --  typeName    : the name of the oracle type
300    --  elementName : the name of the toplevel element in the XMLSchema
301    --                defaults to typeName
302    --  schemaURL   : specifies base URL where schemas will be stored,
303    --                needed by top level schema for import statement
304    --  recurse     : whether or not to also generate schema for all types
305    --                referred to by the type specified
306    --  annotate    : whether or not to put the SQL annotations in the XMLSchema
307    --  embedColl   : whether you want collections embedded in the type which
308    --                refers to them or you want them to have a complexType
309    --                created, can not be false with annotations true
310    -- EXCEPTIONS
311    --  TBD
312    ---------------------------------------------
313    function generateSchemas( schemaName IN varchar2, typeName IN varchar2,
314                              elementName IN varchar2 := NULL,
315                              schemaURL IN varchar2 := NULL,
316                              annotate IN BOOLEAN := TRUE,
317                              embedColl IN BOOLEAN := TRUE )
318      return sys.XMLSequenceType;
319  
320    function generateSchema( schemaName IN varchar2, typeName IN varchar2,
321                             elementName IN varchar2 := NULL,
322                             recurse IN BOOLEAN := TRUE,
323                             annotate IN BOOLEAN := TRUE,
324                             embedColl IN BOOLEAN := TRUE ) return sys.XMLType;
325  
326    procedure CopyEvolve(schemaURLs         IN XDB$STRING_LIST_T,
327                         newSchemas         IN XMLSequenceType,
328                         transforms         IN XMLSequenceType := NULL,
329                         preserveOldDocs    IN BOOLEAN := FALSE,
330                         mapTabName         IN VARCHAR2 := NULL,
331                         generateTables     IN BOOLEAN := TRUE,
332                         force              IN BOOLEAN := FALSE,
333                         schemaOwners       IN XDB$STRING_LIST_T := NULL,
334                         parallelDegree     IN PLS_INTEGER := 0,
335                         options            IN PLS_INTEGER := 0);
336    PRAGMA SUPPLEMENTAL_LOG_DATA(CopyEvolve, UNSUPPORTED_WITH_COMMIT);
337  
338    procedure InPlaceEvolve(schemaURL       IN VARCHAR2,
339                            diffXML         IN SYS.XMLTYPE,
340                            flags           IN NUMBER := 1);
341    PRAGMA SUPPLEMENTAL_LOG_DATA(InPlaceEvolve, UNSUPPORTED_WITH_COMMIT);
342  
343    ---------------------------------------------
344    -- FUNCTION - convertToDate
345    --  This function converts the string representation of the following
346    --  specified XML Schema types into the Oracle DATE representation
347    --  using a default reference date and format mask.
348    -- PARAMETERS -
349    --  strval : string representation of valid value (per XML Schema)
350    --  xmltypename : Name of the XML Schema datatype.
351    --                Has to be one of the following:
352    --                 * gDay
353    --                 * gMonth
354    --                 * gYear
355    --                 * gYearMonth
356    --                 * gMonthDay
357    --                 * date
358    ---------------------------------------------
359    function convertToDate(strval varchar2, xmltypename varchar2)
360    return DATE deterministic parallel_enable;
361  
362    ---------------------------------------------
363    -- FUNCTION - convertToTS
364    --  This function converts the string representation of the following
365    --  specified XML Schema types into the Oracle TIMESTAMP representation
366    --  using a default reference date and format mask.
367    -- PARAMETERS -
368    --  strval : string representation of valid value (per XML Schema)
369    --  xmltypename : Name of the XML Schema datatype.
370    --                Has to be one of the following:
371    --                 * dateTime
372    --                 * time
373    ---------------------------------------------
374    function convertToTS(strval varchar2, xmltypename varchar2)
375    return TIMESTAMP deterministic parallel_enable;
376  
377    ---------------------------------------------
378    -- FUNCTION - convertToTSWithTZ
379    --  This function converts the string representation of the following
380    --  specified XML Schema types into the Oracle
381    --  TIMESTAMP WITH TIMEZONE representation using a default reference
382    --  date and format mask.
383    -- PARAMETERS -
384    --  strval : string representation of valid value (per XML Schema)
385    --  xmltypename : Name of the XML Schema datatype.
386    --                Has to be one of the following:
387    --                 * gDay
388    --                 * gMonth
389    --                 * gYear
390    --                 * gYearMonth
391    --                 * gMonthDay
392    --                 * date
393    --                 * dateTime
394    --                 * time
395    ---------------------------------------------
396    function convertToTSWithTZ(strval varchar2, xmltypename varchar2)
397    return TIMESTAMP WITH TIME ZONE deterministic parallel_enable;
398  
399  end dbms_xmlschema;
400  /

Package created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM DBMS_XMLSCHEMA FOR xdb.DBMS_XMLSCHEMA;

Synonym created.

SQL> 
SQL> GRANT EXECUTE ON DBMS_XMLSCHEMA TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> Rem Add the security module
SQL> @@dbmsxdbz.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmsxdbz.sql /main/26 2009/09/03 15:01:32 spetride Exp $
SQL> Rem
SQL> Rem dbmsxdbz.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2009, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxdbz.sql - xdb zecurity
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    spetride    07/09/09 - dynamic group store for custom trust
SQL> Rem    badeoti     03/19/09 - clean up 11.2 packages
SQL> Rem                           move dbms_xdb_admin.createnoncekey to dbms_xdbz
SQL> Rem                           move dbms_xdbz.get_username to dbms_xdbz0
SQL> Rem    spetride    06/11/08 - support application users and roles
SQL> Rem    taahmed     10/11/07 -
> Rem    mrafiq      10/04/07 -
> Rem    vhosur      08/16/07 - Add fusion ACL validation
SQL> Rem    thbaby      06/21/07 - documentation for validateacl
SQL> Rem    mrafiq      05/22/07 - move ValidateAcl here from dbms_xdbutil_int
SQL> Rem    pnath       05/24/06 - add ENABLE_LINKS hierarchy type
SQL> Rem    thbaby      06/04/06 - coalesce versioning constants
SQL> Rem    petam       04/18/06 - remove get_valid_acl function from dbms_xdbz
SQL> Rem    petam       03/07/06 - add function get_Valid_ACL
SQL> Rem    petam       11/14/05 - add function to purge acl
SQL> Rem    thbaby      12/29/05 - new parameter values to disable_hierarchy
SQL> Rem    thbaby      12/28/05 - add versioning-related hierarchy types
SQL> Rem    abagrawa    04/12/04 - Add hierarchy_type to enable_hierarchy,
SQL> Rem                           is_enabled
SQL> Rem    najain      08/08/03 - add get_username
SQL> Rem    nmontoya    01/13/03 - add format arg to get_userid
SQL> Rem    nmontoya    07/09/02 - ADD dbms_xdbz.purgeLdapCache
SQL> Rem    nmontoya    05/10/02 - ADD get_acloid AND get_userid
SQL> Rem    nmontoya    03/18/02 - move internal functions to dbms_xdbz0
SQL> Rem    nmontoya    02/11/02 - remove xdb_userid, ADD xdb_username
SQL> Rem    gviswana    01/29/02 - CREATE OR REPLACE SYNONYM
SQL> Rem    spannala    12/28/01 - making dbms_xdbz public
SQL> Rem    spannala    12/27/01 - not switching users in xdb install
SQL> Rem    nmontoya    11/12/01 - remove insertres function
SQL> Rem    nmontoya    10/17/01 - is_hierarchy_enabled function
SQL> Rem    nmontoya    09/12/01 - Add guid argument to checkprivrls
SQL> Rem    nmontoya    08/02/01 - Creation
SQL> 
SQL> CREATE OR REPLACE PACKAGE xdb.dbms_xdbz AUTHID CURRENT_USER IS
  2  
  3  ------------
  4  -- CONSTANTS
  5  --
  6  ------------
  7  NAME_FORMAT_SHORT         CONSTANT pls_integer := 1;
  8  NAME_FORMAT_DISTINGUISHED CONSTANT pls_integer := 2;
  9  NAME_FORMAT_APPLICATION   CONSTANT pls_integer := 5;
 10  
 11  ENABLE_CONTENTS           CONSTANT pls_integer := 1;
 12  ENABLE_RESMETADATA        CONSTANT pls_integer := 2;
 13  ENABLE_VERSION            CONSTANT pls_integer := 4;
 14  ENABLE_LINKS              CONSTANT pls_integer := 8;
 15  
 16  IS_ENABLED_CONTENTS       CONSTANT pls_integer := 1;
 17  IS_ENABLED_RESMETADATA    CONSTANT pls_integer := 2;
 18  IS_ENABLED_VERSION        CONSTANT pls_integer := 4;
 19  
 20  DISABLE_VERSION           CONSTANT pls_integer := 1;
 21  DISABLE_ALL               CONSTANT pls_integer := 2;
 22  SKIP_SYSCONSACL_FLG       CONSTANT pls_integer := 0;
 23  
 24  APPLICATION_USER          CONSTANT pls_integer := 0;
 25  APPLICATION_ROLE          CONSTANT pls_integer := 1;
 26  
 27  DELETE_APP_NOFORCE        CONSTANT pls_integer := 0;
 28  DELETE_APP_FORCE          CONSTANT pls_integer := 1;
 29  
 30  MODE_MEMBERSHIP_ADD       CONSTANT pls_integer := 0;
 31  MODE_MEMBERSHIP_DELETE    CONSTANT pls_integer := 1;
 32  
 33  ----------------------------------------------------------------------------
 34  -- PROCEDURE - enable_hierarchy
 35  --     Enables XDB Hierarchy for a particular xmltype table/view
 36  -- PARAMETERS -
 37  --  object_schema
 38  --     Schema name of the xmltype table/view
 39  --  object_name
 40  --     Object name of the xmltype table/view
 41  --  hierarchy_type
 42  --     How to enable the hierarchy. Must be one or a combination of the
 43  --     following:
 44  --     ENABLE_CONTENTS : enable hierarchy for contents i.e. this table will
 45  --     store contents of resources in the repository. This flag cannot be
 46  ---    combined with ENABLE_RESMETADATA.
 47  --     ENABLE_RESMETADATA : enable hierarchy for resource metadata i.e. this
 48  --     table will store schema based custom metadata for resources. This flag
 49  --     cannot be combined with ENABLE_CONTENTS.
 50  --     ENABLE_VERSION  : version-enable the xmltype table/view. This flag
 51  --     must be combined with either ENABLE_CONTENTS or ENABLE_RESMETADATA.
 52  --  NOTE ON HIERARCHY TYPE: If a table is hierachy-enabled for contents or
 53  --  resource metadata, then it can be additionally version-enabled by
 54  --  calling this procedure. For example, a table that is hierarchy-enabled for
 55  --  contents alone (ENABLE_CONTENTS) can be additionally version-enabled by
 56  --  calling this procedure with hierarchy_type ENABLE_CONTENTS+ENABLE_VERSION.
 57  --  A table that is hierarchy-enabled for contents, irrespective of whether it
 58  --  is version-enabled or not, cannot be hierarchy-enabled for resource
 59  --  metadata. Similarly, a table that is hierarchy-enabled for resource
 60  --  metadata, irrespective of whether it is version-enabled or not, cannot be
 61  --  hierarchy-enabled for contents. A table that is hierarchy-enabled and
 62  --  version-enabled, irrespective of whether it is hierarchy-enabled for
 63  --  contents or resource metadata, cannot be version-disabled by calling
 64  --  this procedure.
 65  --  NOTE ON VERSION-ENABLED TABLES: A resource that has REFs to schema-based
 66  --  content or metadata tables/views can be version-controlled only if all its
 67  --  REFs point to version-enabled tables/views. Thus, if its content REF is not
 68  --  null, then the REF must point to an xmltype table/view that is version-
 69  --  enabled and hierarchy enabled for contents. Similarly, if it has a
 70  --  non-null schema-based metadata REF, then the REF must point to an xmltype
 71  --  table/view that is version-enabled and hierarchy-enabled for resource
 72  --  metadata.
 73  --  schemareg
 74  --     True iff called during schema registration (qmts.c).
 75  ----------------------------------------------------------------------------
 76  PROCEDURE enable_hierarchy
 77  (
 78     object_schema IN VARCHAR2,
 79     object_name VARCHAR2,
 80     hierarchy_type IN pls_integer := ENABLE_CONTENTS,
 81     schemareg IN BOOLEAN := FALSE
 82  );
 83  
 84  ----------------------------------------------------------------------------
 85  -- PROCEDURE - disable_hierarchy
 86  --     Disables XDB Hierarchy for a particular xmltype table/view
 87  -- PARAMETERS -
 88  --  object_schema
 89  --     Schema name of the xmltype table/view
 90  --  object_name
 91  --     Object name of teh xmltype table/view
 92  --  hierarchy_type
 93  --     How should the hierarchy be disabled? The various options are
 94  --     (1) DISABLE_VERSION : disable versioning on the table/view. If the table
 95  --     or view is not version-enabled, do nothing. Otherwise, version-disable
 96  --     the table. If the table or view has more than one version per version
 97  --     history, throw error unless delete_old_versions is set to TRUE.
 98  --     (2) DISABLE_ALL : disable hierarchy and disable versioning on the
 99  --     table/view. If the table or view has more than one version per version
100  --     history, throw error unless delete_old_versions is set to TRUE.
101  --  delete_old_versions
102  --     Should old versions for a version history be deleted?
103  --     (1) TRUE : delete all versions in each version history other than the
104  --     one with the latest lastModifiedTime.
105  --     (2) FALSE : do not delete old versions. The user needs to ensure that
106  --     the table or view does not have more than one version per version
107  --     history; otherwise, an error is thrown.
108  ----------------------------------------------------------------------------
109  PROCEDURE disable_hierarchy(object_schema IN VARCHAR2,
110                              object_name VARCHAR2,
111                              hierarchy_type IN PLS_INTEGER := DISABLE_ALL,
112                              delete_old_versions IN BOOLEAN := FALSE);
113  
114  ----------------------------------------------------------------------------
115  -- FUNCTION - is_hierarchy_enabled
116  --     Checks if the XDB Hierarchy is enabled for a given xmltype table/view
117  -- PARAMETERS -
118  --  object_schema
119  --     Schema name of the xmltype table/view
120  --  object_name
121  --     Object name of the xmltype table/view
122  --  hierarchy_type
123  --     The type of hierarchy to check for. Must be one of the following:
124  --     IS_ENABLED_CONTENTS : if table/view is hierarchy-enabled for contents
125  --     IS_ENABLED_RESMETADATA : if table/view is hierarchy-enabled for
126  --     resource metadata
127  --     IS_ENABLED_VERSION : if table/view is version-enabled
128  -- RETURN -
129  --     True, if given xmltype table/view has the XDB Hierarchy enabled of
130  --     the specified type
131  ----------------------------------------------------------------------------
132  FUNCTION is_hierarchy_enabled(object_schema IN VARCHAR2,
133                                object_name VARCHAR2,
134                                hierarchy_type IN pls_integer
135                                  := IS_ENABLED_CONTENTS)
136                                RETURN BOOLEAN;
137  
138  ---------------------------------------------
139  -- FUNCTION - purgeLdapCache
140  --     Purges ldap nickname cache
141  -- RETURNS
142  --     True if successful, false otherwise
143  ---------------------------------------------
144  FUNCTION purgeLdapCache RETURN BOOLEAN;
145  
146  ----------------------------------------------------------------------------
147  -- FUNCTION - get_acloid
148  --     Get's an ACL OID given the XDB Hierarchy path for the ACL Resource
149  -- PARAMETERS -
150  --  acl_path
151  --     ACL Resource path in the XDB Hierarchy
152  --  acloid [OUT]
153  --     Returns the corresponding ACLOID to the given ACL Resource
154  -- RETURN -
155  --     True, if ACLOID is succesfully retrieved
156  --     The typical use of this function is to pass the acloid as an
157  --     argument to the SYS_CHECKACL sql operator.
158  ----------------------------------------------------------------------------
159  FUNCTION get_acloid(aclpath IN VARCHAR2,
160                      acloid OUT RAW) RETURN BOOLEAN;
161  
162  ----------------------------------------------------------------------------
163  -- FUNCTION - get_userid
164  --     Retrieves the userid for the given user name
165  -- PARAMETERS -
166  --  username
167  --     Name of the resource user
168  --  userid [OUT]
169  --     Returns the corresponding USERID for the given user name.
170  --  format (optional)
171  --     Format of the specified user name. By default, the name is assumed
172  --     to be either a database user name or a LDAP nickname. The following
173  --     are the allowed values for this argument :
174  --        DBMS_XDBZ.NAME_FORMAT_SHORT
175  --        DBMS_XDBZ.NAME_FORMAT_DISTINGUISHED
176  --        DBMS_XDBZ.NAME_FORMAT_APPLICATION
177  -- RETURN -
178  --     True, if USERID is succesfully retrieved
179  -- NOTE -
180  --     The user name is first looked up in the local database,
181  --     if it is not found there, and if an ldap server is available,
182  --     it is looked up in this latter one. In this case a GUID will be
183  --     returned in USERID.
184  --     The typical use of this function is to pass the userid as an
185  --     argument to the SYS_CHECKACL sql operator.
186  ----------------------------------------------------------------------------
187  FUNCTION get_userid(username IN VARCHAR2,
188                      userid OUT RAW,
189                      format IN pls_integer := NAME_FORMAT_SHORT) RETURN BOOLEAN;
190  
191  ----------------------------------------------------------------------------
192  -- PROCEDURE - ValidateAcl
193  -- This function will validate the following aspects of the acl:
194  -- (1) Validate the security class for the acl. This validates the
195  --     security class and all its parents.
196  -- (2) Check for existence of the specified roles and users in each of the
197  --     aces.
198  -- (3) Validate that all custom privileges specified in the acl are
199  --     defined in the associated security class.
200  -- (4) Validate that security class of the parent acl is in the ancestor
201  --     tree of  the associated security class.
202  -- PARAMETERS -
203  --  acloid [in]
204  --     aclid of the acl to be validated
205  --     skip system constraining acls from certain validations(default false)
206  ----------------------------------------------------------------------------
207  PROCEDURE ValidateAcl(acloid IN RAW,
208                        skip_scacl IN pls_integer := SKIP_SYSCONSACL_FLG)
209  ;
210  
211  ----------------------------------------------------------------------------
212  -- PROCEDURE - ValidateFusionAcl
213  -- This function will validate all aspects of the acl (covered by
214  -- ValidateAcl) plus the following
215  -- (1) For a given acl chain, it must have a system constraining acl at
216  --     its root.
217  -- (2) For any non-system constraining acl in this chain, all inheritance
218  --     relationships till the first system constraining acl up in its
219  --     chain should be constraining.
220  -- (3) For any acl in the system, which has a system constraining acl as its
221  --     parent, the inheritance relationship between the two should be
222  --     constraining.
223  -- PARAMETERS -
224  --  acloid [in]
225  --     aclid of the acl to be validated
226  ----------------------------------------------------------------------------
227  PROCEDURE ValidateFusionAcl(acloid IN RAW);
228  
229  ----------------------------------------------------------------------------
230  -- FUNCTION - add_application_principal
231  --   Registers with XDB an Application user or workgroup/role.
232  -- PARAMETERS -
233  --   name - The name of the user or role/workgroup
234  --   flags - Whether user (if XDB.DBMS_XDBZ.APPLICATION_USER, default)
235  --           or role (XDB.DBMS_XDBZ.APPLICATION_ROLE)
236  -- RETURNS -
237  --   The status of the addition (TRUE if successful, FALSE otherwise)
238  ----------------------------------------------------------------------------
239  FUNCTION add_application_principal(
240           name IN VARCHAR2,
241           flags IN PLS_INTEGER := XDB.DBMS_XDBZ.APPLICATION_USER)
242   return BOOLEAN;
243  
244  ----------------------------------------------------------------------------
245  -- FUNCTION - change_application_membership
246  --   Adds or removes an Application user to/from a role/workgroup.
247  --   If either the user or the role/workgroup have not been
248  --     previously registered with XDB, registration is done.
249  -- PARAMETERS -
250  --   user_name - The name of the Application user/role
251  --   group_name - The name of the role/workgroup
252  --   op_mode - Whether the user/role is to be added (XDB.DBMS_XDBZ.MODE_MEMBERSHIP_ADD),
253  --             which is the default, or deleted (XDB.DBMS_XDBZ.MODE_MEMBERSHIP_DELETE)
254  --             to/from the workgroup/role.
255  --   user_flags - Whether user_name is the name of a user
256  --                (XDB.DBMS_XDBZ.APPLICATION_USER, default), or
257  --                group (XDB.DBMS_XDBZ.APPLICATION_ROLE). Currently,
258  --                only XDB.DBMS_XDBZ.APPLICATION_USER supported.
259  -- RETURNS -
260  --   The status of the operation (TRUE if successful, FALSE otherwise)
261  ----------------------------------------------------------------------------
262  FUNCTION change_application_membership(
263           user_name IN VARCHAR2,
264           group_name IN VARCHAR2,
265           op_mode IN PLS_INTEGER := XDB.DBMS_XDBZ.MODE_MEMBERSHIP_ADD,
266           user_flags IN NUMBER := XDB.DBMS_XDBZ.APPLICATION_USER)
267    return BOOLEAN;
268  
269  ----------------------------------------------------------------------------
270  -- FUNCTION - delete_application_principal
271  --   Delete all information about an Application user or role/workgroup.
272  -- PARAMETERS -
273  --  name - Name of the Application user or role/workgroup
274  --  op_mode - Whether to raise an error if deleting a role/workgroup with
275  --            active members (if XDB.DBMS_XDBZ.DELETE_APP_NOFORCE, default),
276  --            or to delete all group membership information otherwise
277  --            (if XDB.DBMS_XDBZ.DELETE_APP_FORCE).
278  --            Applies only in the case of role/workgroup names.
279  -- RETURNS -
280  --   The status of the deletion (TRUE if successful, FALSE otherwise)
281  --
282  ----------------------------------------------------------------------------
283  FUNCTION delete_application_principal(
284           name IN VARCHAR2,
285           op_mode IN PLS_INTEGER := XDB.DBMS_XDBZ.DELETE_APP_NOFORCE)
286   return BOOLEAN;
287  
288  ----------------------------------------------------------------------------
289  -- FUNCTION - purgeApplicationCache
290  --  Purges the shared cache of GUIDs to Application user or roles names mappings.
291  --
292  -- RETURNS -
293  --   The status of the operation (TRUE if successful, FALSE otherwise)
294  ----------------------------------------------------------------------------
295  FUNCTION purgeApplicationCache RETURN BOOLEAN;
296  
297  -----------------------------------------------------------------------------
298  -- FUNCTION - set_application_principal
299  --  If the current user and schema are trusted (determined based on
300  --  XDB configuration document, allows the passed application user
301  --  to be set as the current user in the session, for the purpose of
302  --  XDB repository access. This API is to be used for local application
303  --  group membership scheme.
304  -- PARAMETERS -
305  --  principal_name - Name of the application user (mandatory if local
306  --       application store
307  --  principal_guid - GUID of the application user; mandatory only under
308  --       dynamic group membership scheme
309  --  allow_registration - Used only under local group scheme;
310  --        if true and the application user is not already
311  --        known to XDB, then the user is automatically registered with XDB.
312  --  group_membership - Used only under dynamic group scheme;
313  --        Concatenated list of GUIDs of all application
314  --        roles currently enabled for the application user.
315  -- RETURNS -
316  --  TRUE if the user was successfully set in the session (FALSE otherwise).
317  -----------------------------------------------------------------------------
318  FUNCTION set_application_principal(principal_name IN VARCHAR2 := NULL,
319                                     allow_registration IN BOOLEAN := TRUE,
320                                     principal_guid IN RAW := NULL,
321                                     group_membership IN RAW := NULL)
322  RETURN BOOLEAN;
323  
324  
325  FUNCTION reset_application_principal RETURN BOOLEAN;
326  
327  -- Procedure to insert the randomly generated nonce key into
328  -- XDB$NONCEKEY table
329  --------
330  procedure CreateNonceKey;
331  
332  end dbms_xdbz;
333  /

Package created.

SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_xdbz FOR xdb.dbms_xdbz;

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_xdbz TO PUBLIC;

Grant succeeded.

SQL> show errors;
No errors.
SQL> 
SQL> 
SQL> @@dbmsxmlu.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmsxmlu.sql /main/3 2009/05/05 15:39:27 bkhaladk Exp $
SQL> Rem
SQL> Rem dbmsxmlu.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2009, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxmlu.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    bkhaladk    04/02/09 - remove under privilege on types
SQL> Rem    ataracha    12/18/06 - add isnull method
SQL> Rem    smalde      04/24/06 -
> Rem    nkhandel    02/20/06 - DOM streaming API
SQL> Rem    nkhandel    02/20/06 - DOM streaming API
SQL> Rem    nkhandel    01/18/06 -
> Rem    nitgupta    05/23/05 - Created
SQL> Rem
SQL> 
SQL> 
SQL> 
SQL> --------------------------------------------------------------------------
SQL> -- Utl_BinaryInputStream is similar to java.io.InputStream: can only read
SQL> -- and close stream
SQL> --------------------------------------------------------------------------
SQL> create or replace type utl_BinaryInputStream authid current_user as object
  2  (
  3    handle raw(12),
  4    member function available (self in out nocopy Utl_BinaryInputStream)
  5    return integer,
  6    -- this function returns the number of bytes available to be read
  7    member function read (self in out nocopy Utl_BinaryInputStream,
  8                          numBytes in integer default 1)
  9    return raw,
 10    ---- this function reads the number of bytes specified by numBytes
 11    ---- (default is 1) and returns the bytes as a raw. If there are no remaining
 12    ---- bytes a value of null is returned.
 13    member procedure read (self     in  out   nocopy Utl_BinaryInputStream,
 14                           bytes   in out nocopy raw,
 15                           numBytes in out integer),
 16    ---- this procedure reads the number of bytes specified in numBytes into
 17    ---- the parameter bytes. Additionally, the actual number of bytes read
 18    ---- is returned in parameter numBytes. If this parameter
 19    ---- is set to 0 then there are no more bytes to be read.
 20    member procedure read (self     in    out  nocopy Utl_BinaryInputStream,
 21                           bytes   in out nocopy raw,
 22                           offset   in integer,
 23                           numBytes  in out integer),
 24     ---- this procedure reads the number of bytes specified in numBytes into
 25     ---- the parameter bytes, beginning at the offset specified by parameter
 26     ---- offset. The actual number of bytes read is returned in parameter
 27     ---- numBytes. If this value is 0, then there are no additional bytes to
 28     ---- be read.
 29     member procedure close (self in out nocopy Utl_BinaryInputStream),
 30     ---- this function releases all resources held on the node to support
 31     ---- the stream.
 32     member function isnull (self in out nocopy Utl_BinaryInputStream)
 33                                          return boolean
 34  ) NOT INSTANTIABLE NOT FINAL;
 35  /

Type created.

SQL> 
SQL> 
SQL> --------------------------------------------------------------------------
SQL> -- Utl_BinaryOutputStream is similar to java.io.OutputStream: can only write
SQL> -- bytes and close stream
SQL> --------------------------------------------------------------------------
SQL> create or replace type utl_BinaryOutputStream authid current_user as object
  2  (
  3    handle raw(12),
  4    member function write (self in out nocopy utl_BinaryOutputStream,
  5                           bytes   in out nocopy raw,
  6                           numBytes in integer default 1)
  7    return integer,
  8    ---- this function writes the number of bytes specified by numBytes
  9    ---- (default is 1) from raw
 10    ---- into the stream. The actual number of bytes written is returned.
 11    member procedure write (self  in out nocopy utl_BinaryOutputStream,
 12                            bytes in out nocopy raw,
 13                            numBytes in out integer),
 14     ---- this procedure writes the number of bytes specified in parameter
 15     ---- numBytes from parameter bytes to the stream. The actual number of
 16     ---- bytes written is returned in parameter numBytes.
 17    member procedure write (self   in out nocopy utl_BinaryOutputStream,
 18                            bytes  in out nocopy raw,
 19                            offset in integer,
 20                            numBytes in out integer),
 21    ---- this procedure writes the number of bytes specified by numBytes to the
 22    ---- stream, beginning at the offset specified by parameter offset.
 23    ---- The actual number of bytes written is returned in parameter numBytes.
 24    member procedure flush (self in out nocopy utl_BinaryOutputStream),
 25    ---- this procedure insures that any buffered bytes are copied to the node
 26    ---- destination.
 27    member procedure close (self in out nocopy utl_BinaryOutputStream),
 28     ---- this procedure frees all resources associated with the stream.
 29    member function isnull (self in out nocopy Utl_BinaryOutputStream)
 30                                          return boolean
 31  ) NOT INSTANTIABLE NOT FINAL;
 32  /

Type created.

SQL> 
SQL> 
SQL> -------------------------------------------------------------------------
SQL> -- utl_CharacterInputStream is similar to java.io.Reader: can only read
SQL> -- chars and close stream
SQL> --------------------------------------------------------------------------
SQL> create or replace type utl_CharacterInputStream authid current_user as object
  2  (
  3    handle raw(12),
  4    member function available (self in out nocopy utl_CharacterInputStream)
  5                               return integer,
  6     ---- this function returns the number of characters remaining to be read.
  7    member function read (self in out nocopy utl_CharacterInputStream,
  8                          numChars in integer default 1,
  9                          lineFeed in boolean default false)
 10    return varchar2,
 11     ---- This function reads the number of characters specified by numChars
 12     ---- (default value is 1) and returns the characters as a varchar2. If the
 13     ---- value of lineFeed is true (default value is false) then the reading
 14     ---- stops if a linefeed character is found.  If there are no remaining
 15     ----characters a value of null is returned.
 16    member procedure read (self     in  out nocopy utl_CharacterInputStream,
 17                           chars    in out nocopy varchar2,
 18                           numChars in out integer,
 19                           lineFeed in boolean default false),
 20     ---- this procedure reads the number of characters specified by parameter
 21     ---- numChars into the parameter chars. Additionally, the actual number of
 22     ---- characters read is returned in parameter numChars. If this value is 0,
 23     ---- then there are no more characters to be read.
 24     ---- If the value of lineFeed is true (default is false), then reading stops
 25     ---- if a linefeed character is encountered.
 26    member procedure read (self   in  out nocopy    utl_CharacterInputStream,
 27                           chars  in out nocopy varchar2,
 28                           offset in     integer,
 29                           numChars in out integer,
 30                           lineFeed in boolean default false),
 31     ---- this procedure reads the number of characters specified by parameter
 32     ---- numChars into the parameter specified by chars, beginning at the offset
 33     ---- specified by offset. The actual number of characters read is returned
 34     ---- in parameter numChars. If this value is 0, there are no more characters
 35     ---- to be read. If the value of lineFeed is true (default is false) then
 36     ---- reading stops if a lineFeed character is read.
 37    member procedure close (self in out nocopy utl_CharacterInputStream),
 38     ---- this procedure releases all resources held by the stream.
 39    member function isnull (self in out nocopy Utl_CharacterInputStream)
 40                                          return boolean
 41  ) NOT INSTANTIABLE NOT FINAL;
 42  /

Type created.

SQL> 
SQL> --------------------------------------------------------------------------
SQL> -- utl_CharacterOutputStream is similar to java.io.Writer: can only write
SQL> -- chars, flush and close stream
SQL> --------------------------------------------------------------------------
SQL> create or replace type utl_CharacterOutputStream authid current_user as object
  2  (
  3    handle raw(12),
  4    member function write (self in out nocopy  utl_CharacterOutputStream,
  5                           chars in out nocopy varchar2,
  6                           numChars in integer default 1,
  7                           lineFeed in boolean default false)
  8    return integer,
  9    ---- this function writes the number of characters specified by numChars
 10    ----(default is 1) from parameter chars into the stream and returns the
 11    ---- actual number of characters written. If the value of lineFeed is
 12    ---- true (default is false) a lineFeed character is inserted after the
 13    ---- last character.
 14    member procedure write (self  in out nocopy utl_CharacterOutputStream,
 15                            chars in out nocopy varchar2,
 16                            numChars in out integer,
 17                            lineFeed in boolean default false),
 18    ----- this procedure writes the number of characters specified by parameter
 19    ----- numChars, from parameter chars into the stream. The actual number
 20    ----- of characters written is returned in parameter numChars. If the value
 21    ----- of lineFeed is true (default is false) a lineFeed character is
 22    ----- inserted after the last character.
 23    member procedure write (self     in out nocopy    utl_CharacterOutputStream,
 24                            chars    in out nocopy    varchar2,
 25                            offset   in     integer,
 26                            numChars in out integer,
 27                            lineFeed in boolean default false),
 28    ---- this function writes the number of characters specified by parameter
 29    ---- numChars, from parameter chars, beginning at offset specified by
 30    ---- parameter offset. The actual number of characters written is returned
 31    ---- in parameter numChars. If the value of lineFeed is true (default is
 32    ---- false) a lineFeed character is  inserted after the last character
 33    member procedure flush (self in out nocopy utl_CharacterOutputStream),
 34    ---- this procedure copies all characters that may be contained within
 35    ----buffers to the node value.
 36    member procedure close (self in out nocopy utl_CharacterOutputStream),
 37     ---- this procedure releases all resources associated with the stream.
 38    member function isnull (self in out nocopy Utl_CharacterOutputStream)
 39                                          return boolean
 40  ) NOT INSTANTIABLE NOT FINAL;
 41  /

Type created.

SQL> 
SQL> 
SQL> grant execute on utl_BinaryInputStream to PUBLIC with grant option;

Grant succeeded.

SQL> grant execute on utl_BinaryOutputStream to PUBLIC with grant option;

Grant succeeded.

SQL> grant execute on utl_CharacterInputStream to PUBLIC with grant option;

Grant succeeded.

SQL> grant execute on utl_CharacterOutputStream to PUBLIC with grant option;

Grant succeeded.

SQL> 
SQL> create public synonym utl_BinaryInputStream for sys.utl_BinaryInputStream;

Synonym created.

SQL> create public synonym utl_BinaryOutputStream for sys.utl_BinaryOutputStream;

Synonym created.

SQL> create public synonym utl_CharacterInputStream for sys.utl_CharacterInputStream;

Synonym created.

SQL> create public synonym utl_CharacterOutputStream for sys.utl_CharacterOutputStream;

Synonym created.

SQL> @@dbmsxmls.sql
SQL> Rem
SQL> Rem $Header: dbmsxmls.sql 18-dec-2006.13:51:20 ataracha Exp $
SQL> Rem
SQL> Rem dbmsxmls.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxmls.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    ataracha    12/18/06 - add isnull methods
SQL> Rem    smalde      04/24/06 -
> Rem    nkhandel    02/20/06 - DOM streaming API
SQL> Rem    nkhandel    02/20/06 - DOM streaming API
SQL> Rem    nitgupta    05/23/05 - Created
SQL> Rem
SQL> 
SQL> --------------------------------------------------------------------------
SQL> -- XMLBinaryInputStream is an extension of utl_BinaryInputStream and
SQL> -- is similar to java.io.InputStream: can only read bytes and close stream
SQL> --------------------------------------------------------------------------
SQL> create or replace type XMLBinaryInputStream under utl_BinaryInputStream
  2  (
  3    constructor function XMLBinaryInputStream (h in raw, n in raw)
  4    return self as result,
  5    overriding member function available (self in out nocopy XMLBinaryInputStream)
  6    return integer,
  7    ---- this function returns the number of characters that remain to be read.
  8    overriding member function read (self in out nocopy XMLBinaryInputStream,
  9                                     numBytes in integer default 1)
 10    return raw,
 11    ---- this function reads the number of bytes specified by numBytes
 12    ---- (default is 1) and returns the bytes as a raw.If there are no remaining
 13    ---- bytes a value of null is returned
 14    overriding member procedure read (self in out nocopy  XMLBinaryInputStream,
 15                                      bytes    in out nocopy raw,
 16                                      numBytes in out integer),
 17    ---- this procedure reads the number of bytes specified in numBytes into
 18    ---- the parameter bytes. Additionally, the actual number of bytes read is
 19    ---- returned in parameter numBytes. If this parameter
 20    ---- is set to 0 then there are no more bytes to be read.
 21    overriding member procedure read (self in out nocopy  XMLBinaryInputStream,
 22                                      bytes  in out nocopy raw,
 23                                      offset in     integer,
 24                                      numBytes in out integer),
 25    ---- this procedure reads the number of bytes specified in numBytes into
 26    ---- the parameter bytes,beginning at the offset specified by parameter offset.
 27    ---- The actual number of bytes read is returned in parameter numBytes. If this
 28    ---- value is 0, then there are no additional bytes to be read.
 29    overriding member procedure close (self in out nocopy XMLBinaryInputStream),
 30     ---- this procedure releases all resources held on the node to support the stream.
 31    overriding member function isnull (self in out nocopy XMLBinaryInputStream)
 32                                          return boolean
 33  );
 34  /

Type created.

SQL> 
SQL> --------------------------------------------------------------------------
SQL> -- XMLBinaryOutputStream is an extension of utl_BinaryOutputStream and
SQL> -- is similar to java.io.OutputStream: can only write bytes, flush
SQL> -- and close stream
SQL> -------------------------------------------------------------------------
SQL> create or replace type XMLBinaryOutputStream under utl_BinaryOutputStream
  2  (
  3    constructor function XMLBinaryOutputStream (h in raw, n in raw)
  4    return self as result,
  5    overriding member function write (self   in out nocopy XMLBinaryOutputStream,
  6                                      bytes  in out nocopy raw,
  7                                      numBytes in integer default 1)
  8    return integer,
  9    ---- this function writes the number of bytes specified by the parameter numBytes
 10    ----(default is 1) from parameter bytes into the stream. The actual number of
 11    ---- bytes written is returned.
 12    overriding member procedure write (self  in out nocopy XMLBinaryOutputStream,
 13                                       bytes in out nocopy raw,
 14                                       numBytes in out integer),
 15     ---- this procedure writes the number of bytes specified in parameter numBytes
 16     ---- from parameter bytes to the stream. The actual number of bytes written is
 17     ---- returned in parameter numBytes.
 18     overriding member procedure write (self   in out nocopy XMLBinaryOutputStream,
 19                                        bytes  in out nocopy raw,
 20                                        offset in integer,
 21                                        numBytes in out integer),
 22    ---- this procedure the number of bytes specified by numBytes to the stream,
 23    ---- beginning at the offset specified by parameter offset.
 24    ---- The actual number of bytes written is returned in parameter numBytes
 25    overriding member procedure flush (self in out nocopy XMLBinaryOutputStream),
 26    ---- this procedure insures that any buffered bytes are copied to the
 27    ----node destination.
 28    Overriding member procedure close (self in out nocopy XMLBinaryOutputStream),
 29    ---- this procedure frees all resources associated with the stream.
 30    overriding member function isnull (self in out nocopy XMLBinaryOutputStream)
 31                                          return boolean
 32  );
 33  /

Type created.

SQL> 
SQL> ------------------------------------------------------------------------
SQL> -- XMLCharacterInputStream is an extension of sys.utl_CharacterInputStream and
SQL> -- is similar to java.io.Reader: can only read chars and close stream
SQL> -------------------------------------------------------------------------
SQL> create or replace type XMLCharacterInputStream under utl_CharacterInputStream
  2  (
  3    constructor function XMLCharacterInputStream (h in raw, n in raw)
  4    return self as result,
  5  
  6    overriding member function available (self in out nocopy XMLCharacterInputStream)
  7    return integer,
  8    ---- this function returns the number of characters remaining to be read.
  9    overriding member function read (self in out nocopy XMLCharacterInputStream,
 10                                     numChars in integer default 1,
 11                                     lineFeed in boolean default false)
 12     return varchar2,
 13    ---- this function reads the number of characters specified by numChars
 14    ---- (default is 1) and returns as a varchar2. If there are no remaining characters
 15    ---- a value of null is returned. If the value of lineFeed is true
 16    ---- (default is false) then the reading terminates if a linefeed character is
 17    ----- encountered.
 18    overriding member procedure read (self     in out nocopy  XMLCharacterInputStream,
 19                                      chars    in out nocopy varchar2,
 20                                      numChars in out integer,
 21                                      lineFeed in boolean default false),
 22    ---- this procedure reads the number of characters specified by parameter numChars
 23    ---- into the parameter chars. Additionally, the actual number of characters read
 24    ---- is returned in parameter numChars. If this value is 0, then there are no more
 25    ---- characters to be read. If the value of lineFed is true (default is false),
 26    ---- then reading is terminated if a linefeed character is found.
 27    overriding member procedure read (self   in out nocopy XMLCharacterInputStream,
 28                                      chars  in out nocopy varchar2,
 29                                      offset in     integer,
 30                                      numChars in out integer,
 31                                      lineFeed in boolean default false),
 32    ---- this procedure reads the number of characters specified by parameter numChars
 33    ---- into the parameter specified by chars, beginning at the offset specified by
 34    ---- offset. The actual number of characters read is returned in parameter
 35    ---- numChars. If this value is 0, there are no more characters to be read.
 36    ---- If the value of lineFeed is true (default is false), then
 37    ---- reading is terminated if a lineFeed character is found.
 38    overriding member procedure close (self in out XMLCharacterInputStream),
 39     ---- this procedre releases all resources held by the stream.
 40    overriding member function isnull (self in out nocopy XMLCharacterInputStream)
 41                                          return boolean
 42  );
 43  /

Type created.

SQL> 
SQL> 
SQL> --------------------------------------------------------------------------
SQL> -- XMLCharacterOutputStream is an extension of sys.utl_CharacterOutputStream and
SQL> -- is similar to java.io.Writer: can only write chars, flush and close stream
SQL> -------------------------------------------------------------------------
SQL> create or replace type XMLCharacterOutputStream under utl_CharacterOutputStream
  2  (
  3    constructor function XMLCharacterOutputStream (h in raw, n in raw)
  4    return self as result,
  5    overriding member function write (self in out nocopy XMLCharacterOutputStream,
  6                                      chars   in out nocopy varchar2,
  7                                      numChars in integer default 1,
  8                                      lineFeed in boolean default false)
  9    return integer,
 10    ---- this function writes the number of characters specified by numChars
 11    ---- (default is 1) to the stream and returns the actual number of characters
 12    ---- written. If the value of lineFeed is true (default is false), then a lineFeed
 13    ---- character is appended after the last character.
 14    overriding member procedure write (self  in out nocopy XMLCharacterOutputStream,
 15                                       chars in out nocopy varchar2,
 16                                       numChars in out integer,
 17                                       lineFeed in boolean default false),
 18    ---- this procedure writes the number of characters specified by parameter
 19    ---- numChars, from parameter chars into the stream. The actual number of
 20    ---- characters written is returned in parameter numChars. If the value of lineFeed
 21    ---- is true (default is false) then a lineFeed character is appended after the
 22    ---- last character.
 23    overriding member procedure write (self  in out nocopy    XMLCharacterOutputStream,
 24                                       chars    in  out nocopy   varchar2,
 25                                       offset   in     integer,
 26                                       numChars in out integer,
 27                                       lineFeed in boolean default false),
 28    ---- this procedure writes the number of characters specified by parameter numChars,
 29    ---- from parameter chars, beginning at offset specified by parameter offset.
 30    ---- The actual number of characters written is returned in parameter numChars.
 31    ---- If the value of lineFeed is true (default is true), then a linefeed character
 32    ---- is appended after the last character.
 33    overriding member procedure flush (self in out nocopy XMLCharacterOutputStream),
 34    ---- this procedure copies all characters that may be contained within buffers
 35    ---- to the node value.
 36    overriding member procedure close (self in out nocopy XMLCharacterOutputStream) ,
 37    ---- this procedure releases all resources associated with the stream.
 38    overriding member function isnull (self in out nocopy XMLCharacterOutputStream)
 39                                          return boolean
 40  );
 41  /

Type created.

SQL> 
SQL> grant execute on XMLBinaryInputStream to PUBLIC with grant option;

Grant succeeded.

SQL> grant execute on XMLBinaryOutputStream to PUBLIC with grant option;

Grant succeeded.

SQL> grant execute on XMLCharacterInputStream to PUBLIC with grant option;

Grant succeeded.

SQL> grant execute on XMLCharacterOutputStream to PUBLIC with grant option;

Grant succeeded.

SQL> 
SQL> create public synonym XMLBinaryInputStream for sys.XMLBinaryInputStream;

Synonym created.

SQL> create public synonym XMLBinaryOutputStream for sys.XMLBinaryOutputStream;

Synonym created.

SQL> create public synonym XMLCharacterInputStream for sys.XMLCharacterInputStream;

Synonym created.

SQL> create public synonym XMLCharacterOutputStream for sys.XMLCharacterOutputStream;

Synonym created.

SQL> @@dbmsxmld.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmsxmld.sql /main/27 2009/02/05 15:29:33 mkandarp Exp $
SQL> Rem
SQL> Rem dbmsxmld.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2009, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxmld.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    mkandarp    01/13/09 - 6852013: Add FreeNodeList
SQL> Rem    mkandarp    12/11/08 - 7435201 : Add free element
SQL> Rem    mkandarp    11/30/06 - 5655708 : Increase handle size
SQL> Rem    ataracha    12/18/06 - add StreamIsNull
SQL> Rem    nkandalu    09/25/06 - 5477912: add freeDocType method
SQL> Rem    nkhandel    10/20/05 - large node streaming API
SQL> Rem    rxpeters    05/11/04 - remove WriteDTD
SQL> Rem    rxpeters    11/17/03 - add support for all DOM Exceptions
SQL> Rem    bkhaladk    10/29/03 - add schema synonyms
SQL> Rem    rxpeters    10/28/03 - add getNodeFromFragment
SQL> Rem    ataracha    10/21/03 - add function resolveNamespacePrefix
SQL> Rem    ataracha    09/17/03 - added adoptnode
SQL> Rem    bkhaladk    08/19/03 - add synonym for xmldom
SQL> Rem    rxpeters    07/30/03 - increase size of domtype to 12 bytes
SQL> Rem    ataracha    01/17/03 - add domdoc paramater to getxmltype
SQL> Rem    nmontoya    01/16/03 - ADD importnode method
SQL> Rem    njalali     08/13/02 - removing SET statements
SQL> Rem    thoang      04/17/02 - grabtrans 'thoang_bug-2265790'
SQL> Rem    thoang      04/08/02 - Added new methods
SQL> Rem    thoang      03/21/02 - Added CreateDocument method.
SQL> Rem    gviswana    01/29/02 - CREATE OR REPLACE SYNONYM
SQL> Rem    spannala    12/27/01 - setup should be run as SYS
SQL> Rem    nmontoya    12/12/01 - remove set echo on
SQL> Rem    sichandr    11/06/01 - add freeNode
SQL> Rem    rbooredd    10/05/01 - fix show errors
SQL> Rem    sichandr    09/20/01 - add getSchemaNode
SQL> Rem    nmontoya    09/05/01 - Merged nmontoya_plsdom2
SQL> Rem    nmontoya    08/09/01 - Created
SQL> Rem
SQL> 
SQL> 
SQL> CREATE OR REPLACE PACKAGE xdb.dbms_xmldom AUTHID CURRENT_USER IS
  2  
  3  ----------------------------------------------------------------------
  4  -- DOM API
  5  ----------------------------------------------------------------------
  6  
  7  ----------------------------------------------------------------------
  8  -- Constants and Type Declarations
  9  ----------------------------------------------------------------------
 10  
 11  --
 12  -- DOM Node types (as returned by getNodeType)
 13  --
 14  ELEMENT_NODE CONSTANT PLS_INTEGER                := 1;
 15  ATTRIBUTE_NODE CONSTANT PLS_INTEGER              := 2;
 16  TEXT_NODE CONSTANT PLS_INTEGER                   := 3;
 17  CDATA_SECTION_NODE CONSTANT PLS_INTEGER          := 4;
 18  ENTITY_REFERENCE_NODE CONSTANT PLS_INTEGER       := 5;
 19  ENTITY_NODE CONSTANT PLS_INTEGER                 := 6;
 20  PROCESSING_INSTRUCTION_NODE CONSTANT PLS_INTEGER := 7;
 21  COMMENT_NODE CONSTANT PLS_INTEGER                := 8;
 22  DOCUMENT_NODE CONSTANT PLS_INTEGER               := 9;
 23  DOCUMENT_TYPE_NODE CONSTANT PLS_INTEGER          := 10;
 24  DOCUMENT_FRAGMENT_NODE CONSTANT PLS_INTEGER      := 11;
 25  NOTATION_NODE CONSTANT PLS_INTEGER               := 12;
 26  
 27  --
 28  -- DOMException types
 29  --
 30  INDEX_SIZE_ERR              EXCEPTION;
 31  DOMSTRING_SIZE_ERR          EXCEPTION;
 32  HIERARCHY_REQUEST_ERR       EXCEPTION;
 33  WRONG_DOCUMENT_ERR          EXCEPTION;
 34  INVALID_CHARACTER_ERR       EXCEPTION;
 35  NO_DATA_ALLOWED_ERR         EXCEPTION;
 36  NO_MODIFICATION_ALLOWED_ERR EXCEPTION;
 37  NOT_FOUND_ERR               EXCEPTION;
 38  NOT_SUPPORTED_ERR           EXCEPTION;
 39  INUSE_ATTRIBUTE_ERR         EXCEPTION;
 40  INVALID_STATE_ERR           EXCEPTION;
 41  SYNTAX_ERR                  EXCEPTION;
 42  INVALID_MODIFICATION_ERR    EXCEPTION;
 43  NAMESPACE_ERR               EXCEPTION;
 44  INVALID_ACCESS_ERR          EXCEPTION;
 45  
 46  --
 47  -- DOM interface types
 48  --
 49  SUBTYPE domtype IS RAW(13);
 50  
 51  TYPE DOMNode IS RECORD (id RAW(13));
 52  TYPE DOMNamedNodeMap IS RECORD (id RAW(13));
 53  TYPE DOMNodeList IS RECORD (id RAW(13));
 54  TYPE DOMAttr IS RECORD (id RAW(13));
 55  TYPE DOMCDataSection IS RECORD (id RAW(13));
 56  TYPE DOMCharacterData IS RECORD (id RAW(13));
 57  TYPE DOMComment IS RECORD (id RAW(13));
 58  TYPE DOMDocumentFragment IS RECORD (id RAW(13));
 59  TYPE DOMElement IS RECORD (id RAW(13));
 60  TYPE DOMEntity IS RECORD (id RAW(13));
 61  TYPE DOMEntityReference IS RECORD (id RAW(13));
 62  TYPE DOMNotation IS RECORD (id RAW(13));
 63  TYPE DOMProcessingInstruction IS RECORD (id RAW(13));
 64  TYPE DOMText IS RECORD (id RAW(13));
 65  TYPE DOMImplementation IS RECORD (id RAW(13));
 66  TYPE DOMDocumentType IS RECORD (id RAW(13));
 67  TYPE DOMDocument IS RECORD (id RAW(13));
 68  TYPE DOMStreamHandle IS RECORD (id RAW(12));
 69  /*
 70  SUBTYPE DOMNode IS domtype;
 71  SUBTYPE DOMNamedNodeMap IS domtype;
 72  SUBTYPE DOMNodeList IS domtype;
 73  SUBTYPE DOMAttr IS domtype;
 74  SUBTYPE DOMCDataSection IS domtype;
 75  SUBTYPE DOMCharacterData IS domtype;
 76  SUBTYPE DOMComment IS domtype;
 77  SUBTYPE DOMDocumentFragment IS domtype;
 78  SUBTYPE DOMElement IS domtype;
 79  SUBTYPE DOMEntity IS domtype;
 80  SUBTYPE DOMEntityReference IS domtype;
 81  SUBTYPE DOMNotation IS domtype;
 82  SUBTYPE DOMProcessingInstruction IS domtype;
 83  SUBTYPE DOMText IS domtype;
 84  SUBTYPE DOMImplementation IS domtype;
 85  SUBTYPE DOMDocumentType IS domtype;
 86  SUBTYPE DOMDocument IS domtype;
 87  */
 88  
 89  -----------------------------------------------------------------------------
 90  -- Public Interface
 91  ----------------------------------------------------------------------------
 92  
 93  ---------------------------------------------------------------------------
 94  -- Interface DOMImplementation:
 95  --
 96  --    hasFeature
 97  --    createDocument
 98  --
 99  --    implementation_isNull (Extension)
100  --
101  ---------------------------------------------------------------------------
102  
103  
104  /**
105   * DOM DOMImplementation interface methods
106   * These methods implement the DOM DOMImplementation interface as specified in:
107   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490
108   */
109  FUNCTION hasFeature(di DOMImplementation, feature IN VARCHAR2,
110                      version IN VARCHAR2) RETURN BOOLEAN;
111  
112  FUNCTION createDocument(namespaceURI IN VARCHAR2, qualifiedName IN VARCHAR2,
113                          doctype IN DOMType := NULL) RETURN DOMDocument;
114  
115  /**
116   * DOM Node XDK interface methods
117   */
118  
119  -- Check validity of object
120  FUNCTION isNull(di DOMImplementation) RETURN BOOLEAN;
121  
122  
123  ---------------------------------------------------------------------------
124  -- DOM Node interface:
125  --
126  --    getNodeName
127  --    getNodeValue
128  --    setNodeValue
129  --    getNodeType
130  --    getParentNode
131  --    getChildNodes
132  --    getFirstChild
133  --    getLastChild
134  --    getPreviousSibling
135  --    getNextSibling
136  --    getAttributes
137  --    getOwnerDocument
138  --    getPrefix
139  --    setPrefix
140  --    insertBefore
141  --    replaceChild
142  --    removeChild
143  --    appendChild
144  --    hasChildNodes
145  --    cloneNode
146  
147  --    node_isNull (Extension)
148  --    writeToFile (Extension)
149  --    node_writeToBuffer (Extension)
150  --    node_writeToClob (Extension)
151  --    getNodeFromFragment (Extension)
152  --    writeToFile (given charset, Extension)
153  --    writeToBuffer (given charset, Extension)
154  --    writeToClob (given charset, Extension)
155  --    makeAttr (Extension)
156  --    makeCDataSection (Extension)
157  --    makeCharacterData (Extension)
158  --    makeComment (Extension)
159  --    makeDocumentFragment (Extension)
160  --    makeDocumentType (Extension)
161  --    makeElement (Extension)
162  --    makeEntity (Extension)
163  --    makeEntityReference (Extension)
164  --    makeNotation (Extension)
165  --    makeProcessingInstruction (Extension)
166  --    makeText (Extension)
167  --    makeDocument (Extension)
168  --    getSchemaNode (Extension)
169  --    freeNode (Extension)
170  
171  --    numChildNodes (available for C wrapper)
172  --    getQualifiedName (available for C wrapper)
173  --    getNodeNameSpace (available for C wrapper)
174  --    getNodePrefix (available for C wrapper)
175  --    getNodeLocal (available for C wrapper)
176  ---------------------------------------------------------------------------
177  --
178  
179  /**
180   * DOM Node interface methods
181   * These methods implement the DOM Node interface as specified in:
182   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-1950641247
183   */
184  FUNCTION getNodeName(n DOMNode) RETURN VARCHAR2;
185  FUNCTION getNodeValue(n domnode) RETURN VARCHAR2;
186  PROCEDURE setNodeValue(n DOMNode, nodeValue IN VARCHAR2);
187  FUNCTION getNodeType(n DOMNode) RETURN pls_INTEGER;
188  FUNCTION getParentNode(n DOMNode) RETURN DOMNode;
189  
190  -- FUNCTION domnode_getChildNodes (n IN domnode) RETURN DOMNodeList;
191  FUNCTION getChildNodes(n DOMNode) RETURN DOMNodeList;
192  
193  FUNCTION getFirstChild(n DOMNode) RETURN DOMNode;
194  FUNCTION getLastChild(n DOMNode) RETURN DOMNode;
195  FUNCTION getPreviousSibling(n DOMNode) RETURN DOMNode;
196  FUNCTION getNextSibling(n DOMNode) RETURN DOMNode;
197  FUNCTION getAttributes(n DOMNode) RETURN DOMNamedNodeMap;
198  FUNCTION getOwnerDocument(n DOMNode) RETURN DOMDocument;
199  FUNCTION getPrefix(n domnode) RETURN VARCHAR2;
200  FUNCTION getNodeFromFragment (fragment IN sys.xmltype) return DOMNode;
201  PROCEDURE setPrefix(n DOMNode, prefix IN VARCHAR2);
202  FUNCTION insertBefore(n DOMNode, newChild IN DOMNode, refChild IN DOMNode)
203  RETURN DOMNode;
204  FUNCTION replaceChild(n DOMNode, newChild IN DOMNode, oldChild IN DOMNode)
205  RETURN DOMNode;
206  FUNCTION removeChild(n DOMNode, oldChild IN DOMNode) RETURN DOMNode;
207  FUNCTION appendChild(n DOMNode, newChild IN DOMNode) RETURN DOMNode;
208  FUNCTION hasChildNodes(n DOMNode) RETURN BOOLEAN;
209  FUNCTION hasAttributes(n DOMNode) RETURN BOOLEAN;
210  FUNCTION cloneNode(n DOMNode, deep boolean) RETURN DOMNode;
211  
212  /**
213   * DOM Node XDK interface methods
214   */
215  
216  -- Check validity of object
217  FUNCTION isNull(n DOMNode) RETURN BOOLEAN;
218  
219  -- Write DOMNode object using the database character set
220  PROCEDURE writeToFile(n DOMNode, fileName VARCHAR2);
221  PROCEDURE writeToBuffer(n DOMNode, buffer IN OUT VARCHAR2);
222  PROCEDURE writeToClob(n DOMNode, cl IN OUT CLOB);
223  
224  -- Write DOMNode object using database character set and Print Options
225  PROCEDURE writeToFile(n DOMNode, fileName VARCHAR2,
226                        pflag IN NUMBER, indent IN NUMBER);
227  PROCEDURE writeToBuffer(n DOMNode, buffer IN OUT VARCHAR2,
228                         pflag IN NUMBER, indent IN NUMBER);
229  PROCEDURE writeToClob(n DOMNode, cl IN OUT CLOB,
230                        pflag IN NUMBER, indent IN NUMBER);
231  
232  -- Write DOMNode object using the specified character set
233  PROCEDURE writeToFile(n DOMNode, fileName VARCHAR2, charset VARCHAR2);
234  PROCEDURE writeToBuffer(n DOMNode, buffer IN OUT VARCHAR2, charset VARCHAR2);
235  PROCEDURE writeToClob(n DOMNode, cl IN OUT CLOB, charset VARCHAR2);
236  
237  -- Write DOMNode object using the specified character set and print options
238  PROCEDURE writeToFile(n DOMNode, fileName VARCHAR2, charset VARCHAR2,
239                        pflag IN NUMBER, indent IN NUMBER);
240  PROCEDURE writeToBuffer(n DOMNode, buffer IN OUT VARCHAR2, charset VARCHAR2,
241                         pflag IN NUMBER, indent IN NUMBER);
242  PROCEDURE writeToClob(n DOMNode, cl IN OUT CLOB, charset VARCHAR2,
243                        pflag IN NUMBER, indent IN NUMBER);
244  
245  -- Cast DOMNode objects
246  FUNCTION makeAttr(n DOMNode) RETURN DOMAttr;
247  FUNCTION makeCDataSection(n DOMNode) RETURN DOMCDataSection;
248  FUNCTION makeCharacterData(n DOMNode) RETURN DOMCharacterData;
249  FUNCTION makeComment(n DOMNode) RETURN DOMComment;
250  FUNCTION makeDocumentFragment(n DOMNode) RETURN DOMDocumentFragment;
251  FUNCTION makeDocumentType(n DOMNode) RETURN DOMDocumentType;
252  FUNCTION makeElement(n DOMNode) RETURN DOMElement;
253  FUNCTION makeEntity(n DOMNode) RETURN DOMEntity;
254  FUNCTION makeEntityReference(n DOMNode) RETURN DOMEntityReference;
255  FUNCTION makeNotation(n DOMNode) RETURN DOMNotation;
256  FUNCTION makeProcessingInstruction(n DOMNode) RETURN DOMProcessingInstruction;
257  FUNCTION makeText(n DOMNode) RETURN DOMText;
258  FUNCTION makeDocument(n DOMNode) RETURN DOMDocument;
259  
260  FUNCTION  getSchemaNode(n DOMnode) RETURN DOMnode;
261  PROCEDURE getNamespace(n DOMnode, data IN OUT VARCHAR2);
262  PROCEDURE getLocalName(n DOMnode, data OUT VARCHAR2);
263  PROCEDURE getExpandedName(n DOMnode, data OUT VARCHAR2);
264  PROCEDURE freeNode(n DOMnode);
265  
266  
267  
268  -------------------------------------------------------------------------------
269  -- The following functions and procedures are added to support the 4 Streaming
270  -- models defined for Large Node access
271  -------------------------------------------------------------------------------
272  -- Get-Pull methods
273  -------------------------------------------------------------------------------
274  FUNCTION getNodeValueAsBinaryStream (n in domnode)
275                                          return sys.utl_BinaryInputStream;
276  FUNCTION getNodeValueAsCharacterStream (n      in domnode)
277                                          return sys.utl_CharacterInputStream;
278  ----------------------------------------------------------------------------
279  -- Get-Push methods
280  ----------------------------------------------------------------------------
281  PROCEDURE getNodeValueAsBinaryStream (n         in domnode,
282                                        pushValue in out sys.utl_BinaryOutputStream);
283  PROCEDURE getNodeValueAsCharacterStream (n         in domnode,
284                                           pushValue in out sys.utl_CharacterOutputStream);
285  ----------------------------------------------------------------------------
286  -- Set-Pull methods
287  ----------------------------------------------------------------------------
288  PROCEDURE setNodeValueAsBinaryStream (n         in domnode,
289                                        nodeValue in out sys.utl_BinaryInputStream);
290  PROCEDURE setNodeValueAsCharacterStream (n         in domnode,
291                                        nodeValue in out sys.utl_CharacterInputStream);
292  ----------------------------------------------------------------------------
293  -- "Deferred" Set-Pull
294  ----------------------------------------------------------------------------
295  PROCEDURE setNodeValueAsDeferredBfile (n     in domnode,
296                                         value in bfile);
297  PROCEDURE setNodeValueAsDeferredBlob (n     in domnode,
298                                        value in blob);
299  PROCEDURE setNodeValueAsDeferredClob (n     in domnode,
300                                        value in clob);
301  ----------------------------------------------------------------------------
302  -- Set-Push methods
303  ----------------------------------------------------------------------------
304  FUNCTION setNodeValueAsBinaryStream (n in domnode) return                                     sys.utl_BinaryOutputStream;
305  FUNCTION setNodeValueAsCharacterStream (n in domnode) return
306                                       sys.utl_CharacterOutputStream;
307  ----------------------------------------------------------------------------
308  -- Determining if use of Binary Stream is valid
309  ----------------------------------------------------------------------------
310  FUNCTION useBinaryStream (n in domnode) return boolean;
311  FUNCTION xmld_useBinStream (n in raw) return boolean;
312  ----------------------------------------------------------------------------
313  -- XMLBinaryInputStream methods
314  ----------------------------------------------------------------------------
315  FUNCTION createXMLBinaryInputStream (n in raw) return raw;
316  FUNCTION BinaryInputStreamAvailable (handle in raw) return integer;
317  PROCEDURE readBytesFromBIS1 (   handle in RAW,
318                                  bytes in out raw
319  --                                offset in pls_integer,
320  --                                numBytes in pls_integer
321  );
322  
323  FUNCTION readBinaryInputStream (handle   in raw,
324                                  numBytes in integer) return raw;
325  PROCEDURE readBinaryInputStream (handle   in            raw,
326                                   bytes    in out nocopy raw,
327                                   numBytes in out        integer);
328  PROCEDURE readBinaryInputStream (handle   in            raw,
329                                   bytes    in out nocopy raw,
330                                   offset   in            integer,
331                                   numBytes in out        integer);
332  PROCEDURE closeBinaryInputStream (handle in raw);
333  ----------------------------------------------------------------------------
334  -- XMLBinaryOutputStream methods
335  ----------------------------------------------------------------------------
336  FUNCTION createXMLBinaryOutputStream (n in raw) return raw;
337  FUNCTION writeBinaryOutputStream (handle   in            raw,
338                                    bytes    in out nocopy raw,
339                                    numBytes in            integer)
340                              return integer;
341  PROCEDURE writeBinaryOutputStream (handle   in            raw,
342                                     bytes    in out nocopy raw,
343                                     numBytes in out        integer);
344  PROCEDURE writeBinaryOutputStream (handle   in            raw,
345                                     bytes    in out nocopy raw,
346                                     offset   in            integer,
347                                     numBytes in out        integer);
348  PROCEDURE flushBinaryOutputStream (handle in raw);
349  PROCEDURE closeBinaryOutputStream (handle in raw);
350  ----------------------------------------------------------------------------
351  -- XMLCharacterInputStream methods
352  ----------------------------------------------------------------------------
353  FUNCTION createXMLCharacterInputStream (n in raw) return raw;
354  FUNCTION CharacterInputStreamAvailable (handle in raw) return integer;
355  FUNCTION readCharacterInputStream (handle   in raw,
356                                     numChars in integer,
357                                     lineFeed in boolean) return varchar2;
358  PROCEDURE readCharacterInputStream (handle   in            raw,
359                                      chars    in out nocopy varchar2,
360                                      numChars in out        integer,
361                                      lineFeed in            boolean);
362  PROCEDURE readCharacterInputStream (handle   in            raw ,
363                                      chars    in out nocopy varchar2,
364                                      offset   in            integer ,
365                                      numChars in out        integer,
366                                      lineFeed in            boolean);
367  PROCEDURE closeCharacterInputStream (handle in raw);
368  ----------------------------------------------------------------------------
369  -- XMLCharacterOutputStream methods
370  ----------------------------------------------------------------------------
371  FUNCTION createXMLCharacterOutputStream (n in raw) return raw;
372  FUNCTION writeCharacterOutputStream (handle   in            raw,
373                                       chars    in out nocopy varchar2,
374                                       numChars in            integer,
375                                       lineFeed in            boolean) return integer;
376  
377  PROCEDURE writeCharacterOutputStream (handle   in            raw,
378                                        chars    in out nocopy varchar2,
379                                        numChars in out        integer,
380                                        lineFeed in            boolean);
381  
382  PROCEDURE writeCharacterOutputStream (handle   in            raw,
383                                        chars    in out nocopy varchar2,
384                                        offset   in            integer,
385                                        numChars in out        integer,
386                                        lineFeed in            boolean);
387  
388  PROCEDURE flushCharacterOutputStream (handle in raw);
389  PROCEDURE closeCharacterOutputStream (handle in raw);
390  
391  ----------------------------------------------------------------------------
392  -- isNull methods
393  ----------------------------------------------------------------------------
394  
395  FUNCTION StreamIsNull(handle raw)  RETURN BOOLEAN;
396  
397  ---------------------------------------------------------------------------
398  -- DOM NodeList interface:
399  --
400  --    nodelist_item
401  --    nodelist_getLength
402  
403  --    nodelist_isNull (Extension)
404  
405  --   freeNodeList (Extension)
406  ---------------------------------------------------------------------------
407  
408  /**
409   * DOM NodeList interface methods
410   * These methods implement the DOM NodeList interface as specified in:
411   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-536297177
412  */
413  
414   -- item:
415   --
416   -- Get the indexth item in the collection.  If index is greater than or
417   -- equal to the number of nodes in the list, this returns null.
418   --
419   -- PARAMETERS
420   --      nl       - input DOM node list
421   --      idx      - index into the list
422   -- RETURN
423   --      indexed child node
424   -- EXCEPTIONS
425   --   <exception name> - <description>
426   -- NOTES
427   --
428   --
429   -- FUNCTION domnodel_item (nl IN DOMNodeList,
430   --                         idx IN PLS_INTEGER) RETURN DOMNode;
431  FUNCTION item(nl DOMNodeList, idx IN PLS_INTEGER) RETURN DOMNode;
432  
433  FUNCTION getLength(nl DOMNodeList) RETURN pls_INTEGER;
434  
435  /**
436   * DOM Node XDK interface methods
437   */
438  
439  -- Check validity of object
440  FUNCTION isNull(nl DOMNodeList) RETURN BOOLEAN;
441  
442  
443  PROCEDURE freeNodeList(nl DOMNodeList);
444  ---------------------------------------------------------------------------
445  -- DOM NamedNodeMap interface:
446  --
447  --    getNamedItem
448  --    setNamedItem
449  --    removeNamedItem
450  --    namednodemap_item
451  --    namednodemap_getLength
452  
453  --    namednodemap_isNull (Extension)
454  
455  ---------------------------------------------------------------------------
456  
457  /**
458   * DOM Node interface methods
459   * These methods implement the DOM Node interface as specified in:
460   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-1950641247
461   */
462  
463  FUNCTION getNamedItem(nnm DOMNamedNodeMap, name IN VARCHAR2) RETURN DOMNode;
464  FUNCTION getNamedItem(nnm DOMNamedNodeMap, name IN VARCHAR2,
465                        ns IN VARCHAR2) RETURN DOMNode;
466  FUNCTION setNamedItem(nnm DOMNamedNodeMap, arg IN DOMNode) RETURN DOMNode;
467  FUNCTION setNamedItem(nnm DOMNamedNodeMap, arg IN DOMNode,
468                        ns IN VARCHAR2) RETURN DOMNode;
469  FUNCTION removeNamedItem(nnm DOMNamedNodeMap, name IN VARCHAR2) RETURN DOMNode;
470  FUNCTION removeNamedItem(nnm DOMNamedNodeMap, name IN VARCHAR2,
471                           ns IN VARCHAR2) RETURN DOMNode;
472  FUNCTION item(nnm DOMNamedNodeMap, idx IN pls_integer)
473                             RETURN domNode;
474  FUNCTION getLength(nnm DOMNamedNodeMap) RETURN pls_integer;
475  
476  /**
477   * DOM Node XDK interface methods
478   */
479  
480  -- Check validity of object
481  FUNCTION isNull(nnm DOMNamedNodeMap) RETURN BOOLEAN;
482  
483  
484  ---------------------------------------------------------------------------
485  -- DOM Character Data interface:
486  --
487  --    cdata_getData
488  --    cdata_setData
489  --    cdata_getLength
490  --    substringData
491  --    appendData
492  --    insertData
493  --    deleteData
494  --    replaceData
495  --
496  --    cdata_isNull (extension)
497  --    cdata_makeNode (extension)
498  
499  ---------------------------------------------------------------------------
500  
501  /**
502   * DOM CharacterData interface methods
503   * These methods implement the DOM CharacterData interface as specified in:
504   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-FF21A306
505   */
506  
507   -- getData:
508   --
509   -- Get data for character node
510   --
511   -- PARAMETERS
512   --      cd       - input DOM Character node
513   -- RETURN
514   --      data for character node
515   -- EXCEPTIONS
516   --   <exception name> - <description>
517   -- NOTES
518   --      Returns data for character node, or NULL if node isn't
519   --      character-type.
520   --
521   -- PROCEDURE domcdata_getCharData (cd IN DOMNode, data OUT VARCHAR2);
522  FUNCTION getData(cd domcharacterdata) return VARCHAR2;
523  
524  PROCEDURE setData(cd DOMCharacterData, data IN VARCHAR2);
525  FUNCTION getLength(cd DOMCharacterData) RETURN pls_integer;
526  FUNCTION substringData(cd DOMCharacterData, offset IN PLS_INTEGER,
527                          cnt IN PLS_integer) RETURN VARCHAR2;
528  PROCEDURE appendData(cd DOMCharacterData, arg IN VARCHAR2);
529  PROCEDURE insertData(cd DOMCharacterData, offset IN PLS_INTEGER, arg IN VARCHAR2);
530  PROCEDURE deleteData(cd DOMCharacterData, offset IN PLS_INTEGER, cnt IN PLS_INTEGER);
531  PROCEDURE replaceData(cd DOMCharacterData, offset IN PLS_INTEGER,
532                        cnt IN PLS_INTEGER, arg IN VARCHAR2);
533  
534  /**
535   * DOM Node XDK interface methods
536   */
537  
538  -- Check validity of object
539  FUNCTION isNull(cd DOMCharacterData) RETURN BOOLEAN;
540  
541  -- Cast
542  FUNCTION makeNode(cd DOMCharacterData) RETURN DOMNode;
543  
544  
545  ---------------------------------------------------------------------------
546  -- DOM Attribute interface:
547  --
548  --    getName
549  --    getOwnerElement
550  --    getSpecified
551  --    getValue
552  --    setValue
553  --
554  --    attr_isNull (Extension)
555  --    attr_makeNode (Extension)
556  --    attr_getQualifiedName (Extension)
557  --    attr_getNamespace (Extension)
558  --    attr_getLocalName (Extension)
559  --    attr_getExpandedName (Extension)
560  --
561  ---------------------------------------------------------------------------
562  
563  /**
564   * DOM interface methods
565   * These methods implement the DOM Node interface as specified in:
566   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-1950641247
567   */
568  
569  FUNCTION getName(a DOMAttr) return varchar2;
570  FUNCTION getOwnerElement(a DOMAttr) RETURN DOMElement;
571  FUNCTION getSpecified(a DOMAttr) RETURN BOOLEAN;
572  FUNCTION getValue (a IN DOMAttr) return varchar2;
573  PROCEDURE setValue(a DOMAttr, newvalue IN VARCHAR2);
574  
575  /**
576   * DOM XDK interface methods
577   */
578  
579  -- Check validity of object
580  FUNCTION isNull(a DOMAttr) RETURN BOOLEAN;
581  
582  -- Cast
583  FUNCTION makeNode(a DOMAttr) RETURN DOMNode;
584  
585  FUNCTION getQualifiedName(a DOMAttr) return varchar2;
586  FUNCTION getNamespace(a DOMAttr) return varchar2;
587  FUNCTION getLocalName(a DOMAttr) return varchar2;
588  FUNCTION getExpandedName(a DOMAttr) return varchar2;
589  
590  
591  ---------------------------------------------------------------------------
592  -- DOM Element interface:
593  --
594  --    getTagName
595  --    getAttribute
596  --    hasAttribute
597  --    setAttribute
598  --    removeAttribute
599  --    getAttributeNode
600  --    setAttributeNode
601  --    removeAttributeNode
602  --    element_getElementsByTagName
603  --
604  --    element_isNull (Extension)
605  --    element_makeNode (Extension)
606  --    normalize (extension)
607  --    element_getQualifiedName (extension)
608  --    element_getNamespace (extension)
609  --    element_getLocalName (extension)
610  --    element_getExpandedName (extension)
611  --    getChildrenByTagName (extension)
612  --    getChildrenByTagName (extension)
613  --    resolveNamespacePrefix (extension)
614  --    freeElement (extension)
615  --
616  ---------------------------------------------------------------------------
617  
618  /**
619   * DOM Element interface methods
620   * These methods implement the DOM Element interface as specified in:
621   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-745549614
622   */
623  
624  FUNCTION getTagName(elem DOMElement) return varchar2;
625  FUNCTION getAttribute(elem DOMElement, name IN VARCHAR2) return varchar2;
626  FUNCTION getAttribute(elem DOMElement, name IN VARCHAR2,
627                        ns IN VARCHAR2) return varchar2;
628  FUNCTION hasAttribute(elem DOMElement, name IN VARCHAR2) return BOOLEAN;
629  FUNCTION hasAttribute(elem DOMElement, name IN VARCHAR2,
630                        ns IN VARCHAR2) return BOOLEAN;
631  PROCEDURE setAttribute(elem DOMElement, name IN VARCHAR2, newvalue IN VARCHAR2);
632  PROCEDURE setAttribute(elem DOMElement, name IN VARCHAR2, newvalue IN VARCHAR2,
633                         ns IN VARCHAR2);
634  PROCEDURE removeAttribute(elem DOMElement, name IN VARCHAR2);
635  PROCEDURE removeAttribute(elem DOMElement, name IN VARCHAR2, ns IN VARCHAR2);
636  FUNCTION getAttributeNode(elem DOMElement, name IN VARCHAR2) RETURN DOMAttr;
637  FUNCTION getAttributeNode(elem DOMElement, name IN VARCHAR2,
638                            ns IN VARCHAR2) RETURN DOMAttr;
639  FUNCTION setAttributeNode(elem DOMElement, newAttr IN DOMAttr) RETURN DOMAttr;
640  FUNCTION setAttributeNode(elem DOMElement, newAttr IN DOMAttr,
641                            ns IN VARCHAR2) RETURN DOMAttr;
642  FUNCTION removeAttributeNode(elem DOMElement, oldAttr IN DOMAttr)
643  RETURN DOMAttr;
644  FUNCTION getElementsByTagName(elem DOMElement, name IN VARCHAR2)
645                                RETURN DOMNodeList;
646  PROCEDURE freeElement(elem DOMElement);
647  
648  /**
649   * DOM XDK interface methods
650   */
651  
652  -- Check validity of object
653  FUNCTION isNull(elem DOMElement) RETURN BOOLEAN;
654  
655  -- Cast
656  FUNCTION makeNode(elem DOMElement) RETURN domnode;
657  
658  PROCEDURE normalize(elem DOMElement);
659  FUNCTION getQualifiedName(elem DOMElement) return varchar2;
660  FUNCTION getNamespace(elem DOMElement) return varchar2;
661  FUNCTION getLocalName(elem DOMElement) return varchar2;
662  FUNCTION getExpandedName(elem DOMElement) return varchar2;
663  FUNCTION getChildrenByTagName(elem DOMElement, name varchar2)
664                                return DOMNodeList;
665  FUNCTION getChildrenByTagName(elem DOMElement, name varchar2, ns varchar2)
666                                return DOMNodeList;
667  FUNCTION getElementsByTagName(elem DOMElement, name IN VARCHAR2,
668                                          ns varchar2) RETURN DOMNodeList;
669  PROCEDURE resolveNamespacePrefix(elem DOMElement, prefix varchar2,
670                                                    data OUT VARCHAR2);
671  FUNCTION resolveNamespacePrefix(elem DOMElement, prefix varchar2)
672                                  return VARCHAR2;
673  
674  
675  ---------------------------------------------------------------------------
676  -- Interface DOMText:
677  --
678  --    splitText
679  --
680  --    text_isNull (extension)
681  --    text_makeNode (extension)
682  ---------------------------------------------------------------------------
683  
684  /**
685   * DOM Text interface methods
686   * These methods implement the DOM Text interface as specified in:
687   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-1312295772
688  */
689  
690  FUNCTION splitText(t DOMText, offset IN PLS_INTEGER) RETURN DOMText;
691  
692  /**
693   * DOM XDK interface methods
694   */
695  
696  -- Check validity of object
697  FUNCTION isNull(t DOMText) RETURN BOOLEAN;
698  
699  -- Cast
700  FUNCTION makeNode(t DOMText) RETURN DOMNode;
701  
702  
703  ---------------------------------------------------------------------------
704  -- Interface DOMComment
705  --
706  --    comment_isNull (extension)
707  --    makeNode (extension)
708  --
709  ---------------------------------------------------------------------------
710  
711  /**
712   * DOM XDK interface methods
713   */
714  
715  -- Check validity of object
716  FUNCTION isNull(com DOMComment) RETURN BOOLEAN;
717  
718  -- Cast
719  FUNCTION makeNode(com DOMComment) RETURN DOMNode;
720  
721  
722  ---------------------------------------------------------------------------
723  -- Interface DOMCDATASection
724  --
725  --    cdatasection_isNull (extension)
726  --    makeNode (extension)
727  --
728  ---------------------------------------------------------------------------
729  
730  /**
731   * DOM XDK interface methods
732   */
733  
734  -- Check validity of object
735  FUNCTION isNull(cds DOMCDATASection) RETURN BOOLEAN;
736  
737  -- Cast
738  FUNCTION makeNode(cds DOMCDATASection) RETURN DOMNode;
739  
740  
741  ---------------------------------------------------------------------------
742  -- Interface Document Type:
743  --
744  --    getName
745  --    getEntities
746  --    getNotations
747  --    getpublicid (dom 2)
748  --    getsystemid (dom 2)
749  --
750  --    doctype_isNull (extension)
751  --    makeNode (extension)
752  --    findEntity (extension)
753  --    findNotation (extension)
754  --
755  ---------------------------------------------------------------------------
756  
757  /**
758   * DOM DocumentType interface methods
759   * These methods implement the DOM DocumentType interface as specified in:
760   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-412266927
761   */
762  FUNCTION getName(dt DOMDocumentType) return varchar2;
763  FUNCTION getEntities(dt DOMDocumentType) RETURN DOMNamedNodeMap;
764  FUNCTION getNotations(dt DOMDocumentType) RETURN DOMNamedNodeMap;
765  
766  -- DOM 2
767  FUNCTION getPublicId(dt DOMDocumentType) return varchar2;
768  FUNCTION getSystemId(dt DOMDocumentType) return varchar2;
769  
770  /**
771   * DOM XDK interface methods
772   */
773  
774  -- Check validity of object
775  FUNCTION isNull(dt DOMDocumentType) RETURN BOOLEAN;
776  
777  -- Cast
778  FUNCTION makeNode(dt DOMDocumentType) RETURN DOMNode;
779  
780  -- Other
781  FUNCTION findEntity(dt DOMDocumentType, name varchar2, par boolean)
782                      return DOMEntity;
783  FUNCTION findNotation(dt DOMDocumentType, name varchar2) return DOMNotation;
784  
785  ---------------------------------------------------------------------------
786  -- Interface DOMNotation
787  --
788  --    getPublicId
789  --    getSystemId
790  --
791  --    notation_isNull (extension)
792  --    makeNode (extension)
793  --
794  ---------------------------------------------------------------------------
795  
796  /**
797   * DOM Notation interface methods
798   * These methods implement the DOM Notation interface as specified in:
799   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5431D1B9
800   */
801  
802  FUNCTION getPublicId(n DOMNotation) return varchar2;
803  FUNCTION getSystemId(n DOMNotation) return varchar2;
804  
805  /**
806   * DOM XDK interface methods
807   */
808  
809  -- Check validity of object
810  FUNCTION isNull(n DOMNotation) RETURN BOOLEAN;
811  
812  -- Cast
813  FUNCTION makeNode(n DOMNotation) RETURN DOMNode;
814  
815  
816  ---------------------------------------------------------------------------
817  -- Interface DOMEntity:
818  --
819  --    getPublicID
820  --    getSystemID
821  --    getNotationName
822  --
823  --    entity_isNull (extension)
824  --    makeNode (extension)
825  --
826  ---------------------------------------------------------------------------
827  
828  /**
829   * DOM Entity interface methods
830   * These methods implement the DOM Entity interface as specified in:
831   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-527DCFF2
832   */
833  FUNCTION getPublicId(ent DOMEntity) return varchar2;
834  FUNCTION getSystemId(ent DOMEntity) return varchar2;
835  FUNCTION getNotationName(ent DOMEntity) return varchar2;
836  
837  /**
838   * DOM XDK interface methods
839   */
840  
841  -- Check validity of object
842  FUNCTION isNull(ent DOMEntity) RETURN BOOLEAN;
843  
844  -- Cast
845  FUNCTION makeNode(ent DOMEntity) RETURN DOMNode;
846  
847  
848  ---------------------------------------------------------------------------
849  -- Interface DOMEntityReference
850  --
851  --    entityref_isNull (extension)
852  --    makeNode (extension)
853  --
854  ---------------------------------------------------------------------------
855  
856  /**
857   * DOM XDK interface methods
858   */
859  
860  -- Check validity of object
861  FUNCTION isNull(eref DOMEntityReference) RETURN BOOLEAN;
862  
863  -- Cast
864  FUNCTION makeNode(eref DOMEntityReference) RETURN DOMNode;
865  
866  
867  ---------------------------------------------------------------------------
868  -- Interface Processing Instruction:
869  --
870  --    pi_getData
871  --    getTarget
872  --    pi_setData
873  --
874  --    pi_isNull (extension)
875  --    pi_makeNode (extension)
876  --
877  ---------------------------------------------------------------------------
878  
879  /**
880   * DOM ProcessingInstruction interface methods
881   * These methods implement the DOM ProcessingInstruction interface as
882   * specified in:
883   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-1004215813
884   */
885  
886  FUNCTION getData(pi DOMProcessingInstruction) return varchar2;
887  FUNCTION getTarget(pi DOMProcessingInstruction) return varchar2;
888  PROCEDURE setData(pi DOMProcessingInstruction, data IN VARCHAR2);
889  
890  /**
891   * DOM XDK interface methods
892   */
893  
894  -- Check validity of object
895  FUNCTION isNull(pi DOMProcessingInstruction) RETURN BOOLEAN;
896  
897  -- Cast
898  FUNCTION makeNode(pi DOMProcessingInstruction) RETURN DOMNode;
899  
900  
901  ---------------------------------------------------------------------------
902  -- Interface DocumentFragment:
903  --
904  --    docfrag_isNull (extension)
905  --    makeNode (extension)
906  --
907  ----------------------------------------------------------------------------
908  
909  /**
910   * DOM XDK interface methods
911   */
912  
913  -- Check validity of object
914  FUNCTION isNull(df DOMDocumentFragment) RETURN BOOLEAN;
915  
916  -- Cast
917  FUNCTION makeNode(df DOMDocumentFragment) RETURN DOMNode;
918  
919  PROCEDURE writeToBuffer(df DOMDocumentFragment, buffer IN OUT VARCHAR2);
920  
921  PROCEDURE writeToBuffer(df DOMDocumentFragment, buffer IN OUT VARCHAR2,
922                          pflag IN NUMBER, indent IN NUMBER);
923  
924  ---------------------------------------------------------------------------
925  -- Interface DOMDocument:
926  --
927  --    getDoctype
928  --    setDoctype
929  --    getImplementation
930  --    getDocumentElement
931  --    createElement
932  --    createDocumentFragment
933  --    createComment
934  --    createTextNode
935  --    createCDATASection
936  --    createProcessingInstruction
937  --    createAttribute
938  --    createEntityReference
939  --    document_getElementsByTagName
940  --    importNode
941  --    adoptNode
942  --
943  --    document_isNull (extension)
944  --    document_makeNode (extension)
945  --    newDOMDocument (extension)
946  --    getVersion (extension)
947  --    setVersion (extension)
948  --    getCharset (extension)
949  --    setCharset (extension)
950  --    getStandalone (extension)
951  --    setStandalone (extension)
952  --    writeToFile (extension)
953  --    document_writeToBuffer (extension)
954  --    document_writeToClob (extension)
955  --    writeToFile (extension)
956  --    writeToBuffer (extension)
957  --    writeToClob (extension)
958  --    writeExternalDTDToFile (extension)
959  --    writeExternalDTDToBuffer (extension)
960  --    writeExternalDTDToClob (extension)
961  --    writeExternalDTDToFile (extension)
962  --    writeExternalDTDToBuffer (extension)
963  --    writeExternalDTDToClob (extension)
964  --    freeDocument (extension)
965  --
966  ---------------------------------------------------------------------------
967  
968  /**
969   * DOM Document interface methods
970   * These methods implement the DOM Document interface as specified in:
971   * http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#i-Document
972   */
973  
974  FUNCTION getDoctype(doc DOMDocument) RETURN DOMDocumentType;
975  PROCEDURE setDoctype(doc DOMDocument, name VARCHAR2,
976                       sysid VARCHAR2, pubid VARCHAR2);
977  FUNCTION getImplementation(doc DOMDocument) RETURN DOMImplementation;
978  FUNCTION getDocumentElement(doc DOMDocument) RETURN DOMElement;
979  FUNCTION createElement(doc DOMDocument, tagName IN VARCHAR2) RETURN DOMElement;
980  FUNCTION createElement(doc DOMDocument, tagName IN VARCHAR2,
981                         ns IN VARCHAR2) RETURN DOMElement;
982  FUNCTION createDocumentFragment(doc DOMDocument) RETURN DOMDocumentFragment;
983  FUNCTION createTextNode(doc DOMDocument, data IN VARCHAR2) RETURN DOMText;
984  FUNCTION createComment(doc DOMDocument, data IN VARCHAR2) RETURN DOMComment;
985  FUNCTION createCDATASection(doc DOMDocument, data IN VARCHAR2)
986                              RETURN DOMCDATASection;
987  FUNCTION createProcessingInstruction(doc DOMDocument, target IN VARCHAR2,
988                                       data IN VARCHAR2)
989                                       RETURN DOMProcessingInstruction;
990  FUNCTION createAttribute(doc DOMDocument, name IN VARCHAR2) RETURN DOMAttr;
991  FUNCTION createAttribute(doc DOMDocument, name IN VARCHAR2,
992                           ns IN VARCHAR2) RETURN DOMAttr;
993  FUNCTION createEntityReference(doc DOMDocument, name IN VARCHAR2)
994                                 RETURN DOMEntityReference;
995  
996  FUNCTION getElementsByTagName(doc DOMDocument, tagname IN VARCHAR2)
997                                         RETURN DOMNodeList;
998   -------------------------getDocElementsByTagName--------------------------
999   -- Get element by tag name
1000   --
1001   -- PARAMETERS
1002   --      doc          - input DOM Document
1003   --      tagname      - tagname of new element.
1004   -- RETURN
1005   --      Elements list.
1006   -- EXCEPTIONS
1007   --   <exception name> - <description>
1008   -- NOTES
1009   --
1010   --
1011   -- FUNCTION domdoc_getElementsByTagName(doc IN DOMDocument,
1012   --                                      tagname IN VARCHAR2)
1013   --                                      RETURN DOMNodeList;
1014  
1015  /**
1016   * DOM XDK interface methods
1017   */
1018  
1019  -- Check validity of object
1020  FUNCTION isNull(doc DOMDocument) RETURN BOOLEAN;
1021  
1022  -- Cast
1023  FUNCTION makeNode(doc DOMDocument) RETURN DOMNode;
1024  
1025  -- New document
1026  FUNCTION newDOMDocument RETURN domdocument;
1027  FUNCTION newDOMDocument(xmldoc IN sys.xmltype) RETURN DOMDocument;
1028  ----------------------------------create----------------------------------
1029   -- Create domdocument given xmltype
1030   --
1031   -- PARAMETERS
1032   --      xmldoc       - input xmltype
1033   -- RETURN
1034   --      DOM Document
1035   -- EXCEPTIONS
1036   --   <exception name> - <description>
1037   -- NOTES
1038   --
1039   --
1040   -- FUNCTION domdoc_create(xmldoc IN sys.xmltype) RETURN DOMDocument;
1041  
1042  FUNCTION newDOMDocument(cl IN clob) RETURN domdocument;
1043  FUNCTION getxmltype(doc in DOMDocument) RETURN sys.xmltype;
1044  
1045  FUNCTION getVersion(doc DOMDocument) return varchar2;
1046  PROCEDURE setVersion(doc DOMDocument, version VARCHAR2);
1047  FUNCTION getCharset(doc DOMDocument) return varchar2;
1048  PROCEDURE setCharset(doc DOMDocument, charset VARCHAR2);
1049  FUNCTION getStandalone(doc DOMDocument) return varchar2;
1050  PROCEDURE setStandalone(doc DOMDocument, newvalue VARCHAR2);
1051  PROCEDURE writeToFile(doc DOMDocument, fileName VARCHAR2);
1052  PROCEDURE writeToBuffer(doc DOMDocument, buffer IN OUT VARCHAR2);
1053  PROCEDURE writeToClob(doc DOMDocument, cl IN OUT CLOB);
1054  PROCEDURE writeToFile(doc DOMDocument, fileName VARCHAR2,
1055                        pflag IN NUMBER, indent IN NUMBER);
1056  PROCEDURE writeToBuffer(doc DOMDocument, buffer IN OUT VARCHAR2,
1057                           pflag IN NUMBER, indent IN NUMBER);
1058  PROCEDURE writeToClob(doc DOMDocument, cl IN OUT CLOB,
1059                        pflag IN NUMBER, indent IN NUMBER);
1060  PROCEDURE writeToFile(doc DOMDocument, fileName VARCHAR2, charset VARCHAR2);
1061  PROCEDURE writeToBuffer(doc DOMDocument, buffer IN OUT VARCHAR2,
1062                          charset VARCHAR2);
1063  PROCEDURE writeToClob(doc DOMDocument, cl IN OUT CLOB, charset VARCHAR2);
1064  PROCEDURE writeToFile(doc DOMDocument, fileName VARCHAR2, charset VARCHAR2,
1065                        pflag IN NUMBER, indent IN NUMBER);
1066  PROCEDURE writeToBuffer(doc DOMDocument, buffer IN OUT VARCHAR2,
1067                          charset VARCHAR2, pflag IN NUMBER, indent IN NUMBER);
1068  PROCEDURE writeToClob(doc DOMDocument, cl IN OUT CLOB, charset VARCHAR2,
1069                           pflag IN NUMBER, indent IN NUMBER);
1070  PROCEDURE writeExternalDTDToFile(doc DOMDocument, fileName varchar2);
1071  PROCEDURE writeExternalDTDToBuffer(doc DOMDocument, buffer in out varchar2);
1072  PROCEDURE writeExternalDTDToClob(doc DOMDocument, cl in out clob);
1073  PROCEDURE writeExternalDTDToFile(doc DOMDocument, fileName varchar2,
1074                                   charset varchar2);
1075  PROCEDURE writeExternalDTDToBuffer(doc DOMDocument, buffer in out varchar2,
1076                                     charset varchar2);
1077  PROCEDURE writeExternalDTDToClob(doc DOMDocument, cl in out clob,
1078                                                    charset varchar2);
1079  
1080  PROCEDURE freeDocument(doc DOMDocument);
1081  PROCEDURE freeDocFrag(df IN DOMDocumentFragment);
1082  PROCEDURE freeDocType(dt IN DOMDocumentType);
1083  -- PROCEDURE domdoc_remove (doc IN domdocument);
1084  
1085  FUNCTION importnode(doc DOMDocument, importednode domnode, deep boolean)
1086                      RETURN DOMNode;
1087  FUNCTION adoptnode(doc DOMDocument, adoptednode domnode)
1088                     RETURN DOMNode;
1089  
1090  end dbms_xmldom;
1091  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM DBMS_XMLDOM FOR xdb.dbms_xmldom
  2  /

Synonym created.

SQL> CREATE OR REPLACE PUBLIC SYNONYM xmldom FOR xdb.dbms_xmldom
  2  /

Synonym created.

SQL> CREATE OR REPLACE SYNONYM sys.xmldom FOR xdb.dbms_xmldom
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_xmldom TO PUBLIC
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.xmldom TO PUBLIC
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> 
SQL> 
SQL> @@dbmsxres.sql
SQL> Rem
SQL> Rem $Header: dbmsxres.sql 04-dec-2006.19:13:39 mkandarp Exp $
SQL> Rem
SQL> Rem dbmsxres.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxres.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    mkandarp    12/04/06 - 5655708: Increase DOM handle size
SQL> Rem    ataracha    07/27/06 - Add getContentRef
SQL> Rem    thoang      08/09/04 - Add isNull function for XDBResource
SQL> Rem    ataracha    03/19/04 - Add XDBResource and related APIs
SQL> Rem    thoang      09/13/04 - Created - Moved APIs from dbmsxdb.sql
SQL> Rem
SQL> 
SQL> CREATE OR REPLACE PACKAGE xdb.dbms_xdbresource AUTHID CURRENT_USER IS
  2  
  3  --------------------------------------------
  4  -- TYPES
  5  --
  6  --------------------------------------------
  7  SUBTYPE xdbrestype IS RAW(13);
  8  TYPE XDBResource IS RECORD(id xdbrestype);
  9  
 10  ---------------------------------------------------------------------------
 11  -- XDBResource related API
 12  ---------------------------------------------------------------------------
 13  
 14  ---------------------------------------------
 15  -- FUNCTION - isNull
 16  --    Checks if the input res is null.
 17  -- PARAMETERS -
 18  --    res - input resource
 19  -- RETURNS -
 20  --    TRUE if the input res is null.
 21  ---------------------------------------------
 22  FUNCTION isNull(res IN XDBResource) return BOOLEAN;
 23  
 24  ---------------------------------------------
 25  -- PROCEDURE - freeResource
 26  --    Frees any memory associated with an XDBResource
 27  -- PARAMETERS -
 28  --    res - The XDBResource to free
 29  ---------------------------------------------
 30  PROCEDURE freeResource (res IN XDBResource);
 31  
 32  ---------------------------------------------
 33  -- FUNCTION - getACL
 34  --    Given an XDBResource, returns its ACL as string.
 35  -- PARAMETERS -
 36  --    res - An XDBResource
 37  -- RETURNS -
 38  --    The ACL of the XDBResource as VARCHAR2
 39  ---------------------------------------------
 40  FUNCTION getACL (res IN XDBResource) return VARCHAR2;
 41  
 42  FUNCTION getACLDocFromRes(res IN XDBResource) return sys.xmltype;
 43  
 44  ---------------------------------------------
 45  -- FUNCTION - getAuthor
 46  --    Given an XDBResource, returns its author.
 47  -- PARAMETERS -
 48  --    res - An XDBResource
 49  -- RETURNS -
 50  --    The Author of the XDBResource.
 51  ---------------------------------------------
 52  FUNCTION getAuthor(res IN XDBResource)  return VARCHAR2;
 53  
 54  ---------------------------------------------
 55  -- FUNCTION - getCharacterSet
 56  --    Given an XDBResource, returns its characterset.
 57  -- PARAMETERS -
 58  --    res - An XDBResource
 59  -- RETURNS -
 60  --    The character set of the XDBResource.
 61  ---------------------------------------------
 62  FUNCTION getCharacterSet(res IN XDBResource)  return VARCHAR2;
 63  
 64  ---------------------------------------------
 65  -- FUNCTION - getComment
 66  --    Given an XDBResource, returns its comment.
 67  -- PARAMETERS -
 68  --    res - An XDBResource
 69  -- RETURNS -
 70  --    The Comment of the XDBResource.
 71  ---------------------------------------------
 72  FUNCTION getComment(res IN XDBResource)  return VARCHAR2;
 73  
 74  ---------------------------------------------
 75  -- FUNCTION - getContentType
 76  --    Given an XDBResource, returns its content-type.
 77  -- PARAMETERS -
 78  --    res - An XDBResource
 79  -- RETURNS -
 80  --    The content type of the XDBResource.
 81  ---------------------------------------------
 82  FUNCTION getContentType(res IN XDBResource)  return VARCHAR2;
 83  
 84  ---------------------------------------------
 85  -- FUNCTION - getCreationDate
 86  --    Given an XDBResource, returns its creation date.
 87  -- PARAMETERS -
 88  --    res - An XDBResource
 89  -- RETURNS -
 90  --    The creation date of the XDBResource.
 91  ---------------------------------------------
 92  FUNCTION getCreationDate(res IN XDBResource) return TIMESTAMP;
 93  
 94  ---------------------------------------------
 95  -- FUNCTION - getCreator
 96  --    Given an XDBResource, returns its creator.
 97  -- PARAMETERS -
 98  --    res - An XDBResource
 99  -- RETURNS -
100  --    The creator of the XDBResource.
101  ---------------------------------------------
102  FUNCTION getCreator(res IN XDBResource) return VARCHAR2;
103  
104  ---------------------------------------------
105  -- FUNCTION - getDisplayName
106  --    Given an XDBResource, returns its display name.
107  -- PARAMETERS -
108  --    res - An XDBResource
109  -- RETURNS -
110  --    The display name of the XDBResource.
111  ---------------------------------------------
112  FUNCTION getDisplayName(res IN XDBResource)  return VARCHAR2;
113  
114  ---------------------------------------------
115  -- FUNCTION - getLanguage
116  --    Given an XDBResource, returns its language.
117  -- PARAMETERS -
118  --    res - An XDBResource
119  -- RETURNS -
120  --    The language of the XDBResource.
121  ---------------------------------------------
122  FUNCTION getLanguage (res IN XDBResource) return VARCHAR2;
123  
124  ---------------------------------------------
125  -- FUNCTION - getLastModifier
126  --    Given an XDBResource, returns its last modifier.
127  -- PARAMETERS -
128  --    res - An XDBResource
129  -- RETURNS -
130  --    The last modifier of the XDBResource.
131  ---------------------------------------------
132  FUNCTION getLastModifier(res IN XDBResource)  return VARCHAR2;
133  
134  ---------------------------------------------
135  -- FUNCTION - getModificationDate
136  --    Given an XDBResource, returns its modification date.
137  -- PARAMETERS -
138  --    res - An XDBResource
139  -- RETURNS -
140  --    The modification date of the XDBResource.
141  ---------------------------------------------
142  FUNCTION getModificationDate(res IN XDBResource)  return TIMESTAMP;
143  
144  ---------------------------------------------
145  -- FUNCTION - getOwner
146  --    Given an XDBResource, returns its owner.
147  -- PARAMETERS -
148  --    res - An XDBResource
149  -- RETURNS -
150  --    The owner of the XDBResource.
151  ---------------------------------------------
152  FUNCTION getOwner(res IN XDBResource)  return VARCHAR2;
153  
154  ---------------------------------------------
155  -- FUNCTION - getRefCount
156  --    Given an XDBResource, returns its reference count.
157  -- PARAMETERS -
158  --    res - An XDBResource
159  -- RETURNS -
160  -- The reference count of the XDBResource.
161  ---------------------------------------------
162  FUNCTION getRefCount (res IN XDBResource) return PLS_INTEGER;
163  
164  ---------------------------------------------
165  -- FUNCTION - getVersionId
166  --    Given an XDBResource, returns its version id.
167  -- PARAMETERS -
168  --    res - An XDBResource
169  -- RETURNS -
170  --    The version id of the XDBResource.
171  ---------------------------------------------
172  FUNCTION getVersionId(res IN XDBResource)  return PLS_INTEGER;
173  
174  ---------------------------------------------
175  -- PROCEDURE - setAuthor
176  --    Sets the author of the given XDBResource to the specified varchar2.
177  -- PARAMETERS -
178  --    res    - An XDBResource
179  --    author - The new author
180  --
181  ---------------------------------------------
182  PROCEDURE setAuthor(res IN OUT XDBResource, author IN VARCHAR2);
183  
184  ---------------------------------------------
185  -- PROCEDURE - setACL
186  --    Sets the acl of the given XDBResource to the path specified varchar2.
187  -- PARAMETERS -
188  --    res     - An XDBResource
189  --    ACLPath - The absolute path of the new acl
190  ---------------------------------------------
191  PROCEDURE setACL(res IN OUT XDBResource, ACLPath IN VARCHAR2);
192  
193  ---------------------------------------------
194  -- PROCEDURE - setCharacterSet
195  --   Sets the character set of the given XDBResource to the specified varchar2.
196  -- PARAMETERS -
197  --    res     - An XDBResource
198  --    charset - The new charset
199  ---------------------------------------------
200  PROCEDURE setCharacterSet(res IN OUT XDBResource, charSet IN VARCHAR2);
201  
202  ---------------------------------------------
203  -- PROCEDURE - setComment
204  --    Sets the comment of the given XDBResource to the specified varchar2.
205  -- PARAMETERS -
206  --    res     - An XDBResource
207  --    comment - The new comment
208  ---------------------------------------------
209  PROCEDURE setComment(res IN OUT XDBResource, comment IN VARCHAR2);
210  
211  ---------------------------------------------
212  -- PROCEDURE - setContentType
213  --    Sets the content-type of the given XDBResource to the specified varchar2.
214  -- PARAMETERS -
215  --    res      - An XDBResource
216  --    conttype - The new content-type
217  ---------------------------------------------
218  PROCEDURE setContentType(res IN OUT XDBResource, conttype IN VARCHAR2);
219  
220  ---------------------------------------------
221  -- PROCEDURE - setDisplayName
222  --    Sets the display name of the given XDBResource to the specified varchar2.
223  -- PARAMETERS -
224  --    res     - An XDBResource
225  --    name    - The new display name
226  ---------------------------------------------
227  PROCEDURE setDisplayName(res IN OUT XDBResource, name IN VARCHAR2);
228  
229  ---------------------------------------------
230  -- PROCEDURE - setLanguage
231  --    Sets the language of the given XDBResource to the specified varchar2.
232  -- PARAMETERS -
233  --    res     - An XDBResource
234  --    lang    - The new language
235  ---------------------------------------------
236  PROCEDURE setLanguage(res IN OUT XDBResource, lang IN VARCHAR2);
237  
238  ---------------------------------------------
239  -- PROCEDURE - setOwner
240  --    Sets the owner of the given XDBResource to the specified varchar2.
241  -- PARAMETERS -
242  --    res     - An XDBResource
243  --    owner   - The new owner
244  ---------------------------------------------
245  PROCEDURE setOwner(res IN OUT XDBResource, owner IN VARCHAR2);
246  
247  ---------------------------------------------
248  -- FUNCTION - hasAuthorChanged
249  --    Returns TRUE if the author of the given resource has changed,
250  --         FALSE otherwise.
251  -- PARAMETERS -
252  --    res     - An XDBResource
253  -- RETURNS -
254  --
255  ---------------------------------------------
256  FUNCTION hasAuthorChanged(res IN XDBResource) return BOOLEAN;
257  
258  ---------------------------------------------
259  -- FUNCTION - hasCharacterSetChanged
260  --     Returns TRUE if the charset of the given resource has changed,
261  --         FALSE otherwise.
262  -- PARAMETERS -
263  --    res     - An XDBResource
264  -- RETURNS -
265  -- TRUE if the charset of the given resource has changed,
266  --         FALSE otherwise.
267  ---------------------------------------------
268  FUNCTION hasCharacterSetChanged(res IN XDBResource) return BOOLEAN;
269  
270  ---------------------------------------------
271  -- FUNCTION - hasCommentChanged
272  --     Returns TRUE if the comment of the given resource has changed,
273  --         FALSE otherwise.
274  -- PARAMETERS -
275  --    res     - An XDBResource
276  -- RETURNS -
277  -- TRUE if the comment of the given resource has changed,
278  --         FALSE otherwise.
279  ---------------------------------------------
280  FUNCTION hasCommentChanged(res IN XDBResource) return BOOLEAN;
281  
282  ---------------------------------------------
283  -- FUNCTION - hasContentTypeChanged
284  --     Returns TRUE if the content-type of the given resource has changed,
285  --         FALSE otherwise.
286  -- PARAMETERS -
287  --    res     - An XDBResource
288  -- RETURNS -
289  -- TRUE if the content-type of the given resource has changed,
290  --         FALSE otherwise.
291  ---------------------------------------------
292  FUNCTION hasContentTypeChanged(res IN XDBResource) return BOOLEAN;
293  
294  ---------------------------------------------
295  -- FUNCTION - hasContentChanged
296  --     Returns TRUE if the contents of the given resource has changed,
297  --         FALSE otherwise.
298  -- PARAMETERS -
299  --    res     - An XDBResource
300  -- RETURNS -
301  -- TRUE if the contents of the given resource has changed,
302  --         FALSE otherwise.
303  ---------------------------------------------
304  FUNCTION hasContentChanged(res IN XDBResource) return BOOLEAN;
305  
306  ---------------------------------------------
307  -- FUNCTION - hasCreationDateChanged
308  --     Returns TRUE if the creation date of the given resource has changed,
309  --         FALSE otherwise.
310  -- PARAMETERS -
311  --    res     - An XDBResource
312  -- RETURNS -
313  -- TRUE if the creation date of the given resource has changed,
314  --         FALSE otherwise.
315  ---------------------------------------------
316  FUNCTION hasCreationDateChanged(res IN XDBResource) return BOOLEAN;
317  
318  ---------------------------------------------
319  -- FUNCTION - hasCreatorChanged
320  --     Returns TRUE if the creator of the given resource has changed,
321  --         FALSE otherwise.
322  -- PARAMETERS -
323  --    res     - An XDBResource
324  -- RETURNS -
325  -- TRUE if the creator of the given resource has changed,
326  --         FALSE otherwise.
327  ---------------------------------------------
328  FUNCTION hasCreatorChanged(res IN XDBResource) return BOOLEAN;
329  
330  ---------------------------------------------
331  -- FUNCTION - hasDisplayName
332  --     Returns TRUE if the display name of the given resource has changed,
333  --         FALSE otherwise.
334  -- PARAMETERS -
335  --    res     - An XDBResource
336  -- RETURNS -
337  -- TRUE if the display name of the given resource has changed,
338  --         FALSE otherwise.
339  ---------------------------------------------
340  FUNCTION hasDisplayNameChanged(res IN XDBResource) return BOOLEAN;
341  
342  ---------------------------------------------
343  -- FUNCTION - hasLanguageChanged
344  --     Returns TRUE if the language of the given resource has changed,
345  --         FALSE otherwise.
346  -- PARAMETERS -
347  --    res     - An XDBResource
348  -- RETURNS -
349  -- TRUE if the language of the given resource has changed,
350  --         FALSE otherwise.
351  ---------------------------------------------
352  FUNCTION hasLanguageChanged(res IN XDBResource) return BOOLEAN;
353  
354  ---------------------------------------------
355  -- FUNCTION - hasLastModifierChanged
356  --     Returns TRUE if the last modifier of the given resource has changed,
357  --         FALSE otherwise.
358  -- PARAMETERS -
359  --    res     - An XDBResource
360  -- RETURNS -
361  -- TRUE if the last modifier of the given resource has changed,
362  --         FALSE otherwise.
363  ---------------------------------------------
364  FUNCTION hasLastModifierChanged(res IN XDBResource) return BOOLEAN;
365  
366  ---------------------------------------------
367  -- FUNCTION - hasModificationDate
368  --    Returns TRUE if the modification date of the given resource has changed,
369  --         FALSE otherwise.
370  -- PARAMETERS -
371  --    res     - An XDBResource
372  -- RETURNS -
373  -- TRUE if the modification date of the given resource has changed,
374  --         FALSE otherwise.
375  ---------------------------------------------
376  FUNCTION hasModificationDateChanged(res IN XDBResource) return BOOLEAN;
377  
378  ---------------------------------------------
379  -- FUNCTION - hasOwnerChanged
380  --     Returns TRUE if the owner of the given resource has changed,
381  --         FALSE otherwise.
382  -- PARAMETERS -
383  --    res     - An XDBResource
384  -- RETURNS -
385  -- TRUE if the owner of the given resource has changed,
386  --         FALSE otherwise.
387  ---------------------------------------------
388  FUNCTION hasOwnerChanged(res IN XDBResource) return BOOLEAN;
389  
390  ---------------------------------------------
391  -- FUNCTION - hasRefCountChanged
392  --     Returns TRUE if the reference count of the given resource has changed,
393  --         FALSE otherwise.
394  -- PARAMETERS -
395  --    res     - An XDBResource
396  -- RETURNS -
397  -- TRUE if the reference count of the given resource has changed,
398  --         FALSE otherwise.
399  ---------------------------------------------
400  FUNCTION hasRefCountChanged(res IN XDBResource) return BOOLEAN;
401  
402  ---------------------------------------------
403  -- FUNCTION - hasVersionId
404  --     Returns TRUE if the version id of the given resource has changed,
405  --         FALSE otherwise.
406  -- PARAMETERS -
407  --    res     - An XDBResource
408  -- RETURNS -
409  -- TRUE if the version id of the given resource has changed,
410  --         FALSE otherwise.
411  ---------------------------------------------
412  FUNCTION hasVersionIdChanged(res IN XDBResource) return BOOLEAN;
413  
414  ---------------------------------------------
415  -- FUNCTION - hasACLChanged
416  --     Returns TRUE if the ACL of the given resource has changed,
417  --         FALSE otherwise.
418  -- PARAMETERS -
419  --    res     - An XDBResource
420  -- RETURNS -
421  -- TRUE if the ACL of the given resource has changed,
422  --         FALSE otherwise.
423  ---------------------------------------------
424  FUNCTION hasACLChanged(res IN XDBResource) return BOOLEAN;
425  
426  ---------------------------------------------
427  -- FUNCTION - isFolder
428  --    Checks if the given resource is a folder or not.
429  -- PARAMETERS -
430  --    res     - An XDBResource
431  -- RETURNS -
432  -- TRUE if the given resource is a folder,
433  --         FALSE otherwise.
434  ---------------------------------------------
435  FUNCTION isFolder(res IN XDBResource) return BOOLEAN;
436  
437  ---------------------------------------------
438  -- FUNCTION - getContentClob
439  --    Returns the contents of the resource as a clob.
440  -- PARAMETERS -
441  --    res     - An XDBResource
442  -- RETURNS -
443  --    The contents as CLOB.
444  ---------------------------------------------
445  FUNCTION getContentClob(res IN XDBResource)  return CLOB;
446  
447  ---------------------------------------------
448  -- FUNCTION - getContentBlob
449  --    Returns the contents of the resource as a blob.
450  -- PARAMETERS -
451  --    res        - An XDBResource
452  --    csid - OUT - The character set id of the blob returned.
453  -- RETURNS -
454  --    The contents as BLOB.
455  ---------------------------------------------
456  FUNCTION getContentBlob(res IN XDBResource, csid OUT PLS_INTEGER) return BLOB;
457  
458  ---------------------------------------------
459  -- FUNCTION - getContentXML
460  --    Returns the contents of the resource as an XMLType.
461  -- PARAMETERS -
462  --    res     - An XDBResource
463  -- RETURNS -
464  --    The contents as XMLType.
465  ---------------------------------------------
466  FUNCTION getContentXML(res IN XDBResource)  return SYS.XMLType;
467  
468  ---------------------------------------------
469  -- FUNCTION - getContentVarchar2
470  --    Returns the contents of the resource as an Varchar2.
471  -- PARAMETERS -
472  --    res     - An XDBResource
473  -- RETURNS -
474  --    The contents as Varchar2.
475  ---------------------------------------------
476  FUNCTION getContentVarchar2(res IN XDBResource)  return VARCHAR2;
477  
478  ---------------------------------------------
479  -- FUNCTION - getContentRef
480  --    Returns the contents of the resource as a Ref.
481  -- PARAMETERS -
482  --    res     - An XDBResource
483  -- RETURNS -
484  --    The contents as an XMLTypeRef.
485  ---------------------------------------------
486  FUNCTION getContentRef(res IN XDBResource)  return REF SYS.XMLType;
487  
488  ---------------------------------------------
489  -- PROCEDURE - setContent
490  --    Replaces the contents of the given resource with the given clob.
491  -- PARAMETERS -
492  --    res     - An XDBResource
493  --    data    - The clob
494  ---------------------------------------------
495  PROCEDURE setContent(res IN OUT XDBResource, data IN CLOB);
496  
497  ---------------------------------------------
498  -- PROCEDURE -
499  --    Replaces the contents of the given resource with the given blob.
500  -- PARAMETERS -
501  --    res     - An XDBResource
502  --    data    - The blob
503  --    csid    - The character-set id of the blob
504  ---------------------------------------------
505  PROCEDURE setContent(res IN OUT XDBResource, data IN BLOB, csid IN PLS_INTEGER);
506  
507  ---------------------------------------------
508  -- PROCEDURE -
509  --    Replaces the contents of the given resource with the given XMLType.
510  -- PARAMETERS -
511  --    res     - An XDBResource
512  --    data    - The XMLType
513  ---------------------------------------------
514  PROCEDURE setContent(res IN OUT XDBResource, data IN SYS.XMLType);
515  
516  ---------------------------------------------
517  -- PROCEDURE -
518  --    Replaces the contents of the given resource with the given string.
519  -- PARAMETERS -
520  --    res     - An XDBResource
521  --    data    - The input string
522  ---------------------------------------------
523  PROCEDURE setContent(res IN OUT XDBResource, data IN VARCHAR2);
524  
525  ---------------------------------------------
526  -- PROCEDURE -
527  --    Replaces the contents of the given resource with the given REF to XMLType.
528  -- PARAMETERS -
529  --    res     - An XDBResource
530  --    data    - The REF to XMLType
531  ---------------------------------------------
532  PROCEDURE setContent(res IN OUT XDBResource, data IN REF SYS.XMLType,
533                       sticky IN BOOLEAN := TRUE);
534  
535  ---------------------------------------------
536  -- PROCEDURE -
537  --    Replaces the contents of the given resource with the given BFILE.
538  -- PARAMETERS -
539  --    res     - An XDBResource
540  --    data    - The input bfile
541  --    csid_bfile  - The character set id of the bfile
542  ---------------------------------------------
543  PROCEDURE setContent(res IN OUT XDBResource, data IN BFILE,
544                       csid_bfile IN PLS_INTEGER);
545  
546  ---------------------------------------------
547  -- PROCEDURE - save
548  --    Updates the resource with any modifications that were done on it.
549  -- PARAMETERS -
550  --    res     - An XDBResource
551  ---------------------------------------------
552  PROCEDURE save(res IN XDBResource);
553  
554  ---------------------------------------------
555  -- FUNCTION - makeDocument
556  --    Converts the XDBResource to DOMDocument. This can be used in
557  --      XMLDOM APIs. (Please refer to the XMLDOM package).
558  -- PARAMETERS -
559  --    res     - An XDBResource
560  -- RETURNS -
561  --    The DOMDocument for this resource.
562  ---------------------------------------------
563  FUNCTION makeDocument(res IN XDBResource) return DBMS_XMLDOM.DOMDocument;
564  
565  FUNCTION hasChanged(res IN XDBResource, xpath IN VARCHAR2,
566                      bnamespace IN VARCHAR2) return BOOLEAN;
567  
568  FUNCTION getCustomMetadata(res IN XDBResource, xpath IN VARCHAR2,
569                             namespace IN VARCHAR2) return SYS.XMLType;
570  
571  FUNCTION hasCustomMetadataChanged(res IN XDBResource) return BOOLEAN;
572  
573  PROCEDURE setCustomMetadata(res IN XDBResource, xpath IN VARCHAR2,
574                              namespace IN VARCHAR2, newMetadata IN SYS.XMLType);
575  end dbms_xdbresource;
576  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_xdbresource FOR xdb.dbms_xdbresource
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_xdbresource TO PUBLIC
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> 
SQL> 
SQL> Rem Add definition for various xdb utilities
SQL> @@dbmsxdb.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmsxdb.sql /st_rdbms_11.2.0/2 2011/04/18 10:00:46 spetride Exp $
SQL> Rem
SQL> Rem dbmsxdb.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2011, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxdb.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    spetride    04/12/11 - Backport spetride_bug-12317504 from main
SQL> Rem    spetride    03/11/11 - move movexdb_tablespace to dbms_xdb_admin
SQL> Rem    spetride    08/14/09 - add getHTTPRequestHeader
SQL> Rem    spetride    06/03/09 - support custom auth follow up
SQL> Rem    badeoti     03/19/09 - clean up 11.2 packages
SQL> Rem                           Migrate*From9201,CleanSGAForUpgrade procs moved to dbms_xdbutil_int
SQL> Rem                           dbms_xdb.nfsfh2resid, syncResource moved to dbms_xdbnfs
SQL> Rem    spetride    02/16/09 - add {add|delete}HttpExpireMapping
SQL> Rem    atabar      02/06/09 - add xdbconfig default-type-mappings methods
SQL> Rem    spetride    07/02/08 - add apis for custom authentication and trust
SQL> Rem    spetride    08/14/07 - createResource from varchar2 and xmltype: pass schemaurl
SQL> Rem    thbaby      06/25/07 - dbms_xdb.link doc
SQL> Rem    thbaby      06/21/07 - documentation for setListenerEndPoint and
SQL> Rem                           getListenerEndPoint
SQL> Rem    smalde      12/29/06 - sql injection bug 5739659
SQL> Rem    thbaby      11/02/06 - move SyncIndex from dbms_xdb to dbms_xmlindex
SQL> Rem    vkapoor     07/25/06 - XbranchMerge rtjoa_httplstapi from
SQL> Rem                           st_rdbms_10.2xe
SQL> Rem    taahmed     06/09/06 - Create wrapper for createResource as a
SQL> Rem                           workaround for PL/SQL BOOLEAN type in JDBC
SQL> Rem    smalde      06/12/06 - add getcontent apis
SQL> Rem    smalde      06/07/06 - resource api
SQL> Rem    pnath       03/15/05 - Introduce LockTokenListType
SQL> Rem    pnath       01/20/05 - PL/SQL Locks API
SQL> Rem    pnath       03/05/06 - dbms_xdb.processlinks API
SQL> Rem    rmurthy     01/14/05 - add symbolic links
SQL> Rem    rmurthy     09/28/04 - add weak links
SQL> Rem    thbaby      02/08/06 - add SyncIndex
SQL> Rem    najain      03/09/05 - adding SyncResource
SQL> Rem    spannala    03/02/05 - adding nfsfh2resid
SQL> Rem    smalde      08/04/05 - Add calcsize flag to create resource given a
SQL> Rem                           ref.
SQL> Rem    smalde      05/27/05 - Add refreshContentSize procedure
SQL> Rem    mrafiq      10/11/05 - merging changes for upgrade/downgrade
SQL> Rem    najain      03/09/05 - adding SyncResource
SQL> Rem    spannala    03/02/05 - adding nfsfh2resid
SQL> Rem    thoang      09/22/04 - Add getResource method
SQL> Rem    rtjoa       11/15/05 - Add setListenerEndPoint API
SQL> Rem    pnath       11/24/04 - PL/SQL API to get and set ports
SQL> Rem    abagrawa    08/03/04 - Add new update resource metadata APIs
SQL> Rem    abagrawa    02/21/04 - Add SB Res metadata APIs
SQL> Rem    spannala    06/10/03 - adding cleansgaforupgrade
SQL> Rem    najain      06/05/03 - add getxdb_tablespace
SQL> Rem    najain      06/02/03 - add movexdb_tablespace
SQL> Rem    nmontoya    01/28/03 - ADD ExistsResource
SQL> Rem    nmontoya    10/28/02 - ADD optional sticky arg TO createres. FROM REF
SQL> Rem    thoang      08/15/02 - added csid parameter to CreateResource methods
SQL> Rem    rmurthy     10/04/02 - add get_resoid, create_oidpath
SQL> Rem    njalali     08/13/02 - removing SET statements
SQL> Rem    njalali     06/27/02 - added qmxseq to qmxsq migration functions
SQL> Rem    spannala    06/03/02 - adding forced delete
SQL> Rem    sichandr    04/17/02 - fix createresource from bfile
SQL> Rem    nmontoya    02/12/02 - remove privilege constants
SQL> Rem    gviswana    01/29/02 - CREATE OR REPLACE SYNONYM
SQL> Rem    nmontoya    01/23/02 - added createresource from BFILE
SQL> Rem    nmontoya    01/24/02 - protype change FOR acl_check
SQL> Rem                             checkprivileges, changeprivileges
SQL> Rem    sidicula    01/29/02 - getPrivileges to return Privilege XOBD
SQL> Rem    njalali     01/16/02 - added createresource from REF
SQL> Rem    nmontoya    01/19/02 - change comment FOR dbms_xdb.link
SQL> Rem    nmontoya    01/10/02 - prototype change IN dbms_xdb.link
SQL> Rem    spannala    01/11/02 - making all systems types have standard TOIDs
SQL> Rem    nmontoya    01/03/02 - added createresource for xmltype and clob
SQL> Rem    nmontoya    01/04/02 - ADD changeprivileges
SQL> Rem    nmontoya    12/06/01 - ADD getprivileges
SQL> Rem    spannala    12/27/01 - script to run in arbitrary schema with dba
SQL> Rem    nmontoya    11/13/01 - add createfolder
SQL> Rem    nmontoya    10/23/01 - xdb configuration get fix
SQL> Rem    kmuthiah    10/19/01 - add RebuildHierarchicalIndex
SQL> Rem    nmontoya    10/17/01 - setacl function
SQL> Rem    nmontoya    10/15/01 - xdb configuration api
SQL> Rem    nmontoya    09/17/01 - Created
SQL> Rem
SQL> 
SQL> create or replace type xdb.xdb_privileges OID '0000000000000000000000000002014E'
  2  as varray(1000) of VARCHAR2(200)
  3  /

Type created.

SQL> 
SQL> create or replace type xdb.LockTokenListType as varray(2147483647) of VARCHAR2(128)
  2  /

Type created.

SQL> 
SQL> show errors;
No errors.
SQL> 
SQL> Grant execute on xdb.xdb_privileges to public with grant option;

Grant succeeded.

SQL> Grant execute on xdb.LockTokenListType to public;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE PACKAGE xdb.dbms_xdb AUTHID CURRENT_USER IS
  2  
  3  ------------
  4  -- CONSTANTS
  5  --
  6  ------------
  7  DELETE_RESOURCE        CONSTANT NUMBER := 1;
  8  DELETE_RECURSIVE       CONSTANT NUMBER := 2;
  9  DELETE_FORCE           CONSTANT NUMBER := 3;
 10  DELETE_RECURSIVE_FORCE CONSTANT NUMBER := 4;
 11  
 12  DELETE_RES_METADATA_CASCADE   CONSTANT NUMBER := 1;
 13  DELETE_RES_METADATA_NOCASCADE CONSTANT NUMBER := 2;
 14  
 15  -- Constant number for 1st argument of setListenerEndPoint
 16  XDB_ENDPOINT_HTTP  CONSTANT NUMBER := 1;
 17  XDB_ENDPOINT_HTTP2 CONSTANT NUMBER := 2;
 18  
 19  -- Constant number for 4th argument of setListenerEndPoint
 20  XDB_PROTOCOL_TCP   CONSTANT NUMBER := 1;
 21  XDB_PROTOCOL_TCPS  CONSTANT NUMBER := 2;
 22  
 23  DEFAULT_LOCK_TIMEOUT CONSTANT PLS_INTEGER := (60*60);
 24  
 25  LINK_TYPE_HARD        CONSTANT NUMBER := 1;
 26  LINK_TYPE_WEAK        CONSTANT NUMBER := 2;
 27  LINK_TYPE_SYMBOLIC    CONSTANT NUMBER := 3;
 28  
 29  ON_DENY_NEXT_CUSTOM   CONSTANT NUMBER := 1;
 30  ON_DENY_BASIC         CONSTANT NUMBER := 2;
 31  
 32  ---------------------------------------------
 33  -- FUNCTION - LockResource
 34  --     Gets a webdav-like lock for XDB resource given its path
 35  -- PARAMETERS -
 36  --  abspath
 37  --     Absolute path in the Hierarchy of the resource
 38  --  depthzero
 39  --     depth zero boolean
 40  --  shared
 41  --     shared boolean
 42  -- RETURNS -
 43  --     Returns TRUE if successful
 44  ---------------------------------------------
 45  FUNCTION LockResource(abspath IN VARCHAR2, depthzero IN BOOLEAN,
 46                                             shared IN boolean)
 47                RETURN boolean;
 48  
 49  ---------------------------------------------
 50  -- FUNCTION - LockResource
 51  --     Gets a webdav-like lock for XDB resource given its path
 52  -- PARAMETERS -
 53  --  abspath
 54  --     Absolute path in the Hierarchy of the resource
 55  --  depthzero
 56  --     depth zero boolean
 57  --  shared
 58  --     shared boolean
 59  --  token
 60  --     generated token
 61  --  timeout
 62  --     time (in seconds) after which lock expires
 63  -- RETURNS -
 64  --     Returns TRUE if successful
 65  ---------------------------------------------
 66  FUNCTION LockResource(abspath IN VARCHAR2, depthzero IN BOOLEAN,
 67                        shared IN boolean, token OUT VARCHAR2,
 68                        timeout IN PLS_INTEGER := DEFAULT_LOCK_TIMEOUT)
 69                RETURN boolean;
 70  
 71  ---------------------------------------------
 72  -- PROCEDURE - RefreshLock
 73  --     Refreshes a webdav-like lock for XDB resource given its path
 74  -- PARAMETERS -
 75  --  abspath
 76  --     Absolute path in the Hierarchy of the resource
 77  --  token
 78  --     token corresponding to the lock to be refreshed
 79  --  newTimeout
 80  --     new timeout (in seconds) after which lock will expire
 81  -- NOTE -
 82  --     If the timeout is less than the remaining time to expiry,
 83  --     lock will not be refreshed
 84  ---------------------------------------------
 85  
 86  PROCEDURE RefreshLock(abspath IN VARCHAR2, token IN VARCHAR2,
 87                       newTimeout IN  PLS_INTEGER := DEFAULT_LOCK_TIMEOUT);
 88  
 89  ---------------------------------------------
 90  -- FUNCTION - LockDiscovery
 91  --     Gets Locks element on resource defined by abspath
 92  -- PARAMETERS -
 93  --  abspath
 94  --     Absolute path in the Hierarchy of the resource
 95  -- RETURNS -
 96  --     the Locks element as XMLType
 97  ---------------------------------------------
 98  FUNCTION LockDiscovery(abspath IN VARCHAR2)
 99                 RETURN SYS.XMLType;
100  
101  ---------------------------------------------
102  -- PROCEDURE - GetLockToken
103  --     Gets lock token for current user for XDB resource given its path
104  -- PARAMETERS -
105  --  abspath
106  --     Absolute path in the Hierarchy of the resource
107  --  locktoken (OUT)
108  --     Returns lock token
109  ---------------------------------------------
110  PROCEDURE GetLockToken(abspath IN VARCHAR2, locktoken OUT VARCHAR2);
111  
112  ---------------------------------------------
113  -- FUNCTION - Unlock
114  --     Removes lock for XDB resource given lock token
115  -- PARAMETERS -
116  --  abspath
117  --     Absolute path in the Hierarchy of the resource
118  --  delToken
119  --     Lock token name to be removed
120  -- RETURNS -
121  --     Returns TRUE if successful
122  ---------------------------------------------
123  FUNCTION UnlockResource(abspath IN VARCHAR2, deltoken IN VARCHAR2 := NULL)
124                          RETURN boolean;
125  
126  ---------------------------------------------
127  -- PROCEDURE - AddToLockTokenList
128  --     Adds specified token to the session lock token list
129  -- PARAMETERS -
130  --  token
131  --     token to be added to token list
132  ---------------------------------------------
133  PROCEDURE AddToLockTokenList(token IN VARCHAR2);
134  
135  ---------------------------------------------
136  -- FUNCTION - DeleteFromLockTokenList
137  --     Deletes specified token from the session lock token list
138  -- PARAMETERS -
139  --  token
140  --     token to be deleted from token list
141  -- RETURNS -
142  --     returns TRUE if delete was successful
143  ---------------------------------------------
144  FUNCTION DeleteFromLockTokenList(token IN VARCHAR2)
145                          RETURN boolean;
146  
147  ---------------------------------------------
148  -- FUNCTION - GetLockTokenList
149  --     Gets the session lock token list
150  -- PARAMETERS -
151  --  None
152  -- RETURNS -
153  --  The session lock token list
154  ---------------------------------------------
155  FUNCTION GetLockTokenList RETURN LockTokenListType;
156  
157  ---------------------------------------------
158  -- FUNCTION - ExistsResource(VARCHAR2)
159  --     Given a string, returns true if the resource exists in the hierarchy.
160  -- PARAMETERS -
161  --  abspath
162  --     Absolute path to the resource
163  -- RETURNS -
164  --     Returns TRUE if resource was found in the hierarchy.
165  ---------------------------------------------
166  FUNCTION ExistsResource(abspath IN VARCHAR2) RETURN BOOLEAN;
167  
168  ---------------------------------------------
169  -- FUNCTION - CreateResource(VARCHAR2, VARCHAR2, VARCHAR2, VARCHAR2)
170  --     Given a string, inserts a new resource into the hierarchy with
171  --     the string as the contents.
172  -- PARAMETERS -
173  --  abspath
174  --     Absolute path to the resource
175  --  data
176  --     String buffer containing the resource contents
177  --  schemaurl
178  --     for XML data, schema URL data conforms to (default null)
179  --  elem
180  --     element name (default null)
181  -- RETURNS -
182  --     Returns TRUE if resource was successfully inserted or updated
183  ---------------------------------------------
184  FUNCTION CreateResource(abspath IN VARCHAR2,
185                          data IN VARCHAR2,
186                          schemaurl IN VARCHAR2 := NULL,
187                          elem IN VARCHAR2 := NULL) RETURN BOOLEAN;
188  
189  ---------------------------------------------
190  -- FUNCTION - CreateResource(VARCHAR2, SYS.XMLTYPE, VARCHAR2, VARCHAR2)
191  --     Given an XMLTYPE and a schema URL, inserts a new resource
192  --     into the hierarchy with the XMLTYPE as the contents.
193  -- PARAMETERS -
194  --  abspath
195  --     Absolute path to the resource
196  --  data
197  --     XMLTYPE containing the resource contents
198  --  schemaurl
199  --     schema URL the XmlType conforms to (default null)
200  --  elem
201  --     element name (default null)
202  -- RETURNS -
203  --     Returns TRUE if resource was successfully inserted or updated
204  ---------------------------------------------
205  FUNCTION CreateResource(abspath IN VARCHAR2,
206                          data IN SYS.XMLTYPE,
207                          schemaurl IN VARCHAR2 := NULL,
208                          elem IN VARCHAR2 := NULL) RETURN BOOLEAN;
209  
210  
211  ---------------------------------------------
212  -- FUNCTION - CreateResource(VARCHAR2, REF SYS.XMLTYPE, BOOLEAN, BOOLEAN)
213  --     Given a PREF to an existing XMLType row, inserts a new resource
214  --     whose contents point directly at that row.  That row should
215  --     not already exist inside another resource.
216  -- PARAMETERS -
217  --  abspath
218  --     Absolute path to the resource
219  --  data
220  --     REF to the XMLType row containing the resource contents
221  --  sticky
222  --     If TRUE creates a sticky REF, otherwise non-sticky.
223  --     Default is TRUE (for backwards compatibility).
224  --  calcSize
225  --     If true, calculate the content size of the resource. Default is
226  --     false for performance reasons.
227  -- RETURNS -
228  --     Returns TRUE if resource was successfully inserted or updated
229  ---------------------------------------------
230  FUNCTION CreateResource(abspath IN VARCHAR2,
231                          data IN REF SYS.xmltype,
232                          sticky IN BOOLEAN := TRUE,
233                          calcSize IN BOOLEAN := FALSE) RETURN BOOLEAN;
234  
235  ---------------------------------------------
236  -- FUNCTION - CreateResource(VARCHAR2, CLOB)
237  --     Given a CLOB, inserts a new resource into the hierarchy with
238  --     the CLOB as the contents.
239  -- PARAMETERS -
240  --  abspath
241  --     Absolute path to the resource
242  --  data
243  --     CLOB containing the resource contents
244  -- RETURNS -
245  --     Returns TRUE if resource was successfully inserted or updated
246  ---------------------------------------------
247  FUNCTION CreateResource(abspath IN VARCHAR2,
248                          data IN CLOB) RETURN BOOLEAN;
249  
250  ---------------------------------------------
251  -- FUNCTION - CreateResource(VARCHAR2, BFILE, NUMBER)
252  --     Given a BFILE, inserts a new resource into the hierarchy with
253  --     the contents loaded from the BFILE.
254  -- PARAMETERS -
255  --  abspath
256  --     Absolute path to the resource
257  --  data
258  --     BFILE containing the resource contents
259  --  csid
260  --     character set id of the input bfile
261  -- RETURNS -
262  --     Returns TRUE if resource was successfully inserted or updated
263  ---------------------------------------------
264  FUNCTION CreateResource(abspath IN VARCHAR2,
265                          data IN BFILE,
266                          csid IN NUMBER := 0) RETURN BOOLEAN;
267  
268  ---------------------------------------------
269  -- FUNCTION - CreateResource(VARCHAR2, BLOB, NUMBER)
270  --     Given a BLOB, inserts a new resource into the hierarchy with
271  --     the BLOB as the contents.
272  -- PARAMETERS -
273  --  abspath
274  --     Absolute path to the resource
275  --  data
276  --     BLOB containing the resource contents
277  --  csid
278  --     character set id of the input blob
279  -- RETURNS -
280  --     Returns TRUE if resource was successfully inserted or updated
281  ---------------------------------------------
282  FUNCTION CreateResource(abspath IN VARCHAR2,
283                          data IN BLOB,
284                          csid IN NUMBER := 0) RETURN BOOLEAN;
285  
286  
287  ---------------------------------------------
288  -- FUNCTION - CreateFolder
289  --     Creates a folder in the Repository
290  -- PARAMETERS -
291  --  abspath
292  --     Absolute path iin the Hierarchy were the resource will be stored
293  -- RETURNS -
294  --     Returns TRUE if folder was created succesfully in Repository
295  ---------------------------------------------
296  FUNCTION CreateFolder(abspath IN VARCHAR2) RETURN BOOLEAN;
297  
298  ---------------------------------------------
299  -- FUNCTION - AddResource(VARCHAR2, VARCHAR2)
300  --     Given a string, inserts a new resource into the hierarchy with
301  --     the string as the contents.
302  -- PARAMETERS -
303  --  abspath
304  --     Absolute path to the resource
305  --  data
306  --     String buffer containing the resource contents
307  -- RETURNS -
308  --     Returns 2 if resource already exists
309  --             1 if resource was successfully inserted
310  --             0 otherwise
311  ---------------------------------------------
312  FUNCTION AddResource(abspath IN VARCHAR2,
313                          data IN VARCHAR2) RETURN NUMBER;
314  
315  ---------------------------------------------
316  -- PROCEDURE - DeleteResource
317  --     Deletes a resource from the Hierarchy
318  -- PARAMETERS -
319  --  abspath
320  --     Absolute path in the Hierarchy for resource to be deleted
321  --  delete_option : one of the following
322  --    DELETE_RESOURCE ::
323  --      delete the resource alone. Fails if the resource has children
324  --    DELETE_RECURSIVE ::
325  --      delete the resource with the children, if any.
326  --    DELETE_FORCE ::
327  --      delete the resource even if the object it contains is invalid.
328  --    DELETE_RECURSIVE_FORCE ::
329  --      delete the resource and all children, ignoring any errors raised
330  --      by contained objects being invalid
331  ---------------------------------------------
332  PROCEDURE DeleteResource(abspath IN VARCHAR2,
333                           delete_option IN pls_integer := DELETE_RESOURCE);
334  
335  ---------------------------------------------
336  -- PROCEDURE - Link
337  --     Creates a link from a specified folder to a specified resource.
338  -- PARAMETERS -
339  --  srcpath
340  --     Path name of the resource to which a link is created.
341  --  linkfolder
342  --     Folder in which the new link is placed.
343  --  linkname
344  --     Name of the new link.
345  --  linktype
346  --     Type of link to be created.
347  --     One of the following:
348  --         DBMS_XDB.LINK_TYPE_HARD (default)
349  --         DBMS_XDB.LINK_TYPE_WEAK
350  --         DBMS_XDB.LINK_TYPE_SYMBOLIC
351  ---------------------------------------------
352  PROCEDURE Link(srcpath IN VARCHAR2, linkfolder IN VARCHAR2,
353                 linkname IN VARCHAR2,
354                 linktype IN PLS_INTEGER := DBMS_XDB.LINK_TYPE_HARD);
355  
356  ---------------------------------------------
357  -- PROCEDURE - Rename
358  --     Renames a XDB resource
359  -- PARAMETERS -
360  --  srcpath
361  --     Absolute path in the Hierarchy of the source resource
362  --  destfolder
363  --     Absolute path in the Hierarchy of the dest folder
364  --  newname
365  --     Name of the child in the destination folder
366  ---------------------------------------------
367  PROCEDURE RenameResource(srcpath IN VARCHAR2, destfolder IN VARCHAR2,
368                           newname IN VARCHAR2);
369  
370  ---------------------------------------------
371  -- FUNCTION - getAclDoc
372  --     gets acl document that protects resource given in path
373  -- PARAMETERS -
374  --  abspath
375  --     Absolute path in the Hierarchy of the resource whose acl doc is required
376  -- RETURNS -
377  --     Returns xmltype for acl document
378  ---------------------------------------------
379  FUNCTION getAclDocument(abspath IN VARCHAR2) RETURN sys.xmltype;
380  
381  ---------------------------------------------
382  -- FUNCTION - getPrivileges
383  --     Gets all system and user privileges granted to the current user
384  --     on the given XDB resource
385  -- PARAMETERS -
386  --  res_path
387  --     Absolute path in the Hierarchy for XDB resource
388  -- RETURNS -
389  --     Returns a XMLType instance of <privilege> element
390  --     which contains the list of all (leaf) privileges
391  --     granted on this resource to the current user.
392  --     It includes all granted system and user privileges.
393  --     Example :
394  --       <privilege xmlns="http://xmlns.oracle.com/xdb/acl.xsd"
395  --                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
396  --                  xsi:schemaLocation="http://xmlns.oracle.com/xdb/acl.xsd
397  --                                      http://xmlns.oracle.com/xdb/acl.xsd"
398  --                  xmlns:dav="DAV:"
399  --                  xmlns:emp="http://www.example.com/emp.xsd">
400  --          <read-contents/>
401  --          <read-properties/>
402  --          <resolve/>
403  --          <dav:read-acl/>
404  --          <emp:Hire/>
405  --       </privilege>
406  ---------------------------------------------
407  FUNCTION getPrivileges(res_path IN VARCHAR2) RETURN sys.xmltype;
408  
409  ---------------------------------------------
410  -- FUNCTION - changePrivileges
411  --     change access privileges on given XDB resource
412  -- PARAMETERS -
413  --  res_path
414  --     Absolute path in the Hierarchy for XDB resource
415  --  ace
416  --     an XMLType instance of the <ace> element which specifies
417  --     the <principal>, the operation <grant> and the list of
418  --     privileges.
419  --     If no ACE with the same principal and the same operation
420  --     (grant/deny) already exists in the ACL, the new ACE is added
421  --     at the end of the ACL.
422  --  replace
423  --    This argument determines the result of changePrivileges if
424  --    an ACE with the same principal and same operation (grant/deny)
425  --    already exists in the ACL.
426  --
427  --    If set to TRUE,
428  --       the old ACE is replaced with the new one.
429  --    else
430  --       the privileges of the old and new ACEs are combined into a
431  --       single ACE.
432  --
433  -- RETURNS -
434  --     Returns positive integer if ACL was successfully modified
435  ---------------------------------------------
436  FUNCTION changePrivileges(res_path IN VARCHAR2,
437                            ace      IN xmltype)
438                            RETURN pls_integer;
439  
440  ---------------------------------------------
441  -- FUNCTION - checkPrivileges
442  --     checks access privileges granted on specified XDB resource
443  -- PARAMETERS -
444  --  res_path
445  --     Absolute path in the Hierarchy for XDB resource
446  --  privs
447  --     Requested set of access privileges
448  --     This argument is a XMLType instance of the <privilege> element.
449  -- RETURNS -
450  --     Returns positive integer if all requested privileges granted
451  ---------------------------------------------
452  FUNCTION checkPrivileges(res_path IN VARCHAR2,
453                           privs IN xmltype)
454                           RETURN pls_integer;
455  ---------------------------------------------
456  -- PROCEDURE - setFTPPort
457  --     sets the FTP port to new value
458  -- PARAMETERS -
459  --     new_port
460  --         value that the ftp port will be set to
461  ---------------------------------------------
462  
463  PROCEDURE setFTPPort(new_port IN NUMBER);
464  
465  ---------------------------------------------
466  -- FUNCTION - getFTPPort
467  --     gets the current value of FTP port
468  -- PARAMETERS -
469  --     none
470  -- RETURNS
471  --     ftp_port
472  --         current value of ftp-port
473  ---------------------------------------------
474  
475  FUNCTION getFTPPort RETURN NUMBER;
476  
477  ---------------------------------------------
478  -- PROCEDURE - setHTTPPort
479  --     sets the HTTP port to new value
480  -- PARAMETERS -
481  --     new_port
482  --         value that the http port will be set to
483  ---------------------------------------------
484  
485  PROCEDURE setHTTPPort(new_port IN NUMBER);
486  
487  ---------------------------------------------
488  -- FUNCTION - getHTTPPort
489  --     gets the current value of HTTP port
490  -- PARAMETERS -
491  --     none
492  -- RETURNS
493  --     http_port
494  --         current value of http-port
495  ---------------------------------------------
496  
497  FUNCTION getHTTPPort RETURN NUMBER;
498  
499  ---------------------------------------------
500  -- PROCEDURE setListenerEndPoint(endpoint IN number, host IN varchar2,
501  --                               port IN number, protocol IN number);
502  
503  -- This procedure sets the parameters of a listener end point corresponding
504  -- to the XML DB HTTP server. Both HTTP and HTTP2 end points can be set by
505  -- invoking this procedure.
506  
507  --   (a) endpoint - The end point to be set. Its value can be
508  --       XDB_ENDPOINT_HTTP or XDB_ENDPOINT_HTTP2.
509  --   (b) host - The interface on which the listener end point is to listen.
510  --       Its value can be 'localhost,' null, or a hostname. If its value is
511  --       'localhost,' then the listener end point is permitted to only listen
512  --       on the localhost interface. If its value is null or hostname, then
513  --       the listener end point is permitted to listen on both localhost and
514  --       non-localhost interfaces.
515  --   (c) port - The port on which the listener end point is to listen.
516  --   (d) protocol - The transport protocol that the listener end point is to
517  --       accept. Its value can be XDB_PROTOCOL_TCP or XDB_PROTOCOL_TCPS.
518  ---------------------------------------------
519  
520  PROCEDURE setListenerEndPoint(endpoint IN number, host IN varchar2,
521                                port IN number, protocol IN number);
522  
523  ---------------------------------------------
524  --  PROCEDURE getListenerEndPoint(endpoint IN NUMBER, host OUT VARCHAR2,
525  --                                port OUT NUMBER, protocol OUT NUMBER);
526  
527  -- This procedure retrieves the parameters of a listener end point
528  -- corresponding to the XML DB HTTP server. The parameters of both HTTP
529  -- and HTTP2 end points can be retrieved by invoking this procedure.
530  
531  --  (a) endpoint - The end point whose parameters are to be retrieved. Its
532  --      value can be XDB_ENDPOINT_HTTP or XDB_ENDPOINT_HTTP2.
533  --  (b) host - The interface on which the listener end point listens.
534  --  (c) port - The port on which the listener end point listens.
535  --  (d) protocol - The transport protocol accepted by the listener end point.
536  ---------------------------------------------
537  
538  PROCEDURE getListenerEndPoint(endpoint IN NUMBER, host OUT VARCHAR2,
539                                port OUT NUMBER, protocol OUT NUMBER);
540  
541  ---------------------------------------------
542  -- PROCEDURE setListenerLocalAccess(l_access boolean);
543  -- This procedure restricts all listener end points of the XML DB HTTP server
544  -- to listen only on the localhost interface (when l_access is TRUE) or
545  -- allows all listener end points of the XML DB HTTP server to listen on
546  -- both localhost and non-localhost interfaces (when l_access is FALSE).
547  
548  --  (a) l_access - TRUE or FALSE. See description of procedure above.
549  ---------------------------------------------
550  PROCEDURE setListenerLocalAccess(l_access boolean);
551  
552  ---------------------------------------------
553  -- PROCEDURE - setacl
554  --     sets the ACL on given XDB resource to be the specified in the acl path
555  -- PARAMETERS -
556  --  res_path
557  --     Absolute path in the Hierarchy for XDB resource
558  --  acl_path
559  --     Absolute path in the Hierarchy for XDB acl
560  ---------------------------------------------
561  PROCEDURE setacl(res_path IN VARCHAR2, acl_path IN VARCHAR2);
562  
563  ---------------------------------------------
564  -- FUNCTION - AclCheckPrivileges
565  --     checks access privileges granted by specified ACL document
566  -- PARAMETERS -
567  --  acl_path
568  --     Absolute path in the Hierarchy for ACL document
569  --  owner
570  --     Resource owner name. The pseudo user "XDBOWNER" is replaced
571  --     by this user during ACL privilege resolution
572  --  privs
573  --     Requested set of access privileges
574  --     This argument is a XMLType instance of the <privilege> element.
575  -- RETURNS -
576  --     Returns positive integer if all requested privileges granted
577  ---------------------------------------------
578  FUNCTION AclCheckPrivileges(acl_path IN VARCHAR2,
579                              owner IN VARCHAR2,
580                              privs IN xmltype)
581                              RETURN pls_integer;
582  
583  ---------------------------------------------
584  -- PROCEDURE - refresh
585  --     Refreshes the session configuration with the latest configuration
586  ---------------------------------------------
587  PROCEDURE cfg_refresh;
588  
589  ---------------------------------------------
590  -- FUNCTION - get
591  --     retrieves the xdb configuration
592  -- RETURNS -
593  --     XMLType for xdb configuration
594  ---------------------------------------------
595  FUNCTION cfg_get RETURN sys.xmltype;
596  
597  ---------------------------------------------
598  -- PROCEDURE - update
599  --     Updates the xdb configuration with the input xmltype document
600  -- PARAMETERS -
601  --  xdbconfig
602  ---     XMLType for xdb configuration
603  --------------------------------------------
604  PROCEDURE cfg_update(xdbconfig IN sys.xmltype);
605  
606  ---------------------------------------------
607  -- FUNCTION - GetResOID(abspath VARCHAR2)
608  --     Returns the OID of the resource, given its absolute path
609  --
610  -- PARAMETERS -
611  --  abspath
612  --     Absolute path to the resource
613  -- RETURNS -
614  --     OID of resource if present, NULL otherwise
615  ---------------------------------------------
616  FUNCTION GetResOID(abspath IN VARCHAR2) RETURN RAW;
617  
618  ---------------------------------------------
619  -- FUNCTION - CreateOIDPath(oid RAW)
620  --     Returns the OID-based virtual path to the resource
621  --
622  -- PARAMETERS -
623  --  OID
624  --     OID of the resource
625  -- RETURNS -
626  --     the OID-based virtual path to the resource
627  ---------------------------------------------
628  FUNCTION CreateOIDPath(oid IN RAW) RETURN VARCHAR2;
629  
630  -----------------------------------------------------------
631  -- PROCEDURE - appendResourceMetadata
632  --     Appends the given piece of metadata to the resource
633  --
634  -- PARAMETERS -
635  --  abspath
636  --     Absolute path of the resource
637  --  data
638  --     Metadata (can be schema based or NSB). SB metadata
639  --     will be stored in its own table.
640  -- RETURNS -
641  --     Nothing
642  -----------------------------------------------------------
643  PROCEDURE appendResourceMetadata(abspath IN VARCHAR2,
644                                   data IN SYS.xmltype);
645  
646  -----------------------------------------------------------
647  -- PROCEDURE - appendResourceMetadata
648  --     Appends the given piece of metadata identified by a REF
649  --     to the resource
650  --
651  -- PARAMETERS -
652  --  abspath
653  --     Absolute path of the resource
654  --  data
655  --     REF to the piece of metadata (schema based)
656  -- RETURNS -
657  --     Nothing
658  -----------------------------------------------------------
659  PROCEDURE appendResourceMetadata(abspath IN VARCHAR2,
660                                   data IN REF SYS.xmltype);
661  
662  -----------------------------------------------------------
663  -- PROCEDURE - deleteResourceMetadata
664  --     Deletes metadata from a resource (can only be used for SB metadata)
665  --
666  -- PARAMETERS -
667  --  abspath
668  --     Absolute path of the resource
669  --  metadata
670  --     REF to the piece of metadata (schema based) to be deleted
671  --  delete_option
672  --     Can be one of the following:
673  --     DELETE_RES_METADATA_CASCADE : deletes the corresponding row
674  --     in the metadata table
675  --     DELETE_RES_METADATA_NOCASCADE : does not delete the row in
676  --     the metadata table
677  -- RETURNS -
678  --     Nothing
679  -----------------------------------------------------------
680  PROCEDURE deleteResourceMetadata(abspath IN VARCHAR2,
681                                   metadata IN REF SYS.XMLTYPE,
682                                   delete_option IN pls_integer :=
683                                    DELETE_RES_METADATA_CASCADE);
684  
685  -----------------------------------------------------------
686  -- PROCEDURE - deleteResourceMetadata
687  --     Deletes metadata from a resource (can be used for SB or
688  --     NSB metadata)
689  --
690  -- PARAMETERS -
691  --  abspath
692  --     Absolute path of the resource
693  --  metadatans
694  --     Namespace of the metadata fragment to be removed
695  --  metadataname
696  --     Local name of the metadata fragment to be removed
697  --  delete_option
698  --     This is only applicable for SB metadata.
699  --     Can be one of the following:
700  --     DELETE_RES_METADATA_CASCADE : deletes the corresponding row
701  --     in the metadata table
702  --     DELETE_RES_METADATA_NOCASCADE : does not delete the row in
703  --     the metadata table
704  -- RETURNS -
705  --     Nothing
706  -----------------------------------------------------------
707  procedure deleteResourceMetadata(abspath IN VARCHAR2,
708                                   metadatans IN VARCHAR2,
709                                   metadataname IN VARCHAR2,
710                                   delete_option IN pls_integer :=
711                                   DELETE_RES_METADATA_CASCADE);
712  
713  -----------------------------------------------------------
714  -- PROCEDURE - updateResourceMetadata
715  --     Updates metadata for a resource (can be used to update SB
716  --     metadata only). The new metadata must be SB.
717  --
718  -- PARAMETERS -
719  --  abspath
720  --     Absolute path of the resource
721  --  oldmetadata
722  --     REF to the old piece of metadata
723  --  newmetadata
724  --     REF to the new piece of metadata to replace it with
725  -- RETURNS -
726  --     Nothing
727  -----------------------------------------------------------
728  PROCEDURE updateResourceMetadata(abspath  IN VARCHAR2,
729                                   oldmetadata IN REF SYS.XMLTYPE,
730                                   newmetadata IN REF SYS.XMLTYPE);
731  
732  -----------------------------------------------------------
733  -- PROCEDURE - updateResourceMetadata
734  --     Updates metadata for a resource (can be used to update SB
735  --     metadata only). The new metadata can be either SB or NSB
736  --
737  -- PARAMETERS -
738  --  abspath
739  --     Absolute path of the resource
740  --  oldmetadata
741  --     REF to the old piece of metadata
742  --  newmetadata
743  --     New piece of metadata (can be either SB or NSB)
744  -- RETURNS -
745  --     Nothing
746  -----------------------------------------------------------
747  PROCEDURE updateResourceMetadata(abspath  IN VARCHAR2,
748                                   oldmetadata IN REF SYS.XMLTYPE,
749                                   newmetadata IN XMLTYPE);
750  
751  -----------------------------------------------------------
752  -- PROCEDURE - updateResourceMetadata
753  --     Updates metadata for a resource - can be used for both
754  --     SB or NSB metadata.
755  --
756  -- PARAMETERS -
757  --  abspath
758  --     Absolute path of the resource
759  --  oldns, oldname
760  --     namespace and local name pair identifying old metadata
761  --  newmetadata
762  --     New piece of metadata (can be either SB or NSB)
763  -- RETURNS -
764  --     Nothing
765  -----------------------------------------------------------
766  PROCEDURE updateResourceMetadata(abspath  IN VARCHAR2,
767                                   oldns IN VARCHAR2,
768                                   oldname IN VARCHAR,
769                                   newmetadata IN XMLTYPE);
770  
771  -----------------------------------------------------------
772  -- PROCEDURE - updateResourceMetadata
773  --     Updates metadata for a resource - can be used for both
774  --     SB or NSB metadata. New metadata must be SB.
775  --
776  -- PARAMETERS -
777  --  abspath
778  --     Absolute path of the resource
779  --  oldns, oldname
780  --     namespace and local name pair identifying old metadata
781  --  newmetadata
782  --     REF to new metadata
783  -- RETURNS -
784  --     Nothing
785  -----------------------------------------------------------
786  PROCEDURE updateResourceMetadata(abspath  IN VARCHAR2,
787                                   oldns IN VARCHAR2,
788                                   oldname IN VARCHAR,
789                                   newmetadata IN REF SYS.XMLTYPE);
790  
791  -----------------------------------------------------------
792  -- PROCEDURE - purgeResourceMetadata
793  --     Deletes all user metadata from a resource
794  --     SB metadata is removed in cascade mode i.e. the rows
795  --     are deleted from the corresponding metadata tables
796  --
797  -- PARAMETERS -
798  --  abspath
799  --     Absolute path of the resource
800  -- RETURNS -
801  --     Nothing
802  -----------------------------------------------------------
803  PROCEDURE purgeResourceMetadata(abspath  IN VARCHAR2);
804  
805  ---------------------------------------------
806  -- FUNCTION - getResource
807  --    Given a path in the repository, returns the XDBResource
808  -- PARAMETERS -
809  --    abspath - absolute path in the repository
810  -- RETURNS -
811  --    The XDBResource.
812  ---------------------------------------------
813  FUNCTION getResource(abspath IN VARCHAR2) return dbms_xdbresource.XDBResource;
814  
815  -----------------------------------------------------------
816  -- PROCEDURE - refreshContentSize
817  --     Recompute the content size of the specified resource,
818  --     disregarding the existing content size. Store it in the Size
819  --     element in the resource schema, and set the SizeAccurate flag
820  --     appropriately.
821  --
822  -- PARAMETERS -
823  --  abspath (IN)
824  --     Absolute path of the resource. If the path is a folder, then
825  --     use the recurse flag as below.
826  --  recurse (IN)
827  --     Used only if abspath specifies a folder. If true, refresh the
828  --     size of all resources in the resource tree rooted at the
829  --     specified resource. If false, compute the size of all
830  --     documents/subfolders in this folder only.
831  -- RETURNS -
832  --     Nothing.
833  -----------------------------------------------------------
834  PROCEDURE refreshContentSize ( abspath IN VARCHAR2,
835                                 recurse IN BOOLEAN := FALSE );
836  
837  -----------------------------------------------------------
838  -- PROCEDURE - ProcessLinks
839  --     Process document links in the specified resource,
840  --     looking at the current resource configuration parameters.
841  --
842  -- PARAMETERS -
843  --  abspath (IN)
844  --     Absolute path of the resource. If the path is a folder, then
845  --     use the recurse flag as below.
846  --  recurse (IN)
847  --     Used only if abspath specifies a folder. If true, process
848  --     links of all resources in the resource tree rooted at the
849  --     specified resource. If false, process links of all
850  --     documents in this folder only.
851  -- RETURNS -
852  --     Nothing.
853  -----------------------------------------------------------
854  PROCEDURE ProcessLinks (abspath IN VARCHAR2,
855                          recurse IN BOOLEAN := FALSE );
856  
857  -----------------------------------------------------------
858  -- FUNCTION - isFolder
859  --
860  -- PARAMETERS -
861  --  abspath (IN)
862  --     Absolute path of the resource.
863  -- RETURNS -
864  --     True if the resource is a folder / container.
865  -----------------------------------------------------------
866  FUNCTION isFolder (
867          abspath IN VARCHAR2
868  ) return BOOLEAN;
869  
870  -----------------------------------------------------------
871  -- PROCEDURE - touchResource
872  --  Change the last mod time of the resource to the current time.
873  --
874  -- PARAMETERS -
875  --  abspath (IN)
876  --     Absolute path of the resource.
877  -----------------------------------------------------------
878  PROCEDURE touchResource ( abspath IN VARCHAR2 );
879  
880  -----------------------------------------------------------
881  -- PROCEDURE - changeOwner
882  --  Change the owner of the resource to the given user.
883  --
884  -- PARAMETERS -
885  --  abspath (IN)
886  --     Absolute path of the resource.
887  --  owner (IN)
888  --     Owner
889  --  recurse (IN)
890  --     If true, recursively change owner of all resources in the
891  --     folder tree.
892  -----------------------------------------------------------
893  PROCEDURE changeOwner ( abspath IN VARCHAR2,
894                          owner   IN VARCHAR2,
895                          recurse IN BOOLEAN := FALSE );
896  
897  -----------------------------------------------------------
898  -- XDB Config Update APIs
899  -- PROCEDURE ADDMIMEMAPPING         Add a mime mapping
900  -- PROCEDURE DELETEMIMEMAPPING      Delete a mime mapping
901  -- PROCEDURE ADDXMLEXTENSION        Add an xml extension
902  -- PROCEDURE DELETEXMLEXTENSION     Delete an xml extension
903  -- PROCEDURE ADDSERVLETMAPPING      Add a servlet mapping
904  -- PROCEDURE DELETESERVLETMAPPING   Delete a servlet mapping
905  -- PROCEDURE ADDSCHEMALOCMAPPING    Add a schema location mapping
906  -- PROCEDURE DELETESCHEMALOCMAPPING Delete a schema location mapping
907  -- PROCEDURE ADDSERVLET             Add a servlet
908  -- PROCEDURE DELETESERVLET          Delete a servlet
909  -- PROCEDURE ADDSERVLETSECROLE      Add a security role ref to a servlet
910  -- PROCEDURE DELETESERVLETSECROLE   Delete a security role ref from a servlet
911  -----------------------------------------------------------
912  
913  procedure ADDMIMEMAPPING (
914          extension IN VARCHAR2,
915          mimetype  IN VARCHAR2
916  );
917  
918  procedure DELETEMIMEMAPPING (
919          extension IN VARCHAR2
920  );
921  
922  procedure ADDXMLEXTENSION (
923          extension IN VARCHAR2
924  );
925  
926  procedure DELETEXMLEXTENSION (
927          extension IN VARCHAR2
928  );
929  
930  procedure ADDSERVLETMAPPING (
931          pattern IN VARCHAR2,
932          name    IN VARCHAR2
933  );
934  
935  procedure DELETESERVLETMAPPING (
936          name IN VARCHAR2
937  );
938  
939  procedure ADDSERVLET (
940          name     IN VARCHAR2,
941          language IN VARCHAR2,
942          dispname IN VARCHAR2,
943          icon     IN VARCHAR2 := NULL,
944          descript IN VARCHAR2 := NULL,
945          class    IN VARCHAR2 := NULL,
946          jspfile  IN VARCHAR2 := NULL,
947          plsql    IN VARCHAR2 := NULL,
948          schema   IN VARCHAR2 := NULL
949  );
950  
951  procedure DELETESERVLET (
952          name IN VARCHAR2
953  );
954  
955  procedure ADDSERVLETSECROLE (
956          servname IN VARCHAR2,
957          rolename IN VARCHAR2,
958          rolelink IN VARCHAR2,
959          descript IN VARCHAR2 := NULL
960  );
961  
962  procedure DELETESERVLETSECROLE (
963          servname IN VARCHAR2,
964          rolename IN VARCHAR2
965  );
966  
967  procedure ADDSCHEMALOCMAPPING (
968          namespace IN VARCHAR2,
969          element   IN VARCHAR2,
970          schemaURL IN VARCHAR2
971  );
972  
973  procedure DELETESCHEMALOCMAPPING (
974          schemaURL IN VARCHAR2
975  );
976  
977  -----------------------------------------------------------
978  -- FUNCTION - hascharcontent
979  --
980  -- PARAMETERS -
981  --  abspath (IN)
982  --     Absolute path of the resource.
983  -- RETURNS -
984  --     True if the resource has character content.
985  -----------------------------------------------------------
986  function HASCHARCONTENT (
987          abspath IN VARCHAR2
988  ) return BOOLEAN;
989  
990  -----------------------------------------------------------
991  -- FUNCTION - hasxmlcontent
992  --
993  -- PARAMETERS -
994  --  abspath (IN)
995  --     Absolute path of the resource.
996  -- RETURNS -
997  --     True if the resource has xml content.
998  -----------------------------------------------------------
999  function HASXMLCONTENT (
1000          abspath IN VARCHAR2
1001  ) return BOOLEAN;
1002  
1003  -----------------------------------------------------------
1004  -- FUNCTION - hasxmlreference
1005  --
1006  -- PARAMETERS -
1007  --  abspath (IN)
1008  --     Absolute path of the resource.
1009  -- RETURNS -
1010  --     True if the resource has a ref to xml content.
1011  -----------------------------------------------------------
1012  function HASXMLREFERENCE (
1013          abspath IN VARCHAR2
1014  ) return BOOLEAN;
1015  
1016  -----------------------------------------------------------
1017  -- FUNCTION - hasblobcontent
1018  --
1019  -- PARAMETERS -
1020  --  abspath (IN)
1021  --     Absolute path of the resource.
1022  -- RETURNS -
1023  --     True if the resource has blob content.
1024  -----------------------------------------------------------
1025  function HASBLOBCONTENT (
1026          abspath IN VARCHAR2
1027  ) return BOOLEAN;
1028  
1029  ---------------------------------------------
1030  -- FUNCTION - getContentClob
1031  --    Returns the contents of the resource as a clob.
1032  -- PARAMETERS -
1033  --    abspath - Absolute path of the resource
1034  -- RETURNS -
1035  --    The contents as CLOB.
1036  ---------------------------------------------
1037  FUNCTION getContentClob(
1038          abspath IN VARCHAR2
1039  ) return CLOB;
1040  
1041  ---------------------------------------------
1042  -- FUNCTION - getContentBlob
1043  --    Returns the contents of the resource as a blob.
1044  -- PARAMETERS -
1045  --    abspath - Absolute path of the resource.
1046  --    csid - OUT - The character set id of the blob returned.
1047  --    locksrc - if true, lock and return the source lob. If false,
1048  --    return a temp lob copy.
1049  -- RETURNS -
1050  --    The contents as BLOB.
1051  ---------------------------------------------
1052  FUNCTION getContentBlob (
1053          abspath IN VARCHAR2,
1054          csid OUT PLS_INTEGER,
1055          locksrc IN BOOLEAN := FALSE
1056  ) return BLOB;
1057  
1058  ---------------------------------------------
1059  -- FUNCTION - getContentXMLType
1060  --    Returns the contents of the resource as an XMLType.
1061  -- PARAMETERS -
1062  --    abspath - Absolute path of the resource.
1063  -- RETURNS -
1064  --    The contents as XMLType.
1065  ---------------------------------------------
1066  FUNCTION getContentXMLType (
1067          abspath IN VARCHAR2
1068  ) return SYS.XMLType;
1069  
1070  ---------------------------------------------
1071  -- FUNCTION - getContentVarchar2
1072  --    Returns the contents of the resource as an Varchar2.
1073  -- PARAMETERS -
1074  --    abspath - Absolute path of the resource.
1075  -- RETURNS -
1076  --    The contents as Varchar2.
1077  ---------------------------------------------
1078  FUNCTION getContentVarchar2 (
1079          abspath IN VARCHAR2
1080  ) return VARCHAR2;
1081  
1082  ---------------------------------------------
1083  -- FUNCTION - getContentXMLRef
1084  --    Returns the contents of the resource as a ref to an xmltype.
1085  -- PARAMETERS -
1086  --    abspath - Absolute path of the resource.
1087  -- RETURNS -
1088  --    The contents as a ref to an xmltype if the resource is ref
1089  --    based, else null.
1090  ---------------------------------------------
1091  FUNCTION getContentXMLRef (
1092          abspath IN VARCHAR2
1093  ) return ref SYS.XMLType;
1094  
1095  
1096  ---------------------------------------------
1097  -- FUNCTION - getxdb_tablespace
1098  --     Returns the current tablespace of xdb, on the assumption
1099  --     that that is the tablespace of XDB.XDB$RESOURCE.
1100  -- PARAMETERS - None.
1101  --
1102  -- NOTE: Currently used by DBMS_XDBT, which is AUTHID CURRENT_USER
1103  --       package, so this API will not be moved to DBMS_XDB_ADMIN.
1104  --       This API is useful if we envision having XDB's objects
1105  --       span multiple tablespaces. Otherwise, DBA_USERS can be queried.
1106  ---------------------------------------------
1107  FUNCTION getxdb_tablespace RETURN VARCHAR2;
1108  
1109  ---------------------------------------------
1110  -- PROCEDURE - addAuthenticationMapping
1111  --     Adds a mapping from the authentication method name to a
1112  --      URL pattern (in xdb$onfig).
1113  -- PARAMETERS -
1114  --     pattern - URL pattern
1115  --     name    - authentication method name
1116  ---------------------------------------------
1117  procedure addAuthenticationMapping(pattern IN VARCHAR2,
1118                                     name IN VARCHAR2,
1119                                     user_prefix IN VARCHAR2 := NULL,
1120                                     on_deny IN NUMBER := NULL);
1121  
1122  ---------------------------------------------
1123  -- PROCEDURE - deleteAuthenticationMapping
1124  --     Deletes a mapping from the authentication method name to a
1125  --      URL pattern (from xdb$onfig).
1126  -- PARAMETERS -
1127  --     pattern - URL pattern
1128  --     name    - authentication method name
1129  ---------------------------------------------
1130  procedure deleteAuthenticationMapping(pattern IN VARCHAR2,
1131                                        name IN VARCHAR2);
1132  
1133  ---------------------------------------------
1134  -- PROCEDURE - addAuthenticationMethod
1135  --     Adds to xdb$config a custom authentication method entry.
1136  -- PARAMETERS -
1137  --     name    - authentication method name (the name the
1138  --               custom authentication routine will be known to XDB)
1139  --     description - some note on the authentication method
1140  --     implement_schema - the owner of the routine that implements
1141  --                        the authentication
1142  --     implement_method - the name of the routine that implements
1143  --                        the authentication
1144  --     language         - the language in which the implementation
1145  --                        routine is written (currently only PL/SQL)
1146  ---------------------------------------------
1147  procedure addAuthenticationMethod(name IN VARCHAR2,
1148                                    description IN VARCHAR2,
1149                                    implement_schema IN VARCHAR2,
1150                                    implement_method IN VARCHAR2,
1151                                    language  IN VARCHAR2 := 'PL/SQL');
1152  
1153  ---------------------------------------------
1154  -- PROCEDURE - deleteAuthenticationMethod
1155  --    Deletes from  xdb$config a custom authentication method entry.
1156  -- PARAMETERS -
1157  --     name    - authentication method name (the name the
1158  --               custom authentication routine will be known to XDB)
1159  ---------------------------------------------
1160  procedure deleteAuthenticationMethod(name IN VARCHAR2);
1161  
1162  
1163  procedure addTrustScheme(name IN VARCHAR2,
1164                           description IN VARCHAR2,
1165                           session_user IN VARCHAR2,
1166                           parsing_schema IN VARCHAR2,
1167                           system_level IN BOOLEAN := TRUE,
1168                           require_parsing_schema IN BOOLEAN := TRUE,
1169                           allow_registration IN BOOLEAN := TRUE);
1170  
1171  procedure deleteTrustScheme(name IN VARCHAR2,
1172                              system_level IN BOOLEAN := TRUE);
1173  
1174  procedure addTrustMapping(pattern IN VARCHAR2,
1175                            auth_name IN VARCHAR2,
1176                            trust_name IN VARCHAR2,
1177                            user_prefix IN VARCHAR2 := NULL);
1178  
1179  procedure deleteTrustMapping(pattern IN VARCHAR2,
1180                               name IN VARCHAR2);
1181  
1182  procedure enableCustomAuthentication;
1183  procedure enableCustomTrust;
1184  procedure setDynamicGroupStore(is_dynamic IN BOOLEAN := TRUE);
1185  
1186  -----------------------------------------------------------
1187  -- PROCEDURE - addDefaultTypeMappings
1188  --  creats a default-type-mappings entry in xdbconfig.
1189  --  Default is pre-11.2
1190  --
1191  -- PARAMETERS -
1192  --  version (IN) - Accepted values: "pre-11.2" or "post-11.2"
1193  --                 Default is pre-11.2
1194  -----------------------------------------------------------
1195  PROCEDURE addDefaultTypeMappings ( version IN VARCHAR2 := 'pre-11.2');
1196  
1197  
1198  -----------------------------------------------------------
1199  -- PROCEDURE - deleteDefaultTypeMappings
1200  --  deletes the default type mappings from xdbconfig.
1201  --
1202  -- PARAMETERS -
1203  -----------------------------------------------------------
1204  PROCEDURE deleteDefaultTypeMappings;
1205  
1206  -----------------------------------------------------------
1207  -- PROCEDURE - setDefaultTypeMappings
1208  --  sets the value of default-type-mappings in xdbconfig
1209  --
1210  -- PARAMETERS -
1211  --  type (IN) - Accepted values: "pre-11.2" or "post-11.2"
1212  -----------------------------------------------------------
1213  PROCEDURE setDefaultTypeMappings ( version IN VARCHAR2 );
1214  
1215  
1216  ----------------------------------------------------------------------------------
1217  -- PROCEDURE - addHttpExpireMapping
1218  --    Adds to xdb$config a mapping of the URL pattern to an
1219  --     expiration date. This will control the Expire headers
1220  --     for URLs matching the pattern.
1221  -- PARAMETERS -
1222  --     pattern  -- URL pattern (only * accepted as wildcards)
1223  --     expire   -- expiration directive, follows the ExpireDefault
1224  --                 in Apache's mod_expires, i.e.,
1225  --                 base [plus] (num type)*
1226  --                 -- base: now | modification
1227  --                 -- type: year|years|month|months|week|weeks|day|days|
1228  --                          minute|minutess|second|seconds
1229  -- EXAMPLE
1230  --  dbms_xdb.addHttpExpireMapping('/public/test1/*', 'now plus 4 weeks');
1231  --  dbms_xdb.addHttpExpireMapping('/public/test2/*', 'modification plus 1 day 30 seconds');
1232  ----------------------------------------------------------------------------------
1233  procedure addHttpExpireMapping(pattern IN VARCHAR2,
1234                                 expire IN VARCHAR2);
1235  
1236  ----------------------------------------------------------------------------------
1237  -- PROCEDURE - deleteHttpExpireMapping
1238  --    Deletes from xdb$config all mappings of the URL pattern to an
1239  --     expiration date.
1240  -- PARAMETERS -
1241  --     pattern  -- URL pattern (only * accepted as wildcards)
1242  ----------------------------------------------------------------------------------
1243  procedure deleteHttpExpireMapping(pattern IN VARCHAR2);
1244  
1245  ----------------------------------------------------------------------------------
1246  -- FUNCTION - getHTTPRequestHeader
1247  --    If called during an HTTP request serviced by XDB, it returns the values
1248  --    of the passed header. It returns NULL in case the header is not present
1249  --    in the request, or for AUTHENTICATION, for security reasons.
1250  --    Expected to be used by routines that implement custom authentication.
1251  ----------------------------------------------------------------------------------
1252  function getHTTPRequestHeader(header_name IN VARCHAR2)
1253    return VARCHAR2;
1254  
1255  end dbms_xdb;
1256  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM DBMS_XDB FOR xdb.dbms_xdb
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_xdb TO PUBLIC
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> 
SQL> Rem Add definition for various xdb administrative utilities
SQL> @@dbmsxdba.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmsxdba.sql /st_rdbms_11.2.0/2 2011/04/18 10:00:46 spetride Exp $
SQL> Rem
SQL> Rem dbmsxdba.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2011, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxdba.sql - The Spec for the PL/SQL package DBMS_XDB_ADMIN
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    spetride    04/12/11 - Backport spetride_bug-12317504 from main
SQL> Rem    spetride    03/17/11 - move movexdb_tablespace from dbms_xdb
SQL> Rem                         - add trace for movexdb_tablespace
SQL> Rem    attran      10/30/09 - 8533638: ClearRepositoryXMLIndex
SQL> Rem    badeoti     03/21/09 -
> Rem                           dbms_csx_admin.updateMasterTable,guidto32,guidfrom32
SQL> Rem                           moved to dbms_csx_int
SQL> Rem    badeoti     03/19/09 - move dbms_xdb_admin.createnoncekey to dbms_xdbz
SQL> Rem    thbaby      10/27/07 - add dbms_csx_admin.GatherTokenTableStats
SQL> Rem    spetride    11/01/07 - dbms_csx_admin: cleanup
SQL> Rem    spetride    09/05/06 - apis for default token table names
SQL> Rem    spetride    03/24/06 - added dbms_csx_admin
SQL> Rem    thbaby      06/21/06 - add DropRepositoryXMLIndex
SQL> Rem    thbaby      05/03/06 - repository index - add/remove path
SQL> Rem    petam       01/10/05 - Created
SQL> Rem
SQL> 
SQL> CREATE OR REPLACE PACKAGE xdb.dbms_xdb_admin AUTHID CURRENT_USER IS
  2  --------
  3  -- Procedure to create an XML Index on the repository
  4  procedure CreateRepositoryXMLIndex;
  5  
  6  -- Procedure to index resource at path 'path' or all resources in
  7  -- the subtree rooted at 'path'.
  8  procedure XMLIndexAddPath(path      IN VARCHAR2,
  9                            recurse   IN boolean := TRUE);
 10  
 11  -- Procedure to remove resource at path 'path' from the Repository
 12  -- XML Index or to remove all resources in the subtree rooted at
 13  -- 'path' from the Repository XML Index.
 14  procedure XMLIndexRemovePath(path        IN VARCHAR2,
 15                               recurse     IN boolean := TRUE);
 16  
 17  -- Procedure to drop an XML Index on the repository
 18  procedure DropRepositoryXMLIndex;
 19  
 20  -- Procedure to unmark the indexed flags of the XML Index on the repository
 21  procedure ClearRepositoryXMLIndex;
 22  
 23  ---------------------------------------------
 24  -- PROCEDURE - movexdb_tablespace
 25  --     Moves xdb in the specified tablespace. The move waits for all
 26  --     concurrent XDB sessions to exit.
 27  -- PARAMETERS - name of the tablespace where xdb is to be moved.
 28  --            - trace: if TRUE, use set serveroutput on to display
 29  --                     progress status information; default FALSE
 30  --
 31  ---------------------------------------------
 32  PROCEDURE movexdb_tablespace(new_tablespace IN VARCHAR2,
 33                               trace IN BOOLEAN := FALSE);
 34  
 35  ---------------------------------------------
 36  -- PROCEDURE - RebuildHierarchicalIndex
 37  --     Rebuilds the hierarchical Index; Used after
 38  --     imp/exp since we do cannot export data from
 39  --     xdb$h_index table since it contains rowids
 40  -- PARAMETERS -
 41  --
 42  ---------------------------------------------
 43  PROCEDURE RebuildHierarchicalIndex;
 44  
 45  end dbms_xdb_admin;
 46  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM DBMS_XDB_ADMIN FOR xdb.dbms_xdb_admin
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_xdb_admin TO DBA
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> 
SQL> 
SQL> 
SQL> CREATE OR REPLACE PACKAGE xdb.dbms_csx_admin AUTHID CURRENT_USER IS
  2  
  3   DEFAULT_LEVEL  CONSTANT BINARY_INTEGER := 0;
  4   TAB_LEVEL      CONSTANT BINARY_INTEGER := 1;
  5   TBS_LEVEL      CONSTANT BINARY_INTEGER := 2;
  6   NOREG_LEVEL    CONSTANT BINARY_INTEGER := 3;
  7  
  8   NO_CREATE      CONSTANT BINARY_INTEGER := 0;
  9   NO_INDEXES     CONSTANT BINARY_INTEGER := 1;
 10   WITH_INDEXES   CONSTANT BINARY_INTEGER := 2;
 11  
 12   DEFAULT_TOKS   CONSTANT BINARY_INTEGER := 0;
 13   NO_DEFAULT_TOKS  CONSTANT BINARY_INTEGER := 1;
 14  
 15  ---------------------------------------------
 16  -- TTS support: multiple token repositories
 17  ----------------------------------------------
 18  -- PROCEDURE RegisterTokenTableSet
 19  --     Registers a token table set: adds an entry in XDB$TTSET corresponding
 20  --     to the new token table set, and creates (if required) the token tables
 21  --     (with the corresponding indexes).
 22  -- PARAMETERS
 23  --  tstabno  - tablespace/table number of the tablespace/table using
 24  --           - the set of token table we register
 25  --  guid     - globally unique identifier of the token table set
 26  --           - if NULL, a new identifier is created, provided the user is SYS
 27  --  flags    - TAB_LEVEL for table level,
 28  --           - TBS_LEVEL for tablespace level
 29  --           - NOREG_LEVEL if the TTSET table needs not be updated
 30  --  tocreate - NO_CREATE if no token tables are created
 31  --           - NO_INDEXES if token tables are created, but no indexes
 32  --           - WITH_INDEXES if token tables and corresponding indexes are created
 33  --  defaulttoks - if DEFAULT_TOKS, insert default token mappings
 34  -- NOTE
 35  --     It is an error if flags = DEFAULT_LEVEL since the default token table set
 36  --     already exists if XDB is installed.
 37  ----------------------------------------------
 38   procedure RegisterTokenTableSet(tstabno IN NUMBER DEFAULT NULL,
 39                                   guid IN RAW DEFAULT NULL,
 40                                   flags IN NUMBER DEFAULT TBS_LEVEL,
 41                                   tocreate IN NUMBER DEFAULT WITH_INDEXES,
 42                                   defaulttoks IN NUMBER DEFAULT DEFAULT_TOKS);
 43  
 44   procedure CopyDefaultTokenTableSet(tsno IN NUMBER,
 45                                      qnametable OUT VARCHAR2,
 46                                      nmspctable OUT VARCHAR2,
 47                                      pttable OUT VARCHAR2);
 48  
 49  
 50  -------------------------------------------------
 51  -- PROCEDURE  GetTokenTableInfo
 52  --           Given the table name and the owner, returns the guid of the
 53  --           token table set where token mappings for this table can be found.
 54  --           Returns also the names of the token tables, and whether the token
 55  --           table set is the default one.
 56  -- NOTE
 57  --       It should be called only for CSX tables; otherwise, it will not return an
 58  --       error, just the default guid and token table names.
 59  --       Returns error if there is no default token table set.
 60  --  Needs SYS privileges.
 61  -------------------------------------------------
 62   procedure GetTokenTableInfo(ownername IN VARCHAR2, tablename IN VARCHAR2,
 63                               guid OUT RAW, qnametable OUT VARCHAR2, nmspctable OUT VARCHAR2,
 64                               level OUT NUMBER, tabno OUT NUMBER);
 65  
 66   function GetTokenTableInfo(tabno IN NUMBER, guid OUT RAW) return BOOLEAN;
 67  
 68  
 69  ---------------------------------------------------------------
 70  -- PROCEDURE GetTokenTableInfoByTablespace
 71  --     Given a tablespace number, returns the guid and the token
 72  --     table names for this tablespace. If there is no entry
 73  --     in XDB$TTSET for this tablespace, it assumes the default
 74  --     guid is isued, and returns TRUE in isdefault.
 75  --     containTokTabs is set to TRUE if the token tables for guid
 76  --     are actually in this tablespace. (This is needed for procedural actions
 77  --     for TTS.)
 78  -- NOTE
 79  --   Requires SYS privileges.
 80  ---------------------------------------------------------------
 81  
 82   procedure GetTokenTableInfoByTablespace(tsname IN VARCHAR2, tablespaceno IN NUMBER,
 83                                           guid OUT RAW, qnametable OUT VARCHAR2,
 84                                           nmspctable OUT VARCHAR2,
 85                                           isdefault OUT BOOLEAN,
 86                                           containTokTab OUT BOOLEAN);
 87  
 88    FUNCTION instance_info_exp(name       IN  VARCHAR2,
 89                               schema     IN  VARCHAR2,
 90                               prepost    IN  PLS_INTEGER,
 91                               isdba      IN  PLS_INTEGER,
 92                               version    IN  VARCHAR2,
 93                               new_block  OUT PLS_INTEGER) RETURN VARCHAR2;
 94  
 95  -- returns default path-id token table
 96    function PathIdTable return varchar2;
 97  -- returns default qname-id token table
 98    function QnameIdTable return varchar2;
 99  -- returns default namespace-id token table
100    function NamespaceIdTable return varchar2;
101  -- procedure to gather stats on default token tables
102    procedure GatherTokenTableStats;
103  END dbms_csx_admin;
104  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM DBMS_CSX_ADMIN FOR xdb.dbms_csx_admin
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_csx_admin TO DBA
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> 
SQL> Rem Create Path Index
SQL> @@catxdbpi
SQL> Rem
SQL> Rem $Header: rdbms/admin/catxdbpi.sql /main/13 2009/06/01 12:58:04 samane Exp $
SQL> Rem
SQL> Rem catxdbpi.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2009, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbpi.sql - XDB Path Index
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains the indextype information needed to support
SQL> Rem    the PATH INDEX
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    samane      05/28/09 - Security fixes: added authid current_user
SQL> Rem    abagrawa    04/13/04 - Add pi upd, del for metadata
SQL> Rem    najain      05/28/03 - create XDB_PITRIG_PKG under sys
SQL> Rem    najain      05/22/03 - pass current user in pitrig_upd
SQL> Rem    njalali     09/04/02 - removing references to PATH_INDEX until 10i
SQL> Rem    njalali     08/13/02 - no ORA errors during migration
SQL> Rem    fge         06/25/02 - fix bug 2285601
SQL> Rem    fge         06/13/02 - rename prvtpidx.sql to prvtxdbp.sql
SQL> Rem    sichandr    01/16/02 - remove getref from pathindex pkg
SQL> Rem    fge         01/08/02 - rename prvtxdbpi.sql to prvtpidx.sql
SQL> Rem    spannala    01/11/02 - making all systems types have standard TOIDs
SQL> Rem    sichandr    01/02/02 - fix xdbhi_im
SQL> Rem    spannala    12/27/01 - run setup connected as sys
SQL> Rem    spannala    12/13/01 - removing connect
SQL> Rem    najain      11/14/01 - get_ref signature change
SQL> Rem    nagarwal    11/12/01 - Merged nagarwal_xdb_pathindex_fix
SQL> Rem    nagarwal    11/12/01 - grant exempt access policy to xdb
SQL> Rem    nagarwal    11/08/01 - move the raise_error procedure to prvtxdbz
SQL> Rem    nagarwal    11/05/01 - some reorg & cleanup
SQL> Rem    najain      11/03/01 - use triggers for hierarchy
SQL> Rem    najain      10/31/01 - fix compilation errors
SQL> Rem    najain      10/30/01 - define indices
SQL> Rem    najain      10/23/01 - define truncate/drop triggers
SQL> Rem    nagarwal    10/08/01 - Created
SQL> Rem
SQL> 
SQL> 
SQL> /* drop objects */
SQL> Rem drop indextype xdb.path_index;
SQL> drop type xdb.xdbpi_im;
drop type xdb.xdbpi_im
*
ERROR at line 1:
ORA-04043: object XDBPI_IM does not exist


SQL> drop table xdb.xdb$path_index_params;
drop table xdb.xdb$path_index_params
               *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> 
SQL> /*-----------------------------------------------------------------------*/
SQL> /*  LIBRARY & DICT TABLE                                                 */
SQL> /*-----------------------------------------------------------------------*/
SQL> create or replace library xdb.path_index_lib trusted as static;
  2  /

Library created.

SQL> create table xdb.xdb$path_index_params
  2  ( mount_point      varchar2(2000),
  3    enum_col_clause  varchar2(2000),
  4    name             varchar2(32),
  5    connect_clause   varchar2(2000)
  6  );

Table created.

SQL> 
SQL> /*------------------------------------------------------------------------*/
SQL> /* Index TRIGGER BODY                                                     */
SQL> /*------------------------------------------------------------------------*/
SQL> -- XDB Path Index TRIGger PacKaGE
SQL> create or replace package xdb.XDB_PITRIG_PKG_01 authid definer AS
  2    procedure pitrig_del(owner varchar2, name varchar2, deloid raw, tbloid raw);
  3    procedure pitrig_upd(owner varchar2, name varchar2, deloid raw, tbloid raw,
  4                         cuser varchar2);
  5    procedure pitrig_delmetadata(owner varchar2, name varchar2, deloid raw,
  6                                 tbloid raw, resid raw, cuser varchar2);
  7    procedure pitrig_updmetadata(owner varchar2, name varchar2, deloid raw,
  8                                 tbloid raw, resid raw, cuser varchar2);
  9  end XDB_PITRIG_PKG_01;
 10  /

Package created.

SQL> 
SQL> create or replace package xdb.XDB_PITRIG_PKG authid current_user AS
  2    procedure pitrig_del(owner varchar2, name varchar2, deloid raw, tbloid raw);
  3    procedure pitrig_upd(owner varchar2, name varchar2, deloid raw, tbloid raw,
  4                         cuser varchar2);
  5    procedure pitrig_drop(owner varchar2, name varchar2);
  6    procedure pitrig_truncate(owner varchar2, name varchar2);
  7    procedure pitrig_delmetadata(owner varchar2, name varchar2, deloid raw,
  8                                 tbloid raw, resid raw, cuser varchar2);
  9    procedure pitrig_updmetadata(owner varchar2, name varchar2, deloid raw,
 10                                 tbloid raw, resid raw, cuser varchar2);
 11    procedure pitrig_dropmetadata(owner varchar2, name varchar2);
 12  end XDB_PITRIG_PKG;
 13  /

Package created.

SQL> 
SQL> grant execute on xdb.XDB_PITRIG_PKG_01 to public;

Grant succeeded.

SQL> grant execute on xdb.XDB_PITRIG_PKG to public;

Grant succeeded.

SQL> 
SQL> show errors;
No errors.
SQL> 
SQL> /*-----------------------------------------------------------------------*/
SQL> /*  IMPLEMENTATION TYPE                                                  */
SQL> /*-----------------------------------------------------------------------*/
SQL> create or replace type xdb.xdbpi_im OID '00000000000000000000000000020116'
  2     authid definer as object(
  3    notused    RAW(4),
  4  
  5  
  6    static function ODCIGetInterfaces (ilist OUT sys.ODCIObjectList) return number,
  7  
  8    static function ODCIIndexCreate(ia sys.odciindexinfo, parms varchar2,
  9        env sys.odcienv)  return number,
 10  
 11    static function ODCIIndexDrop(ia sys.odciindexinfo, env sys.ODCIEnv)
 12      return number,
 13  
 14    STATIC FUNCTION ODCIIndexTruncate(ia sys.odciindexinfo, env sys.ODCIEnv)
 15      RETURN NUMBER,
 16  
 17    static function ODCIIndexInsert(ia sys.odciindexinfo, rid varchar2,
 18          newval sys.xmltype, env sys.ODCIEnv) return number,
 19  
 20    static function ODCIIndexDelete(ia sys.odciindexinfo, rid varchar2,
 21      oldval sys.xmltype, env sys.ODCIEnv) return number,
 22  
 23    static function ODCIIndexUpdate(ia sys.odciindexinfo, rid varchar2,
 24      oldval sys.xmltype, newval sys.xmltype, env sys.ODCIEnv)
 25      return number,
 26  
 27    static function ODCIIndexStart(sctx IN OUT xdb.xdbpi_im,
 28        ia sys.odciindexinfo, op sys.odcipredinfo, qi sys.odciqueryinfo,
 29        strt number, stop number, pathstr varchar2, env sys.odcienv)
 30        return number,
 31  
 32    member function ODCIIndexFetch(nrows number, rids OUT sys.odciridlist,
 33       env sys.odcienv) return number,
 34  
 35    member function ODCIIndexClose (env sys.odcienv) return number
 36  );
 37  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> /*------------------------------------------------------------------------*/
SQL> /* IMPLEMENTATION TYPE BODY                                              */
SQL> /*------------------------------------------------------------------------*/
SQL> create or replace type body xdb.xdbpi_im
  2  is
  3    static function ODCIGetInterfaces(ilist OUT sys.ODCIObjectList)
  4      return number is
  5    begin
  6      ilist := sys.ODCIObjectList(sys.ODCIObject('SYS', 'ODCIINDEX2'));
  7      return ODCICONST.SUCCESS;
  8    end ODCIGetInterfaces;
  9  
 10    static function ODCIIndexCreate(ia sys.odciindexinfo, parms varchar2,
 11      env sys.ODCIEnv) return number as
 12    begin
 13      return ODCICONST.SUCCESS;
 14    end ODCIIndexCreate;
 15  
 16    static function ODCIIndexDrop(ia sys.odciindexinfo, env sys.ODCIEnv)
 17      return number
 18    is
 19    begin
 20      -- drop all the rows in the resource_view
 21      -- The drop is handled via the trigger xdb_pi_trig
 22      return ODCICONST.SUCCESS;
 23    end ODCIIndexDrop;
 24  
 25    STATIC FUNCTION ODCIIndexTruncate(ia sys.odciindexinfo, env sys.ODCIEnv)
 26      RETURN NUMBER
 27    is
 28    begin
 29      -- drop all the rows in the resource_view
 30      -- The truncate is handled via the trigger xdb_pi_trig
 31      return ODCICONST.SUCCESS;
 32    end ODCIIndexTruncate;
 33  
 34    static function ODCIIndexInsert(ia sys.ODCIIndexInfo, rid varchar2,
 35      newval sys.xmltype, env sys.ODCIEnv) return number
 36    is
 37    begin
 38      return ODCICONST.SUCCESS;
 39    end ODCIIndexInsert;
 40  
 41    static function ODCIIndexDelete(ia sys.ODCIIndexInfo, rid varchar2,
 42      oldval sys.xmltype, env sys.ODCIEnv) return number
 43    is
 44    begin
 45      -- For delete/update a trigger will be created per table when the table is
 46      -- enabled for hierarchy. The name of the trigger: <table_name>_XDB_PITRIG
 47      -- This is done is prvtxdbz.sql
 48      return ODCICONST.SUCCESS;
 49    end ODCIIndexDelete;
 50  
 51    static function ODCIIndexUpdate(ia sys.ODCIIndexInfo, rid varchar2,
 52      oldval sys.xmltype, newval sys.xmltype, env sys.ODCIEnv)
 53      return number
 54    is
 55    begin
 56      return ODCICONST.SUCCESS;
 57    end ODCIIndexUpdate;
 58  
 59    static function ODCIIndexStart(sctx IN OUT xdb.xdbpi_im,
 60        ia sys.odciindexinfo, op sys.odcipredinfo, qi sys.odciqueryinfo,
 61        strt number, stop number, pathstr varchar2, env sys.odcienv)
 62        return number
 63    is
 64    begin
 65      return ODCICONST.SUCCESS;
 66    end ODCIIndexStart;
 67  
 68    member function ODCIIndexFetch(nrows number, rids OUT sys.odciridlist,
 69       env sys.odcienv) return number
 70    is
 71    begin
 72      return ODCICONST.SUCCESS;
 73    end ODCIIndexFetch;
 74  
 75    member function ODCIIndexClose (env sys.odcienv) return number
 76    is
 77    begin
 78      return ODCICONST.SUCCESS;
 79    end ODCIIndexClose;
 80  
 81  end;
 82  /

Type body created.

SQL> show errors;
No errors.
SQL> grant execute on xdb.xdbpi_im to public;

Grant succeeded.

SQL> 
SQL> /*------------------------------------------------------------------------*/
SQL> /*  OPERATORS and INDEXTYPES                                              */
SQL> /*------------------------------------------------------------------------*/
SQL> /* primary operator */
SQL> create or replace package xdb.xdbpi_funcimpl as
  2    function noop_func(res sys.xmltype) return number;
  3  end;
  4  /

Package created.

SQL> 
SQL> create or replace package body xdb.xdbpi_funcimpl as
  2    function noop_func(res sys.xmltype) return number is
  3    begin
  4     return 0;
  5    end;
  6  end;
  7  /

Package body created.

SQL> 
SQL> 
SQL> -- dummy operator
SQL> Rem create or replace operator xdb.xdbpi_noop binding (sys.xmltype)
SQL> Rem return number
SQL> Rem using xdb.xdbpi_funcimpl.noop_func;
SQL> 
SQL> Rem grant execute on xdb.xdbpi_noop to public;
SQL> 
SQL> -- indextype
SQL> Rem create indextype xdb.path_index for xdb.xdbpi_noop(sys.xmltype)
SQL> Rem  using xdb.xdbpi_im;
SQL> 
SQL> -- The body for catxdbpi i.e. prvtxdbp is invoked from catxdbr.sql because of
SQL> -- the dependency of the package body on resource_view
SQL> 
SQL> -- Load the dbms_xdbutil_int specification
SQL> @@prvtxdb0.plb
SQL> create or replace package xdb.dbms_xdbutil_int wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  af1 447
 21  Udl3tOaXzUr5uIZhlxWZIX+XbhQwgzsrLiAFfHRVMjqURT37GGvXeYKfyGyDPGYM7CIlXZEO
 22  fWPdYdl7cCSqiZBXYYZF3H/vWnkHXe9PHPqrl2GgppvSzk6/c/4pCHLZTtCSOrGZa6+crLZv
 23  2ERDHo/d0+4r1eZflJfq7ITXqLA1IxWgwEHFrsNNZaD4m41oYx0MY9XlXz3ULoiasH9IHI5O
 24  5tVGszF4cLymRKcjj70i1aP78xiKTQFsDRO60nW+dtXGHPbSS4/WXIB9qPy88X02lDIZnrYe
 25  eeEUzQzik19Dy7m2q5LWN3jTEWTRR5tHBdW2GIOEmvButLzMksku/5V8JgN/N3WM4Qd3Quyh
 26  Wuy7bXqF/LVlFnHWjNaxvo6evhIo0bMoxSd5f377h6/WYC1BzVYQEV/JIk1gOXpUyo0WUUdN
 27  iVq6SDKBQse/T/8S0At8vcO+rIuDOdbuVxoKNzXR1tWkVwc+KE5ylUFlWBH6CHJakR5eNe2/
 28  KWPH1/egOYHsfFU96QtvyOchm2nNRoE3l3YdrC4Ri3SBQ49U3DWCOwuB7akKr+6POoyC1rG6
 29  vU9CjPPvTPCCHZ5LFggL5LZwLI9fqYDNKvxmf2/I8Owp3468Dw+FySr94MdcX/+kqghFRhBR
 30  Ua72xBzFUqv+XVOT/ELza/2jhYJbHVqM4Fv0kAT6SgCzK1LaVVzWiKwd1NY7RuYgryV4qBIw
 31  Sx2+56XnsdqLscxy7Ybdhnoxq6vq9/2R3/zdcCe0/Tg3scW/WRiZB+LLJoHfdWGJcAElVUye
 32  z/XTt6hL0hqY/eewSZrMjJVh0FXaudj6sjfapUe5ifuwQdSaxgAks0EdBi+QjW9fnxX2EkuP
 33  uOnBUePF8sHbB+wKE72a9b80bL3e6r9VQSKH6la8jPYDlhnB/OY8Iw+7qz79jPEmgm7Nxp/1
 34  UWHHpALjz3VAk64iStQFfqMwpp63GLX0TayP5kwr18t+cZbGsGN2j5vYgiYxYWMdr5LNvodi
 35  jA5JFsyIee3Wu/sHHRQaeW1DiJB6nIO7TXS42M5XhAvxV27ncsXqu0JvNMgtGtJqJERXIGc=
 36  
 37  
 38  /

Package created.

SQL> show errors
No errors.
SQL> create or replace package xdb.dbms_xdb_print wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  21f 150
 21  06MzMQ13qNBWcasUBbFw7YjSNNEwg/BQr/Idfy85cHL4jsfDpQmU99EARxvrq0UTRvo2/N4O
 22  0gY184GPhhNAUQd+lXZq/hebrqIDlbKvOLWbaw8H7bztJJ0/4clC9W9ZyRuW7LZ/U3cypvdM
 23  vkug1HoYYMv3VEHdNk827aly62mlwERt+QeAG1jpeJ3UB0INcVWkzINFTVk+kd8aEdQ8AKDi
 24  BD5Eo5lt+Css9jzyJrJoPGSnGfw0kKrCGL2/F6JVoX+BiT5AfsmsogkffEQMnFIABjluJOni
 25  krWX9leyALcq76i1rbDvIK/LXiWQpKAl+Qb9WTv3CQ==
 26  
 27  /

Package created.

SQL> show errors
No errors.
SQL> create or replace package xdb.dbms_xdbnfs wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  107 103
 21  5QG3870YoD9NaXMixasqrO61ZQkwg0zwf8sVfHTpWBKe0Ong4NeJG9z9jej3zed1ZlyU/VZM
 22  VyJr002lSdmau60n6x5vOEG5DD//64ZhqdwlQpkb8zjIbgS9euoTU45fzn9nuIpF76gSupjL
 23  z6YlwQAv8lEyKz2uZvA5eWY2vDleU3/3ryOUzxENAAPe477POLMVJ16ONkMFd2j4zm/bthcs
 24  NroaHefe1qoFUQee1kQFdG6WYT6eDRL7pM3moA==
 25  
 26  /

Package created.

SQL> show errors
No errors.
SQL> grant execute on xdb.dbms_xdbnfs to public
  2  /

Grant succeeded.

SQL> create or replace package xdb.dbms_csx_int wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  b58 398
 21  CHFQ7xlpnu9yhQD29TKizsguq2gwg+0r2eKDfC/Nb7zgpzXmXNlVlDLuxi9xdtqb1hWeJs3o
 22  bZ/HmH3BsZ/TSPETZ6kKo+Oi+liCKHKIsBR+gMBGLJo/AE+8JLUAc+RzW+O/uq83QgtpvrfE
 23  EWe0OnaphkAwKdzT/hb7dSs880OpnulHCBSJanqpJBBAKB6mv0bfUFPR3SQbVw227goyX8mG
 24  lMfm1YWzzSrvd9mp2SV54w9NQUPTiwMxdCUSv1ZSpn8HLQHAD1Krmw0mHRaWQ2YxBPUZFkuA
 25  +Plphdv/s2s+RtM8vZ+oj/CzAuvaw5OS0CIz20tifwoBTdpS/3Tpq16tlly08fDBdsj0+IvY
 26  mnxznD1iNgNb2WFUL4Xl1bFWeydSYjnO2l83wiHsqP45NSdhDDFvogIZ3zEwikzxQm0adwG0
 27  dgdcMeeNEbM11PTv7Y+nfPSqfv6Nn1syDRfrRWRSter+K/TnEwdvPBlVswveshFw5SnpO0fi
 28  1USDU1uBwL78eMPWiHR5znvj+lz7MKJkADv8UY7TQmx3o2QZhTM/YvyeGbFUTCjSFjDN6U/V
 29  OqkdBzxr4OyGH6d/Jt5uKghFRpxx//T1elCpo/6+VzxxoItR9NW+L8UgzD1WVi311I2veqIY
 30  6CLh55A8Oi4s1Q9QIRvUazjK063wMu+hSLC4QQCWGXykINsh0k3+yX67Uz1SZen7yWKU0Yzi
 31  O5r1q2HGzD7iKs4FNhBLFvJ5cTcbILrSZykyAqJBcBBGlmr605KWXNEJkRiOMOsE2Cizulnl
 32  0DtwzCDOlDDFhF6FOj1/ImmLN2vTV5A/o2OrIAhQLRHD63pUKOzGEOK9QSuxiuu0MHMSzA0Z
 33  tj4GyZHMj9b1VTV2WsxSj6BLsKVitixkmnMdwPNKbQ==
 34  
 35  /

Package created.

SQL> show errors
No errors.
SQL> grant execute on xdb.dbms_csx_int to public
  2  /

Grant succeeded.

SQL> create or replace public synonym dbms_csx_int for xdb.dbms_csx_int
  2  /

Synonym created.

SQL> 
SQL> -- Load the dbms_xdbz0 specification
SQL> @@prvtxdz0.plb
SQL> CREATE OR REPLACE PACKAGE xdb.dbms_xdbz0 wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  e95 388
 21  TIrXhnmz4AQtaBsPZ5zT4FTs1+kwgz3qLtATfC/NWA/uC8hRPeXGURw5gi941GF+ty4jLaCD
 22  9q7tw3OBpLbThYsd3/rystPT4RLki+1YB3mplmvmMzOSHr/OTjOS/lg1hh9RcDQtb40o8ITZ
 23  Rguh8QQKrW/w6RuJpR5mv1qMRpqRvQtS3fnF/ZXtUBgIRJtjLeABY5nLbMAgl1j/qlCEuNIN
 24  OZ7UK3A64YqxrW330UxVw0QquRdjjANWktQz2ZH6V1RrFgiA+7ovAxwsNn4LnjAES0zXoxD9
 25  GQqo0GscqDruuL+N5JoGuQAvlF3TauYO8O94XQQcO+FC77nrhcG3yTNw5NSiE8noDWXQlL7O
 26  xLvrPJabg0TC/k+uTEpxXjZDVSEvBTRiK1Jzcfb0DgaDbFoH3mCO5uk0U9QE9CqVRIga4uGU
 27  Vkf/wnsXKk05keyQw4wvuQNdUzXQ8zXolQ5ttB7pMWOeCdyiLXnlDgHzKxGkKpD9J07zBLei
 28  epbUaZXt++d4BL5iqQZnvP2g9j2Y8kUSMus1hMzlmDa/Lo3cy+uIXkkFFtYZGPz5imPGfEpi
 29  7ebpEU1dNDvDEFxbyxNKssEanHSSdKwG8ZkU63uqe+MdyhklXjbT1vUW6MyP7MKOHqFpXF4H
 30  z4az7dUJ5Tvzbh2ZMn2Gu7GEj8qtAsjmOLrpY0YY1wYGIqcrDMYSVM2cgophThJq3pqQ5AwU
 31  sx8jog1No7Lw4xbCDPgHH3mc/6awr+ogdiK8C1eAubOh+tMqo41504pZHJQIneE+GKZx/308
 32  9XTvpW+HM0OL37neTNl9gIDyyyvwawavOzu+zkvQIReY/ll4vK5Oqf7Ni3+g8QmhBMNEUMx8
 33  l325zFtqnmMCPs8g93IxnKqiUrb8
 34  
 35  /

Package created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE FUNCTION is_vpd_enabled wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  420 264
 21  BAGk1fGSOtd2Mc8JVBkUKyaDZ7Awg41erycFZy/NrQ9/RquhSPxTuWJgAo16wmGT1xhVjXH+
 22  wiFXB+YWYzfxcrvYkb3ZNgm76XyCu9cTeIxRa2ihLqVOMbVzEKXQnT96egAc4JAQgd+WLdPK
 23  vaM4mwl1PbJxr6qdZzVRFb2vRM4JUb1L7b/4RQsmjYHxdkiz3Uwj9KcuK5O1ebcQD1oe96Lo
 24  uIbH13FdfsD79zWxBKxZ9gKsZ4OpMjdkT42afPY0o9Gc+nuOuBdqg8dVyB0n5XQuH2QN8Tq8
 25  ynWPIlvDQLqha2BvLwzC/9vWa3gvTIC9GqU+++pmpENPTXDHfrcufzR6AqAyQwQMIuIjQk1W
 26  vPJlwzNcoDh/Hgo1dzE/JXhZIvd7StdiZiLC5LzfwrLLk8N1mEXj//Xt9HwjNpCFire42rWm
 27  5j4g0v8V5G9FANtORiCXKSnAnozVHKLO4oyimWKK8iHnzaxVcN9kv9v+sRPH5Ok2/nZOkEIp
 28  JreopMRtP+MiGl0A5iESrXrkQiNB6Q6yNKOl+UOPFzSKvIR/5DspfYUjVMaRX5ZLbmjUCH6Q
 29  3qXPhsbDqFchf8idHr+1po95TsM=
 30  
 31  /

Function created.

SQL> show errors;
No errors.
SQL> grant execute on is_vpd_enabled to public;

Grant succeeded.

SQL> CREATE OR REPLACE FUNCTION get_table_name wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  3e9 223
 21  8kOglv67x++a/YNJ40X82aFW04Awg40JACDWfC/NR2RXMvsaIVGIbWUEV6z9S/d5WoOV8mNN
 22  DAU+tQ8AfGsaZgkVrEP+7pi/nHhmKnGeznpBiimlCDKgJAe7C8q36grr4dU5cWfZw6N8DaOp
 23  W3iqDVY7cJQlUidSB9Y4ofT/hN/JoOe7S2kRq2zK98KiG6n2IAlYKhiDLBDWXI7pOIrwlsHC
 24  85PBZYULlq+yH6Q3wS+4a/Ce/8mZpSxzLzyldqw+aTCcPnQg7dg1ePpjSuBizH5ZfxkCrtXq
 25  W6erZKuQIHa3xUNCijLBvJc4w6sMWT6YbC6Jy9Eu0V9u6BPVkzWnfAynekNNawJMN5619cBJ
 26  acy/t5Vw0pGYimwg/xdznZc3FSViBfVLT2yNYfhWQtDk+0dy/VpsWyKtsAWjCCuNg0WDHmiw
 27  fsGmbBdLX3zWsTeTzF4Xfishpu0W9SmHSFvXN6PpW+4ilUX21AgW5vvmo8JwHRDCiLV5wGBq
 28  SknyoZFjILdQzvi1S7u2h4oytGqW+5XNSA==
 29  
 30  /

Function created.

SQL> show errors;
No errors.
SQL> grant execute on get_table_name to public;

Grant succeeded.

SQL> 
SQL> Rem Implementation of XDB Security modules
SQL> @@prvtxdbz.plb
SQL> CREATE OR REPLACE LIBRARY xdb.SECURITY_LIB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  27 5d
 21  84SuZBFlRVWV4HAeCgS3Ul/26p8wg04I9Z7AdBjD558yy7KbdPRf/gj1Cee9nrLLUjLMuHQr
 22  58tSdAj1yaammk6e2Q==
 23  
 24  /

Library created.

SQL> CREATE OR REPLACE LIBRARY xdb.DBMS_XDBZ_LIB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  28 5d
 21  0AB1tMsVZzVCvSMulv0juV+rdxgwg04I9Z7AdBjDuFKbskrQuFIYGP4I9QnnvZ6yy1IyzLh0
 22  K+fLUnQI9cmmpvx9mS8=
 23  
 24  /

Library created.

SQL> CREATE OR REPLACE FUNCTION isXMLTypeTable wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  1064 65e
 21  csXE5f1FI/RWQl/u2iWOtlHYwhkwg43qeSAGYC+5weQYzJawDboY42Tld6LPfP/TVlgqgeK2
 22  m737LdxxPrhwo+lFLJoxTJ3YmubgPjgA2iCYTnqCfEpYSeTIr4shTzkGgcjjQycTVO62jPPO
 23  dBxVhRNT9+sd7krhRXC5iStDh3aVNOV0xIRwUi+06vOUUttwjkD7MjGN2WSmqbWUVjaQbeaa
 24  khClwSwzkGgS9R1pKG2w76s+WB9OWvqec5YdO2JBF8PNMM9KQlZ3mHKoUQtYHyiCWyfE5ejf
 25  U3UY5RcXfIXPJKKDMoL8V18x7Wj6SmzQ2p8d3PBw3BJ8sNp16xxZXFHZ2Nj067Qcs1tPawn5
 26  9ND5u9Cvm4gf9+LAKIVy20CoaLTKGyFeYu+G7jB6ZXcti/sBKOBRRDMgStw5qQakoHUKXOKs
 27  eMHQu/xYiVspWcZ69li33lQbK/KYwgpC1Q/2QvzE4S3Eamgd7iEOQamB+TQMOw9+FnHQjLij
 28  vO7HIwCB/ge7PsIeq7izXvH1vkVAw2RysF0wssGH636Bsi6gJSOdPdGnHuapHDxpowAuFlE8
 29  9cK7u7UFbMauMGsXlIu23cD+ZkMKIAns/ALT7EAKLhhm1c0sSviEwFkPEsJmVG9jWG+L9u3m
 30  a97wBlWbTzZhE522yl2CqouZi2JRpfoXhqXsyGA0aLMv0OpTiSXX0ZXWyf06DFWrxCVzi0SN
 31  54j1JP+PyXwRKIdA92zlNsVet9rpSOjWAyK5L0ggm/jXRMv6qCqwh1ZLJC6w0hm/Ulzdlxdm
 32  wzuWiyIShU0LYXHGcF93t9JQ8Z6Al+leGkVNFMunFZlYX/bzMb4+EhQA9Bf/UtNWGuO0v2Ic
 33  kbhLmz9PCIMtqF8aib/j5zmi5rG0dMjwOfOVrcGroApuTRJrRc7NSw5d7XIC0MeyvBycmCGh
 34  Ie8PK9lEwEhSV0j5APs3LCRH4SfcFzbCGv/JE88ujg4aSLlxZMyR1m2+n1Mtyo0L9cys5gq6
 35  DrRNcDdmCRx6bsynciZ/GUF7t2DWN6yHn69jTC9AgoI3f5QZFL8acAKMQ/93DscPhcdl2MgJ
 36  +Efma4CjBCkxp79HntsBgWKtjgee8kXUkpBHBsyPEttIjr51p8LGK8VMIIX8f8lcOn2+Ph6Z
 37  geEsSPV5BR5wd++CemjSj480cjmeCnZgJaNkD2/Gc9/34tF7Pq9JLhnmT94BDwnuFfBLX7x1
 38  cG+eOB90yJtZHMnSdAOFxoPuVbKWpKZalGMuS3tEo5B04jI0DWug9FywpgrHsXd+cDzeRHnr
 39  fFs7Tsx3hxVIgJhlXZtHsraW563X0HHEjMfQ/13ECGDKMtIvA18w6uKT2lyIsRUl7BqbpNgq
 40  uoLXKN8LQoZUE9gbDX725NGrv0ktBbOTSSH5ECnDEE+MXpqROiYP3KZDvA9Dc2MR8bnOsmIL
 41  +CbqwbVrBYeuDnpw4HMnKNloezt7/Tk3JwoRdCFuDHIj2xbebVvDILscMCjf+x2jeYRHoocD
 42  snEc6rukVOo7NLVXzZpRz2Bu/HB+7iNbEKO9+RsN2lpMqPWMWw0EXBt5hC3OKSdhQKPikN6X
 43  mjryD1sKkokVT/lbc+bxwQ==
 44  
 45  /

Function created.

SQL> show errors;
No errors.
SQL> grant execute on isXMLTypeTable to public;

Grant succeeded.

SQL> CREATE OR REPLACE PROCEDURE setmodflg wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  490 288
 21  e0akXR83wkx6dnMxD4rDK83CEU8wgzvDTPaMZ45VweQY+EsOwuKRY47sJVskuSsfpF4XaCqu
 22  4FHeHas1sl2oJLzqjBrolpN93c8j/74Hvr9xQDcCn45mIUK6KzFhMI0dTiijZu6n1rz7qvBQ
 23  wF9p6jg5eA03/3Qs3v6a9ZHLfytqSum89GvhObt95JUMolYiDoBCOkj5uGR6/9EIcjOBvVpP
 24  csG2aRcJnQmrZxsimF8OhuShMAg2z5UqBdJC4LhKa1DI7aI33YefI/DBTetLeJ71HjfLuB5d
 25  +ej/C5q2CmyeatLi5GkiIiPM/1buyv3D1AobtwmgoLI3uEc8q4G7MhnDByO3avNXnlcnxsKF
 26  Jd89YemSg922kTrol8C+O/HXuqPZbQ/FVvXpROwHrh5ME7kDyy0kiR40p2Siw8gaMBHxonf4
 27  mD9p7rZLx4072RtrlWtVlPpImicagysgOgiL5yQWqZuUM7zb13KHu56MFqVyNSMmnMfsHs+Z
 28  mACFLoddE28R1bGefh7lNin17Ivk9fGg2ThPMHuso/fUmxUEO+MJzZIig0ic0i3LZrnCwQhS
 29  8VUHN9ZH6OD9PC0CDO45ipt3+n/WqfzFXRAyLrXhVps0SvJm0ANIzjPLdB4q1g==
 30  
 31  /

Procedure created.

SQL> show errors;
No errors.
SQL> grant execute on setmodflg to public;

Grant succeeded.

SQL> CREATE OR REPLACE PACKAGE BODY xdb.DBMS_XDBZ0 wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  845d 1b12
 21  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
116  
117  /

Package body created.

SQL> show errors;
No errors.
SQL> GRANT EXECUTE ON xdb.dbms_xdbz0 TO PUBLIC
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> CREATE or REPLACE trigger sys.xdb_pi_trig
  2  BEFORE DROP OR TRUNCATE on DATABASE
  3  BEGIN
  4    BEGIN
  5      IF (sys.is_vpd_enabled(sys.dictionary_obj_owner, sys.dictionary_obj_name, xdb.DBMS_XDBZ.IS_ENABLED_CONTENTS)) THEN
  6        xdb.XDB_PITRIG_PKG.pitrig_truncate(sys.dictionary_obj_owner, sys.dictionary_obj_name);
  7      ELSIF (sys.is_vpd_enabled(sys.dictionary_obj_owner, sys.dictionary_obj_name, xdb.DBMS_XDBZ.IS_ENABLED_RESMETADATA)) THEN
  8        xdb.XDB_PITRIG_PKG.pitrig_dropmetadata(sys.dictionary_obj_owner, sys.dictionary_obj_name);
  9      END IF;
 10    EXCEPTION
 11      WHEN OTHERS THEN
 12       null;
 13    END;
 14  END;
 15  /

Trigger created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PACKAGE BODY xdb.DBMS_XDBZ wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  3ca7 e3d
 21  cFEWK+wCSQJUDUuOXXBYtoHvpbcwg826KSAFYG+aZLMPfwgf95lcoW5RVLSl4SGt8TFpFK/v
 22  Lb8tynG63nSFK3DZBVZQJLwgy/+V7mNc6zmY5uG6boZVnUK7Um4j+dog9LNC03Frj8+N6pyv
 23  OiTInK5QFNfTLFsBQPdPOGTdUtP4zqS85jhKG+fu2eEXLR+vZC3EFX3jVkkK1RCS81njNDCT
 24  03siOtNBF4foyAqPvTEIhFRxyiT0mbSrvOiHOfjh93at5CYSe7MEai2/HO78ZttLjKpSKlJw
 25  pPL/qts/zEP5RIdCFl+zEmV9AcaCGnRe6JXniC8Fw5VcGPoVIZcKLxaWUkDc/yfAiVhThSlm
 26  YGxqDGW1eqFmipWRuRVtwHpSNZP1K/t7+1IQlmKpCMWTVvz6sLfHNHSGvVgrtcQuBwBOCs/c
 27  DRvUN7dW9MWWVNeEMOTRWR4qsJFPuDd2BYduAB+UH1cbtr3X4tcNkPO1yAJXy6mXPkNB+q/U
 28  3eLHOI+xx+tpwwrbEnbXVII9V0ejhCRFCMkl0dE9NrzSUqNGoV8iqYUW+6+vZI4IOtB/qx5e
 29  o0BOwAI7J14hxrwBh3WCE69OXu5077QxB43opIgyiDg1dR6nxyNRCoHrq58dLif0xuytlhhF
 30  v564NmcJbMxp7VuY1v1dYbik8zuafg6fxt5qaNbhMllu3+Eyd+BtqLXqBvgO+7wWC08nmW7M
 31  q0Zr9Uu/47u2XR0VdjBdbvSMsc0xgmoOOYiPLzwVKTrI7s7fAHYZ/jvTmLKMGgFh28yPY7xb
 32  jmIVymJz5jI5pwudRxUG5SV4V+DHoBR0+npZ2Kxbftta28gqHwNa/4iyhsrS7Wb6aT/57dcB
 33  tHrxR6FYnFNNeiTyFd03LCZbdtLaHLqp8cKppviP3H7sJ10m5oehmxFpMzFwUcnD+Gf1QAjA
 34  PK1csWma4vNKnKVVIo2FINsOLKxlyZ6OKesPdXYhZokKUucDaIm2mNrz3e+1IdWcrf/dl11b
 35  KlqdWDEYg0czyLoUMZfVdNJLEjb8x55gIK6wL8CypZ4LSLDoE/hh+ETqtHDGcE4PDodyj6Nh
 36  dU3XKlA1aFr6WpoSzARnEL3/iri1W4yCrxEztx196ejv0jg3wvaMcKSPNkxS3lKTeTQodF1Z
 37  PY+WUw+h9JRedTOkY7TpoZvlQCNbCkvg/cOa48UHCvIOdR82jZzo82vpFC6oYXN8AqJrvRFt
 38  hbqLslTCQSlCLQZrXJa/vKpzkiouuPrUxmILbRH0XzIgMWbkOJMJ9zVS/xMsfWp8B27zeMmx
 39  OvP6WqTU0tmCAAzsCmW2hbj3W5Ns6o/I6UbCChQNcZkhsWw0+m5Y+pn6D1joV8eiuR5DZ8R1
 40  xqHxCQGYWejpLrxPATVu1eERWYaR8vq3p/B/9QJOJper2rNNJoWl6yMDvDFrmLDGzcnwIiJI
 41  uz4dZ6fxHUCGqRiQjA8iOyyxfe6SP7JxQTQ4mIesbZSPZQqUy+bnHGGCzqHm1573jpZYZRbe
 42  4nwHX5BS35P7IcwnykGV9+YW3MXjoWSjFGznDm94J5TjGmRufatWbXxmSNoHx/PoZ6aQxT3M
 43  OwKYB7CB7xHuOMTpO5u1+CNOND/A3BlHUL021Pq6v+WKPVG94qbUaF/e4NRE6ivH7Y6T9A0A
 44  KgKlrgw3EX6VzwmmPtdQ2pwevEdlI0SCMEMnB7KVdBuphWsUOyuhcNXI9ZycieVXNx0FxlvU
 45  E282NePW8Ep4P3HBmVK+ewdUP/h4nHxz7JIkTtM9K4ot6sJ0VBJ05lCXOSqYfwulrB05uuEZ
 46  DBE1zKFHrNYmnq4aEcFHBARw4d1ycr/EA5pEOXWGx5ATMA7FAiHbRrZQgBgDs+ZQ9xVOc4fA
 47  Rl5Gp1PKkTREiL/W22YnDuCoHAWQOC6i2s1J6efD1VluSZ3nXtz8PxC165It047G86D7QETR
 48  I3x3WWM7fHcCeIv7FqlgdunojFV+Tyyf/w9VqMVm/1fDNXexWtjs7GYZ5kGE2/xVLYRTxrjW
 49  MaDVidsx2PObAVsUZWchdMxbe0OjwOh+nZxto4EkCX3WKUJ2zPbPTaQuOuk16bo5CYTP+JMm
 50  /2NTJJEngGnfQniELy5psSZiy3lXaAZjPxEM79Ww3/dL/CfJVgMaWQqzB/hHyqgYvZ+JRbaR
 51  ALR/2LA9BAUDUlPRS4Da1wFunN4LoIfZ4w2kRxvJ8cxrQAt3p+pa6XbELvfeofjRj9h3O5Gm
 52  bc/WSsxl139pp0GK9Hrm1yeKlcNpZUkvXnWyosW2cZWNRzJHCJLDbJv7BDpEEdFHbXo5Ha0q
 53  addzlfEhDnaxGYbsvJLA+OvXM+6GVXJkQflO26oFfiDieBnBchOYEx5VVTM4OlMQ+W67YdAe
 54  qrk8D59KEp/SCCNOoCKSsaABBZb+EwewA4yumFXBt+pkfcQ6MwiSyQNBmn67vcyhMPlDKTMR
 55  l5K70kdNQ4eR+p6JXekyNSso5EzaV4PyvEXSfpW4m8P0vJ4YuKOqPEPBjwKKfGfibLNeatQV
 56  btPWlsaO7JIlGeGTxiT/7G8D14Zyianx04jptiaNac3c7JWixPOdVZlDWZOMCgr+oTSAKZup
 57  Q7xsSSub+ahJm45zkgpvz16T4Q4eBwVF9am7xhFn6BvzyKSaJUGCqA+CjM3arfBBppXZYBAx
 58  GXMJdUvhLtA7idLWlBGhNVe4E1xFbD5LNMcAX8uYo70Q7UZvYAGCaxAdmdz5+u33kL56E4k3
 59  Irc1gT2kCQELGoCX/4OxM4WoI+S3rWOjz7J7xJXiFfD+VlIurkGr6R+ByYxcuHrdjAFhSdnv
 60  yVhY27KTytkpyVh+zfdh+hoNWlUpPrHQwKzWBrNdykNNsjZ+l+Zecza5O2Y7JyUnwjzyzJZZ
 61  QFxfoyaCSL3ZqMtxdct5sh7EAEcrVbycInBPIMH/gNzRcKmYnt0bMmS3Hw45T0xhr5cq7RkK
 62  3+ATp6sF+fvpkchGg0jagWLXUtya9bktifuY01ELbxLMic9NZVf9TmaMItaOAL6EZBTwv398
 63  BLRt29LqTpZV/V/aW8aEb/W8jjxoyYWNsgWsEBagDxkRkpEkDPBEEFYxFvXCkc4jJAzwRBBW
 64  MRb1wnfjayKnVjWx1/Hw5kkMYYWK0ivZrCLo1GbRCS94aitHAqZoLETaN1BVHQEWtw/9F/ks
 65  wIRUe93eID7rGpbspMDx7tQBmoH54lQJljq3isdQ3PGokvITTKmrlW3Nz+ozSw9ZFK0blOFb
 66  M/nCendfr8INOLk8FN72EIUhzRvI3uxuLa6W+Vfo7M6PS0i7UNwwDLH4IwMx+ZtVgU6565I4
 67  xtqams0cT0+fUR6ymssF0ht66/xpKomKEk4jp30ukLjfoLVMmySkJlfyrV6sqVc/JJAuMqV1
 68  wh9sHYu3SV4zg7WdszMsm0o1TbpSEENi1pvsNyj87BvWebkKwxc86qVRF2qAzY2elbYZHbE+
 69  N2bZiJcXdHxWhV38sn3p9nyk41xFyWDKTVrRpWM1LkvV1C7krIiKlgl9jRZz0KFWKem2XfB6
 70  cGWmCD8oafjvqMHV4Er5/3lWS1/Wb5X+oyUMB1ecuQh5fIUAGM+UYtvrneQ5hk8k4g==
 71  
 72  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> REM ADD pl/sql dom, xml parser, AND xsl processor
SQL> @@dbmsxmlp.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmsxmlp.sql /main/13 2008/07/31 11:10:28 mkandarp Exp $
SQL> Rem
SQL> Rem dbmsxmlp.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2008, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxmlp.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    mkandarp    07/15/08 - 7172798: Add csid to parse
SQL> Rem    rxpeters    10/04/04 - add retainCDATASection
SQL> Rem    bkhaladk    10/29/03 - add schema synonyms
SQL> Rem    ataracha    10/15/03 - add error codes
SQL> Rem    ataracha    10/14/03 - add writeErrors
SQL> Rem    ataracha    10/09/03 - add getBaseDir
SQL> Rem    bkhaladk    08/19/03 - add synonym for xmlparser
SQL> Rem    njalali     08/13/02 - removing SET statements
SQL> Rem    gviswana    01/29/02 - CREATE OR REPLACE SYNONYM
SQL> Rem    spannala    12/27/01 - setup should be run as SYS
SQL> Rem    nmontoya    12/12/01 - remove set echo on
SQL> Rem    nmontoya    09/05/01 - Merged nmontoya_plsdom2
SQL> Rem    nmontoya    08/09/01 - Created
SQL> Rem
SQL> 
SQL> 
SQL> create or replace package xdb.dbms_xmlparser AUTHID CURRENT_USER IS
  2  
  3  /**
  4   * Parser interface type
  5   */
  6  TYPE Parser IS RECORD (id dbms_xmldom.domtype);
  7  
  8  /**
  9   * Internal error
 10   */
 11  INTERNAL_ERR CONSTANT NUMBER := -20000;
 12  
 13  /**
 14   * Other errors
 15   */
 16  PARSE_ERR CONSTANT NUMBER := -20100;
 17  FILE_ERR CONSTANT NUMBER := -20101;
 18  CONN_ERR CONSTANT NUMBER := -20102;
 19  NULL_ERR CONSTANT NUMBER := -20103;
 20  
 21  /**
 22   * Return the release version of the Oracle XML Parser for PL/SQL
 23   */
 24  FUNCTION getReleaseVersion RETURN VARCHAR2;
 25  
 26  /**
 27   * Parses xml stored in the given url/file and returns the built DOM Document
 28   */
 29  FUNCTION parse(url VARCHAR2, csid IN NUMBER := 0 )
 30   RETURN dbms_xmldom.DOMDocument;
 31  
 32  /**
 33   * Returns a new parser instance
 34   */
 35  FUNCTION newParser RETURN Parser;
 36  
 37  PROCEDURE freeParser(p Parser);
 38  
 39  /**
 40   * Parses xml stored in the given url/file
 41   */
 42  PROCEDURE parse(p Parser, url VARCHAR2, csid IN NUMBER := 0);
 43  
 44  /**
 45   * Parses xml stored in the given buffer
 46   */
 47  PROCEDURE parseBuffer(p Parser, doc VARCHAR2);
 48  
 49  /**
 50   * Parses xml stored in the given clob
 51   */
 52  PROCEDURE parseClob(p Parser, doc CLOB);
 53  
 54  /**
 55   * Parses the given dtd
 56   */
 57  PROCEDURE parseDTD(p Parser, url VARCHAR2, root VARCHAR2, csid IN NUMBER :=0);
 58  
 59  /**
 60   * Parses the given dtd
 61   */
 62  PROCEDURE parseDTDBuffer(p Parser, dtd VARCHAR2, root VARCHAR2);
 63  
 64  /**
 65   * Parses the given dtd
 66   */
 67  PROCEDURE parseDTDClob(p Parser, dtd CLOB, root VARCHAR2);
 68  
 69  /**
 70   * Sets base directory used to resolve relative urls
 71   */
 72  PROCEDURE setBaseDir(p Parser, dir VARCHAR2);
 73  
 74  /**
 75   * Gets base directory used to resolve relative urls
 76   */
 77  FUNCTION getBaseDir(p Parser) return VARCHAR2;
 78  
 79  /**
 80   * Sets warnings TRUE - on, FALSE - off
 81   */
 82  PROCEDURE showWarnings(p Parser, yes BOOLEAN);
 83  
 84  /**
 85   * Sets errors to be sent to the specified file
 86   */
 87  PROCEDURE setErrorLog(p Parser, fileName VARCHAR2);
 88  
 89  /**
 90   * Gets the error log file, if any
 91   */
 92  FUNCTION getErrorLog(p Parser) RETURN VARCHAR2;
 93  
 94  /**
 95   * Sets whitespace preserving mode TRUE - on, FALSE - off
 96   */
 97  PROCEDURE setPreserveWhitespace(p Parser, yes BOOLEAN);
 98  
 99  /**
100   * Sets validation mode TRUE - validating, FALSE - non validation
101   */
102  PROCEDURE setValidationMode(p Parser, yes BOOLEAN);
103  
104  /**
105   * Gets validation mode
106   */
107  FUNCTION getValidationMode(p Parser) RETURN BOOLEAN;
108  
109  /**
110   * Sets DTD for validation purposes - MUST be before an xml document is parsed
111   */
112  PROCEDURE setDoctype(p Parser, dtd dbms_xmldom.DOMDocumentType);
113  
114  /**
115   * Gets DTD parsed - MUST be called only after a dtd is parsed
116   */
117  FUNCTION getDoctype(p Parser) RETURN dbms_xmldom.DOMDocumentType;
118  
119  /**
120   * Gets DOM Document built by the parser - MUST be called only after a
121   * document is parsed
122   */
123  FUNCTION getDocument(p Parser) RETURN dbms_xmldom.DOMDocument;
124  
125  /**
126   * Internal function: writes the errors to the errorlog file, if any
127   */
128  PROCEDURE writeErrors(p Parser, err_num NUMBER, err_msg VARCHAR2);
129  
130  /**********************************************************/
131  /* retainCDATASection is a no-op procedure added strictly */
132  /* for compatibility with XDK. In violation to the W3C    */
133  /* spec, XDK allows a CDATA section to be parsed. If the  */
134  /* appl does not want this behavior then a value of FALSE */
135  /* passed to this procedure. Since XDB will never parse   */
136  /* CDATA sections, calling this procedure has no effect.  */
137  /**********************************************************/
138  PROCEDURE retainCDATASection (p Parser, flag boolean);
139  
140  end dbms_xmlparser;
141  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM DBMS_XMLPARSER FOR xdb.dbms_xmlparser
  2  /

Synonym created.

SQL> CREATE OR REPLACE PUBLIC SYNONYM xmlparser FOR xdb.dbms_xmlparser
  2  /

Synonym created.

SQL> CREATE OR REPLACE SYNONYM sys.xmlparser FOR xdb.dbms_xmlparser
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_xmlparser TO PUBLIC
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.xmlparser TO PUBLIC
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> @@dbmsxslp.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmsxslp.sql /main/14 2008/12/11 13:33:31 llsun Exp $
SQL> Rem
SQL> Rem dbmsxslp.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2008, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxslp.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    mkandarp    12/08/06 - 5667235: Add new API to get output method for doc
SQL> Rem                           2 clob
SQL> Rem    rxpeters    05/11/04 - remove processxslu
SQL> Rem    ataracha    11/10/03 - add url2clob
SQL> Rem    ataracha    10/24/03 - add function valueOf
SQL> Rem    bkhaladk    10/29/03 - add schema synonyms
SQL> Rem    ataracha    10/15/03 - add error codes
SQL> Rem    bkhaladk    08/19/03 - add synonym for xslprocessor
SQL> Rem    nmontoya    11/27/02 - ADD namespace awareness IN dbms_xslprocessor
SQL> Rem    abagrawa    09/19/02 - Fix read2clob
SQL> Rem    njalali     08/13/02 - removing SET statements
SQL> Rem    thoang      07/16/02 - Added charset support for clob2file
SQL> Rem    gviswana    01/29/02 - CREATE OR REPLACE SYNONYM
SQL> Rem    spannala    12/27/01 - setup should be run as SYS
SQL> Rem    nmontoya    12/12/01 - remove set echo on
SQL> Rem    nmontoya    09/05/01 - Merged nmontoya_plsdom2
SQL> Rem    nmontoya    08/09/01 - Created
SQL> Rem
SQL> 
SQL> 
SQL> create or replace package xdb.dbms_xslprocessor authid current_user as
  2  
  3  /**
  4   * Processor interface type
  5   */
  6  TYPE Processor IS RECORD (id dbms_xmldom.domtype);
  7  /* SUBTYPE Processor IS RAW(8); */
  8  
  9  /**
 10   * Stylesheet interface type
 11   */
 12  TYPE Stylesheet IS RECORD (id dbms_xmldom.domtype);
 13  /* SUBTYPE Stylesheet IS RAW(8); */
 14  
 15  /**
 16   * Internal error
 17   */
 18  INTERNAL_ERR CONSTANT NUMBER := -20000;
 19  
 20  /**
 21   * Other errors
 22   */
 23  PROCESSOR_ERR CONSTANT NUMBER := -20100;
 24  FILE_ERR CONSTANT NUMBER := -20101;
 25  CONN_ERR CONSTANT NUMBER := -20102;
 26  NULL_ERR CONSTANT NUMBER := -20103;
 27  
 28  /**
 29   * Read from a file to a clob, return clob
 30   */
 31  function read2clob(flocation VARCHAR2, fname VARCHAR2, csid IN NUMBER := 0)
 32  RETURN clob;
 33  
 34  /**
 35   * Read from url - file/http/XDB/oradb, return clob
 36   */
 37  FUNCTION url2clob(url VARCHAR2, basedir VARCHAR2, csid IN NUMBER :=0)
 38  RETURN clob;
 39  
 40  /**
 41   * Write to url
 42   */
 43  PROCEDURE clob2url(cl CLOB, url VARCHAR2, basedir VARCHAR2,
 44                     csid IN NUMBER := 0);
 45  
 46  /**
 47   * Write from a clob to a file with given character encoding.
 48   * If csid is zero or not given then the file will be in the db charset.
 49   */
 50  procedure clob2file(cl clob, flocation VARCHAR2, fname VARCHAR2,
 51                      csid IN NUMBER := 0);
 52  
 53  /**
 54   * Returns a new processor instance
 55   */
 56  FUNCTION newProcessor RETURN Processor;
 57  
 58  /**
 59   * Free XSL Processor
 60   */
 61  PROCEDURE freeProcessor(p Processor);
 62  
 63  /**
 64   * Transforms input XML document using given DOMDocument and stylesheet
 65   */
 66  FUNCTION processXSL(p Processor, ss Stylesheet, xmldoc dbms_xmldom.DOMDocument)
 67  return dbms_xmldom.DOMDocumentFragment;
 68  
 69  /**
 70   * Transforms input XML document using given Doc as CLOB
 71   */
 72  FUNCTION processXSL(p Processor, ss Stylesheet, cl clob)
 73  return dbms_xmldom.DOMDocumentFragment;
 74  
 75  /**
 76   * Transforms input XML document using given DOMDocument and stylesheet
 77   * and writes output to a file
 78   */
 79  PROCEDURE processXSL(p Processor, ss Stylesheet,
 80                     xmldoc dbms_xmldom.DOMDocument, dir varchar2, fileName varchar2);
 81  
 82  /**
 83   * Transforms input XML document using given as URL and stylesheet
 84   * and writes output to a file
 85   */
 86  PROCEDURE processXSL(p Processor, ss Stylesheet,
 87                     url varchar2, dir varchar2, fileName varchar2);
 88  
 89  /**
 90   * Transforms input XML document using given DOMDocument and stylesheet
 91   * and writes output to a buffer
 92   */
 93  PROCEDURE processXSL(p Processor, ss Stylesheet,
 94                      xmldoc dbms_xmldom.DOMDocument, buffer in out varchar2);
 95  
 96  /**
 97   * Transforms input XML document using given DOMDocument and stylesheet
 98   * and writes output to a CLOB
 99   */
100  PROCEDURE processXSL(p Processor, ss Stylesheet,
101                      xmldoc dbms_xmldom.DOMDocument, cl in out clob);
102  
103  /**
104   * Transforms input XML document using given DOMDocument and stylesheet
105   * and writes output to a CLOB. Provides information if style sheet output
106   * method is xml or not.
107   */
108  PROCEDURE processXSL(p Processor, ss Stylesheet,
109                       xmldoc dbms_xmldom.DOMDocument,
110                       cl in out clob, isoutputxml out boolean);
111  
112  /**
113  /**
114   * Transforms input XML document fragment using given DOMDocumentFragment and
115   * stylesheet
116   */
117  FUNCTION processXSL(p Processor, ss Stylesheet,
118                     xmldf dbms_xmldom.DOMDocumentFragment)
119  return dbms_xmldom.DOMDocumentFragment;
120  
121  /**
122   * Transforms input XML document fragment using given DOMDocumentFragment
123   * and stylesheet and writes output to a file
124   */
125  PROCEDURE processXSL(p Processor, ss Stylesheet,
126              xmldf dbms_xmldom.DOMDocumentFragment, dir varchar2, fileName varchar2);
127  
128  /**
129   * Transforms input XML document fragment using given DOMDocumentFragment
130   * and stylesheet and writes output to a buffer
131   */
132  PROCEDURE processXSL(p Processor, ss Stylesheet,
133                      xmldf dbms_xmldom.DOMDocumentFragment, buffer in out varchar2);
134  
135  /**
136   * Transforms input XML document fragment using given DOMDocumentFragment
137   * and stylesheet and writes output to a CLOB
138   */
139  PROCEDURE processXSL(p Processor, ss Stylesheet,
140                      xmldf dbms_xmldom.DOMDocumentFragment, cl in out clob);
141  
142  /**
143   * Sets errors to be sent to the specified file
144   */
145  PROCEDURE setErrorLog(p Processor, fileName VARCHAR2);
146  
147  /**
148   * Sets warnings TRUE - on, FALSE - off
149   */
150  PROCEDURE showWarnings(p Processor, yes BOOLEAN);
151  
152  /**
153   * Create a new stylesheet using the given DOMDocument and base directory URL
154   */
155  FUNCTION newStylesheet(xmldoc dbms_xmldom.DOMDocument, refurl varchar2)
156  return Stylesheet;
157  
158  /**
159   * Create a new stylesheet using the given input file and base directory URLs
160   */
161  FUNCTION newStylesheet(inp varchar2, refurl varchar2) return Stylesheet;
162  
163  PROCEDURE freeStylesheet(ss Stylesheet);
164  
165  /**
166   * Sets the value of a top-level stylesheet parameter.
167   * The parameter value is expected to be a valid XPath expression (note
168   * that string literal values would therefore have to be explicitly quoted).
169   */
170  PROCEDURE setParam(ss Stylesheet, name VARCHAR2, val VARCHAR2);
171  
172  /**
173   * Remove a top-level stylesheet parameter.
174   */
175  PROCEDURE removeParam(ss Stylesheet, name VARCHAR2);
176  
177  /**
178   * Resets the top-level stylesheet parameters.
179   */
180  PROCEDURE resetParams(ss Stylesheet);
181  
182  /**
183   * Transforms a node in the tree using the given stylesheet
184   */
185  FUNCTION transformNode(n dbms_xmldom.DOMNode, ss Stylesheet)
186  return dbms_xmldom.DOMDocumentFragment;
187  
188  /**
189   * Selects nodes from the tree which match the given pattern
190   */
191  FUNCTION selectNodes(n dbms_xmldom.DOMNode, pattern VARCHAR2,
192                       namespace IN VARCHAR2 := NULL)
193  return dbms_xmldom.DOMNodeList;
194  
195  /**
196   * Selects the first node from the tree that matches the given pattern
197   */
198  FUNCTION selectSingleNode(n dbms_xmldom.DOMNode, pattern varchar2,
199                            namespace IN VARCHAR2 := NULL)
200  return dbms_xmldom.DOMNode;
201  
202  /**
203   * Retrieves the value of the first node from the tree that matches the given
204   * pattern
205   */
206  PROCEDURE valueOf(n dbms_xmldom.DOMNode, pattern VARCHAR2, val OUT VARCHAR2,
207                    namespace IN VARCHAR2 := NULL);
208  FUNCTION valueOf(n xmldom.DOMNode, pattern varchar2,
209                   namespace IN VARCHAR2 := NULL) return VARCHAR2 ;
210  end dbms_xslprocessor;
211  /

Package created.

SQL> show errors;
No errors.
SQL> /

Package created.

SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM DBMS_xslprocessor FOR xdb.dbms_xslprocessor
  2  /

Synonym created.

SQL> CREATE OR REPLACE PUBLIC SYNONYM xslprocessor FOR xdb.dbms_xslprocessor
  2  /

Synonym created.

SQL> CREATE OR REPLACE SYNONYM sys.xslprocessor FOR xdb.dbms_xslprocessor
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_xslprocessor TO PUBLIC
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.xslprocessor TO PUBLIC
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON dbms_xslprocessor TO PUBLIC
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> /

Grant succeeded.

SQL> 
SQL> @@prvtxmlstreams.plb
SQL> SET ECHO ON
SQL> SET FEEDBACK 1
SQL> SET NUMWIDTH 10
SQL> SET LINESIZE 80
SQL> SET TRIMSPOOL ON
SQL> SET TAB OFF
SQL> SET PAGESIZE 100
SQL> create or replace type body XMLBinaryInputStream wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  e
 20  881 26c
 21  cTms1PWquDBBuSqrVIv/xhyOz6Qwg9eNAPZqfC9A2sHqaASEFmKJ5v17hTyt84WwDtCgQfJA
 22  y6Sr8loH+fjyp5B7Dw1e56LW8/G5uRBPA2K6/y8JlQwwPpGSvHHYvJWbTvZ5PArElVt8HR2p
 23  WfctgwEr3oWkASsW5f+Z4EWOIcc8u+/VcFdENQ4xToUHkHxNywyDOKs76zY5ARxGESHcoySZ
 24  Fwlu5+XLrohS9KXONnpiRwqclVxSkEKtbyj2GpF6ztcP1/fOMI9JJ0qjmdER4URvPmHkwq22
 25  8WO8d0sJXUTVFzfD6MlDNauhIDkNXjVvSbzofC4U9jzUBehz1Eru7fxi7fPMzUU+1NQ/vAjL
 26  qhP+vULN2l9Iu+2SruJaDG0bXfbwOR3GbgJKmhvMESxG+aSDj4ZHwkt8NJhCU2RVxC/Uc6Rf
 27  r31rsUVmV4MWSFTfAYTlU47eQXvLJU/ejai/q3JGLGbk7UbtJJqftebPVVMaKd1vihnI+Ott
 28  la7ntN6aCGT5BrMKengRC+T5sE6dM3nBU2jRYLvBeRIbja3urpqV5fK/jiuw4teqVATACUG7
 29  OfKN8YURHjnlsXsgDlTCzLSG/73QCixwXdes
 30  
 31  /

Type body created.

SQL> show errors;
No errors.
SQL> create or replace type body XMLBinaryOutputStream wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  e
 20  91d 264
 21  mmuPhlqTYPtkPx3luzMHj17qyrgwg0NcmNxqfI4BuepoLY0v09Xz1raaoKduHoUo8ht3Nzf7
 22  RuWfj7tSbgTs0o1N/KmlL0PuEs+5rUlhO/JGwwieQZlYvBDYPA8nmDpoSEfJc0UjW8kbplhm
 23  Cw3Z2CXI2pfYaY6LmeBFCf+n/5K9hZ510WcvEWE0gTILOQ0yAwsyqzvrNjkBuZM6gIYaec41
 24  GMc1Lu6s85znKNDd6xU0MKdxlL9YSRcI5wHsbLeQbBUd064b+WAAazysmeyEN+kY2uFWDUvn
 25  62dNHEGdxkQJWMUKapt0tmw7VuwQ269R8dWr5w+dgjaTbvg5V4vYp7k/rvwrBlfMNnn2U1An
 26  23Qst0GKVaEAgROWBxXTR6v9jR3gTDbzgfzUDgUlWGmJowGFkNQeYwYGVPXAzB31x39tP7tT
 27  e9TpBBfmisnDs2Repmu50NpRm2gOeaYztXeqC/aJ7pKThWOCbd+ZHcBpbXhG2aE3auzGREi/
 28  kN35W83DKFjDOYAzUAU72oALsr9Kh9m5294WdK0+gFCrijKYpLDyoZGOhopbbbuSB/MeLGfX
 29  8ffggP7ncvE8xug9kiNOsnVWHnQ=
 30  
 31  /

Type body created.

SQL> show errors;
No errors.
SQL> create or replace type body XMLCharacterInputStream wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  e
 20  a4c 2a1
 21  Jglp7dzJkfoHgSuNm0Xpilox+Lwwg1UrLvb9fy/XQqqVdu0v5r1jUOx2oCXYYlBKXyJozo5Z
 22  513xCV/4tQpM3tfJtgXV1mvDWwPTQVj+GXoQU9eeayXgHdDwBmQFVTNCtcK3nT+1MQVzuQH4
 23  OUdvpnG3MtTHsLJ3QVO37EXjbIJf2iHxKxkCncr2cGE2oXC0cgUvWHgW6aeGWtb//eFt5cvj
 24  FXcjQ2bfTbioPjlWiL0CpYb7oj20sKlpfYtKW1TL0BVjwId0GPW2FH+WFQeHjH8JWqNn1i4C
 25  HZJ+1xrgXBZ4HnBEXYPayteBJ8dZbsDCFPQtFAdtaSufwzeBmfObqXv43ZK3mx1HzOX+dzeV
 26  KTYzqBNa2wV/9OQUJMggg1QF6HZfohIJnmy99qJ/8szeO8jz59iTHkHsPm1sjuurLcnolTKa
 27  v2Z+GGqDih6cu5qXUgzOU+87yYCfWdJikbt1hzuK3YeMRnv3XRdHnWXsjKU5ZLGq41W1yAOx
 28  I6Pxa22DFB9TFutgwPVvTGQI7Wetf5zOXe3p+R1efUVhfeDxmdCnqt1UQv+XewTxl5N/oXfY
 29  dW3cO66K5xfkhY1hQrFO3g2Yz7BdHODaMhLyDIcmCiJ2I3ik4gql5lr2TgZH66inijUcQj5G
 30  ux0xM8GLluzApLA=
 31  
 32  /

Type body created.

SQL> show errors;
No errors.
SQL> create or replace type body XMLCharacterOutputStream wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  e
 20  acc 299
 21  VsVt2wh9BoZcN8V/8Aw85stzj1Uwg1WnLgwdfy9AAP7qR7Os5yOgMIUbA3nK2j46aRLxZqwf
 22  NfJztckDE8KYg+x5lNt28oP6NEKCTsh3O6fnAm/VME2OqpMgPK4FwfA/mrztIM2fTjQ/RMlJ
 23  pnG3MtTHsLKJQVO37OCXrIjUpKvNVSWYSzmTRMGZyDZAVQ9Gd/fWg3feWSp9NKhLTZdwFM8N
 24  h77U045XnI7qYgS9ArjHmVFNigulbPUy+tYfB/guJfU8Me//99t+0xuSy/D35iV2xdieinaS
 25  GVoHuBykPe9TssJn7B5DJyChm57MsINyUb9Hd/ceevObXIy2onuE8WpCV+Pd8T0qNJdeXvFL
 26  oo4dDeb2Al+fJ2xeb7BQjX66nDONYfA5qi1A+pF0cpKypFarIZ8fOhg04xXzaBCz415cCUnc
 27  PaEAEUIujc09Tb3Nwb/eIYDusvnF3SSEuCjuo2PQuOiFV8ABNAlF5/llwID3UlbMHaz5vRtF
 28  VmJFYENOLv6xkx4O30ohBBJ/YyfQWQxDpFifFIwQosfnYo3EbadQenudPhCOelSSz8dx3m2M
 29  16/7v8x/66R2+SjvYkJj1L7Zucn4e2wzBW0qdKc//SIzfs7deLobnFVqzV0xVke/100k/yKm
 30  4o6tlg==
 31  
 32  /

Type body created.

SQL> show errors;
No errors.
SQL> @@prvtxmld.plb
SQL> create or replace package xdb.dbms_xmldom_icd wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  235 144
 21  NhEGdSftRzXC1neO07GaHyVYvHcwg433LSfbfHRA2sE+IYuP6OJYw7pSRzHyyEMeeUDfDGtr
 22  hJwiP3LGs9/q8vobL5oH+Q+27B17rDreQpYs2R7kYYmcwYh8Ho9idVbm2GxJ0913IRDJjD+R
 23  uBrtnBrJpa9hdEE1pVJb5uxDZb/XFH1mQeryJYxrPIqxaOK6/UKg9dvIKcSl4+A5ifgkOw+K
 24  8vyN4NnuJwXWxLB7rqiNxbgUtU9xpNXe2x3MDjBIyYSbLHd5SOnGBCY7HtevZKU7Tgm4Ymx5
 25  +P946vDbb4qEWUOO1qQLCNSfv0+wwYkG
 26  
 27  /

Package created.

SQL> CREATE OR REPLACE LIBRARY xdb.DBMS_XMLDOM_LIB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  2a 61
 21  u0fXTBA7JPShhiw+OIU8t/WZFHIwg04I9Z7AdBjDuFKbskrQpYFSCP7w/gj1Cee9nrLLUjLM
 22  uHQr58tSdAj1yaamHeyZJg==
 23  
 24  /

Library created.

SQL> CREATE OR REPLACE PACKAGE BODY xdb.DBMS_XMLDOM wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  21a21 3eb3
 21  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
241  
242  /

Package body created.

SQL> show errors;
No errors.
SQL> @@prvtxmlp.plb
SQL> CREATE OR REPLACE LIBRARY xdb.DBMS_XMLPARSER_LIB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  2d 65
 21  yaXTsrNcb60PuA23WUNxCcxWNJQwg04I9Z7AdBjDuFKbskrQpYG9uHSen7IY/gj1Cee9nrLL
 22  UjLMuHQr58tSdAj1yaam1fV0pw==
 23  
 24  /

Library created.

SQL> create or replace package BODY xdb.dbms_xmlparser wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  3cc2 889
 21  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
 51  
 52  /

Package body created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PUBLIC SYNONYM DBMS_XMLPARSER FOR xdb.dbms_xmlparser
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_xmlparser TO PUBLIC
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> @@prvtxslp.plb
SQL> CREATE OR REPLACE LIBRARY xdb.DBMS_XSLPROCESSOR_LIB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  30 69
 21  3UF8J+EWv+y+MW71AWZBMhFqPVswg04I9Z7AdBjDuFKbskrQ5zO955u/n7LLMygY/gj1Cee9
 22  nrLLUjLMuHQr58tSdAj1yaam6qmy0A==
 23  
 24  /

Library created.

SQL> create or replace package BODY xdb.dbms_xslprocessor wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  6847 114c
 21  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
 82  
 83  /

Package body created.

SQL> show errors;
No errors.
SQL> /

Package body created.

SQL> CREATE OR REPLACE PUBLIC SYNONYM DBMS_xslprocessor FOR xdb.dbms_xslprocessor
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_xslprocessor TO PUBLIC
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> /

Grant succeeded.

SQL> 
SQL> Rem Implementation of DBMS_XDBResource
SQL> @@prvtxres.plb
SQL> CREATE OR REPLACE LIBRARY xdb.DBMS_XDBRESOURCE_LIB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  2f 65
 21  uO32sO3XJ1FdNFUKp3VX9lck3Rowg04I9Z7AdBjDuFKbskrQuFKewLIzKLLAn/D+CPUJ572e
 22  sstSMsy4dCvny1J0CPXJpqbptrIc
 23  
 24  /

Library created.

SQL> CREATE OR REPLACE PACKAGE BODY xdb.DBMS_XDBRESOURCE wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  7ed9 ca0
 21  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
 65  MUPmY7Ug3T9zhiRkIDKM
 66  
 67  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> Rem Implementation of XDB Utilities Package
SQL> @@prvtxdb.plb
SQL> CREATE OR REPLACE LIBRARY xdb.DBMS_XDB_LIB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  27 5d
 21  zTKvgTLGyxLlT8Z48Fx4i+cNrOEwg04I9Z7AdBjDuFKbskrQuFIY/gj1Cee9nrLLUjLMuHQr
 22  58tSdAj1yaamVZqeYQ==
 23  
 24  /

Library created.

SQL> create or replace function USER_XML_PARTITIONED_TABLE_OK wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  98c 33b
 21  q5cVAL145rL1vNfO7US+GEsNyWswg81cBUgTZy/Ngg9/CXaVWkqNYPQjNeKghyg3OZ877Vfc
 22  D861nX1H0XDh9LZ38hAmD1TJi0dDfMYTEmxMJpQwbeitPFwDH9SNfhVMhtthFWAkG7i5xKDC
 23  3aMh8nfnY6zWfMIvi58yHDkj+LZjE7IK0mH3RZsN7Gdeytg1wfDhQx5iqy/f7MtR/IKi6mDL
 24  KfA9ORVHl/roEJZ5fa/g6bKscQOu6h+vdf1M1hBh9jn3MvvAlBnebkR9MMnfH48djyZn1o+x
 25  azGydPrTJ4DLy7zK0IceSZWA3x4NEhnvEyBbz6KuE96FD/XIAvNlHIXfqdGuAs70/Es0GO2J
 26  mArSRMHbZxMKw/rOuoDcoOf7hq49t4Tc7kw1RuNSWV2Gr+dDL742VtroLKqTjPDiGTGpXiaG
 27  ZmcZ0K63x7shpYXQxiV7BdAKz1yVGAdExSuVSCCX1pBvSustA954yFs0vJgHPYDoBpqBVZyt
 28  rw/BNqoT88+qHd7sy5Hml/ip8o8Ut9wckCH5WW+2pNKeQroftkeiZvV+UoYkp7WSOluSOrpm
 29  7GQaOsDsZCacFWbDv042xqUrKXf1+gz/q36VWxBd1cy6z4/w9mSYu/3ObvsQWDbSHD1avImC
 30  gElt9OWN65BiC35YapsBR2Ml0bFBoAP7F3roj550E9HVeVJxFopgEtXGPBaW00VHA2ENs0RZ
 31  i/IeAIbg0LeZ7BOKX0fLlm6G7Vhd/BOyOHpZcjrQ4uvrpqLq009J0yDCGgXeH/Yy7U43/WML
 32  bs97xgpfFAt7FswzKXjrXQgj
 33  
 34  /

Function created.

SQL> grant execute on USER_XML_PARTITIONED_TABLE_OK to public;

Grant succeeded.

SQL> create or replace public synonym USER_XML_PARTITIONED_TABLE_OK for USER_XML_PARTITIONED_TABLE_OK;

Synonym created.

SQL> CREATE OR REPLACE FUNCTION xdb.get_xdb_tablespace wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  ed fb
 21  2h/qaunBX7sFx0i5JhjdJGiRqSAwgwFKLcusfC9AkEIY/VlQlMbUa2IHcI8n4jvCKg7bla+i
 22  OSyaxWC2LkhFtZi7+RW3n42oVygLU0+SfJ9zAVNMmIamX/+Cr4fC0WwXynnhacxKO7flYJi3
 23  q/siOuCNYulRuF7MXegtVIyfpUMd+jmM21gkXq/o+yD31swFMJToiiatiYUIPfZ/iDzIYb7s
 24  gqOGkwvF8ePtmbXjlQOeCdHJKIgPAIo=
 25  
 26  /

Function created.

SQL> show errors;
No errors.
SQL> grant execute on xdb.get_xdb_tablespace to public;

Grant succeeded.

SQL> CREATE OR REPLACE FUNCTION sys.check_upgrade wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  257 1b6
 21  zDWDG0+FJ5JoLcmAxvqLjWZsmMcwgzIJ+txqfC9DbmR1HQmjPuZEy1qi6cBu+mZsnwjTU5Nc
 22  522prOynu8aT7OmsrTFOyYvtQp8aiFw+F2m8K0OYrT+disSulOfDo3znV3LIfMol+8j+iD3m
 23  wPtMfJBbFs8SJ2fpiad8ojU2LuNTo3Fkp7yV63VSN+8i37Uf3KlSl26ICM2rFcqc1MnRzjlY
 24  KZuyr8iaL6hSf9Iwj+ZMEMND+/xqM7jY7kK1gb0kwSDaEpqNlFMZtHFoVhdq5l8JQECbWcF+
 25  e9IlHuozDlW4cVLl8yz3JyrM60Lz8JTzxewEryxdGue5cETFNYshYHQNkJ5eyFmGT6ODKYXm
 26  2VDFq9qC0S149hvoXuskGato1MOF61QvAkjVaxBMVxDnbCHcoaOgxmbxoZmjhST4RHs8p2I=
 27  
 28  
 29  /

Function created.

SQL> grant execute on sys.check_upgrade to xdb;

Grant succeeded.

SQL> grant execute on sys.check_upgrade to system;

Grant succeeded.

SQL> CREATE OR REPLACE PACKAGE BODY xdb.DBMS_XDB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  12c5f 2c3f
 21  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
176  dbe1kqoqbXRT
177  
178  /

Package body created.

SQL> show errors;
No errors.
SQL> create or replace function sys.getXMLSchemaDependencyList wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  ac1 526
 21  S7w149kTgxcWOe6vxt4w44hWWeswgzsrBUiG3y/NA53gM2vIRiqsorp+qQTRygz1VmdmTPGD
 22  266seCv9HUqkhRnJH4XGvzADFLqhN5/0cVr/AoIX/3QhYhFWXmDuZPy4TxcG7i0joxs9xw1M
 23  XAUHLDEjqqXpegve4T5EHFWyN1XMFT0pDNuGk9tqcKamboWsXuOC3zdGWhVOiejm6AjK0xaA
 24  W4LA0CP/hSiWltb38Ra/OLqb+ucGRpUOpzNCgjmjkVi2RhCsrBeDDlIyeSz3ba2z8c/M1EQf
 25  dLYvBE6OR6EpXZlOcYyMSAJHAbFJOUhuG5FIh3oS/1qi2rClkk4Np8xLbW86NjfbzmSgLuzb
 26  frymdXyn9+MGcyGXNszCigw8YYiyG13fY7IwTdVvBmZYXVFfRspxh3CzWhyNIZf0ZA3ShimO
 27  z507YIgTBeFbntNEAabn0CBMmJimXV9paWOfDZ9LthhddUrsxQtXhY76uLWLC8a4ZeYgQ0d4
 28  6PvPBGqwUHozGbpTMgSPQwD0maHK18fxGvO5NBANJhzLS7HP0Z09/c4DGQCv/B7C5PmgPtdz
 29  HHqpsbH70tEohxwKRcAiPNUEaguBc0sKnJb511ym2c2en5YF5WCvLn2TeD6NWYItLz7tDci0
 30  4r2A3xl1R1yxpA+8XrRlWextGzKY//NQKfZwLfvR4Nx8AaGbrYbzD87lAEDKQjV0H5AcE7Yn
 31  RsbV5GKze76GJiGDYpvglFyrZGTjRr+sU96Zd7hnZLhp2MQnXgCcsvyEtMOq6v3SuJ4DsB73
 32  WVHTxtzeMRiuCyNG1G0imbQsp4H7hzwHxp84xqMfRZd5g/OSgK8UPoJZ8YBYcvp6beAGC5+E
 33  pbhYnUEHFCTHXa9qSJhcPj9z+4mVbVfvpXFkv4Gh5U3aQP/MCIxJ8IILxmv/Lca46mRpqTgR
 34  WQBqbGkBPQP2GEwKl+C7gn7fwXDykXrr8uyQ6BWEKitg3AJosCVQLz0/Y1nck2t1yZXlXs00
 35  +A5C826loJWrChfjjPmTMU2z6CN+asYKPEwDXtDMNl3Ecq+TeBGIt0hxQdXkDBdGOzx9A62f
 36  oc6HE6BizWjURomGSqBYXwCTn/4uUH1H6SejOhZFbCXcDGznQLgCJFUwSkV7K9qZ2Pdi1i3H
 37  B7P4NXUEFXjW59aC/iwSUSeF7tRUnJ6cOwq2UHuAMmnbYYDkpi+i8zz0rlseBccNgtykQz8H
 38  2d9rISn4MDO2GIGamYFObaKlgoa11D2JJjEq9+V7iHZ2tABTM00HNbGM+JeisxEO8v7ZJMvW
 39  0Jk=
 40  
 41  /

Function created.

SQL> show errors;
No errors.
SQL> grant execute on sys.getXMLSchemaDependencyList to public;

Grant succeeded.

SQL> create or replace package body xdb.dbms_xdbutil_int wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  754e 20c2
 21  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
136  
137  /

Package body created.

SQL> show errors
No errors.
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_xdbutil_int FOR xdb.dbms_xdbutil_int
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_xdbutil_int TO PUBLIC
  2  /

Grant succeeded.

SQL> create or replace package body xdb.dbms_csx_int wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  6961 17f4
 21  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
105  
106  
107  /

Package body created.

SQL> show errors
No errors.
SQL> CREATE OR REPLACE PACKAGE BODY xdb.DBMS_XDBNFS wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  2f2 1a9
 21  54jJufkNWstGtZerSt+/+UOqhXcwg40JmEhqfHSK2GTKZa2pnBpVeik12uZ2g8psFFjktarM
 22  l95BAvcrt/V7pLta8Dy7eQePQLhAj8tlkKyMK90Yf3kbTwZnDmeYBWXydFyY1lrdM1M51IlC
 23  GYSOhkttkY8Y8p/xVCkqfifOaOL91o6rC2AcekBH58AbZFGEydA92D+3KwCmemyRwu1I+hwv
 24  K5UOkhOXaimSwGOx7WPRnHYclz57Yc9ygj5ppQtZ2qUdbJTRwbPClyeyN/xb4pQ/cR/qaVli
 25  TOmeswUhfOP4o2aBWpBv6tSSJkSoLNShBdX6G0K3Rbhkd8FQmVhPxSa2WcQJjYqGVEUAM2Xp
 26  8Bmosci0I881mtfgPHOcO5yh5HkvA5r4l526EH+1hRY7PCT+zmQT0CA4p6A5
 27  
 28  /

Package body created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PACKAGE BODY xdb.DBMS_XDB_ADMIN wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  794c 1ee8
 21  nWRjbYqM+ZRg0Ync/671e5fnCMcwg80A9scF32H+9jrVUNuk8trl1KdVfv1Mqg5s1Isrp6AU
 22  jVf+mYBhdVQ7VkJsezKfkob+plvK+y8OFjGhmL/8WdO9206PNCzStB5zipD4XX53qq6SF5zM
 23  wD0kDDT5AXwUh11XCPgtrvIk7aF1S0k1oua1snMc8BXihl9qzHK7ruZP0uaabXNQLNBRyhwC
 24  u2TRW69Luw+vLwcvtZ5Bsu37z3YjnCJCNZxAje0aHxUEszpEeiwwak69VeDQP73/5paJn56y
 25  UOTR45ZaICFfOIfOezPmdY4r41pqOPjXLCqNLhgyND+qipUfspIoQS9KtTyZEh+HtN7zB1Sq
 26  5k9BVcbzF4yz3f5A13kXd6cQi15htB9SiRbL1u6+gzltWwAoSAKiF0n8jDckesEdlYwG4wYX
 27  wDzMLD62o2t2kpyMxPlBqT/F2G2VtZ3WmCxK1JjrTLX2JUwo4tFo1nh0vAYchKp8m6anjFf8
 28  TM6ch4GL04pBjnOdR/lfJJXoPkrrJgu7fo94BtkIfVXIuf4lZKERfEbwYrIt0KUVxyTUlIwt
 29  sQqtihVtOYwDA8obngAFW1//+X9ucfFu9t2cgiTYtOpa/gnSnAQ52iLYQaatjZGj6iN1X9T5
 30  L8bG+b4s8bGwXWkpL5WcijYG3fCMhM7ewiIIaVX3aFsS0mEz4/mthbFLO4SWVR6yYDUs+KW3
 31  Jde8CDnzQRbj0YljX5AjalQpRnzR3LIR+8TPzAD6iE2OqfALO7aa6XzPmbXdVou9tD2pcVkO
 32  vihuISnw0Tcz23ZG45Qb47DFaXum03uxuGUES4EZI9aXHZRdNfKC9LpH+q+DbE9jAxCn5dFa
 33  WhfMxrRDRyQoQCOAV6HSIieCQQbp9yzUzRZTdijkRuDLTEvMZmmXgOfmwledOGaqznL6FjM6
 34  VtOW3u4BKaUmf+kZvnVRoJR6d110ot6Eo9NTb/LZUS06ELA2VeDYoCt/3yBHxotwjeOyG/PP
 35  lfDkN5pt+tf8OFgq+TxWVMETuPUmfCXXwS4SMrVkik4QI2ePhG0NkeseHfHuwQcuRSLKKDub
 36  Sx4PcOefRZNiuBgpLhmmgmjI4HeYmVDYjaErzT0g2fVz8W7xW2FHDObo2Yh5nfkCYcnONyqX
 37  HWTBiCEqwjNzIzJP4gNyYsB3RvmA2BenKJ2vrlAW0ECLQ9LRbG06ZD5SVbuP+bc4KBqPmHDO
 38  yfWPRWOB26KwuDTP8oN7D8m4aflnz7OAaox+Kk81SbEAoLX1yzcA7B+Wp2vqGlbDfvAi+v4b
 39  rqWpxgBsZNA2z+mExs3grrWed6AE249DY5oo3efFpZ7bheMIGr2lr8e9Q7rTnk7erHgaNZhB
 40  JfjjluRrtFsQ3Ub934wif+zbhqFoQJ0OK3Rco++dtdxxwpJnHLsEyb7X0bibIll318E2KaZa
 41  lsO3tfZbzMDzzqgBNbu2kfgQWKuZe/yX+KxCd9e5nZo6QGj/64H1EMf4WBrZKYFmkIif4pck
 42  V4R23M86JqKa5LBXASTjfVGVzCrfSbvlMVwb81FQSwYZgEHXeIp1la/XW+hXPE7GUnyrJ/xy
 43  2kWD5zw2gfc7cSvQfRmmqBKMvK68AGyatfUlPkxYnsUQhnyDKGoMssp2xZKHa2y1/B3GnByh
 44  LAH/Hkgl6SO3UkptHwUULDwK2qbz3SbIk44ReTzo+yXN7JwxYOwOtVRgK491wMn5RMaLxNsX
 45  4MSCdmwQljPxeIy90lz7Tx5ijXihIEvPAhxH6GEcQSHZeLr+YGNeLdX1zhVEyl2+madcb7yA
 46  cVFTlnEy2sKr/uwAsMTquiMDCrlLf3zD3Q/mf3k/lICen2IPT6wHeB717GMUjCHegABClEDP
 47  stE2+6JbYshUmS9UYhXbTs882ynf/uv9bustusPDnQuC3HhG66I9d6JR82rY2sguYjNsZ2PH
 48  TXFz6imiOGqfe4qXnBd16FnDDecMYzvNbsLRt2g3JPx+4aGenNMHXLFpyFK8NmPR7w5k2OeF
 49  4mFL0vNzaZhJT+htB/XrMLIU/qtNi4F/5AA3nSTdmuouxPbMqG7NWxXwyqd34BU94npmi3/c
 50  FOvD60cXMr7crtvpwAP1T5R+D17bFJXobMTy/Sfz/u0svuSdBkoq7jMCPHZKXWwq3vZm8DvF
 51  NQCO0dtTxQS0gIt7ptoA4wgDX1PCdjKwbVZMIAtNZatD7/pV/F7lTv9lsPWhscylEur56YCL
 52  4j5Ye12CJtJLVEy3YP/a2bxtFa2sAI6xzDjeRazG1m9115yl+1YvoNG0LSmwbxbpmX7WKIqq
 53  oUBTFqaeEpuSH/qpRqp3/51V6B6JYhU7HDTz9QMtt3+ZgIhq8NfgdFWuSD6IRSXBd4swvW5t
 54  IUpKqdWkpKTB2OM6sUZJudcWw6nrXO6VkuE0Spszs1SPxv0kuUxdtn9M0RxhZ0+322Av72Kl
 55  h5qygH+2lGXqVpoc8izwLoP3a2wpQatCgzlcOkgjaqw28HVs9GBFdgKhnAuOFt73ltz2N0Nr
 56  Z/L49Fq3fsKUcJ4RqPDTRHsFDZwbW/Rp8JBFq0CYOrFmMZG/MfZx2VktmMVvYOuhF/FKPZHl
 57  oHWR/uhTdglA90zQK0ygbNk9EdEAaHJN7Cdcnt/eYCLXeMdTU16x6RBY8rYzr9c6plxmsy2v
 58  z6isQ268uUtAHinXZCj+oRnNVEjpSss7SUixUziYFcyAjgCYmwgh6ZFtlfgC9aniKcPfJGcQ
 59  v90/nyLrW3R1kBOdkoIu2mX3Pfo4wVBAHA/iYxxJ/LDrMeAyTtVYY4iFfY7Y4jJFP1TRwdnQ
 60  24saJtn38t2C+/LuaGxPDonsOI+Sm9A14bS7UDZlzTxKqnoioHnUQmbsWMhAQK/typuY3GLy
 61  Vr5/dvlPYhHsX+18uYq2e1V4qcUH1bJS8vY2pV2uL6ZHeMdHBki+QuD0+/za8YQ3Q/p1EIFH
 62  +zWK+uIzrvN7Gvg+M0zz0gUko/6JfEwDflC9/tjYL6CO6Q5sd/Bv/gWaUTjgPWn83sr2faW4
 63  gPmcuLGQ/76Qweuo7BhCumpSVmuNyVPBWhmX9MbR+CqJL/OIbVIOxUlKs96LXTeINfZuSyHq
 64  2OUn7NLZRbz+gOi4ImGz2kKDj32btO5iApwlFfN53Cv6lZK07lcdA/LRs+uAOrpePOlPXSXY
 65  YsbX/LQrYn4HyEdI08PaAnZtOHjcQf6Xvu+jvMfuE/keJZBz4s+cmWRTuSMnuX4NWUJUN2iu
 66  AxO6aSAqzSszOjFxsZ7R1zwK+Ht/jinoT0nLLYwPDhtGjyH+Plqw2j8W1psg5uMkdqQ2ZX3+
 67  SUbxoVaJTIoBQvaajdlGJCrIGFf5J/qkxIvdRdyp6RocxD5E/ArH8zNo2HYjmjJkmJojLsQl
 68  vH8bho0emGhsFEwpbAXCDDiflCvqGl0aKkD52in24cKh30GXPPe2otRxVOIplyaQwMkX+Wka
 69  n/xYkOlbSPWIZdE4hrNLZSCC3KYkxNJQJYQux25zCxHEZ7SraksGOqmwsYNB0NVB2lYgVZ3x
 70  pj5qf6rU7k3WLTBKcCFnf1AOVOFnDjeFUDUCwmuESzI5RNQrL/XFZ1A1BBGPjRyCL3XKUMwo
 71  aRmHgACpPK9/AQ/BED+p0YnuXSVTiq1TnpLqWY7Z0JtJfD6rl2GwM2uGtPlWJrTIVVC/UK1r
 72  +5NDq2XPe0l+5qMRNxQujKNX7Ki1Q7Q0hJUICyOjfbzosFwHW3GFVVlTD/pDr5YM8m2c3D/7
 73  aNIX3Xd2hN7vYipnnK597fZ27eZG4+QW4TMcbPlcL5VEnRfd5+3Hpt4ZOYWU27Iyom3PqvXk
 74  atVF/SMPzLvhsWyXg9bzETn3+2IxNXNQsDJ87VSUXzNiXR19/JCdLHPDMCKX7BO4Z0cFbT3G
 75  OsDvR54c+eT1pnkx9UK38a14BIt5s4mlftfXwS7AA6PJKQs8j3/3cXW+tkthc+6688re8/Mq
 76  N+/GGUsHP/F6PyX1s1upfDeECb4iiNBzSzcuLuUlvgbjPw8JwnXVA6kfdNFGDUAFum77bDr6
 77  UK+oehCtifAUaJbGLFu2WCbHOfkc3Stgty88mbrp/dJZEeaWvR0HSSwHeexdBVtUQDW6dOBD
 78  llPiiZnoSNfxLyuztRJ2pTtB5otd/4/b/dBboBQY4I4RdoxLCAAyDqQVVUTZruuVzxuA0X+4
 79  h8CbiUI+gVvFE2sf25Al1Bl6By6YRZqqxjYNBkjzIkN3zzmUUz4gwOnQe5707a6KD+YsvRy6
 80  NVK+kqI9UlMJ8Tt3dJ5CA3XPDLfMH209IA62mF94+pjEXkNWc3wQVJH0qNfwtn2KI+xQdIGy
 81  sNySWDo6Nliv+cAGBqBc4JBuR/WUmtgF/hw8HvVYjayxAUBxlNr1+mVz1+ysZurqjloB7UOb
 82  g9JhUnnZjQXEWfpRWAOOJEFGhIgFkc1XeCmKWErfeHkdpKAYxjRcU96BW/LdtOR0setBUpot
 83  drIW5IUJC+uKRBmvgGkpjml0bBPuA9chht4/yQ62QbINQark57XHyQX9spo2wfq6IC/SKacw
 84  3M4sP7Q7HBh7ySf34RWoC10UZvMYQ5QmPi5uAQ6OwTfhE+qzleMV2V5m5PdUH7dy4z1Xm19d
 85  MrApexGUSsBDW3OBiWKkcN5JXL0Wt6xeJkSc2A1jMmLMgmQQJ/REowTkjGfTk/VG+bNZzD4z
 86  8Xkw4LQ5AxUwk57almHY8lgLlHAVdNHOFzq4vy6MrUIq8/+Fus2CaFl43oehIe2nJ/R7ZHuA
 87  SUkunkNsteZlkjrjGpkE9ecaAIw+9XyrK7QQN4bLT+RTC3XOP0X/cFSVPA2JrTvcChaP7IdO
 88  IP3OwiZ1yJkqzB+R0ycnOG92xok1sC72Yk4GLWW0BBN5aiJ3WAqv7r4nqlRZJEhnxiOViVaS
 89  moeG2n4wFwURSuzZXBuX1BEPxCwcz+rjECc/uKrLguKZsMvX08M+ao+x896sZoAvTh1toXyE
 90  yHvKo32A3n8HWW3aTKMVviUGh4lv/qe4K8UJvU69PZHm1OizmJs77OVrVJxFYHIEOdCvJUOt
 91  scN+/2YPoJcES8afMagt0mX+pKMQY8l5GMJ6FQs8FlUCE8MyzdncqowoXIErUeWiTCLDs5xX
 92  FpZ5zBxMFEftBvxE0edCi/6X+5Yxd0LcHFwGPZ+HP9gSMs1EgScydfTX2rrFmmx+tuSqneTP
 93  n2xzF7621iitscoYfm4QULQYhXKsl5qKuzq7QoQOh1l8sJvgQdfq2fXoN5cEOT3FzmGxetvE
 94  5tm8kEhN85+QwgIXXUhFz6YSHk7EFXwNbAUMQrx3NtTPZG7zMqQd1XqiXNmJwZE8VDZ78vsO
 95  o3F1VIgt8WRz2GhTOSTiBoUSC8e9kE+2bU8CiEguftUtfPCyXLMltq2zPHRM1QrmImAohHvi
 96  Y+Czo5wmF5cfkxgBe2ULgoxjZCCWQ8RrSE1u5yciB80WxX7F11w+SiBOL+T+VF3cYj/JiwGq
 97  ZZDAKLmBfm5tLVagnI24Ty+5vj5k/dhwpZGfmT09h8R8TwCX6M2BlscZvG5j0LRXgP0YM47J
 98  2CEPJtEYndCEz5D9RyJ15KlH12BPE7HcAfIIjigx4LPifja+UUjFuyQgD2SHo3vXbdwB2S8S
 99  19WKAJxqy81qXiLvg/CLJlQ3bw490Iq+d7hReOTbt8cENY774PIixcv1XKBpjfu+9W3rzH8f
100  jIymKRZwNo7KKrMRSG0HfkM0mTWtOo5DJdGNjWuG8DgoHUCUxjoVFkFivvZI/QADXKKiv0qB
101  /JaFe+0/dZbJKvzdsn9ASRRTUObFmziVQy3wDEu2eB4+AxPSyQ1uLrFPPjH3OYXEkqlNkxxx
102  4732GfCHbFxJF3LsCgO6skIyMVTXsSF2czAwaM8nBtAtFhXxy008vVG8yLdKAn5Y5XBLZ59L
103  JCcbtEKxCgdfo2BP6JmnRkXcJH53FJgXm70AjDZJDbL3xd479Or0gY7W8DnSTpMcQHhwvutD
104  9Qg6mim5M7iHnkfhS+TRvYtvu4kGoZk1vYYPlDIOD2PToPnE7HearSLk+lBHCuV0ccLk7Jyd
105  LCpiMQbap7pY/OVfIDtpV+Ovj3xSpuZ1gv6WqrkfULxsR+q22BrI89c3+xBJ8/xljMnM7e+8
106  K4AYqYnBzfjenxOO7W3I+YZVZjgMGv1r323I8pVGp3hdCBby4mIgvYEtkO46opT32Xq64lAP
107  bbJPGKailZGXCrsrAtNBgDKOzgjyziC8Pjkfl7/5h1dtFcnJMNAOzGyjOpgjDc7ceMkebkUF
108  IcUx0Ti6IpSLnmyeSpzA7Es3EOXZC6mJsChhifWvNKIJl9N++pM3BK4yXTtDNoMBcebZGtkC
109  s4caCVkUbdoDmDVpmZ1O5Y9wlPnjGGHfPGSk9OMs1IxDhVUduyVSRGcEkT2g6TZ1z8t0JLek
110  2Y9x8jRxSmr0fTUPZkg+HioMk4bbrLZyHeJkmWRV51If4401M5y6GnQKnTTv2jCAQV39JoaI
111  zPWLF7jxDiqlFdH3QV0b7mU8iZ/+STNfjwqivMK6kZhzXt+qYZhnw1taAjvD6+SoEX0EipyD
112  YW2+i6Gq/fH61zgzx4nhLBnKM61zwoXGK0mcaW1HePzxUCQTNta8m+WqsZWavTf3gpxmXwsw
113  DUYaju6YG8TojMI/LrF5uXEhT50/9LNA/8shdtiI23+JDnk1RRjqUXuY7uyIPfwGWCd29mSU
114  qK5OSvdJi+Pgn4osHBAKHfKfkOn5SURokUfLzNHf4+R1Fo1ERh6ussx33cUvR0OZVGPKnXyN
115  p8Vw+h2WSLPVoFMjG+3jKIHhLrPs+uj1a35YJWgCAHoTDK7Moew+G10mYi64GwXiwGTWmZ6a
116  T2NfrYCx2nvlBrP6vp2HvslOX/KCawaz7pc5YgzVbA+O7TJijEHxNWRLYBZjXivTaFUYU82U
117  tboCGx+WrfTabPolLaYEbG0AHvlSn1VAnVvE+uC85CprgUOV9qq1QBZjM1IIQ3j4LL6SoCel
118  LDP3Uheu3v0PJ7Z34+ZvNcyEd6yuBnCmFqZ17saJ4WcYkmpXJyH2u2rtWNERJv4b1zm4qQiJ
119  bwcWfzlxjcdYHHDAWapO1jDpV8B2IHzdNP1P7bC9OrKHerdyeq2wH1NZjjhsQyZadsESYwMm
120  HJUjSefzCN4qrijZtFpn9Fqq/TevkZ3cJP+cissXsb8TNiKReewFf4ewLKl/YiAlLpyL3L9M
121  Ho5WlDb0p/9q0L7rGOP42tjeT0akz2TuCkMHOsYHMvwAkQp9Tps5xvZaacnqWkuWj7SWg5Ya
122  Ntgfi5x3ewU/D/E1MR0Ftg/VBZimLn8alDxcZO7YAzZiw4o/KkBrOfBZS8JEArz/MxS+Xhl2
123  XB/x3eDW7IkjjCqSAcsGdxeSSGE/VBl1okc0R9V0IQMBMBA/1YQTcsDark3eVjbOYTt+TzgH
124  L8eJs1YPcJAxxZ0GbWdV1lZSpbE4Yb4xG4c109J65On1mFpBIhCv3P9FPemkEhVMk63OURWd
125  Rzp2KYFVd1JgvxTyAMScojwHrvBnIEPUs9hLNIOz0lH3pIezTZ3WFGSrcJ3W8RNIzhNpDSdC
126  024ogGuu8gHSRkja9GQGm9m1WZ3515LAZ+BzsJti1SfUIIcSGy4Og/xvHWjPjfkj7aOC9OdT
127  Zo0dH5bHb2RAzBXBJ3tyP4hNcpubZElD85O25ye+/RqayzV3tVMfUdJlpP8T8W2rnYCCzNqx
128  kgCNTGrgbGBanJSxeASBP4v/2PHeyxQ2qf1ZUY9iY1C8rkCMvxxRQTh2q0WY0AYS5QTo4eE6
129  Uw7hGMth1maMsz9MwP6q+R2tJP9N
130  
131  /

Package body created.

SQL> show errors
No errors.
SQL> create or replace package body xdb.dbms_xdb_print wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  399 158
 21  efZIRC8Tykah8bapITrEvZ7Rs84wgz1pLdwdf3QBvGRLew0JHxpIkG7bdvO/3F1dotqQwzIp
 22  acP7HU/QHUmBSsuOG6WRJCQk7cHjM/v24bZobzOYhgy1YZqBsMFq69XOw1zMrGyxvTVRdpXH
 23  SNaMQjT2Szly3Uz2WqeDewbPYG9Dq6nfWEYts6ctbHWt6+jwgnNUeegFOb65GPO6OSA2AZkC
 24  aB9h4Z4kks8o37grXKTvGPLlP6w6qdGUHLGw195EHlvrmsgq8cR11mdlCmRdqLsylx9d9NLg
 25  TEz4wU/PgTMgvIFlklc0eedDsQiwsbVJJC3aE5KlnbxCW7nVs5E=
 26  
 27  /

Package body created.

SQL> show errors
No errors.
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_xdb_print FOR xdb.dbms_xdb_print
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_xdb_print TO PUBLIC
  2  /

Grant succeeded.

SQL> show errors
No errors.
SQL> 
SQL> Rem Implementation of XDB Admin Package
SQL> @@prvtxdba.plb
SQL> SET ECHO OFF

Package body created.

No errors.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

SQL> SET FEEDBACK 1
SQL> SET NUMWIDTH 10
SQL> SET LINESIZE 80
SQL> SET TRIMSPOOL ON
SQL> SET TAB OFF
SQL> SET PAGESIZE 100
SQL> 
SQL> 
SQL> create table XDB.APP_USERS_AND_ROLES
  2   (guid    RAW(16),
  3    name    VARCHAR2(1024) unique,    -- we should not be able to register a user and a role with same name
  4    isrole  VARCHAR2(3))
  5  /

Table created.

SQL> 
SQL> comment on table XDB.APP_USERS_AND_ROLES is
  2   'Application users and roles/workspaces'
  3  /

Comment created.

SQL> 
SQL> comment on column XDB.APP_USERS_AND_ROLES.guid is
  2   'The GUID for user or role/workgroup'
  3  /

Comment created.

SQL> 
SQL> comment on column XDB.APP_USERS_AND_ROLES.name is
  2  'The name of user or role/workgroup'
  3  /

Comment created.

SQL> 
SQL> comment on column XDB.APP_USERS_AND_ROLES.isrole is
  2   'Whether user or role/workgroup'
  3  /

Comment created.

SQL> 
SQL> 
SQL> create table XDB.APP_ROLE_MEMBERSHIP
  2   (role_guid     RAW(16),
  3    member_guid   RAW(16))
  4  /

Table created.

SQL> 
SQL> comment on table XDB.APP_ROLE_MEMBERSHIP is
  2   'Application role membership'
  3  /

Comment created.

SQL> 
SQL> comment on column XDB.APP_ROLE_MEMBERSHIP.role_guid is
  2   'The GUID for the role/workgroup'
  3  /

Comment created.

SQL> 
SQL> comment on column XDB.APP_ROLE_MEMBERSHIP.member_guid is
  2   'The GUID of the role member'
  3  /

Comment created.

SQL> 
SQL> grant select, insert, delete on XDB.APP_USERS_AND_ROLES to XDBADMIN;

Grant succeeded.

SQL> 
SQL> grant select, insert, delete on XDB.APP_ROLE_MEMBERSHIP to XDBADMIN;

Grant succeeded.

SQL> 
SQL> 
SQL> -- add the AUTHENTICATED role
SQL> declare
  2    ret boolean;
  3  begin
  4    ret := dbms_xdbz.add_application_principal('AUTHENTICATED', XDB.DBMS_XDBZ.APPLICATION_ROLE);
  5  end;
  6  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Implementation of schema registration/compilation module
SQL> @@prvtxsch.plb
SQL> create or replace package xdb.dbms_xmlschema_int wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  2727 67e
 21  zQxfkPNqGJIYACO09I96Km5+RwMwg82jr0iG3y/Nkw81NgC0qcwObRnAUU0t19Eu5RqJ20k4
 22  xGJQ4S6WBYQknYQYwhajUUPY7aHz/b3gXoJduBkSavdu8cLQ9R1dxHJyD+yqT7WSmx4snSSq
 23  J/nk+CzmHifZmRUnOzUrLnlntkjCX8gJ1TnpOzcRtLheN99+mdpFEbV3oy/R+h09fgyBB5Qj
 24  Wbyj0OYtMRzmf/yLco3TZwElMNb3uwx8awCt7siMs60zlNeVuAKJaqPeOcfwPYygoU9YiMjf
 25  8WJbeTv+PGSO6O7CrLJ90uYBlY0h99klRbiENo0Tg8JG86G/Z7kvM+jp4n+NvAPJrMFTikF6
 26  zUadrO9d9+q6FY7c/sOTCvEnbt3Tye6A6hpJ8OBaG9dDyZSlZgRH1HVpwSTiI26Yrsui+KgT
 27  FdmTYRFTxHni1j0G9Tw6rgh+TIOlJZsZh5hRV3VpQuxteAE0PgFU3eLRsnFqFYcmjEw0KjJx
 28  zKs6Lquh3hTWODkoQqCngdEkawLq98z5RWXAKTWZT0H+FNUDeCRwws0cIPySLKR64zFcRAOr
 29  UBqP3HjbdoKBpN5DPJDtqPdHqS4NB0Ho0ClQRl6xipDnehv/vUC78mMKi0OjxhBoI0crjwru
 30  jX6eM39Q1gr6GG+0vcj9R7nj90kuU/PGbfel7+QgAfwr6IcmWZU0akeGYNVLuPADSKEJgb1z
 31  KKR63FKx1IJkWdfRw1JQWc3ySn6hEQF7J7uKjPnf+x/KUD4meSCG9qJfg11INOpLWJks82pL
 32  y432TAyLYHvhDf/J7hetZsUtlF1WkmaqOAcC7jDlTgrvawnlnmp2iRTdEu2sPvNvFQFX8EDl
 33  PAfaFB2dd8qItJBXCn9nRc8wWlkMS1jk7GBsIic5k9xukRCDHcGmGIn2dbWvPh8V8ezKs8eg
 34  j2NuKOO+6GsHlxDS3RoXpWBNZ/xNGDX1u7B+s9vR8V3ORD4i+riy2DzJM72/vZ9Pavz+WfzL
 35  q8ZqjqFJFt9uAKEJqgjOztX+pQ7bHdIX9CkSLqFBGOT4nwvj4ybsJ/F60xwQkKvOKPZVGr9j
 36  JiG0GM2HXUwnfA4sZ/ThBSuG7a6zEIAMfpSk3K/sST0887TEWIIf9gVHONWqg9n+9WEeIZb7
 37  lZ5g5y9EfiFnwSSwjIqrUDg0x7kqYrCrDOWZxNPo1SbWLVodMRQ+KP+vVIOtj12vrQQM2saJ
 38  9eXLBHhzbAFwjmLzf5a8/f/TaPQJwYCufjhaHL9qblO7XcKOiTVx3P9pb7yevIfvgOb/AiiN
 39  tkH2NXjJhTwzveQUzBDdsY/8btFs3MSakvzI1oU0VXC1lebfYbU3rncSfLJaHN7Abs+vor+/
 40  nW5X7YANVSOqAex14xzTY9DifvnuxDRJn9mW+CkmWZnVo4dWad7NGcmlxB95qh5XJG4d8pEM
 41  1wFvcsu+m8ZfTBd0XHEtUgyjcReve0AnLEi08qSNmIp0fAN+PxmKa00wCDf4PPbzJCi9m7Nj
 42  EcWoP0HUP0XvwUkC22zuE3rpWZ8C1lueluo51K8ig6qKxaYSXeH4cQu2OzguiruPmWeNtXqb
 43  dxFmQ0gGORdzl88sScuGo/BKQYW+KKrSiMKdjuoF3w91nPi7+R0HO9bj
 44  
 45  /

Package created.

SQL> show errors
No errors.
SQL> grant execute on xdb.dbms_xmlschema_int to public;

Grant succeeded.

SQL> create or replace package body xdb.dbms_xmlschema_int wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  729 357
 21  C38cjHERmJFujMtU7HjsRz/rYwYwg43DciCDfI4ZWJ0GVfFahw3CJ6PqgY8UKEuLtCaQ2EOO
 22  LdHrxfuNyuwjfSydH/3hoomzdgYUP5pO+D9n/7e7z18vHvWenT/RPD3Z4Lw/5F6WyT3rwvtI
 23  OHymhfDcfGKyrK8tS0SrE1l8hmsP8u81Fs6vLmXuyYXnCItD8ybco6JmMkePw753vb/XCzts
 24  wDLC/gRcf9ezubFqqqZ/lO2wvI8tenrujnAaLqzBbx4SAot+qMwNt1k27GEjgwbA3tVrnnaM
 25  rRBph+c7ihLKGd9iJW+RznMpsxoGiEFyouVlHrK2N0tG9D5IlzianhwFbBg6oEvRW372fAWt
 26  v/XTF7ZOOUu8wn4KscwRSXQFUMlBKNaus9cODT7N1z/Hzm0G3vIDbSEaOs+viBXMeQ8G8OD1
 27  qoWRDJoIeW14MfawN6LZZV6UIlBnPAq1yA6GwTOkTQlFTWBFGrP4+L7uC+y4mu3NIpNJGKWP
 28  pjkslmQity+mFzcSsLbkkidTNb/MtAHhj19jsMbEukteElLOMrAABfL9rRNx1vNG7RvEaXXT
 29  7xYbTTkSkXw+mWVs2XyUbkGsMTQm6kvisR6wwWw7sneqHgEDvLKs2e49geoRKwPGq6cD6bLQ
 30  ctnoP95w3GzHBGXOczRRxlwvNnhJKO7xwkOQ1qaHD6SvIf9+lTvpXnEORdUyNRXTZEudKUL4
 31  7dxA46/jDAyOJky4UqAKlJPcSDHaQjQIryb9XMR5EJrf+C9F0sS1Pu5DnBb8U2Y9zRH90VYz
 32  6zGNCWmVhe0yNycPufpBhwa/SiYJ8igI8GjAiid4IuQdDr91kg==
 33  
 34  /

Package body created.

SQL> create or replace package body xdb.dbms_xmlschema wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  2847 78a
 21  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
 47  o3ZBvMLqO4+jyFUeeMuCAay7+UQE7EbW
 48  
 49  /

Package body created.

SQL> show errors
No errors.
SQL> create or replace procedure xdb.xdb$paTchupschema wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  4c44 776
 21  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
 47  3T+1Q6rZH6fY
 48  
 49  /

Procedure created.

SQL> show errors
No errors.
SQL> create or replace procedure xdb.xdb$patchupDeleteSchema wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  6f1 2ad
 21  9lrMyhf/DC04jtA5Fp3jWVn1zG0wgw3DzPYFfC8ZA6qVAI7FLS/JKGE1g6lWD+A3FP2h6Pq3
 22  fUVnLN99hFtzOrfgsQwA2jKZtt9vJVW/v5oQwYPDdm3Uynpzzj8IuPgwv7X4a1fkenocilVz
 23  7rFiLTQhUzfOg+1MuYn1+KsfoT6eRqOjlqBqYqueFRutSALc06kz3vysrUZM95ZqEq/VXAxo
 24  OuemBLJWe93jiIq0Jd9CNJuopwL2j0d7UasponzvryPUwhb3mHVi7o6LOn5ZY9THXU6mSPJ0
 25  Npu8Sm6Tfvvi0FjKkAdq9VKsCYLWgzrdJMWfDUj4pRzK145Ai6nidn1gl1g0fAW3JSoA39QM
 26  OJC/LVFhimFnL6tagCKutQFmQv27KeAGZgzoOq7GJpkufSFuWcyN3GFKF/WDYhPnMA25ZiU9
 27  XVY25cO4WAQdHsToJ/y/WRX9OY9EtXI6bpzkaSlswhWAsXUpeg0ookjlq/AF0ApzqtWU6wjy
 28  8b5+7vRp+AOCqwC9V4c6HuCQlzpYc4KslYoNfR1DGLLIhqo/sk8WU9OB8yPKQ/+xYVKMp3ks
 29  F+8x38XOMFwG/1xAVS8XRmbimzSRQEaUYUXMratlpXHdQ17E0T4C0KWt+JJD/WOWcrqvc3nC
 30  YwDwCrgCa/Xzn+6YkqVbFmBGNA==
 31  
 32  /

Procedure created.

SQL> show errors
No errors.
SQL> 
SQL> Rem Resource View
SQL> @@prvtxdr0.plb
SQL> drop view xdb.xdb$resource_view;
drop view xdb.xdb$resource_view
*
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> drop view xdb.xdb$rv;
drop view xdb.xdb$rv
*
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> declare
  2   ct number;
  3  begin
  4    select count(*) into ct from dba_indexes where owner = 'XDB' and
  5      index_name = 'XDBHI_IDX';
  6    if ct > 0 then
  7      execute immediate 'disassociate statistics from ' ||
  8                        'indextypes xdb.xdbhi_idxtyp force';
  9      execute immediate 'disassociate statistics from ' ||
 10                        'packages xdb.xdb_funcimpl force';
 11      execute immediate 'drop index xdb.xdbhi_idx';
 12    end if;
 13  end;
 14  /

PL/SQL procedure successfully completed.

SQL> drop indextype xdb.xdbhi_idxtyp force;
drop indextype xdb.xdbhi_idxtyp force
                   *
ERROR at line 1:
ORA-29833: indextype does not exist


SQL> drop operator xdb.path force;
drop operator xdb.path force
*
ERROR at line 1:
ORA-29807: specified operator does not exist


SQL> drop operator xdb.depth force;
drop operator xdb.depth force
*
ERROR at line 1:
ORA-29807: specified operator does not exist


SQL> drop operator xdb.abspath force;
drop operator xdb.abspath force
*
ERROR at line 1:
ORA-29807: specified operator does not exist


SQL> drop operator xdb.under_path force;
drop operator xdb.under_path force
*
ERROR at line 1:
ORA-29807: specified operator does not exist


SQL> drop operator xdb.equals_path force;
drop operator xdb.equals_path force
*
ERROR at line 1:
ORA-29807: specified operator does not exist


SQL> drop package xdb.xdb_ancop;
drop package xdb.xdb_ancop
*
ERROR at line 1:
ORA-04043: object XDB_ANCOP does not exist


SQL> drop package xdb.xdb_funcimpl;
drop package xdb.xdb_funcimpl
*
ERROR at line 1:
ORA-04043: object XDB_FUNCIMPL does not exist


SQL> drop type xdb.xdbhi_im force;
drop type xdb.xdbhi_im force
*
ERROR at line 1:
ORA-04043: object XDBHI_IM does not exist


SQL> drop type xdb.path_array force;
drop type xdb.path_array force
*
ERROR at line 1:
ORA-04043: object PATH_ARRAY does not exist


SQL> drop type xdb.path_linkinfo force;
drop type xdb.path_linkinfo force
*
ERROR at line 1:
ORA-04043: object PATH_LINKINFO does not exist


SQL> create or replace library xdb.resource_view_lib wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  2d 65
 21  V0UuJ00QMqKMoi9SSbjg22OFCnwwg04I9Z7AdBjDFvJi/5Zi8tzwltlZYtBy+lkJ572esstS
 22  Msy4dCvny1J0CPVhyaamCwvLuA==
 23  
 24  /

Library created.

SQL> create or replace library xdb.path_view_lib wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  29 5d
 21  e4p07e2zDC/glqq04OxpO3TUJTswg04I9Z7AdBjDFlpW+uOW2Vli0HL6WQnnvZ6yy1IyzLh0
 22  K+fLUnQI9WHJpqaknnQN
 23  
 24  /

Library created.

SQL> create or replace type xdb.path_linkinfo OID '00000000000000000000000000020117' wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  d
 20  79 aa
 21  g0V6zG8egE2xYLkdFQIyNY27Wowwg5n0dLhcFlpW+uNy+kfZ/0cM2cHAdCulv5vAMsvuJY8J
 22  aee4dAhpqal8xsoXKMbK77KEHe+2RC9eXltNFTFq68aVcrOxlKEC9yaI5jWpC8gKD1o0nbBt
 23  5sgLU0BrWBucGx2mqUqkyQ==
 24  
 25  /

Type created.

SQL> create or replace type xdb.path_array OID '00000000000000000000000000020154'
  2  as varray(32000) of xdb.path_linkinfo
  3  /

Type created.

SQL> show errors;
No errors.
SQL> grant execute on xdb.path_linkinfo to public;

Grant succeeded.

SQL> grant execute on xdb.path_array to public;

Grant succeeded.

SQL> create or replace type xdb.xdbhi_im OID '00000000000000000000000000020118' wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  d
 20  b6a 353
 21  lDJslGdXRJYMNHRBXxviC442370wg80r2tAFfHS5bg81aF2m1PuxJmdJ6cnglGFdWsMctzcG
 22  QBlQ7SSdieQnBsZsv4j2ykvpJSz60E+O677mzk6STrG6czMSRMp6Q8UdKTvpLg2/ETVXfBMs
 23  Fj7upkkCp/XhvNhXG5o8KcVUocjxS4GKXmDW+hqDqD4uEcTmUdailJfzBK6P/7mtNiEOrzQ5
 24  bV07Oc3ZsoOTWmOCeqFtrHzMUVsYyWPEGwLytCWvNVRYmfgqTDU0aSyScD+HalwiVFkWnrng
 25  f08lLS0eoJnq29gulIIyXF8efje5cEkD6OwmgasQKkCHG+bepx3XDrqnLq6m0nQRehyi8w9X
 26  jUQtaNQCaD0sb1fac/SrWfcAIZ1kZQgx5HhSwP71tK9qUjjHYSN6ARMX+UPlK0N88SklLj26
 27  1W2TC2gKGVP+EXKzg+5Xwnfqi+P7RelAlENz5dOJx4pGVxkxp3l1wGnn7U7gB8o1bdPuPjOj
 28  xhlBDmn91YqtYfaziCBsPFsCxuwAYoXMUuklpUL1UUveiAJ4yiwMTGI7IH1KQjRUfCZY8axf
 29  spASrUbF9zkJF3PoGNL/kv7FZQAeKKKwslUQR2fgcLxDqqWf/6f4OOdE/KRDaiPk8oJ67z1D
 30  IcY3ei1gYQMCxOuKLTwp7zbkynP/2b9WtC1psMuLBdKSmw9L0JSKgDJU4DBBUO5voYv0YYt9
 31  Iy6l+rnRIoe0L7xxRWGntQnmUIlW4Oi60C0B6fXAEWMpS7To13lAnLQPg2jik7JV6NfNg4HL
 32  Bb8JYpmGL/HQLR8PP1YStbjEZ0xdjxzTKx67D/nhjaAlYw==
 33  
 34  /

Type created.

SQL> show errors;
No errors.
SQL> create or replace type body xdb.xdbhi_im wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  e
 20  598 1ea
 21  vzxqgyC6VezCpDAswhivE4aANskwg2O3ACDWfC9A2k7VSB0UiagLzFvGvBrq8/0xgOxZ9+XL
 22  11DtJJ35yFHIpmuytm47Ek8HAzpQZthfe91ywcaxKTCS/4U1OY9UfKFUv6NliLJgoYPKt8mg
 23  9qizlHfIC3yk1tpT6VR4CniJdpcBEftw99oKNb8FlKNa8OpTqJCnXgfBnDc56Z3DXfnaZMoo
 24  bCWe/tk0Vh7ZyEtm8J80uJDSz9HYUSvEXTLfBh/9DG2sLcpS6BgBJfZeNdWKPK/cVDrFisIY
 25  Ok2/wTv57TTCb7E8A2uWuOj36YY9G/QQnwTDLM+b9ADQ6PChoWNFXKR1wrgQVTHof1Kjw5Pr
 26  SjD/Z06UI34EqKrsyKCE2e9fp3c95yG8u6K2/rnEsvjZVFXaroRvA0TTGZBPX7JKh6lB5p54
 27  8JKMhMPOsDVRE999o2yLiF+eR4hH3e6q21bMsViWPK6dE6XJSg==
 28  
 29  /

Type body created.

SQL> show errors;
No errors.
SQL> grant execute on xdb.xdbhi_im to public;

Grant succeeded.

SQL> create or replace package XDB.XDB_FUNCIMPL wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  29c 11f
 21  uWG4peqUXpc5hxCiVwZLyLK8Sgowg9fxr54VfHRAAPiOrcWONWTaPd/irzsK3mZOd/6qmZgt
 22  beMdr9YCXS/55PqA7NiYg2840sHAs31NrqRUjWccbmULiVGIiBYg+xsCUC81jIDR+vJ1mJ9f
 23  iJvvLNS8t4DmHRy3NuODT/eyWRVWdL/Z0VQiiE3JLCwxMfalSk3/iJBfOcDXZ/M5jd4xhPBn
 24  ApIyCs8pgwFtED1/GMBxntefAn3OStKk25Y+vN3dE4NIzXyqDDezneQVyU42QcdYuA==
 25  
 26  /

Package created.

SQL> show errors;
No errors.
SQL> grant execute on XDB.XDB_FUNCIMPL to public ;

Grant succeeded.

SQL> create or replace package xdb.xdb_ancop wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  87e 160
 21  Fjxc+LYCpqtxloJcyFg6+wpjIPEwgz2NLUoVfHRAWEKe0MpcdMRlvqEOPGPeQ1NQ3D1Vf8df
 22  eiJ59y+E+/uE5hqiwnZz+XZzwPLDmlPfuGhzYST4nbUdDgc+3eXA8k24aVGReSwNXZHonpm8
 23  CG17xCWJG/t58vrdXEInV4jREji0ygp0OtUpY2Bv7g4JEeldoCaNd73OuTbAacPhDdwfVf9N
 24  YzTZ2IqSCYS2HYafGT4D9xhVY4PAidp6Tv1N7u5Axp55qVL3W2FXF0ghto3VQRSy10A81HyU
 25  h2Xpln/d74LfeAUYlxyWgoCEWJLQKkd9aTRIFvm1QyJ5yiKG0sDA4Roa8/8=
 26  
 27  /

Package created.

SQL> show errors;
No errors.
SQL> grant execute on xdb.xdb_ancop to public ;

Grant succeeded.

SQL> alter type xdb.xdbhi_im compile;

Type altered.

SQL> @@catxdbr.sql
SQL> Rem
SQL> Rem $Header: catxdbr.sql 17-aug-2007.14:07:15 smalde Exp $
SQL> Rem
SQL> Rem catxdbr.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2007, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbr.sql - XDB Resource View related schema objects
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem     This script creates the views, packages, index types, operators and
SQL> Rem     indexes required for providing SQL access to resource data.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script should be run as "XDB".
SQL> Rem
SQL> Rem    TODO: Support ACLs in functional implementation of prim oper
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    smalde      08/17/07 - Bug 6344412: Change 9999 to 8888
SQL> Rem    fge         11/01/04 - move implementation to prvtxdr0.sql
SQL> Rem    spannala    05/19/04 - make sure the types and indexes are valid
SQL> Rem    fge         07/28/03 - add resid to resource_view
SQL> Rem    spannala    07/29/03 - change xdbhi_idxtyp creation
SQL> Rem    njalali     07/31/03 - recompiling xdb.xdbhi_im type after drop type
SQL> Rem    najain      07/29/03 - add ODCIIndexAlter for xdbhi_idx
SQL> Rem    fge         05/19/03 - move stats initialization to catxdbeo.sql
SQL> Rem    fge         03/05/03 - support xdb repository view cost model
SQL> Rem    mkrishna    02/17/03 - make prvt invokers rights
SQL> Rem    fge         01/16/03 - add WITH CURRENT_USER to xdbhi_idxtyp creation
SQL> Rem    fge         09/27/02 - forward merge fix of bug 2540212 from 9.2.0.2
SQL> Rem    fge         09/18/02 - add authid current_user to xdbhi_im/xdb_funcimpl
SQL> Rem    fge         09/04/02 - optimize path_view
SQL> Rem    varora      08/26/02 - change scanctx in xdbhi_im to raw 8
SQL> Rem    njalali     07/31/02 - undo resid change
SQL> Rem    fge         07/09/02 - add resid to resource_view
SQL> Rem    fge         05/21/02 - add ancillary operator abspath
SQL> Rem    gviswana    01/29/02 - CREATE OR REPLACE SYNONYM
SQL> Rem    fge         01/21/02 - move implementation to prvtxdbr.sql
SQL> Rem    sichandr    01/17/02 - grant execute on xdb.path_array
SQL> Rem    ayoaz       01/10/02 - specify without dml option for xdbhi_idxtyp
SQL> Rem    spannala    12/27/01 - xdb setup should run as sys
SQL> Rem    spannala    01/11/02 - making all systems types have standard TOIDs
SQL> Rem    spannala    12/13/01 - removing connect
SQL> Rem    nagarwal    11/05/01 - grant DML privileges to resource view
SQL> Rem    nagarwal    11/08/01 - invoke prvtxdbpi
SQL> Rem    tsingh      11/17/01 - remove connection string
SQL> Rem    vnimani     10/01/01 - add contentschemais function
SQL> Rem    nle         09/20/01 - move versioning package
SQL> Rem    nagarwal    09/12/01 - add catxdbvr.sql
SQL> Rem    nagarwal    09/08/01 - add PATH VIEW definition
SQL> Rem    nagarwal    09/05/01 - privileges fix
SQL> Rem    nagarwal    08/29/01 - add support for ALL_PATH operator
SQL> Rem    nagarwal    08/22/01 - functional implementation for EQUALS_PATH operator
SQL> Rem    nagarwal    08/14/01 - grant priv on indextype
SQL> Rem    nagarwal    08/03/01 - add without column data to indextype
SQL> Rem    nagarwal    07/26/01 - changes wrt resource->xmltype
SQL> Rem    tsingh      06/30/01 - XDB: XML Database merge
SQL> Rem    nagarwal    05/20/01 - overload operators
SQL> Rem    nagarwal    04/30/01 - Support for DML on resource view
SQL> Rem    nagarwal    04/24/01 - Add functional implementation for operators
SQL> Rem    nagarwal    04/15/01 - Add start, fetch, close routines for ext idx
SQL> Rem    nagarwal    04/03/01 - Created
SQL> Rem
SQL> 
SQL> 
SQL> 
SQL> /*------------------------------------------------------------------------*/
SQL> /*  OPERATORS and INDEXTYPES                                              */
SQL> /*------------------------------------------------------------------------*/
SQL> -- primary operator
SQL> create operator xdb.under_path binding
  2    (sys.xmltype, number, varchar2) return number with index context,
  3      scan context xdb.xdbhi_im compute ancillary data
  4      without column data using XDB.XDB_FUNCIMPL.under_path_func,
  5    (sys.xmltype, varchar2) return number with index context,
  6      scan context xdb.xdbhi_im compute ancillary data
  7      without column data using XDB.XDB_FUNCIMPL.under_path_func1;

Operator created.

SQL> 
SQL> create operator xdb.equals_path binding
  2    (sys.xmltype, varchar2) return number with index context,
  3      scan context xdb.xdbhi_im compute ancillary data
  4      without column data using XDB.XDB_FUNCIMPL.equal_path_func;

Operator created.

SQL> 
SQL> grant execute on xdb.under_path to public;

Grant succeeded.

SQL> grant execute on xdb.equals_path to public;

Grant succeeded.

SQL> create or replace public synonym under_path for xdb.under_path;

Synonym created.

SQL> create or replace public synonym equals_path for xdb.equals_path;

Synonym created.

SQL> 
SQL> -- ancillary operators
SQL> create operator xdb.path binding (number) return varchar2 ancillary to
  2    xdb.under_path(sys.xmltype, number, varchar2),
  3    xdb.under_path(sys.xmltype, varchar2)
  4   without column data
  5  using xdb.xdb_ancop.path_func;

Operator created.

SQL> 
SQL> create operator xdb.depth binding (number) return number ancillary to
  2    xdb.under_path(sys.xmltype, varchar2),
  3    xdb.under_path(sys.xmltype, number, varchar2)
  4  using xdb.xdb_ancop.depth_func;

Operator created.

SQL> 
SQL> create operator xdb.abspath binding (number) return varchar2 ancillary to
  2    xdb.under_path(sys.xmltype, number, varchar2),
  3    xdb.under_path(sys.xmltype, varchar2)
  4   without column data
  5  using xdb.xdb_ancop.abspath_func;

Operator created.

SQL> 
SQL> grant execute on xdb.path to public;

Grant succeeded.

SQL> create or replace public synonym path for xdb.path;

Synonym created.

SQL> grant execute on xdb.depth to public;

Grant succeeded.

SQL> create or replace public synonym depth for xdb.depth;

Synonym created.

SQL> grant execute on xdb.abspath to public;

Grant succeeded.

SQL> create or replace public synonym abspath for xdb.abspath;

Synonym created.

SQL> 
SQL> -- indextype
SQL> create or replace indextype xdb.xdbhi_idxtyp for
  2    xdb.under_path(sys.xmltype, number, varchar2),
  3    xdb.under_path(sys.xmltype, varchar2),
  4    xdb.equals_path(sys.xmltype, varchar2)
  5    using xdb.xdbhi_im without dml
  6    with current_user;

Indextype created.

SQL> 
SQL> --  using xdb.xdbhi_im   without column data;
SQL> grant execute on xdb.xdbhi_idxtyp to public;

Grant succeeded.

SQL> 
SQL> /*------------------------------------------------------------------------*/
SQL> /*  INDEXES                                                               */
SQL> /*------------------------------------------------------------------------*/
SQL> create index xdb.xdbhi_idx on xdb.xdb$resource p (value(p)) indextype is xdb.xdbhi_idxtyp;

Index created.

SQL> 
SQL> /*-----------------------------------------------------------------------*/
SQL> /*  VIEWS                                                                */
SQL> /*-----------------------------------------------------------------------*/
SQL> create or replace view xdb.resource_view as
  2    select value(p) res, abspath(8888) any_path, sys_nc_oid$ resid
  3    from xdb.xdb$resource p
  4    where under_path(value(p), '/', 8888) = 1 ;

View created.

SQL> 
SQL> 
SQL> show errors;
No errors.
SQL> create or replace public synonym resource_view for xdb.resource_view;

Synonym created.

SQL> grant select on xdb.resource_view to public ;

Grant succeeded.

SQL> grant insert on xdb.resource_view to public;

Grant succeeded.

SQL> grant delete on xdb.resource_view to public;

Grant succeeded.

SQL> grant update on xdb.resource_view to public;

Grant succeeded.

SQL> 
SQL> 
SQL> Rem Resource view implementaion
SQL> @@prvtxdbr.plb
SQL> create or replace package xdb.XDB_RVTRIG_PKG wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  11d d2
 21  e7L5J9C9fKiefHIEHX1UEiLsvrcwg5DIf8sVfC82Jk4YYtaOzFDoZTP6YdOK65CkbI21tZkJ
 22  UKkmEeraAyXCLW0IRlUA7H7pUSA0MHWj5vVLXEYJ3lyhL5RqpkuRDOKe7lXQoYCoAhwjBU/2
 23  rXUbSz77E/P9X2hkTq5Qs5IsVDHwvjIR/O9dM6huuJK435iI8rkeRjqb4etbDJA=
 24  
 25  /

Package created.

SQL> show errors;
No errors.
SQL> create or replace public synonym xdb_rvtrig_pkg for xdb.xdb_rvtrig_pkg;

Synonym created.

SQL> grant execute on xdb.xdb_rvtrig_pkg to public;

Grant succeeded.

SQL> create or replace trigger xdb.xdb_rv_trig INSTEAD OF insert or delete or update
  2  on xdb.resource_view for each row
  3  begin
  4    if inserting then
  5      xdb_rvtrig_pkg.rvtrig_ins(:new.res, :new.any_path);
  6  
  7  
  8    end if;
  9  
 10    if deleting then
 11       xdb_rvtrig_pkg.rvtrig_del(:old.res, :old.any_path);
 12  
 13  
 14    end if;
 15  
 16    if updating then
 17       xdb_rvtrig_pkg.rvtrig_upd(:old.res,    :new.res,
 18                                 :old.any_path,   :new.any_path );
 19    end if;
 20  end;
 21  /

Trigger created.

SQL> show errors;
No errors.
SQL> create or replace package body XDB.XDB_FUNCIMPL wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  5fd 1d2
 21  8PekypcLVZmDY/LMeVSF6l84uhkwgz1erydqfHRVvg+oIyevjkX2rko7G+BKkPqfE0Gbtap/
 22  rfqDjXkCLcw8Z3SnQU+BQV3cEx9M78OvQQ7EPUtyGWkFrVBS+2mf9KwHimKbUCl3X+OUC0Yw
 23  GBO8Mil3a+FtTCfdwWHmK2mpf392IRNgTgPhqPgz7wDARPbjXUEZGoc1iZSFhIUmjmH3nWs3
 24  gwXDUrv8vhgNjwReySRbqeCtHqBkx7N+3R5vOEIrKl+/Vq/MleyAJN9mIZHfV3bn0NaRRu5a
 25  Zj02T0uuZo0CbKiAVKFIy9Bcl5Ncb/c4+n2OMHSuK0SEu0guN5lafAM3H0mkknsqnHMqbN5c
 26  cXpbNcoxWVzb0J8/jR/Zd5FoKil+Gb5QgUhSCxRhTxcGF16lnAulmK20Gd4vHA76zuwNmIG5
 27  LNjGt0HaIjOqgwvSn/7SOTPCx1Y=
 28  
 29  /

Package body created.

SQL> show errors;
No errors.
SQL> create or replace function xdb.contentSchemaIs wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  1eb 154
 21  7PCJFPfZ1LSmNAj4ehpET9E/1LAwg43IfyAVfC8C2v7qbnVnGARU2q2LykkxF/W8Z2XplOb8
 22  4aSXterwtutN/Rm5QZqwEiCxwlyedMG7BXPAmMZOsUOSoSQMr+fbL/hTuTTr+amUNGr2ZJT+
 23  cHbwtNSF6CM90MtzdkuXpjV5Aje6D4xdsund3My0V3CG82/fS2YeL3nWGXSOH49Nb+8A9QUj
 24  kBUCK1bLgBXryIl/g/SgN37Njstg08XMhhbRsB5JczFg4Fx8YQ1s9iFa+jrjKMwCMA/w1oQZ
 25  9oKyqrWZxcFiQHqOanfbqmoDX1jDK68l2FE9xgWWMHB5sw==
 26  
 27  /

Function created.

SQL> show errors;
No errors.
SQL> grant execute on xdb.contentSchemaIs to public;

Grant succeeded.

SQL> create or replace public synonym contentSchemaIs for xdb.contentSchemaIs;

Synonym created.

SQL> create or replace function xdb.under_path_func wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  49d 32f
 21  rGbsDal492dkezaOt/8yklMr8Ugwg41ezCCDfC8Zgp0GHHvzFImy6Nxe8yioUt0JS+8FMX1e
 22  otYKDrM2bDhpJiQ/F7bye95eHz7Airu5+M+aTBVGOhjAOQfgjAr1nUib0ghpkUrK013t9erZ
 23  WlXGkef79D3hVMJu839GHDS19ABZ5Lm9qu70CC9NF/RCj16X4cKbPfy1zhTJpgHdtkQKcIsG
 24  mA4+TMs1QLM07QYOSePyNvbEZ2OzfGOpT+N3P49YymsxDNEb5/hMWAx1+xrT6o8JGIK8c3t8
 25  Fob7oVjEFCBQlguZQIlCs0QQRICGIG8qGaJGkPRy6pDSyZFKQ4Ev3yVMZBaZQshWCwcjuR43
 26  bJ7JDFhR71JRcc/r42UG0ulCaEhwuoS1Q0Twv0Sy+fPNnOmMrtdsGc6K8ppqvZM4b+izUPUo
 27  eQuhjjejj5V5hqMKJP0nFeFfE26WILZf/Nq3g/GzzZg+0mz042TKv22Bt0DG5c+s64vuG66/
 28  BQZJXWl4HuU3hmH6qNnEmC6j4C3rJMn6JoHcF7J3cjKjkRtdi/JcKUV6w1hAC+LVso0N9p6/
 29  sDWcbNVtFWl6emq8g6eUirGN0ewrucVMK84oWE2Q+WO/S7MyPMQqCARtM6hdFTynWpeLO3/o
 30  kuNOztgf00OWfPFllWQLKi0E37qvKAtPtfdSlJtGRBcaguARuhcHLoqq/BNDspxSBRGD99BT
 31  2w8G4BAXFPeenL6jV4vbSrJhgvQLZnZYR0svwcUqRrOl8a0EDtXBVxPeEhl5OoWHZuZVncvh
 32  4rconfuJKhQy
 33  
 34  /

Function created.

SQL> show errors;
No errors.
SQL> create or replace package body xdb.xdb_ancop wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  13e0 30a
 21  ofdW3dPCkW3TjkHSCKSAcMXloFYwg83qLiCGyi9VHovqXyMnFNUJEs29C/wO00umeDP6g9BO
 22  uRz4TtpwiiU2gC4BefHF99P0+3I0QoJOrNXmT1r6yurpmZadqp8k+eSS+ChTN0TdC2ImQ/Lm
 23  6YpFxwq65TZ1PNjs8Et5lWUWVAGxyh4u//WLKKsK7lgRRRuSIsdI0yzcNB9caf8Br6snE3R0
 24  +eGcDieZLvdkpZiLpJqP/4wWhF9se3dHPKNKNS9iq8crwCmMAs3z9cZjMt0dtPMBQHySTRBG
 25  dITnLc9nSVlvKG0UHdYDtkvIn9NS1ldTOS5hvfFQrOmUoqcNCnhEod90SM+HItuy50H2Ubos
 26  XIKMJy6T/kcxYWqkzz/Zf4DlGgHwlXYqe0tZ/VPN9wKkKGaZb11oUgIxUvLYnjP3tTcWr5GI
 27  lMn+z3LiUc9Z6/2f3L7gZoyMlFBeLnmP19td6K5XZozKP+2278h7j7LZxITWRKTHk9FJIxGd
 28  qtwqeHx0y9spREmk98NcCr9L+IhYdmvSpc7AkE8/0kC9gTBqegfPihKYjnN9vxt3jK4exSyA
 29  l8a8h19yYiQirfhM8X7jlf6QI6on8ssq3VVHpHz2CHLC2KLjTjQJvoIciLPsoAgsom4RdKrL
 30  Mlk6mI4Qz3K023V0vRuL2wVkxTqzUhWilcxq9RUIrWh0v4KfapwJR8P0x8f3ZA5/uXKeQzay
 31  D4oA9VrNI5zklmRRB1v8FO/1U3/iv0eM2c13hgXVjnwG5Q==
 32  
 33  /

Package body created.

SQL> show errors;
No errors.
SQL> create or replace package body xdb.XDB_RVTRIG_PKG wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  380 189
 21  +3uNmKZr1/vc7Y5Dx/tMx0AyxOEwg9def0pqyi80e2RUY8AUiQaDw/ZUOI5bUKykmAa1nVdf
 22  9F1XH1UqSUwLbaTJyReREonqdzY7XoJZ5S56YN97Ogo5dLhXpjCf8XfdNpSC3yFZ+xV2/+s7
 23  0ANJ+xwLW+/CisgkrshCcOHSEYFLfQxLMO9XydFSWTH0xgu+PROn9206rQpFN2xjs1AAAZG+
 24  uHiTk3v93hgC7vcDKxTLUFbBWxaenpOiVih8K4j0s1JEp5QeUf1NbhLCe5+w2cRClIEkQxAf
 25  eF5OUbUh0TT62jA9U9LxtLxK3WOwHOUDLp32Sf3uLMRewOOBDTuv4seYE+r/o0yyxDg9+qNP
 26  tJGU0Eeub5iubdiDc+Cc0JbBb4+4
 27  
 28  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> -- set xdk schema cache event
SQL> ALTER SESSION SET EVENTS='31150 trace name context forever, level 0x8000';

Session altered.

SQL> 
SQL> Rem add xdb_dltrig_pkg - pre-update trigger to invoke document link proc
SQL> @@prvtxdbdl.plb
SQL> SET ECHO ON
SQL> SET FEEDBACK 1
SQL> SET NUMWIDTH 10
SQL> SET LINESIZE 80
SQL> SET TRIMSPOOL ON
SQL> SET TAB OFF
SQL> SET PAGESIZE 100
SQL> create or replace package xdb.XDB_DLTRIG_PKG wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  71 a2
 21  Rylw7VB4KnZlAhU1cPrLmBvGrpQwg0xH2p6pfC/pzPbqCPJEUh0m4MnnNdd0OnAJvrVMETgB
 22  ECjqOwU7FyGDSHvynvk8VWqL81AUSiYb1OrlJV3yYOPIoy+V9J9dQbGfHGPVljD0NubCsX5g
 23  StL9E+77PXkcPw==
 24  
 25  /

Package created.

SQL> grant execute on xdb.XDB_DLTRIG_PKG to public;

Grant succeeded.

SQL> show errors;
No errors.
SQL> create or replace package body xdb.XDB_DLTRIG_PKG wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  12e 124
 21  J2oYzmy0uqYMz3C+p3q2D7c09XYwg0zIr0oVfHSi/mhkBFLhJvz7zfC3E1SVUdv3t0gFXrW1
 22  lnxN4aAioqcAgpah6LiMN7P2cS3bP20LKohhz/1nY/vC3o9XiB34J5cIBCc3FH3D9yERh8w8
 23  JWL+LeJYulOibBURIjVBPjTDYaKMxPS5X2pJbcUsz3oM7WYR5dEQ4PpxweishiJ57nex7n0W
 24  N+Wr8rUFReSYn1M5Uvn40ZqnTvpijNJgMyP1F3H1wt0FT6U0OoslIW4GnSi+5HqmREJZmg==
 25  
 26  
 27  /

Package body created.

SQL> show errors;
No errors.
SQL> /

Package body created.

SQL> 
SQL> Rem XDB Path Index Implementation
SQL> @@prvtxdbp.plb
SQL> create or replace package body xdb.XDB_PITRIG_PKG_01 wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  1288 343
 21  wBS+c6z8SrCH3Kg46aIpWBrMz8swg81ULiAGfC9Vgp0V/D73wk0B/iXpAFnx3kvstCZ5nm7k
 22  tbWV3IoE09NaPZbMzMuFLE7UgoZCKG2rwkkWyGNlmi15QYPs/ZWZuiSUMzNKN0HXBAqNR3wP
 23  1Rprmv8toP1EMhR44ZQS+407Z2LTGw4VaolLhiwVDEGCRBNGWCFfC9QqNbj2ab0W3n1oVXbL
 24  6dZ4oDTuyZVlPnRY3wg3Ztrh3m8NCr1O9/pf9uFtZla49050X8NZsNamVVKk4xNP6aD0L9RD
 25  Jdxy5oPPHRqQM8p/NfJBxWm5CYueDXEKdM2ZxvBjkEP69jqJ/Ti8MKdt7bB9uZ8IeIf/5jHs
 26  7Qgu3ophxdfiYPbKYve5eGqDuD40NTsOTQ792RmpbsC2snoUiv4G+XIGvAA1a6FjVtrL7D6s
 27  Tk/gr+kkAqooP2goQStOoCVvoGABixZBsSUOeWGMi9Ui9uJCXJwRgcdCZ8hYHTpWxuOEb6Gl
 28  BOxJiZo1zF1J4iNMwU/d3UYB9lVSeK9anuHi1vfGLw/o3HA/7oRUWVxz8boQKAqQareFu6E6
 29  f8sssAwveCKLMk9KwTCQipAufG5woqjKQK+YdSKz/bdXJwV49Na1vmGoB/bDvQ9FqRGwEDb4
 30  5jgp9Xdj3+sy3gmuEMKUK4+NxjHbLKgrsNy43wexoeOQLyOwwXHE9EV6B+w8HNssk47IKIrz
 31  8vB/gtWOa7KOuPBqJRIhPixCVBztSmAUuzTsRUojDU3x3A9TTdzmDwhm+PNV2fNV3MYQscn4
 32  80P2b0NS+s8KFnhbdPkXo/mSKJjjXFc=
 33  
 34  /

Package body created.

SQL> create or replace package body xdb.XDB_PITRIG_PKG wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  b54 333
 21  K+nJ5rz9mAmScYUrP1+zQauJgwUwgz1cLscTfC/NMZ3gSUkSQCN27G0e+jUOKjw2FOnTLRAl
 22  tbUfTCJd4Tm2v/Fh7t2mmLvNuQssEae8S3SozOR0SUEwYm7zWLGWiHyYVKYRjAldYzVFfuB2
 23  TmN78iGl1FkjcBtKZ8LhqprTfuTKTdN2dNpgj/G47eE4vfFwG5GyY2A8c8nki1IAVprD8KMl
 24  Z1OD80TyvP0gvHfkCxPQymJ5B7m8ONHNXyjr8XJyww4Lbq0zsAPXR1dtghFJXXUCGT7qqiVr
 25  fgM9I4Avvrn5EKNea7XqHhIQ9V7Zrrdld3jy+Iw4kmFKzWkwwBEU2SnCyyT1VBx97sxTHRry
 26  e/LY5X+EkzYtS35PYFB3zCZLNo2TMMoUHz7Hl6ku4oe6TNgdJrsS4ydqx/cEyfyWfeyOaWOh
 27  s529eiMYWdAkbs98zlEqWybZ8XYSswE0MX4nNwVNLihUS7NTw/9PGGiQKpJ7nHdZzNprkbcO
 28  stnnBa3RvYda7qfqdPPP0MQkBnnEHQ8BzVw+QpyPkJQ5dNudEBi6n9bRzMW7qQq6kWK/YmYt
 29  d/fZ5NATzj5HrhUCzlzmcnwf5U9y3bcVI8ne0FVF87Hqotfa/Xwo6+lr3qv47HjI/HeJrPTN
 30  SfEWS1Vh8IJjGlVqQrFnBLJAApg/D81w/2Puggh/SIE3udmDn/xbfN6aSxsLizTYaJ1SubIg
 31  c3kXRivn4HKfYn4Fv1UzRi5aBgBWHZuIM1bEU+G/Z4jfFXw4CKP6OS4SrnSYazVg3z9oa5S8
 32  tQdVEPhEGBLYOw==
 33  
 34  /

Package body created.

SQL> show errors;
No errors.
SQL> /

Package body created.

SQL> 
SQL> Rem Initialize bootstrap acl
SQL> @@catxdbz.sql
SQL> Rem
SQL> Rem $Header: catxdbz.sql 28-jan-2008.16:28:00 thbaby Exp $
SQL> Rem
SQL> Rem catxdbz.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2008, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbz.sql - xdb security initialization
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    thbaby      01/28/08 - fix lrg 3280065
SQL> Rem    thbaby      12/06/07 - enable hierarchy on schema table
SQL> Rem    mrafiq      01/08/07 - pass flag to register_dav_schema
SQL> Rem    sidicula    01/13/07 - Restrict privileges on ACL tab
SQL> Rem    abagrawa    03/14/06 - Move dav schema to catxdav.sql
SQL> Rem    abagrawa    03/11/06 - Invoke catxdbh
SQL> Rem    thbaby      10/22/05 - put lock privilege back in
SQL> Rem    thbaby      03/23/05 - remove lock privilege
SQL> Rem    thbaby      01/17/05 - Add new privileges
SQL> Rem    mrafiq      09/20/05 - merging changes for upgrade/downgrade
SQL> Rem    thoang      04/29/04 - define catxdbz0.sql
SQL> Rem    ataracha    04/23/04 - add write-config
SQL> Rem    thbaby      01/17/05 - Add new privileges
SQL> Rem    fge         07/07/04 - set xdb$h_link child_acloid
SQL> Rem    thbaby      02/16/05 - Remove all_xdbadmin_acl.xml
SQL> Rem    abagrawa    09/01/04 - Add all_xdbadmin_acl.xml
SQL> Rem    nmontoya    01/13/03 - ADD collection AND principalformat TO acl schema
SQL> Rem    nmontoya    03/14/02 - change priv names TO link-to AND unlink-from
SQL> Rem    nmontoya    03/13/02 - USE dbms_xdbz0.initXDBSecurity
SQL> Rem    njalali     02/19/02 - granting all privs on ACL table to PUBLIC
SQL> Rem    rmurthy     02/14/02 - fix descriptions
SQL> Rem    nmontoya    02/21/02 - add link, unlink, linkto, unlinkfrom privileges
SQL> Rem    rmurthy     01/30/02 - make privilege a global element
SQL> Rem    rmurthy     01/18/02 - new ACL schema
SQL> Rem    rmurthy     12/28/01 - set elementForm to qualified
SQL> Rem    rmurthy     12/26/01 - change to 2001 xmlschema-instance namespace
SQL> Rem    spannala    12/27/01 - xdb setup should run as sys
SQL> Rem    najain      11/26/01 - use XDB instead of xdb
SQL> Rem    rmurthy     12/17/01 - fix ACL schema
SQL> Rem    nagarwal    11/12/01 - change ordering of packages
SQL> Rem    nmontoya    11/04/01 - indent acl schema, ADD system acls
SQL> Rem    nmontoya    10/29/01 - USE dbms_xdb.createresource
SQL> Rem    mkrishna    11/01/01 - change xmldata to xmldata
SQL> Rem    nmontoya    10/18/01 - disable hierarchy FROM xdb$schema
SQL> Rem    nmontoya    10/12/01 - ADD xdbadmin TO bootstrap acl
SQL> Rem    rmurthy     08/31/01 - change to xml binary type
SQL> Rem    rmurthy     08/03/01 - change XDB namespace
SQL> Rem    bkhaladk    08/03/01 - fix acl xmls.
SQL> Rem    njalali     07/18/01 - More resource as XMLType
SQL> Rem    njalali     07/17/01 - Resource as XMLType
SQL> Rem    nmontoya    07/05/01 - bootstrap acl inserts using pl/sql wrappers
SQL> Rem    sichandr    05/30/01 - add temporary connect
SQL> Rem    spannala    05/18/01 - xmltype_p ->xmltype
SQL> Rem    rmurthy     05/09/01 - remove conn as sysdba, add SQL type names
SQL> Rem    bkhaladk    03/20/01 - add param to register schema.
SQL> Rem    nmontoya    03/18/01 - user privileges
SQL> Rem    nmontoya    03/14/01 - schoid and elnum for acl schema.
SQL> Rem    rmurthy     03/08/01 - changes for new xmlschema
SQL> Rem    nmontoya    02/02/01 - Created
SQL> Rem
SQL> 
SQL> -- User must be XDB
SQL> 
SQL> BEGIN
  2     xdb.dbms_xdbz.enable_hierarchy ('XDB', 'XDB$SCHEMA');
  3     xdb.dbms_xdbz.disable_hierarchy('XDB', 'XDB$SCHEMA');
  4  END;
  5  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Create register schema package
SQL> @@catxdbh
SQL> Rem
SQL> Rem $Header: catxdbh.sql 06-oct-2006.09:59:54 lbarton Exp $
SQL> Rem
SQL> Rem catxdbh.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbh.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    lbarton     10/06/06 - bug 5371722: restore _kolfuseslf to prior value
SQL> Rem    spetride    08/28/06 - support access xdbconfig.xml.11.0
SQL> Rem    mrafiq      04/07/06 - cleaning up
SQL> Rem    abagrawa    03/20/06 - Remove set echo on
SQL> Rem    abagrawa    03/11/06 - Contains dbms_metadata_hack
SQL> Rem    abagrawa    03/11/06 - Contains dbms_metadata_hack
SQL> Rem    abagrawa    03/11/06 - Created
SQL> Rem
SQL> 
SQL> --
SQL> -- Register XML schemas for SXML docs
SQL> -- When XDK is created by catproc.sql, this code can go into
SQL> --  dbms_metadata_util.  For now we keep it here.
SQL> --
SQL> create or replace package dbms_metadata_hack authid definer as
  2    procedure cre_dir;
  3    procedure drop_dir;
  4    function  get_bfile(filename varchar2) return BFILE;
  5    procedure load_xsd(filename varchar2,
  6                       gentypes1 boolean := FALSE);
  7    procedure deleteSchema(name varchar2);
  8  
  9    -- above procedures assume directory is rdbms/xml/schema
 10    -- following procedures are needed for rdbms/xml access
 11    procedure cre_xml_dir;
 12    procedure drop_xml_dir;
 13    function  get_xml_bfile(filename varchar2) return BFILE;
 14    function  get_xml_dirname return VARCHAR2;
 15  
 16  end dbms_metadata_hack;
 17  /

Package created.

SQL> show errors
No errors.
SQL> 
SQL> create or replace type dirnamesmh as varray(2) of varchar2(2000);
  2  /

Type created.

SQL> 
SQL> create or replace package body dbms_metadata_hack as
  2  --------------------------------------------------------------------
  3  -- PACKAGE STATE
  4  --
  5  kolfuseslf           VARCHAR2(4000) := 'FALSE';
  6  XML_DIR              CONSTANT BINARY_INTEGER := 1;
  7  SCHEMA_DIR           CONSTANT BINARY_INTEGER := 2;
  8  
  9  RDBMS_DIR  CONSTANT DIRNAMESMH := DIRNAMESMH(NULL, 'schema');
 10  LOGIC_DIR  CONSTANT DIRNAMESMH := DIRNAMESMH('XMLDIR', 'XSDDIR');
 11  -- XSDDIR: schema directory name
 12  -- XMLDIR: xml doc directory name
 13  
 14  -- Constants defined in rdbms/include/splatform3.h
 15  PLATFORM_WINDOWS32    CONSTANT BINARY_INTEGER := 7;
 16  PLATFORM_WINDOWS64    CONSTANT BINARY_INTEGER := 8;
 17  PLATFORM_OPENVMS      CONSTANT BINARY_INTEGER := 15;
 18  
 19  ---------------------------------------------------------------------
 20  -- GET_DIR_INT: Helper function. Return the platform-
 21  --  specific pathname for the rdbms/xml/`subdir` directory.
 22  -- RETURNS:
 23  --                      - directory containing XML data/schemas
 24  
 25    FUNCTION get_dir_int(subdir BINARY_INTEGER) RETURN VARCHAR2 IS
 26      -- local variables
 27      pfid        NUMBER;
 28      root        VARCHAR2(2000);
 29      oraroot     VARCHAR2(2000);
 30  BEGIN
 31    -- get the platform id
 32    SELECT platform_id INTO pfid FROM v$database;
 33  
 34    IF pfid = PLATFORM_OPENVMS THEN
 35      -- ORA_ROOT is a VMS logical name
 36      IF (subdir = XML_DIR) THEN
 37        oraroot := 'ORA_ROOT:[RDBMS.XML]';
 38      ELSE
 39         oraroot := 'ORA_ROOT:[RDBMS.XML.' || RDBMS_DIR(subdir) || ']';
 40      END IF;
 41      RETURN oraroot;
 42    ELSE
 43      -- Get ORACLE_HOME
 44      DBMS_SYSTEM.GET_ENV('ORACLE_HOME', root);
 45      -- Return platform-specific string
 46      IF pfid = PLATFORM_WINDOWS32 OR pfid = PLATFORM_WINDOWS64
 47      THEN
 48        IF (subdir = XML_DIR) THEN
 49          oraroot := root || '\rdbms\xml';
 50        ELSE
 51          oraroot := root || '\rdbms\xml\' || RDBMS_DIR(subdir);
 52        END IF;
 53        RETURN oraroot;
 54      ELSE
 55        IF (subdir = XML_DIR) THEN
 56          oraroot := root || '/rdbms/xml';
 57        ELSE
 58          oraroot := root || '/rdbms/xml/' || RDBMS_DIR(subdir);
 59        END IF;
 60        RETURN oraroot;
 61      END IF;
 62    END IF;
 63  END;
 64  
 65  
 66    FUNCTION get_schema_dir RETURN VARCHAR2 IS
 67      oraroot VARCHAR2(2000);
 68  BEGIN
 69    oraroot := get_dir_int(SCHEMA_DIR);
 70    RETURN oraroot;
 71  END;
 72  
 73  
 74    procedure drop_dir_int(subdir BINARY_INTEGER) is
 75      stmt                VARCHAR2(2000);
 76  BEGIN
 77    stmt := 'DROP DIRECTORY ' || LOGIC_DIR(subdir);
 78    EXECUTE IMMEDIATE stmt;
 79  
 80    -- alter session: disable use of symbolic links
 81    -- (restore the variable to its prior value)
 82    stmt := 'ALTER SESSION SET "_kolfuseslf" = ' || kolfuseslf;
 83    EXECUTE IMMEDIATE stmt;
 84  
 85  END;
 86  
 87    procedure cre_dir_int(subdir BINARY_INTEGER) is
 88      -- local variables
 89      kolfuseslf_cnt      NUMBER := 0;
 90      dirpath             VARCHAR2(2000);
 91      stmt                VARCHAR2(2000);
 92  BEGIN
 93    -- alter session: enable use of symbolic links
 94    -- first get the current value of _kolfuseslf (default FALSE)
 95    stmt := 'SELECT COUNT(*) FROM V$PARAMETER WHERE NAME=''_kolfuseslf''';
 96    EXECUTE IMMEDIATE stmt INTO kolfuseslf_cnt;
 97    IF kolfuseslf_cnt != 0 THEN
 98      stmt := 'SELECT VALUE FROM V$PARAMETER WHERE NAME=''_kolfuseslf''';
 99      EXECUTE IMMEDIATE stmt INTO kolfuseslf;
100    END IF;
101    stmt := 'ALTER SESSION SET "_kolfuseslf" = TRUE';
102    EXECUTE IMMEDIATE stmt;
103  
104    -- get directory path
105    dirpath := get_dir_int(subdir);
106  
107    -- create a directory object
108    stmt := 'CREATE OR REPLACE DIRECTORY ' || LOGIC_DIR(subdir) ||
109            ' AS ''' || dirpath || '''';
110    EXECUTE IMMEDIATE stmt;
111  
112    EXCEPTION WHEN OTHERS THEN
113      BEGIN
114      drop_dir_int(subdir);
115      RAISE;
116      END;
117  END;
118  
119  
120  
121    procedure cre_dir is
122  BEGIN
123     cre_dir_int(SCHEMA_DIR);
124  END;
125  
126  
127    procedure drop_dir is
128  BEGIN
129     drop_dir_int(SCHEMA_DIR);
130  END;
131  
132  
133    function get_bfile(filename varchar2) return BFILE is
134    begin
135      return BFILENAME(LOGIC_DIR(SCHEMA_DIR), filename);
136    end;
137  
138  
139    procedure load_xsd(filename varchar2,
140           gentypes1 boolean := FALSE) is
141    ssfile              BFILE;
142  begin
143    ssfile := BFILENAME(LOGIC_DIR(SCHEMA_DIR), filename);
144    dbms_xmlschema.registerSchema(filename, ssfile,TRUE,gentypes1,FALSE, FALSE);
145    EXCEPTION WHEN OTHERS THEN
146      BEGIN
147      ROLLBACK;
148      drop_dir;
149      RAISE;
150      END;
151  end;
152    procedure deleteSchema(name varchar2) is
153    err_num NUMBER;
154  begin
155    dbms_xmlschema.deleteSchema(name, dbms_xmlschema.DELETE_CASCADE_FORCE);
156    EXCEPTION WHEN OTHERS THEN
157      BEGIN
158      -- suppress expected exception
159      -- ORA-31000: Resource '<name>' is not an XDB schema document
160      err_num := SQLCODE;
161      IF err_num != -31000 THEN
162        RAISE;
163      END IF;
164      END;
165  end;
166  
167  
168  ---------------------------------------------------------------------
169  -- GET_XML_DIR: Helper function. Return the platform-
170  --  specific pathname for the rdbms/xml directory.
171  -- RETURNS:
172  --                      - directory containing XML docs
173  
174    FUNCTION get_xml_dir RETURN VARCHAR2 IS
175      oraroot VARCHAR2(2000);
176  BEGIN
177    oraroot := get_dir_int(XML_DIR);
178    RETURN oraroot;
179  END;
180  
181  
182    procedure drop_xml_dir is
183  BEGIN
184    drop_dir_int(XML_DIR);
185  END;
186  
187  
188    procedure cre_xml_dir is
189  BEGIN
190     cre_dir_int(XML_DIR);
191  END;
192  
193    function get_xml_bfile(filename varchar2) return BFILE is
194    begin
195      return BFILENAME(LOGIC_DIR(XML_DIR), filename);
196    end;
197  
198    function  get_xml_dirname return VARCHAR2 is
199    begin
200      return LOGIC_DIR(XML_DIR);
201    end;
202  
203  end dbms_metadata_hack;
204  /

Package body created.

SQL> show errors
No errors.
SQL> 
SQL> Rem Register required system schemas before calling initXDBSecurity() to
SQL> Rem initialize the SGA & UGA cache
SQL> @@catxdbz0
SQL> Rem
SQL> Rem $Header: rdbms/admin/catxdbz0.sql /main/9 2009/02/05 15:23:57 spetride Exp $
SQL> Rem
SQL> Rem catxdbz0.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2008, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbz0.sql - xdb security initialization
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script registers all required system schemas before
SQL> Rem      initXDBSecurity() can be called.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    spetride    06/11/08 - 11.2 acl schema
SQL> Rem    thbaby      12/06/07 - set acl on schemas created pre-security
SQL> Rem    vkapoor     05/08/07 - bug 5769835
SQL> Rem    sidicula    12/19/06 - Avoid xmltable in xds_acl view
SQL> Rem    bkhaladk    04/24/06 - add CSX xml.xsd and xmltr.xsd schema
SQL> Rem    petam       04/14/06 - fix xds_acl and xds_ace views
SQL> Rem    petam       04/07/06 - separate out the install of ResConfig
SQL> Rem    abagrawa    03/11/06 - Use acl.xsd in registerschema
SQL> Rem    thbaby      03/12/06 - csx fix - principal not transient
SQL> Rem    petam       02/08/06 - add ACL and ACE views
SQL> Rem    petam       12/07/05 - acl enhancement for fusion security
SQL> Rem    mrafiq      09/22/05 - merging changes for upgrade/downgrade
SQL> Rem    thoang      03/01/05 - Created
SQL> Rem
SQL> 
SQL> Rem Register ACL Schema
SQL> 
SQL> -- Create directory for picking up schemas
SQL> exec dbms_metadata_hack.cre_dir;

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Register the CSX xml.xsd
SQL> declare
  2    XMLNSXSD BFILE := dbms_metadata_hack.get_bfile('xmlcsx.xsd.11.0');
  3    XMLNSURL VARCHAR2(2000) := 'http://www.w3.org/2001/csx.xml.xsd';
  4  begin
  5    xdb.dbms_xmlschema.registerSchema(XMLNSURL, XMLNSXSD, FALSE, FALSE, FALSE,
  6                                      TRUE, FALSE, 'XDB',
  7                                     options=>DBMS_XMLSCHEMA.REGISTER_BINARYXML);
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2    TRXSD BFILE := dbms_metadata_hack.get_bfile('xmltr.xsd.11.0');
  3    TRURL VARCHAR2(2000) := 'http://xmlns.oracle.com/xdb/csx.xmltr.xsd';
  4  begin
  5    xdb.dbms_xmlschema.registerSchema(TRURL, TRXSD, FALSE, FALSE, FALSE, TRUE,
  6                                      FALSE, 'XDB',
  7                                   options => DBMS_XMLSCHEMA.REGISTER_BINARYXML);
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2    ACLXSD BFILE := dbms_metadata_hack.get_bfile('acl.xsd.11.2');
  3    ACLURL VARCHAR2(2000) := 'http://xmlns.oracle.com/xdb/acl.xsd';
  4  begin
  5  xdb.dbms_xmlschema.registerSchema(ACLURL, ACLXSD, FALSE, FALSE, FALSE, TRUE,
  6                                    FALSE, 'XDB',
  7                                   options => DBMS_XMLSCHEMA.REGISTER_BINARYXML);
  8  
  9  end;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Disable XRLS hierarchy priv check for xdb$acl and xdb$schema tables
SQL> BEGIN
  2     xdb.dbms_xdbz.disable_hierarchy('XDB', 'XDB$ACL');
  3     xdb.dbms_xdbz.disable_hierarchy('XDB', 'XDB$SCHEMA');
  4  END;
  5  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- INSERT bootstrap AND root acl's
SQL> DECLARE
  2    b_abspath          VARCHAR2(200);
  3    b_data             VARCHAR2(2000);
  4    r_abspath          VARCHAR2(200);
  5    r_data             VARCHAR2(2000);
  6    o_abspath          VARCHAR2(200);
  7    o_data             VARCHAR2(2000);
  8    ro_abspath         VARCHAR2(200);
  9    ro_data            VARCHAR2(2000);
 10    retbool            BOOLEAN;
 11  BEGIN
 12     b_abspath := '/sys/acls/bootstrap_acl.xml';
 13     b_data :=
 14  '<acl description="Protected:Readable by PUBLIC and all privileges to OWNER"
 15        xmlns="http://xmlns.oracle.com/xdb/acl.xsd" xmlns:dav="DAV:"
 16        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 17        xsi:schemaLocation="http://xmlns.oracle.com/xdb/acl.xsd
 18                            http://xmlns.oracle.com/xdb/acl.xsd">
 19    <ace>
 20      <grant>true</grant>
 21      <principal>dav:owner</principal>
 22      <privilege>
 23        <all/>
 24      </privilege>
 25    </ace>
 26    <ace>
 27      <grant>true</grant>
 28      <principal>XDBADMIN</principal>
 29      <privilege>
 30        <all/>
 31      </privilege>
 32    </ace>
 33    <ace>
 34      <grant>true</grant>
 35      <principal>PUBLIC</principal>
 36      <privilege>
 37        <read-properties/>
 38        <read-contents/>
 39        <read-acl/>
 40        <resolve/>
 41      </privilege>
 42    </ace>
 43  </acl>';
 44  
 45     r_abspath := '/sys/acls/all_all_acl.xml';
 46     r_data :=
 47  '<acl description="Public:All privileges to PUBLIC"
 48        xmlns="http://xmlns.oracle.com/xdb/acl.xsd"
 49        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 50        xsi:schemaLocation="http://xmlns.oracle.com/xdb/acl.xsd
 51                            http://xmlns.oracle.com/xdb/acl.xsd">
 52    <ace>
 53      <grant>true</grant>
 54      <principal>PUBLIC</principal>
 55      <privilege>
 56        <all/>
 57      </privilege>
 58    </ace>
 59  </acl>';
 60  
 61     o_abspath := '/sys/acls/all_owner_acl.xml';
 62     o_data :=
 63  '<acl description="Private:All privileges to OWNER only and not accessible to others"
 64        xmlns="http://xmlns.oracle.com/xdb/acl.xsd" xmlns:dav="DAV:"
 65        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 66        xsi:schemaLocation="http://xmlns.oracle.com/xdb/acl.xsd
 67                            http://xmlns.oracle.com/xdb/acl.xsd">
 68    <ace>
 69      <grant>true</grant>
 70      <principal>dav:owner</principal>
 71      <privilege>
 72        <all/>
 73      </privilege>
 74    </ace>
 75  </acl>';
 76  
 77     ro_abspath := '/sys/acls/ro_all_acl.xml';
 78     ro_data :=
 79  '<acl description="Read-Only:Readable by all and writeable by none"
 80        xmlns="http://xmlns.oracle.com/xdb/acl.xsd"
 81        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 82        xsi:schemaLocation="http://xmlns.oracle.com/xdb/acl.xsd
 83                            http://xmlns.oracle.com/xdb/acl.xsd">
 84    <ace>
 85      <grant>true</grant>
 86      <principal>PUBLIC</principal>
 87      <privilege>
 88        <read-properties/>
 89        <read-contents/>
 90        <read-acl/>
 91        <resolve/>
 92      </privilege>
 93    </ace>
 94  </acl>';
 95  
 96     retbool := dbms_xdb.createresource(b_abspath, b_data);
 97     retbool := dbms_xdb.createresource(r_abspath, r_data);
 98     retbool := dbms_xdb.createresource(o_abspath, o_data);
 99     retbool := dbms_xdb.createresource(ro_abspath, ro_data);
100  END;
101  /

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2     tablename     varchar2(2000);
  3     sqlstatement  varchar2(2000);
  4  begin
  5     select e.xmldata.default_table into tablename from xdb.xdb$element e where e.xmldata.property.parent_schema = ( select ref(s) from xdb.xdb$schema s where s.xmldata.schema_url = 'http://xmlns.oracle.com/xdb/acl.xsd') and e.xmldata.property.name = 'acl';
  6  
  7     tablename := 'xdb.' || '"' || tablename || '"';
  8  
  9     sqlstatement := 'update xdb.xdb$resource r set r.xmldata.acloid = ( select e.sys_nc_oid$ from ' || tablename || ' e where extractvalue(e.object_value, ''/acl/@description'') like ''Protected%'')';
 10     execute immediate sqlstatement;
 11  
 12     sqlstatement := 'update xdb.xdb$acl set acloid = ( select e.sys_nc_oid$ from ' || tablename || ' e where extractvalue(e.object_value, ''/acl/@description'') like ''Protected%'')';
 13     execute immediate sqlstatement;
 14  
 15     sqlstatement := 'update xdb.xdb$schema set acloid = ( select e.sys_nc_oid$ from ' || tablename || ' e where extractvalue(e.object_value, ''/acl/@description'') like ''Protected%'')';
 16     execute immediate sqlstatement;
 17  
 18     sqlstatement := 'update xdb.xdb$h_index set acl_id = ( select e.sys_nc_oid$ from ' || tablename || ' e where extractvalue(e.object_value, ''/acl/@description'') like ''Protected%'')';
 19     execute immediate sqlstatement;
 20  
 21     sqlstatement := 'update xdb.xdb$h_link set child_acloid = ( select e.sys_nc_oid$ from ' || tablename || ' e where extractvalue(e.object_value, ''/acl/@description'') like ''Protected%'')';
 22     execute immediate sqlstatement;
 23  end;
 24  /

PL/SQL procedure successfully completed.

SQL> 
SQL> commit;

Commit complete.

SQL> 
SQL> -- Insert a row into xdbready to indicate ACLs are available
SQL> insert into xdb.xdb$xdb_ready values (null);

1 row created.

SQL> commit;

Commit complete.

SQL> 
SQL> create or replace view XDS_ACL
  2    (ACLID, SHARED, DESCRIPTION, SECURITY_CLASS_NS,
  3     SECURITY_CLASS_NAME, PARENT_ACL_PATH, INHERITANCE_TYPE)
  4  as
  5  select a.object_id,
  6         substr(extractvalue(a.object_value, '/acl/@shared',
  7                             'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"'),
  8                1, 5),
  9         extractvalue(a.object_value, '/acl/@description',
 10                      'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"'),
 11         xmlquery('declare namespace a="http://xmlns.oracle.com/xdb/acl.xsd"; fn:namespace-uri-from-QName(fn:data(/a:acl/a:security-class))' PASSING OBJECT_VALUE returning content),
 12         xmlquery('declare namespace a="http://xmlns.oracle.com/xdb/acl.xsd"; fn:local-name-from-QName(fn:data(/a:acl/a:security-class))' PASSING OBJECT_VALUE returning content),
 13         CASE existsNode(a.object_value, '/acl/extends-from',
 14                         'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"') WHEN 1
 15         THEN extractvalue(a.object_value, '/acl/extends-from/@href',
 16                           'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"')
 17         ELSE (CASE existsNode(a.object_value, '/acl/constrained-with',
 18                               'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"')
 19               WHEN 1
 20               THEN extractvalue(a.object_value, '/acl/constrained-with/@href',
 21                                 'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"')
 22               ELSE NULL END) END,
 23         CASE existsNode(a.object_value, '/acl/extends-from',
 24                         'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"') WHEN 1
 25         THEN 'extends-from'
 26         ELSE (CASE existsNode(a.object_value, '/acl/constrained-with',
 27                               'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"')
 28               WHEN 1
 29               THEN 'constrained-with'
 30               ELSE NULL END) END
 31  FROM XDB.XDB$ACL a;

View created.

SQL> 
SQL> create or replace public synonym XDS_ACL for XDS_ACL;

Synonym created.

SQL> 
SQL> grant select on XDS_ACL to PUBLIC;

Grant succeeded.

SQL> 
SQL> comment on table XDS_ACL is
  2  'All ACLs that are visible to the current user in the database'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACL.ACLID is
  2  'The ACL ID of an ACL'
  3  /

Comment created.

SQL> comment on column XDS_ACL.SHARED is
  2  'Whether this ACL is shared or not'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACL.DESCRIPTION is
  2  'The ACL description'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACL.SECURITY_CLASS_NS is
  2  'The namespace of the Security Class'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACL.SECURITY_CLASS_NAME is
  2  'The name of the Security Class'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACL.PARENT_ACL_PATH is
  2  'The path of its parent ACL'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACL.INHERITANCE_TYPE is
  2  'The inhertance type, i.e. constrained-with or extends-from'
  3  /

Comment created.

SQL> 
SQL> create or replace view XDS_ACE
  2    (ACLID, START_DATE, END_DATE, IS_GRANT,
  3     INVERT, PRINCIPAL, PRIVILEGE)
  4  as
  5  select a.object_id,
  6         extractvalue(value(b), '/ace/@start_date',
  7                      'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"'),
  8         extractvalue(value(b), '/ace/@end_date',
  9                      'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"'),
 10         substr(extractvalue(value(b), '/ace/grant',
 11                             'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"'),
 12                1, 5),
 13         CASE existsNode(value(b), '/ace/invert',
 14                        'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"') WHEN 1
 15         THEN 'true'
 16         ELSE 'false' END,
 17         CASE existsNode(value(b), '/ace/invert',
 18                         'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"') WHEN 1
 19         THEN extractvalue(value(b), '/ace/invert/principal',
 20                           'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"')
 21         ELSE extractvalue(value(b), '/ace/principal',
 22                           'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"') END,
 23         extract(value(b), '/ace/privilege',
 24                 'xmlns="http://xmlns.oracle.com/xdb/acl.xsd"')
 25  from xdb.xdb$acl a,
 26       table(XMLSequence(extract(a.object_value, '/acl/ace'))) b;

View created.

SQL> 
SQL> create or replace public synonym XDS_ACE for XDS_ACE;

Synonym created.

SQL> 
SQL> grant select on XDS_ACE to PUBLIC;

Grant succeeded.

SQL> 
SQL> comment on table XDS_ACE is
  2  'All ACEs in ACLs that are visible to the current user in the database'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACE.ACLID is
  2  'The ACL ID of an ACL'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACE.START_DATE is
  2  'The start_date attribute of the ACE'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACE.END_DATE is
  2  'The end_date attribute of the ACE'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACE.IS_GRANT is
  2  'true if this is a grant ACE, false otherwise'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACE.INVERT is
  2  'true if this ACE contains invert principal, false otherwise'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACE.PRINCIPAL is
  2  'The principal in this ACE'
  3  /

Comment created.

SQL> 
SQL> comment on column XDS_ACE.PRIVILEGE is
  2  'The privileges in this ACE'
  3  /

Comment created.

SQL> 
SQL> commit;

Commit complete.

SQL> 
SQL> call xdb.dbms_xdbz0.initXDBSecurity();

Call completed.

SQL> 
SQL> -- Enable XRLS hierarchy priv check for xdb$acl and xdb$schema tables
SQL> BEGIN
  2     xdb.dbms_xdbz.enable_hierarchy('XDB', 'XDB$ACL');
  3     -- xdb.dbms_xdbz.enable_hierarchy('XDB', 'XDB$SCHEMA');
  4  END;
  5  /

PL/SQL procedure successfully completed.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> Rem Make XDB$ACL writable by all users
SQL> grant select, insert, update, delete on XDB.XDB$ACL to public;

Grant succeeded.

SQL> commit;

Commit complete.

SQL> 
SQL> Rem Register the DAV schema
SQL> @@catxdav
SQL> Rem
SQL> Rem $Header: catxdav.sql 08-jan-2007.17:47:53 mrafiq Exp $
SQL> Rem
SQL> Rem catxdav.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2007, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdav.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    mrafiq      01/08/07 - bug 5726607: register DAV schema as Binary XML
SQL> Rem    mrafiq      04/07/06 - cleaning up
SQL> Rem    petam       03/17/06 -
> Rem    abagrawa    03/14/06 - Register DAV schema
SQL> Rem    abagrawa    03/14/06 - Register DAV schema
SQL> Rem    abagrawa    03/14/06 - Created
SQL> Rem
SQL> 
SQL> 
SQL> @@catxdbh
SQL> Rem
SQL> Rem $Header: catxdbh.sql 06-oct-2006.09:59:54 lbarton Exp $
SQL> Rem
SQL> Rem catxdbh.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbh.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    lbarton     10/06/06 - bug 5371722: restore _kolfuseslf to prior value
SQL> Rem    spetride    08/28/06 - support access xdbconfig.xml.11.0
SQL> Rem    mrafiq      04/07/06 - cleaning up
SQL> Rem    abagrawa    03/20/06 - Remove set echo on
SQL> Rem    abagrawa    03/11/06 - Contains dbms_metadata_hack
SQL> Rem    abagrawa    03/11/06 - Contains dbms_metadata_hack
SQL> Rem    abagrawa    03/11/06 - Created
SQL> Rem
SQL> 
SQL> --
SQL> -- Register XML schemas for SXML docs
SQL> -- When XDK is created by catproc.sql, this code can go into
SQL> --  dbms_metadata_util.  For now we keep it here.
SQL> --
SQL> create or replace package dbms_metadata_hack authid definer as
  2    procedure cre_dir;
  3    procedure drop_dir;
  4    function  get_bfile(filename varchar2) return BFILE;
  5    procedure load_xsd(filename varchar2,
  6                       gentypes1 boolean := FALSE);
  7    procedure deleteSchema(name varchar2);
  8  
  9    -- above procedures assume directory is rdbms/xml/schema
 10    -- following procedures are needed for rdbms/xml access
 11    procedure cre_xml_dir;
 12    procedure drop_xml_dir;
 13    function  get_xml_bfile(filename varchar2) return BFILE;
 14    function  get_xml_dirname return VARCHAR2;
 15  
 16  end dbms_metadata_hack;
 17  /

Package created.

SQL> show errors
No errors.
SQL> 
SQL> create or replace type dirnamesmh as varray(2) of varchar2(2000);
  2  /

Type created.

SQL> 
SQL> create or replace package body dbms_metadata_hack as
  2  --------------------------------------------------------------------
  3  -- PACKAGE STATE
  4  --
  5  kolfuseslf           VARCHAR2(4000) := 'FALSE';
  6  XML_DIR              CONSTANT BINARY_INTEGER := 1;
  7  SCHEMA_DIR           CONSTANT BINARY_INTEGER := 2;
  8  
  9  RDBMS_DIR  CONSTANT DIRNAMESMH := DIRNAMESMH(NULL, 'schema');
 10  LOGIC_DIR  CONSTANT DIRNAMESMH := DIRNAMESMH('XMLDIR', 'XSDDIR');
 11  -- XSDDIR: schema directory name
 12  -- XMLDIR: xml doc directory name
 13  
 14  -- Constants defined in rdbms/include/splatform3.h
 15  PLATFORM_WINDOWS32    CONSTANT BINARY_INTEGER := 7;
 16  PLATFORM_WINDOWS64    CONSTANT BINARY_INTEGER := 8;
 17  PLATFORM_OPENVMS      CONSTANT BINARY_INTEGER := 15;
 18  
 19  ---------------------------------------------------------------------
 20  -- GET_DIR_INT: Helper function. Return the platform-
 21  --  specific pathname for the rdbms/xml/`subdir` directory.
 22  -- RETURNS:
 23  --                      - directory containing XML data/schemas
 24  
 25    FUNCTION get_dir_int(subdir BINARY_INTEGER) RETURN VARCHAR2 IS
 26      -- local variables
 27      pfid        NUMBER;
 28      root        VARCHAR2(2000);
 29      oraroot     VARCHAR2(2000);
 30  BEGIN
 31    -- get the platform id
 32    SELECT platform_id INTO pfid FROM v$database;
 33  
 34    IF pfid = PLATFORM_OPENVMS THEN
 35      -- ORA_ROOT is a VMS logical name
 36      IF (subdir = XML_DIR) THEN
 37        oraroot := 'ORA_ROOT:[RDBMS.XML]';
 38      ELSE
 39         oraroot := 'ORA_ROOT:[RDBMS.XML.' || RDBMS_DIR(subdir) || ']';
 40      END IF;
 41      RETURN oraroot;
 42    ELSE
 43      -- Get ORACLE_HOME
 44      DBMS_SYSTEM.GET_ENV('ORACLE_HOME', root);
 45      -- Return platform-specific string
 46      IF pfid = PLATFORM_WINDOWS32 OR pfid = PLATFORM_WINDOWS64
 47      THEN
 48        IF (subdir = XML_DIR) THEN
 49          oraroot := root || '\rdbms\xml';
 50        ELSE
 51          oraroot := root || '\rdbms\xml\' || RDBMS_DIR(subdir);
 52        END IF;
 53        RETURN oraroot;
 54      ELSE
 55        IF (subdir = XML_DIR) THEN
 56          oraroot := root || '/rdbms/xml';
 57        ELSE
 58          oraroot := root || '/rdbms/xml/' || RDBMS_DIR(subdir);
 59        END IF;
 60        RETURN oraroot;
 61      END IF;
 62    END IF;
 63  END;
 64  
 65  
 66    FUNCTION get_schema_dir RETURN VARCHAR2 IS
 67      oraroot VARCHAR2(2000);
 68  BEGIN
 69    oraroot := get_dir_int(SCHEMA_DIR);
 70    RETURN oraroot;
 71  END;
 72  
 73  
 74    procedure drop_dir_int(subdir BINARY_INTEGER) is
 75      stmt                VARCHAR2(2000);
 76  BEGIN
 77    stmt := 'DROP DIRECTORY ' || LOGIC_DIR(subdir);
 78    EXECUTE IMMEDIATE stmt;
 79  
 80    -- alter session: disable use of symbolic links
 81    -- (restore the variable to its prior value)
 82    stmt := 'ALTER SESSION SET "_kolfuseslf" = ' || kolfuseslf;
 83    EXECUTE IMMEDIATE stmt;
 84  
 85  END;
 86  
 87    procedure cre_dir_int(subdir BINARY_INTEGER) is
 88      -- local variables
 89      kolfuseslf_cnt      NUMBER := 0;
 90      dirpath             VARCHAR2(2000);
 91      stmt                VARCHAR2(2000);
 92  BEGIN
 93    -- alter session: enable use of symbolic links
 94    -- first get the current value of _kolfuseslf (default FALSE)
 95    stmt := 'SELECT COUNT(*) FROM V$PARAMETER WHERE NAME=''_kolfuseslf''';
 96    EXECUTE IMMEDIATE stmt INTO kolfuseslf_cnt;
 97    IF kolfuseslf_cnt != 0 THEN
 98      stmt := 'SELECT VALUE FROM V$PARAMETER WHERE NAME=''_kolfuseslf''';
 99      EXECUTE IMMEDIATE stmt INTO kolfuseslf;
100    END IF;
101    stmt := 'ALTER SESSION SET "_kolfuseslf" = TRUE';
102    EXECUTE IMMEDIATE stmt;
103  
104    -- get directory path
105    dirpath := get_dir_int(subdir);
106  
107    -- create a directory object
108    stmt := 'CREATE OR REPLACE DIRECTORY ' || LOGIC_DIR(subdir) ||
109            ' AS ''' || dirpath || '''';
110    EXECUTE IMMEDIATE stmt;
111  
112    EXCEPTION WHEN OTHERS THEN
113      BEGIN
114      drop_dir_int(subdir);
115      RAISE;
116      END;
117  END;
118  
119  
120  
121    procedure cre_dir is
122  BEGIN
123     cre_dir_int(SCHEMA_DIR);
124  END;
125  
126  
127    procedure drop_dir is
128  BEGIN
129     drop_dir_int(SCHEMA_DIR);
130  END;
131  
132  
133    function get_bfile(filename varchar2) return BFILE is
134    begin
135      return BFILENAME(LOGIC_DIR(SCHEMA_DIR), filename);
136    end;
137  
138  
139    procedure load_xsd(filename varchar2,
140           gentypes1 boolean := FALSE) is
141    ssfile              BFILE;
142  begin
143    ssfile := BFILENAME(LOGIC_DIR(SCHEMA_DIR), filename);
144    dbms_xmlschema.registerSchema(filename, ssfile,TRUE,gentypes1,FALSE, FALSE);
145    EXCEPTION WHEN OTHERS THEN
146      BEGIN
147      ROLLBACK;
148      drop_dir;
149      RAISE;
150      END;
151  end;
152    procedure deleteSchema(name varchar2) is
153    err_num NUMBER;
154  begin
155    dbms_xmlschema.deleteSchema(name, dbms_xmlschema.DELETE_CASCADE_FORCE);
156    EXCEPTION WHEN OTHERS THEN
157      BEGIN
158      -- suppress expected exception
159      -- ORA-31000: Resource '<name>' is not an XDB schema document
160      err_num := SQLCODE;
161      IF err_num != -31000 THEN
162        RAISE;
163      END IF;
164      END;
165  end;
166  
167  
168  ---------------------------------------------------------------------
169  -- GET_XML_DIR: Helper function. Return the platform-
170  --  specific pathname for the rdbms/xml directory.
171  -- RETURNS:
172  --                      - directory containing XML docs
173  
174    FUNCTION get_xml_dir RETURN VARCHAR2 IS
175      oraroot VARCHAR2(2000);
176  BEGIN
177    oraroot := get_dir_int(XML_DIR);
178    RETURN oraroot;
179  END;
180  
181  
182    procedure drop_xml_dir is
183  BEGIN
184    drop_dir_int(XML_DIR);
185  END;
186  
187  
188    procedure cre_xml_dir is
189  BEGIN
190     cre_dir_int(XML_DIR);
191  END;
192  
193    function get_xml_bfile(filename varchar2) return BFILE is
194    begin
195      return BFILENAME(LOGIC_DIR(XML_DIR), filename);
196    end;
197  
198    function  get_xml_dirname return VARCHAR2 is
199    begin
200      return LOGIC_DIR(XML_DIR);
201    end;
202  
203  end dbms_metadata_hack;
204  /

Package body created.

SQL> show errors
No errors.
SQL> 
SQL> create or replace procedure register_dav_schema(dav_filename in varchar2,
  2                                                  IsDowngrade in boolean) is
  3    DAVXSD BFILE := dbms_metadata_hack.get_bfile(dav_filename);
  4    DAVURL VARCHAR2(2000) := 'http://xmlns.oracle.com/xdb/dav.xsd';
  5  begin
  6  
  7   if IsDowngrade then
  8     xdb.dbms_xmlschema.registerSchema(DAVURL, DAVXSD, FALSE, TRUE, FALSE, TRUE,
  9                                       FALSE, 'XDB');
 10   else
 11     xdb.dbms_xmlschema.registerSchema(DAVURL, DAVXSD, FALSE, FALSE, FALSE, TRUE,
 12                                       FALSE, 'XDB', options => DBMS_XMLSCHEMA.REGISTER_BINARYXML);
 13   end if;
 14  end;
 15  /

Procedure created.

SQL> 
SQL> 
SQL> 
SQL> exec register_dav_schema('dav.xsd.11.0',FALSE);

PL/SQL procedure successfully completed.

SQL> 
SQL> @@catxdav2
SQL> Rem
SQL> Rem $Header: catxdav2.sql 07-apr-2006.17:54:02 mrafiq Exp $
SQL> Rem
SQL> Rem catxdav2.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdav2.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    mrafiq      04/07/06 - cleaning up
SQL> Rem    petam       03/17/06 -
> Rem    abagrawa    03/15/06 - Drop dav schema registration functions
SQL> Rem    abagrawa    03/15/06 - Drop dav schema registration functions
SQL> Rem    abagrawa    03/15/06 - Created
SQL> Rem
SQL> 
SQL> 
SQL> drop procedure register_dav_schema;

Procedure dropped.

SQL> 
SQL> Rem Initialize ResConfig
SQL> @@catxev
SQL> Rem
SQL> Rem $Header: catxev.sql 14-nov-2007.11:55:17 yifeng Exp $
SQL> Rem
SQL> Rem catxev.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2007, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxev.sql - script to register XDBResConfig.xsd schema
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    yifeng      11/13/07 - call catxdbh to create dbms_metadata_hack
SQL> Rem    thbaby      11/07/07 - use bfile for resconfig schema registration
SQL> Rem    jwwarner    08/13/07 - enhance link entry to include pre-condition
SQL> Rem    smalde      03/21/07 - Enable hierarchy on XDB$RESCONFIG
SQL> Rem    sidicula    01/13/07 - Restrict privileges on ResConfig tab
SQL> Rem    vkapoor     12/20/06 - Making Resconfig schema binary
SQL> Rem    rmurthy     08/04/06 - add contentformat
SQL> Rem    rmurthy     03/13/06 - add SectionConfig
SQL> Rem    thbaby      03/12/06 - disable hierarchy to avoid deadlocks
SQL> Rem    pnath       02/25/06 - add XLink, XInclude resconfig elements
SQL> Rem    mrafiq      09/28/05 - merging changes for upgrade/downgrade
SQL> Rem    thoang      09/23/03 - Created
SQL> 
SQL> set pages 0
SQL> set echo on
SQL> 
SQL> -- User must be XDB
SQL> 
SQL> 
SQL> Rem Create dbms_metadata_hack
SQL> @@catxdbh
SQL> Rem
SQL> Rem $Header: catxdbh.sql 06-oct-2006.09:59:54 lbarton Exp $
SQL> Rem
SQL> Rem catxdbh.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbh.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    lbarton     10/06/06 - bug 5371722: restore _kolfuseslf to prior value
SQL> Rem    spetride    08/28/06 - support access xdbconfig.xml.11.0
SQL> Rem    mrafiq      04/07/06 - cleaning up
SQL> Rem    abagrawa    03/20/06 - Remove set echo on
SQL> Rem    abagrawa    03/11/06 - Contains dbms_metadata_hack
SQL> Rem    abagrawa    03/11/06 - Contains dbms_metadata_hack
SQL> Rem    abagrawa    03/11/06 - Created
SQL> Rem
SQL> 
SQL> --
SQL> -- Register XML schemas for SXML docs
SQL> -- When XDK is created by catproc.sql, this code can go into
SQL> --  dbms_metadata_util.  For now we keep it here.
SQL> --
SQL> create or replace package dbms_metadata_hack authid definer as
  2    procedure cre_dir;
  3    procedure drop_dir;
  4    function  get_bfile(filename varchar2) return BFILE;
  5    procedure load_xsd(filename varchar2,
  6                       gentypes1 boolean := FALSE);
  7    procedure deleteSchema(name varchar2);
  8  
  9    -- above procedures assume directory is rdbms/xml/schema
 10    -- following procedures are needed for rdbms/xml access
 11    procedure cre_xml_dir;
 12    procedure drop_xml_dir;
 13    function  get_xml_bfile(filename varchar2) return BFILE;
 14    function  get_xml_dirname return VARCHAR2;
 15  
 16  end dbms_metadata_hack;
 17  /

Package created.

SQL> show errors
No errors.
SQL> 
SQL> create or replace type dirnamesmh as varray(2) of varchar2(2000);
  2  /

Type created.

SQL> 
SQL> create or replace package body dbms_metadata_hack as
  2  --------------------------------------------------------------------
  3  -- PACKAGE STATE
  4  --
  5  kolfuseslf           VARCHAR2(4000) := 'FALSE';
  6  XML_DIR              CONSTANT BINARY_INTEGER := 1;
  7  SCHEMA_DIR           CONSTANT BINARY_INTEGER := 2;
  8  
  9  RDBMS_DIR  CONSTANT DIRNAMESMH := DIRNAMESMH(NULL, 'schema');
 10  LOGIC_DIR  CONSTANT DIRNAMESMH := DIRNAMESMH('XMLDIR', 'XSDDIR');
 11  -- XSDDIR: schema directory name
 12  -- XMLDIR: xml doc directory name
 13  
 14  -- Constants defined in rdbms/include/splatform3.h
 15  PLATFORM_WINDOWS32    CONSTANT BINARY_INTEGER := 7;
 16  PLATFORM_WINDOWS64    CONSTANT BINARY_INTEGER := 8;
 17  PLATFORM_OPENVMS      CONSTANT BINARY_INTEGER := 15;
 18  
 19  ---------------------------------------------------------------------
 20  -- GET_DIR_INT: Helper function. Return the platform-
 21  --  specific pathname for the rdbms/xml/`subdir` directory.
 22  -- RETURNS:
 23  --                      - directory containing XML data/schemas
 24  
 25    FUNCTION get_dir_int(subdir BINARY_INTEGER) RETURN VARCHAR2 IS
 26      -- local variables
 27      pfid        NUMBER;
 28      root        VARCHAR2(2000);
 29      oraroot     VARCHAR2(2000);
 30  BEGIN
 31    -- get the platform id
 32    SELECT platform_id INTO pfid FROM v$database;
 33  
 34    IF pfid = PLATFORM_OPENVMS THEN
 35      -- ORA_ROOT is a VMS logical name
 36      IF (subdir = XML_DIR) THEN
 37        oraroot := 'ORA_ROOT:[RDBMS.XML]';
 38      ELSE
 39         oraroot := 'ORA_ROOT:[RDBMS.XML.' || RDBMS_DIR(subdir) || ']';
 40      END IF;
 41      RETURN oraroot;
 42    ELSE
 43      -- Get ORACLE_HOME
 44      DBMS_SYSTEM.GET_ENV('ORACLE_HOME', root);
 45      -- Return platform-specific string
 46      IF pfid = PLATFORM_WINDOWS32 OR pfid = PLATFORM_WINDOWS64
 47      THEN
 48        IF (subdir = XML_DIR) THEN
 49          oraroot := root || '\rdbms\xml';
 50        ELSE
 51          oraroot := root || '\rdbms\xml\' || RDBMS_DIR(subdir);
 52        END IF;
 53        RETURN oraroot;
 54      ELSE
 55        IF (subdir = XML_DIR) THEN
 56          oraroot := root || '/rdbms/xml';
 57        ELSE
 58          oraroot := root || '/rdbms/xml/' || RDBMS_DIR(subdir);
 59        END IF;
 60        RETURN oraroot;
 61      END IF;
 62    END IF;
 63  END;
 64  
 65  
 66    FUNCTION get_schema_dir RETURN VARCHAR2 IS
 67      oraroot VARCHAR2(2000);
 68  BEGIN
 69    oraroot := get_dir_int(SCHEMA_DIR);
 70    RETURN oraroot;
 71  END;
 72  
 73  
 74    procedure drop_dir_int(subdir BINARY_INTEGER) is
 75      stmt                VARCHAR2(2000);
 76  BEGIN
 77    stmt := 'DROP DIRECTORY ' || LOGIC_DIR(subdir);
 78    EXECUTE IMMEDIATE stmt;
 79  
 80    -- alter session: disable use of symbolic links
 81    -- (restore the variable to its prior value)
 82    stmt := 'ALTER SESSION SET "_kolfuseslf" = ' || kolfuseslf;
 83    EXECUTE IMMEDIATE stmt;
 84  
 85  END;
 86  
 87    procedure cre_dir_int(subdir BINARY_INTEGER) is
 88      -- local variables
 89      kolfuseslf_cnt      NUMBER := 0;
 90      dirpath             VARCHAR2(2000);
 91      stmt                VARCHAR2(2000);
 92  BEGIN
 93    -- alter session: enable use of symbolic links
 94    -- first get the current value of _kolfuseslf (default FALSE)
 95    stmt := 'SELECT COUNT(*) FROM V$PARAMETER WHERE NAME=''_kolfuseslf''';
 96    EXECUTE IMMEDIATE stmt INTO kolfuseslf_cnt;
 97    IF kolfuseslf_cnt != 0 THEN
 98      stmt := 'SELECT VALUE FROM V$PARAMETER WHERE NAME=''_kolfuseslf''';
 99      EXECUTE IMMEDIATE stmt INTO kolfuseslf;
100    END IF;
101    stmt := 'ALTER SESSION SET "_kolfuseslf" = TRUE';
102    EXECUTE IMMEDIATE stmt;
103  
104    -- get directory path
105    dirpath := get_dir_int(subdir);
106  
107    -- create a directory object
108    stmt := 'CREATE OR REPLACE DIRECTORY ' || LOGIC_DIR(subdir) ||
109            ' AS ''' || dirpath || '''';
110    EXECUTE IMMEDIATE stmt;
111  
112    EXCEPTION WHEN OTHERS THEN
113      BEGIN
114      drop_dir_int(subdir);
115      RAISE;
116      END;
117  END;
118  
119  
120  
121    procedure cre_dir is
122  BEGIN
123     cre_dir_int(SCHEMA_DIR);
124  END;
125  
126  
127    procedure drop_dir is
128  BEGIN
129     drop_dir_int(SCHEMA_DIR);
130  END;
131  
132  
133    function get_bfile(filename varchar2) return BFILE is
134    begin
135      return BFILENAME(LOGIC_DIR(SCHEMA_DIR), filename);
136    end;
137  
138  
139    procedure load_xsd(filename varchar2,
140           gentypes1 boolean := FALSE) is
141    ssfile              BFILE;
142  begin
143    ssfile := BFILENAME(LOGIC_DIR(SCHEMA_DIR), filename);
144    dbms_xmlschema.registerSchema(filename, ssfile,TRUE,gentypes1,FALSE, FALSE);
145    EXCEPTION WHEN OTHERS THEN
146      BEGIN
147      ROLLBACK;
148      drop_dir;
149      RAISE;
150      END;
151  end;
152    procedure deleteSchema(name varchar2) is
153    err_num NUMBER;
154  begin
155    dbms_xmlschema.deleteSchema(name, dbms_xmlschema.DELETE_CASCADE_FORCE);
156    EXCEPTION WHEN OTHERS THEN
157      BEGIN
158      -- suppress expected exception
159      -- ORA-31000: Resource '<name>' is not an XDB schema document
160      err_num := SQLCODE;
161      IF err_num != -31000 THEN
162        RAISE;
163      END IF;
164      END;
165  end;
166  
167  
168  ---------------------------------------------------------------------
169  -- GET_XML_DIR: Helper function. Return the platform-
170  --  specific pathname for the rdbms/xml directory.
171  -- RETURNS:
172  --                      - directory containing XML docs
173  
174    FUNCTION get_xml_dir RETURN VARCHAR2 IS
175      oraroot VARCHAR2(2000);
176  BEGIN
177    oraroot := get_dir_int(XML_DIR);
178    RETURN oraroot;
179  END;
180  
181  
182    procedure drop_xml_dir is
183  BEGIN
184    drop_dir_int(XML_DIR);
185  END;
186  
187  
188    procedure cre_xml_dir is
189  BEGIN
190     cre_dir_int(XML_DIR);
191  END;
192  
193    function get_xml_bfile(filename varchar2) return BFILE is
194    begin
195      return BFILENAME(LOGIC_DIR(XML_DIR), filename);
196    end;
197  
198    function  get_xml_dirname return VARCHAR2 is
199    begin
200      return LOGIC_DIR(XML_DIR);
201    end;
202  
203  end dbms_metadata_hack;
204  /

Package body created.

SQL> show errors
No errors.
SQL> 
SQL> Rem Register XDBResConfig.xsd Schema
SQL> 
SQL> declare
  2    XMLNSXSD BFILE := dbms_metadata_hack.get_bfile('rescfg.xsd.11.2');
  3    XMLNSURL VARCHAR2(2000) := 'http://xmlns.oracle.com/xdb/XDBResConfig.xsd';
  4  begin
  5    xdb.dbms_xmlschema.registerSchema(XMLNSURL, XMLNSXSD, FALSE, FALSE, FALSE,
  6                                      TRUE, FALSE, 'XDB',
  7                                     options=>DBMS_XMLSCHEMA.REGISTER_BINARYXML);
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> grant select, insert, update, delete on xdb.xdb$resconfig to public;

Grant succeeded.

SQL> 
SQL> -- Add refcount to xdb$resconfig table
SQL> alter session set events='12498 trace name context level 2, forever';

Session altered.

SQL> alter table xdb.xdb$resconfig add (refcount number default 0);

Table altered.

SQL> alter session set events='12498 trace name context off';

Session altered.

SQL> 
SQL> -- The XDB_SET_INVOKER is needed to define an invoker-rights handler in
SQL> -- a resource resconfig.
SQL> create role XDB_SET_INVOKER;

Role created.

SQL> grant XDB_SET_INVOKER to DBA;

Grant succeeded.

SQL> 
SQL> 
SQL> 
SQL> Rem Initialize XDB standard packages (Configuration, Servlets, etc.)
SQL> @@catxdbst.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catxdbst.sql /main/22 2009/04/06 20:28:13 badeoti Exp $
SQL> Rem
SQL> Rem catxdbstd.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2009, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbstd.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    badeoti     03/20/09 - remove public synonyms for XDB internal packages
SQL> Rem    spetride    10/22/08 - add app users and groups virtual folders
SQL> Rem    rmurthy     01/17/05 - add path for symbolic links
SQL> Rem    rmurthy     01/10/05 - add link type
SQL> Rem    bkhaladk    04/24/06 - add clob version of xmltr.xsd
SQL> Rem    thbaby      08/30/05 - add version virtual folder
SQL> Rem    thbaby      04/21/05 -
> Rem    pnath       12/01/04 - prvtxdb.sql needs prvtxmld.sql to be compiled
SQL> Rem    rmurthy     10/29/03 - enable asm folder
SQL> Rem    rmurthy     08/28/03 - uncomment oid folder
SQL> Rem    sichandr    04/06/03 - add folder listing schema
SQL> Rem    spannala    12/19/02 - fixing bug#2702653
SQL> Rem    rmurthy     01/13/03 - create OSM virtual folder
SQL> Rem    rmurthy     10/07/02 - create system virtual folders
SQL> Rem    rmurthy     03/26/02 - add XML Namespace schema
SQL> Rem    rmurthy     12/28/01 - set elementForm to qualified
SQL> Rem    rmurthy     12/17/01 - TEMP: change dateTime to date
SQL> Rem    rmurthy     12/17/01 - fix schemas
SQL> Rem    spannala    12/27/01 - xdb setup should run as sys
SQL> Rem    tsingh      11/26/01 - use .plb for prvtxmld, prvtxmlp, prvtxslp
SQL> Rem    nagarwal    11/05/01 - correct names for path view
SQL> Rem    nagarwal    10/31/01 - move path view schema def into standard
SQL> Rem    sidicula    10/02/01 - XDB Logging
SQL> Rem    nmontoya    08/30/01 - ADD pl/sql dom, xml parser, AND xsl processor
SQL> Rem    rmurthy     09/03/01 - change XDB namespace
SQL> Rem    esedlar     08/13/01 - Merged esedlar_http
SQL> Rem    esedlar     08/09/01 - Created
SQL> Rem
SQL> 
SQL> declare
  2   STDURL VARCHAR2(2000) := 'http://xmlns.oracle.com/xdb/XDBStandard.xsd';
  3   XLURL VARCHAR2(2000) :=
  4    'http://xmlns.oracle.com/xdb/log/xdblog.xsd';
  5   FLURL VARCHAR2(2000) :=
  6    'http://xmlns.oracle.com/xdb/log/ftplog.xsd';
  7   HLURL VARCHAR2(2000) :=
  8    'http://xmlns.oracle.com/xdb/log/httplog.xsd';
  9  
 10   STDXSD VARCHAR2(4000) :=
 11  '<schema xmlns="http://www.w3.org/2001/XMLSchema"
 12          targetNamespace="http://xmlns.oracle.com/xdb/XDBStandard"
 13          xmlns:xdb="http://xmlns.oracle.com/xdb"
 14          version="1.0" elementFormDefault="qualified">
 15  
 16    <element name="servlet" xdb:SQLType="SERVLET_T" xdb:defaultTable="SERVLET">
 17      <complexType>
 18        <sequence>
 19          <element name="icon" type="string" minOccurs="0"/>
 20          <element name="servlet-name" type="string"/>
 21          <element name="servlet-language">
 22            <simpleType>
 23              <restriction base="string">
 24                <enumeration value="C"/>
 25                <enumeration value="Java"/>
 26                <enumeration value="PL/SQL"/>
 27              </restriction>
 28            </simpleType>
 29          </element>
 30          <element name="display-name" type="string" minOccurs="0"/>
 31          <element name="description" type="string" minOccurs="0"/>
 32          <choice>
 33            <element name="servlet-class" type="string"/>
 34            <element name="jsp-file" type="string"/>
 35          </choice>
 36          <element name="servlet-schema" type="string" minOccurs="0"/>
 37          <element name="load-on-startup" type="string" minOccurs="0"/>
 38          <element name="security-role-ref" minOccurs="0" maxOccurs="65535">
 39            <complexType>
 40              <sequence>
 41                <element name="description" type="string" minOccurs="0"/>
 42                <element name="role-name" type="string"/>
 43                <element name="role-link" type="string"/>
 44              </sequence>
 45            </complexType>
 46          </element>
 47        </sequence>
 48      </complexType>
 49    </element>
 50  
 51    <element name = "LINK" xdb:SQLType="XDB_LINK_TYPE" xdb:SQLSchema="XDB" xdb:defaultTable="">
 52     <complexType>
 53      <sequence>
 54       <element name="ParentName">
 55         <simpleType>
 56           <restriction base = "string">
 57             <length value = "256"/>
 58           </restriction>
 59         </simpleType>
 60       </element>
 61       <element name="ChildName">
 62         <simpleType>
 63           <restriction base = "string">
 64             <length value = "1024"/>
 65           </restriction>
 66         </simpleType>
 67       </element>
 68       <element name= "Name">
 69         <simpleType>
 70           <restriction base = "string">
 71             <length value = "256"/>
 72           </restriction>
 73         </simpleType>
 74       </element>
 75       <element name= "Flags">
 76         <simpleType>
 77           <restriction base = "base64Binary">
 78             <length value = "4"/>
 79           </restriction>
 80         </simpleType>
 81       </element>
 82       <element name="ParentOid">
 83         <simpleType>
 84           <restriction base = "base64Binary">
 85             <length value = "16"/>
 86           </restriction>
 87         </simpleType>
 88       </element>
 89       <element name="ChildOid">
 90         <simpleType>
 91           <restriction base = "base64Binary">
 92             <length value = "16"/>
 93           </restriction>
 94         </simpleType>
 95      </element>
 96      <element name="LinkType">
 97        <simpleType>
 98          <restriction base="string">
 99            <enumeration value="Hard"/>
100            <enumeration value="Weak"/>
101            <enumeration value="Symbolic"/>
102          </restriction>
103        </simpleType>
104      </element>
105      </sequence>
106     </complexType>
107    </element>
108  
109  </schema>';
110  
111   XLXSD VARCHAR2(4000) :=
112  '<schema
113  targetNamespace="http://xmlns.oracle.com/xdb/log"
114       xmlns="http://www.w3.org/2001/XMLSchema"
115       xmlns:xdb="http://xmlns.oracle.com/xdb"
116       xmlns:xl="http://xmlns.oracle.com/xdb/log"
117       version="1.0" elementFormDefault="qualified">
118  
119  <complexType name="xdb-log-entry-type">
120    <sequence>
121      <!-- TODO: Need to change to enumerated types -->
122      <!-- TEMP : change date to dateTime -->
123      <element name="Date-and-Time" type="date"/>
124      <element name="Module" type="string"/> <!-- XDBCORE, FTP or HTTP -->
125      <element name="Description" type="string"/>
126      <element name="User-ID" type="string"/> <!-- eg., SCOTT -->
127      <element name="Type" type="string"/> <!-- ERROR, WARNING, INFO or DEBUG -->
128    </sequence>
129  </complexType>
130  
131  <element name="xdb-log">
132  <complexType>
133    <sequence>
134      <element name="xdb-log-entry" type="xl:xdb-log-entry-type"
135               maxOccurs="unbounded"/>
136    </sequence>
137  </complexType>
138  </element>
139  
140  </schema>';
141  
142  FLXSD VARCHAR2(4000) :=
143   '<schema
144   targetNamespace="http://xmlns.oracle.com/xdb/log"
145       xmlns="http://www.w3.org/2001/XMLSchema"
146       xmlns:xdb="http://xmlns.oracle.com/xdb"
147       xmlns:xl="http://xmlns.oracle.com/xdb/log"
148       version="1.0" elementFormDefault="qualified">
149  
150  <complexType name="ftp-log-entry-type">
151    <sequence>
152        <!-- TODO: Need to change to enumerated types -->
153        <element name="Date-and-Time" type="date"/>
154        <element name="Module" type="string"/> <!-- XDBCORE, FTP or HTTP -->
155        <element name="Description" type="string"/>
156        <element name="User-ID" type="string"/> <!-- eg., SCOTT -->
157        <element name="Type" type="string"/> <!-- ERROR, WARNING, INFO or
158                                                  DEBUG -->
159        <element name="Client-IP" type="string"/>
160        <element name="Request-Command" type="string"/>
161        <element name="Response">
162          <complexType> <sequence>
163            <element name="Code" type="string"/> <!-- eg., "200" -->
164            <element name="Message" type="string"/> <!-- eg., "PORT command
165                                                              successful" -->
166          </sequence> </complexType>
167        </element>
168    </sequence>
169  </complexType>
170  
171  <element name="ftp-log">
172  <complexType>
173    <sequence>
174      <element name="ftp-log-entry" type="xl:ftp-log-entry-type"
175               maxOccurs="unbounded"/>
176    </sequence>
177  </complexType>
178  </element>
179  
180  </schema>';
181  
182  HLXSD VARCHAR2(4000) :=
183   '<schema
184  targetNamespace="http://xmlns.oracle.com/xdb/log"
185       xmlns="http://www.w3.org/2001/XMLSchema"
186       xmlns:xdb="http://xmlns.oracle.com/xdb"
187       xmlns:xl="http://xmlns.oracle.com/xdb/log"
188       version="1.0" elementFormDefault="qualified">
189  
190  <complexType name="http-log-entry-type">
191      <sequence>
192        <!-- TODO: Need to change to enumerated types -->
193        <element name="Date-and-Time" type="date"/>
194        <element name="Module" type="string"/> <!-- XDBCORE, FTP or HTTP -->
195        <element name="Description" type="string"/>
196        <element name="User-ID" type="string"/> <!-- eg., SCOTT -->
197        <element name="Type" type="string"/> <!-- ERROR, WARNING, INFO or
198                                                  DEBUG -->
199        <element name="Client-IP" type="string"/>
200        <element name="Request">
201          <complexType> <sequence>
202            <element name="Method" type="string"/> <!-- eg., "GET" -->
203            <element name="Resource-Path" type="string"/> <!-- eg., "/file1" -->
204            <element name="Version" type="string"/> <!-- 1.0 or 1.1 -->
205            <element name="Headers" type="string"/>
206            <element name="Body" type="base64Binary"/>
207          </sequence> </complexType>
208        </element>
209        <element name="Response">
210          <complexType> <sequence>
211            <element name="Code" type="string"/> <!-- eg., "404" -->
212            <element name="Message" type="string"/> <!-- eg., "Not found" -->
213            <element name="Headers" type="string"/>
214            <element name="Body" type="base64Binary"/>
215          </sequence> </complexType>
216        </element>
217      </sequence>
218  </complexType>
219  
220  <element name="http-log">
221  <complexType>
222    <sequence>
223      <element name="http-log-entry" type="xl:http-log-entry-type"
224               maxOccurs="unbounded"/>
225    </sequence>
226  </complexType>
227  </element>
228  
229  </schema>';
230  
231  begin
232  
233  xdb.dbms_xmlschema.registerSchema(STDURL, STDXSD, FALSE, TRUE, FALSE, TRUE, FALSE, 'XDB');
234  xdb.dbms_xmlschema.registerSchema(XLURL, XLXSD, FALSE, TRUE, FALSE, TRUE, FALSE, 'XDB');
235  xdb.dbms_xmlschema.registerSchema(FLURL, FLXSD, FALSE, TRUE, FALSE, TRUE, FALSE, 'XDB');
236  xdb.dbms_xmlschema.registerSchema(HLURL, HLXSD, FALSE, TRUE, FALSE, TRUE, FALSE, 'XDB');
237  
238  end;
239  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> Rem Register XML Namespace schema
SQL> declare
  2    XMLNSXSD VARCHAR2(31000) :=
  3  '<?xml version="1.0"?>
  4  <xs:schema targetNamespace="http://www.w3.org/XML/1998/namespace"
  5             xmlns:xs="http://www.w3.org/2001/XMLSchema" xml:lang="en">
  6     <xs:annotation>
  7        <xs:documentation>
  8            See http://www.w3.org/XML/1998/namespace.html and
  9            http://www.w3.org/TR/REC-xml for information about this namespace.
 10        </xs:documentation>
 11     </xs:annotation>
 12  
 13     <xs:annotation>
 14        <xs:documentation>
 15            This schema defines attributes and an attribute group
 16            suitable for use by schemas wishing to allow xml:base,
 17            xml:lang or xml:space attributes on elements they define.
 18            To enable this, such a schema must import this schema
 19            for the XML namespace.
 20            import namespace="http://www.w3.org/XML/1998/namespace"
 21                   schemaLocation="http://www.w3.org/2001/xml.xsd"
 22            Subsequently, qualified reference to any of the attributes
 23            or the group defined below will have the desired effect.
 24        </xs:documentation>
 25     </xs:annotation>
 26  
 27     <xs:attribute name="lang" type="xs:language">
 28         <xs:annotation>
 29             <xs:documentation>
 30                 In due course, we should install the relevant ISO
 31                 2- and 3-letter codes as the enumerated possible values...
 32             </xs:documentation>
 33         </xs:annotation>
 34      </xs:attribute>
 35  
 36      <xs:attribute name="space" default="preserve">
 37         <xs:simpleType>
 38            <xs:restriction base="xs:NCName">
 39               <xs:enumeration value="default"/>
 40               <xs:enumeration value="preserve"/>
 41            </xs:restriction>
 42          </xs:simpleType>
 43      </xs:attribute>
 44  
 45      <xs:attribute name="base" type="xs:anyURI">
 46         <xs:annotation>
 47            <xs:documentation>
 48                 See http://www.w3.org/TR/xmlbase/ for information about this attribute.
 49            </xs:documentation>
 50         </xs:annotation>
 51      </xs:attribute>
 52  
 53      <xs:attributeGroup name="specialAttrs">
 54          <xs:attribute ref="xml:base"/>
 55          <xs:attribute ref="xml:lang"/>
 56          <xs:attribute ref="xml:space"/>
 57      </xs:attributeGroup>
 58  </xs:schema>';
 59  
 60    XMLNSURL VARCHAR2(2000) := 'http://www.w3.org/2001/xml.xsd';
 61  
 62  begin
 63  
 64  xdb.dbms_xmlschema.registerSchema(XMLNSURL, XMLNSXSD, FALSE, TRUE, FALSE, TRUE,
 65                                    FALSE, 'XDB');
 66  
 67  end;
 68  /

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2    TRXSD BFILE := dbms_metadata_hack.get_bfile('xmltr.xsd.11.0');
  3    TRURL VARCHAR2(2000) := 'http://xmlns.oracle.com/xdb/xmltr.xsd';
  4  begin
  5    xdb.dbms_xmlschema.registerSchema(TRURL, TRXSD, FALSE, FALSE, FALSE, FALSE,
  6                                      FALSE, 'XDB');
  7  end;
  8  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create OID virtual folder
SQL> declare
  2  ret boolean;
  3  begin
  4    ret := xdb.dbms_xdbutil_int.createSystemVirtualFolder('/sys/oid');
  5    if ret then
  6      dbms_xdb.setacl('/sys/oid', '/sys/acls/bootstrap_acl.xml');
  7    end if;
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> 
SQL> -- Create the folder /sys/apps
SQL> DECLARE
  2    retval BOOLEAN;
  3  BEGIN
  4    retval := DBMS_XDB.CREATEFOLDER('/sys/apps');
  5    IF retval THEN
  6     DBMS_XDB.SETACL('/sys/apps', '/sys/acls/bootstrap_acl.xml');
  7    END IF;
  8  END;
  9  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> 
SQL> Rem create ASM virtual folder
SQL> declare
  2  ret boolean;
  3  begin
  4   ret := xdb.dbms_xdbutil_int.createSystemVirtualFolder('/sys/asm');
  5   if ret then
  6     dbms_xdb.setACL('/sys/asm', '/sys/acls/all_owner_acl.xml');
  7   end if;
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> 
SQL> Rem create all folders associated with users and groups
SQL> declare
  2  ret boolean;
  3  begin
  4    ret := dbms_xdb.createFolder('/sys/principals');
  5    if ret then
  6      dbms_xdb.setACL('/sys/principals', '/sys/acls/bootstrap_acl.xml');
  7    end if;
  8  
  9    ret := dbms_xdb.createFolder('/sys/principals/users');
 10    if ret then
 11      dbms_xdb.setACL('/sys/principals/users', '/sys/acls/bootstrap_acl.xml');
 12    end if;
 13  
 14    ret := dbms_xdb.createFolder('/sys/principals/groups');
 15    if ret then
 16      dbms_xdb.setACL('/sys/principals/groups', '/sys/acls/bootstrap_acl.xml');
 17    end if;
 18  
 19    ret :=
 20      xdb.dbms_xdbutil_int.createSystemVirtualFolder('/sys/principals/users/db');
 21    if ret then
 22      dbms_xdb.setACL('/sys/principals/users/db', '/sys/acls/bootstrap_acl.xml');
 23    end if;
 24  
 25    ret :=
 26      xdb.dbms_xdbutil_int.createSystemVirtualFolder('/sys/principals/users/ldap');
 27    if ret then
 28      dbms_xdb.setACL('/sys/principals/users/ldap',
 29                      '/sys/acls/bootstrap_acl.xml');
 30    end if;
 31  
 32    ret :=
 33      xdb.dbms_xdbutil_int.createSystemVirtualFolder('/sys/principals/users/application');
 34    if ret then
 35      dbms_xdb.setACL('/sys/principals/users/application',
 36                      '/sys/acls/bootstrap_acl.xml');
 37    end if;
 38  
 39    ret :=
 40      xdb.dbms_xdbutil_int.createSystemVirtualFolder('/sys/principals/groups/db');
 41    if ret then
 42      dbms_xdb.setACL('/sys/principals/groups/db',
 43                      '/sys/acls/bootstrap_acl.xml');
 44    end if;
 45  
 46    ret :=
 47      xdb.dbms_xdbutil_int.createSystemVirtualFolder('/sys/principals/groups/ldap');
 48    if ret then
 49      dbms_xdb.setACL('/sys/principals/groups/ldap',
 50                      '/sys/acls/bootstrap_acl.xml');
 51    end if;
 52  
 53    ret :=
 54      xdb.dbms_xdbutil_int.createSystemVirtualFolder('/sys/principals/groups/application');
 55    if ret then
 56      dbms_xdb.setACL('/sys/principals/groups/application',
 57                      '/sys/acls/bootstrap_acl.xml');
 58    end if;
 59  end;
 60  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> 
SQL> Rem Create virtual folder for acl oids
SQL> declare
  2  ret boolean;
  3  begin
  4    ret :=
  5      xdb.dbms_xdbutil_int.createSystemVirtualFolder('/sys/acloids');
  6    if ret then
  7      dbms_xdb.setACL('/sys/acloids', '/sys/acls/bootstrap_acl.xml');
  8   end if;
  9  end;
 10  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> 
SQL> Rem create version virtual folder
SQL> declare
  2  ret boolean;
  3  begin
  4   ret := xdb.dbms_xdbutil_int.createSystemVirtualFolder('/sys/version');
  5   if ret then
  6     dbms_xdb.setACL('/sys/version', '/sys/acls/bootstrap_acl.xml');
  7   end if;
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> 
SQL> Rem Create the schema for folder listings. This is used for representing
SQL> Rem folder listings with name and size of each entry. Its not intended
SQL> Rem as a schema for folders - merely as a simple schema for listings.
SQL> 
SQL> declare
  2    FLXSD VARCHAR2(4000) :=
  3    '<schema
  4       targetNamespace="http://xmlns.oracle.com/xdb/XDBFolderListing.xsd"
  5       xmlns="http://www.w3.org/2001/XMLSchema"
  6       xmlns:xdb="http://xmlns.oracle.com/xdb"
  7       xmlns:l="http://xmlns.oracle.com/xdb/XDBFolderListing.xsd"
  8       version="1.0" elementFormDefault="qualified">
  9  
 10      <complexType name="ListingTyp">
 11        <sequence>
 12          <element name="ChildName" type="string" maxOccurs="unbounded"/>
 13        </sequence>
 14        <attribute name="name" type="string"/>
 15        <attribute name="size" type="integer"/>
 16      </complexType>
 17  
 18      <element name="Folder" type="l:ListingTyp"/>
 19  
 20     </schema>';
 21  
 22    FLURL VARCHAR2(2000) := 'http://xmlns.oracle.com/xdb/XDBFolderListing.xsd';
 23  
 24  begin
 25  
 26  xdb.dbms_xmlschema.registerSchema(FLURL, FLXSD, FALSE, TRUE, FALSE, TRUE, FALSE, 'XDB');
 27  
 28  end;
 29  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> Rem Create the Versioning Package
SQL> @@catxdbvr.sql
SQL> Rem
SQL> Rem $Header: catxdbvr.sql 17-mar-2006.00:03:28 thbaby Exp $
SQL> Rem
SQL> Rem catxdbvr.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbvr.sql - all $table for versioning are defined here.
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      WSINDEX: (workspace index) table for indexing a versioned table.
SQL> Rem               Each versioned table has one associated wsindex table.
SQL> Rem      CHECKOUTS: table for all checked-out rows.
SQL> Rem
SQL> Rem      For regular RDBMS, wsindex and checkouts tables should be
SQL> Rem      automatically created by the system for versioned table.
SQL> Rem      For XDB, wsindex is created together with workspace, and checkouts
SQL> Rem      is created together with the resource table.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This file should be executed for each user who has versioned tables.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    thbaby      03/17/06 - remove / after create table
SQL> Rem    thbaby      11/14/05 - add xdb$workspace table
SQL> Rem    spannala    12/16/03 - split the package into dbmxvr.sql
SQL> Rem    sichandr    04/17/02 - add getContents* routines
SQL> Rem    sichandr    02/19/02 - fix getPredecessors
SQL> Rem    sichandr    02/21/02 - add GetResourceByResId
SQL> Rem    sichandr    02/07/02 - add GetPredessors/GetSuccessors
SQL> Rem    spannala    01/08/02 - incorporating fge_caxdb_priv_indx_fix
SQL> Rem    spannala    12/27/01 - setup should be run as SYS
SQL> Rem    najain      12/05/01 - change XDB_VERSION to DBMS_XDB_VERSION
SQL> Rem    nagarwal    10/23/01 - Merged nagarwal_deltav
SQL> Rem    nle         08/09/01 - Created
SQL> Rem
SQL> 
SQL> /* vers$wsindex: index table for a versioned table.
SQL>  *
SQL>  *  Each workspace will have one index table. This table should be created
SQL>  *  automatically by the system together with a workspace. We created it here
SQL>  *  for our code prototype. It has three columns.
SQL>  *
SQL>  *   - sys_primary: if the primary key of a row is changed, this is used to
SQL>  *     identified the row. This shouldn't be used in this table. It should be
SQL>  *     used in the versioned table (i.e. the $resource table for XDB). (???)
SQL>  *   - user_primary: its datatype and content are the same as the primary key
SQL>  *     of the versioned table. For XDB, the primary key is of varchar(128).
SQL>  *     This is the index key of the index table.
SQL>  *   - data: this is a rowid of a row in the versioned table (xdb$resource)
SQL> 
SQL> create table xdb$wsindex(sys_primary number(6),
SQL>                          user_primary varchar2(128),
SQL>                          data rowid)
SQL> */
SQL> 
SQL> /*
SQL>    xdb$workspace has one row for each workspace, whether real or virtual.
SQL>    It has the following columns:
SQL> 
SQL> ws_name     Workspace name
SQL> wsid        Workspace identifier
SQL> vr_wsid     Identifier for the real workspace on which the virtual
SQL>             workspace is based. It is null for a real workspace.
SQL> flags       Flag that includes the following bits:
SQL>             is_static: Is the workspace static?
SQL>             is_published: Is the workspace published?
SQL>                           This bit is false for a virtual workspace.
SQL> vh_bitmap   A bit-vector that uses the id of a version history as its index.
SQL>             Its semantics is as follows.
SQL>             Real workspace: Does a VCR with this vhid exist in its workspace?
SQL>             Virtual workspace: Is the VCR with this vhid private in this
SQL>                                workspace?
SQL> res_bitmap  A bit-vector that uses xdb$resource row-ID as its index. Its
SQL>             semantics is as follows:
SQL>             Real workspace: Does the resource corresponding to this row-ID
SQL>                             exist in the workspace?
SQL>             Virtual workspace: Is the resource corresponding to this row-ID
SQL>                                private in this workspace?
SQL> vh_to_res_map An array of (vhid, xdb$resource row-id) pairs. It is null for a
SQL>               real workspace. For a virtual workspace, it has one entry for
SQL>               each private VCR. When a private VCR is made shared, the
SQL>               corresponding entry in this mapping table is deleted.
SQL> checkout_set  An array of OIDs of resources checked out in the workspace.
SQL> 
SQL> The following indexes are maintained on this table:
SQL> 1. An index on the wsid column to perform fast retrieval of workspace
SQL>    properties by id.
SQL> 2. An index on the ws_name column to retrieve wsid of a workspace given its
SQL>    name.
SQL> 3. An index on the vr_wsid column to check if a real workspace has dependent
SQL>    virtual workspaces.
SQL> */
SQL> drop table xdb.xdb$workspace;
drop table xdb.xdb$workspace
               *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> create table xdb.xdb$workspace(wsname        varchar2(1024),
  2                                 wsid          raw(16),
  3                                 vr_wsid       raw(16),
  4                                 flags         raw(4),
  5                                 vh_bitmap     blob,
  6                                 res_bitmap    blob,
  7                                 vh_to_res_map blob,
  8                                 checkout_set  blob);

Table created.

SQL> 
SQL> /* vers$checkouts: a table to maintain a list of checkouts.
SQL>  *  Checkout table helps to implement checkout/checkin operations.
SQL>  *  - version: this column point to the original version of a checked-out row.
SQL>  *             if this column is null, the resource has been deleted.
SQL>  *  - actid: id of an activity.
SQL>  *  - co_stat: checked-out/checked-in. This might not be necessary.
SQL>  */
SQL> drop table xdb.xdb$checkouts;
drop table xdb.xdb$checkouts
               *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> create table xdb.xdb$checkouts(vcruid raw(16),
  2                             workspaceid integer,
  3                             version raw(16),
  4                             actid integer,
  5                             constraint cokey primary key(vcruid, workspaceid));

Table created.

SQL> 
SQL> 
SQL> create index xdb.xdb$checkouts_vcruid_idx on xdb.xdb$checkouts (vcruid);

Index created.

SQL> create index xdb.xdb$checkouts_workspaceid_idx on xdb.xdb$checkouts (workspaceid);

Index created.

SQL> 
SQL> -- The package definition has moved into dbmsxvr.sql
SQL> @@dbmsxvr.sql
SQL> Rem
SQL> Rem $Header: dbmsxvr.sql 18-jan-2006.17:18:06 thbaby Exp $
SQL> Rem
SQL> Rem dbmsxvr.sql
SQL> Rem
SQL> Rem Copyright (c) 2003, 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxvr.sql - DBMS_XDB_VERSION package
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Package definiton and body of dbms_xdb_version package.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Split out from catxdbvr for the purposes of independent loading
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    thbaby      12/30/05 - new checkout api
SQL> Rem    thbaby      12/30/05 - default parameter values
SQL> Rem    thbaby      11/09/05 - add workspace related API routines
SQL> Rem    vkapoor     03/07/05 -
> Rem    vkapoor     02/03/05 - bug 4075243
SQL> Rem    vkapoor     02/06/05 - bug 4075253
SQL> Rem    najain      10/01/04 - dbms_xdb_version is invoker\'s rights
SQL> Rem    spannala    12/23/03 - spannala_bug-3321840
SQL> Rem    spannala    12/16/03 - Created
SQL> Rem
SQL> 
SQL> /* Package DBMS_XDB_VERSION */
SQL> create or replace package XDB.DBMS_XDB_VERSION authid current_user as
  2  
  3    SUBTYPE resid_type is RAW(16);
  4    TYPE resid_list_type is VARRAY(1000) of RAW(16);
  5  
  6    FUNCTION makeversioned(pathname VARCHAR2) RETURN resid_type;
  7    PROCEDURE checkout(pathname VARCHAR2);
  8    FUNCTION checkin(pathname VARCHAR2) RETURN resid_type;
  9    FUNCTION uncheckout(pathname VARCHAR2) RETURN resid_type;
 10    FUNCTION ischeckedout(pathname VARCHAR2) RETURN BOOLEAN;
 11    FUNCTION GetPredecessors(pathname VARCHAR2) RETURN resid_list_type;
 12    FUNCTION GetPredsByResId(resid resid_type) RETURN resid_list_type;
 13    FUNCTION GetSuccessors(pathname VARCHAR2) RETURN resid_list_type;
 14    FUNCTION GetSuccsByResId(resid resid_type) RETURN resid_list_type;
 15    FUNCTION GetResourceByResId(resid resid_type) RETURN XMLType;
 16    FUNCTION GetContentsBlobByResId(resid resid_type) RETURN BLOB;
 17    FUNCTION GetContentsClobByResId(resid resid_type) RETURN CLOB;
 18    FUNCTION GetContentsXmlByResId(resid resid_type) RETURN XMLType;
 19    FUNCTION GetVersionHistoryID(pathname VARCHAR2) RETURN resid_type;
 20    FUNCTION GetVersionHistory(resid resid_type) RETURN resid_list_type;
 21    FUNCTION GetVersionHistoryRoot(resid resid_type) RETURN resid_type;
 22  
 23  ---------------------------------------------
 24  -- PROCEDURE - CreateRealWorkspace
 25  -- This procedure creates a real workspace called wsname, if a workspace (real
 26  -- or virtual) with the same name does not exist already. An existing real
 27  -- workspace\'s name can be given in the initializer argument, in which case,
 28  -- the folder hierarchy of that workspace is used to set up the folder
 29  -- hierarchy of the new workspace. All non-VCRs in the initializing workspace
 30  -- will be present in the new workspace. This includes non-VCRs in the
 31  -- initializing workspace that it shares with other real workspaces. If
 32  -- 'published' is TRUE, the new workspace is published; otherwise, it is not.
 33  -- Note that the create index privilege on the resource table is required to
 34  -- create a published workspace.
 35  --
 36  -- If a VCR is checked out in the initializing workspace, its DAV:checked-out
 37  -- property is used as the version for the corresponding VCR in the new
 38  -- workspace. If a VCR is not checked out in the initializing workspace, its
 39  -- DAV:checked-in property is used as the version for the corresponding VCR in
 40  -- the new workspace. If privateNonVCR is TRUE, all non-VCRs selected to be in
 41  -- the new workspace are made private to it and not shared with the
 42  -- initializing workspace; otherwise, non-VCRs that the initializing workspace
 43  -- shares with other workspaces continue to remain shared in the new workspace
 44  -- also.
 45  --
 46  -- PARAMETERS:
 47  -- wsname               -       Name of the workspace being created.
 48  -- published            -       If TRUE, the new workspace is published;
 49  --                              otherwise, it is not.
 50  -- initializer          -       Name of the initializer workspace.
 51  -- privateNonVCR        -       Should non-VCRs in initializer workspace be
 52  --                              made private in new workspace?
 53  ---------------------------------------------
 54    PROCEDURE CreateRealWorkspace(wsname        IN VARCHAR2,
 55                                  initializer   IN VARCHAR2,
 56                                  published     IN BOOLEAN,
 57                                  privateNonVCR IN boolean);
 58  
 59  ---------------------------------------------
 60  -- PROCEDURE - CreateVirtualWorkspace
 61  -- This procedure creates a virtual workspace called wsname based on the
 62  -- hierarchy of another workspace (base_wsname). No workspace, real or
 63  -- virtual, with the same name must exist. If not, an error is thrown.
 64  -- base_wsname must be the name of a real workspace that has no checked out
 65  -- resources, or else an error is thrown.
 66  --
 67  -- PARAMETERS:
 68  -- wsname               - Name of the workspace to be created
 69  -- base_wsname          - Name of the real workspace on which the virtual
 70  --                        workspace is based.
 71  ---------------------------------------------
 72    PROCEDURE CreateVirtualWorkspace(wsname      IN VARCHAR2,
 73                                     base_wsname IN VARCHAR2);
 74  
 75  ---------------------------------------------
 76  -- PROCEDURE - DeleteWorkspace
 77  -- This procedure deletes the workspace named wsname. If a workspace with this
 78  -- name does not exist, an error is thrown. The workspace must not have any
 79  -- checked-out resources and must not have any dependent virtual workspaces;
 80  -- otherwise, an error is thrown. The null workspace cannot be deleted. If a
 81  -- real workspace is deleted, its folder hierarchy is deleted.
 82  --
 83  -- PARAMETERS:
 84  -- wsname       -       Name of the workspace to be deleted
 85  ---------------------------------------------
 86    PROCEDURE DeleteWorkspace(wsname IN VARCHAR2);
 87  
 88  ---------------------------------------------
 89  -- PROCEDURE - SetWorkspace
 90  -- This procedure sets the current session\'s workspace to the workspace named
 91  -- wsname. If a workspace with this name does not exist, an error is thrown.
 92  -- The root of the folder hierarchy ('/') in the current session is set to the
 93  -- root of the workspace's folder hierarchy.
 94  --
 95  -- PARAMETERS:
 96  -- wsname       - Name of the workspace to be used by current session
 97  ---------------------------------------------
 98    PROCEDURE SetWorkspace(wsname IN VARCHAR2);
 99  
100  ---------------------------------------------
101  -- PROCEDURE - GetWorkspace
102  -- This procedure returns the name of the current workspace. The workspace
103  -- could have been set explicitly by the user (via SetWorkspace or its
104  -- equivalents in protocols) or could be the default workspace.
105  ---------------------------------------------
106    PROCEDURE GetWorkspace(wsname OUT VARCHAR2);
107  
108  ---------------------------------------------
109  -- PROCEDURE - PublishWorkspace
110  -- This procedure publishes the real workspace named wsname. If a real
111  -- workspace with this name does not exist, an error is thrown. Publishing a
112  -- workspace improves the performance of Btree indexes for queries in the
113  -- context of the workspace. Only real workspaces can be published. Note that
114  -- the create index privilege on the resource table is required to publish a
115  -- workspace.
116  --
117  -- PARAMETERS:
118  -- wsname       - Name of the workspace to be published
119  ---------------------------------------------
120    PROCEDURE PublishWorkspace(wsname IN VARCHAR2);
121  
122  ---------------------------------------------
123  -- PROCEDURE - UnPublishWorkspace
124  -- This procedure un-publishes the real workspace named wsname. If a real
125  -- workspace with this name does not exist, an error is thrown. Un-publishing
126  -- a workspace removes its association with Btree indexes on XDB$RESOURCE
127  -- table and the workspace will no more provide improved performance for those
128  -- indexes.  Note that the drop index privilege on the resource table is
129  -- required to unpublish a workspace.
130  --
131  -- PARAMETERS:
132  -- wsname       - Name of the workspace to be unpublished
133  ---------------------------------------------
134    PROCEDURE UnPublishWorkspace(wsname IN VARCHAR2);
135  
136  ---------------------------------------------
137  -- PROCEDURE - UpdateWorkspace
138  -- This procedure updates (where the term "update" is used in the DeltaV
139  -- sense of the term) the workspace named target_wsname by using the
140  -- folder hierarchy and VCRs of the workspace named
141  -- source_wsname. target_wsname must be the name of a valid workspace
142  -- that can be updated and source_wsname must be the name of a real
143  -- workspace; otherwise, an error is thrown. If the target workspace
144  -- has checked-out VCRs or if it is virtual and has private copies, an
145  -- error is thrown.
146  --
147  -- Non-VCRs and VCRs are created/deleted/updated (update in the deltaV
148  -- sense) as required to make the source and target workspaces
149  -- identical. If the target workspace is real and if privateNonVCR is
150  -- TRUE, all non-VCRs selected to be in the target workspace are made
151  -- private to it and not shared with the source workspace; otherwise,
152  -- non-VCRs that the source workspace shares with other workspaces
153  -- continue to remain shared in the new workspace also.
154  --
155  -- If a VCR is checked out in the source workspace, the value of its
156  -- DAV:checked-out property is used as the version for the corresponding
157  -- VCR in the target workspace. If a VCR is not checked out in the source
158  -- workspace, the value of its DAV:checked-in property is used as the
159  -- version for the corresponding VCR in the target workspace.
160  --
161  -- PARAMETERS:
162  -- target_wsname  - Name of the target workspace
163  -- source_wsname  - Name of the source workspace
164  -- privateNonVCR  - Should all non-VCRs in the source be made private
165  --                  in the target?
166  ---------------------------------------------
167    PROCEDURE UpdateWorkspace(target_wsname IN VARCHAR2,
168                              source_wsname IN VARCHAR2,
169                              privateNonVCR IN BOOLEAN);
170  
171  ---------------------------------------------
172  -- PROCEDURE - CreateBranch
173  -- This procedure creates a new branch. If a branch named name exists
174  -- already, an error is thrown.
175  --
176  -- PARAMETERS:
177  -- name         - Name of the branch to create
178  ---------------------------------------------
179    PROCEDURE CreateBranch(name IN VARCHAR2);
180  
181  ---------------------------------------------
182  -- PROCEDURE - MakeShared
183  -- This procedure makes a private VCR in a virtual workspace shared with
184  -- that of the real workspace on which it is based. A VCR becomes
185  -- private to a virtual workspace when it is checked out or it is
186  -- updated to point to a version different from that of the VCR in the
187  -- corresponding real workspace.
188  ---------------------------------------------
189    PROCEDURE MakeShared(path IN VARCHAR2);
190  
191  ---------------------------------------------
192  -- PROCEDURE - CreateVCR
193  -- This procedure creates a checked-in VCR based on an existing
194  -- version. Path resolution is aware of the current session's workspace
195  -- and therefore 'path' can be relative to the current workspace's
196  -- folder. If a resource exists at the path, an error is
197  -- thrown. VersionResID must be the OID of a version and the workspace
198  -- must not have a VCR with the same version history as VersionResId;
199  -- otherwise, an error is thrown.
200  --
201  -- PARAMETERS:
202  -- path                 - Path to VCR.
203  -- versionResID         - OID of the version to be used for VCR
204  ---------------------------------------------
205    PROCEDURE CreateVCR(path IN VARCHAR2, versionResID IN resid_type);
206  
207  ---------------------------------------------
208  -- PROCEDURE - UpdateVCRVersion
209  -- This procedure updates the VCR at given path (path) with a version
210  -- identified by newResID. newResID must be the OID of a version in the
211  -- same version history as the VCR; otherwise, an error is thrown. Path
212  -- resolution is aware of the current session's workspace and therefore
213  -- 'path' can be relative to the current workspace's folder.
214  --
215  -- PARAMETERS:
216  -- path         - Path to VCR.
217  -- newResID     - OID of the version to which VCR needs to be updated
218  ---------------------------------------------
219    PROCEDURE UpdateVCRVersion(path IN VARCHAR2, newResID IN resid_type);
220  
221  ---------------------------------------------
222  -- PROCEDURE - DeleteVersion
223  -- This procedure deletes the version with OID versionResID. If a VCR (in
224  -- any workspace) points to this version, an error is thrown. If the
225  -- version being deleted is the root version of a version history
226  -- resource, it must have exactly one successor version; otherwise, an
227  -- error is thrown. The DAV:successor-set property of each of the
228  -- deleted version's predecessors is updated to include all the
229  -- versions in the deleted version's DAV:successor-set property and the
230  -- DAV:predecessor-set property of each of the deleted version's
231  -- successors is updated to include all the versions in the deleted
232  -- version's DAV:predecessor-set property.
233  --
234  -- PARAMETERS:
235  -- versionResID - OID of the version to be deleted
236  ---------------------------------------------
237    PROCEDURE DeleteVersion(versionResID IN resid_type);
238  
239  ---------------------------------------------
240  -- PROCEDURE - DeleteVersionHistory
241  -- This procedure deletes the version history with version history id
242  -- vhid. All versions in the version history are deleted. All
243  -- preconditions of DeleteVersion will apply to each version before
244  -- it's deleted. If any version cannot be deleted the entire operation
245  -- is rolled back.
246  --
247  -- PARAMETERS:
248  -- vhid - VHID of the version history to be deleted
249  ---------------------------------------------
250    PROCEDURE DeleteVersionHistory(vhid resid_type);
251  
252  end DBMS_XDB_VERSION;
253  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> /* library for DBMS_XDB_VERSION */
SQL> CREATE OR REPLACE LIBRARY XDB.DBMS_XDB_VERSION_LIB TRUSTED AS STATIC
  2  /

Library created.

SQL> 
SQL> /* package body */
SQL> create or replace package body XDB.DBMS_XDB_VERSION as
  2    FUNCTION makeversioned(pathname varchar2) RETURN resid_type is
  3      LANGUAGE C NAME "qmevsMakeVersioned"
  4        LIBRARY XDB.DBMS_XDB_VERSION_LIB
  5        WITH CONTEXT
  6        PARAMETERS (context,
  7                    pathname OCIString, pathname indicator sb4,
  8                    RETURN INDICATOR sb4,
  9                    RETURN LENGTH size_t
 10                   );
 11  
 12    PROCEDURE checkout(pathname varchar2) is
 13      LANGUAGE C NAME "qmevsCheckout"
 14        LIBRARY XDB.DBMS_XDB_VERSION_LIB
 15        WITH CONTEXT
 16        PARAMETERS (context,
 17                    pathname     OCIString,
 18                    pathname indicator sb4);
 19  
 20    FUNCTION checkin(pathname varchar2) RETURN resid_type is
 21      LANGUAGE C NAME "qmevsCheckin"
 22        LIBRARY XDB.DBMS_XDB_VERSION_LIB
 23        WITH CONTEXT
 24        PARAMETERS (context,
 25                    pathname OCIString, pathname indicator sb4,
 26                    RETURN INDICATOR sb4,
 27                    RETURN LENGTH size_t
 28                   );
 29  
 30    FUNCTION uncheckout(pathname varchar2) RETURN resid_type is
 31      LANGUAGE C NAME "qmevsUncheckout"
 32        LIBRARY XDB.DBMS_XDB_VERSION_LIB
 33        WITH CONTEXT
 34        PARAMETERS (context,
 35                    pathname OCIString, pathname indicator sb4,
 36                    RETURN INDICATOR sb4,
 37                    RETURN LENGTH size_t
 38                   );
 39  
 40    FUNCTION ischeckedout(pathname varchar2) RETURN BOOLEAN is
 41      LANGUAGE C NAME "qmevsIsResCheckedOut"
 42        LIBRARY XDB.DBMS_XDB_VERSION_LIB
 43        WITH CONTEXT
 44        PARAMETERS (context,
 45                    pathname OCIString, pathname indicator sb4,
 46                    RETURN INDICATOR sb4,
 47                    return
 48                   );
 49  
 50    FUNCTION getresid(pathname varchar2) RETURN resid_type is
 51      LANGUAGE C NAME "qmevsGetResID"
 52        LIBRARY XDB.DBMS_XDB_VERSION_LIB
 53        WITH CONTEXT
 54        PARAMETERS (context,
 55                    pathname OCIString, pathname indicator sb4,
 56                    RETURN INDICATOR sb4,
 57                    RETURN LENGTH size_t
 58                   );
 59  
 60    FUNCTION GetPredecessors(pathname varchar2) RETURN resid_list_type is
 61      resid  resid_type;
 62    BEGIN
 63      resid := getresid(pathname);
 64      return GetPredsByResId(resid);
 65    END;
 66  
 67    FUNCTION GetPredsByResId(resid resid_type) RETURN resid_list_type is
 68      LANGUAGE C NAME "qmevsGetPredsByResId"
 69        LIBRARY XDB.DBMS_XDB_VERSION_LIB
 70        WITH CONTEXT
 71        PARAMETERS (context,
 72                    resid OCIRaw, resid indicator sb2,
 73                    RETURN INDICATOR sb4,
 74                    RETURN DURATION OCIDuration,
 75                    RETURN
 76                   );
 77  
 78    FUNCTION GetSuccessors(pathname varchar2) RETURN resid_list_type is
 79      resid  resid_type;
 80    BEGIN
 81      resid := getresid(pathname);
 82      return GetSuccsByResId(resid);
 83    END;
 84  
 85    FUNCTION GetSuccsByResId(resid resid_type) RETURN resid_list_type is
 86      LANGUAGE C NAME "qmevsGetSuccsByResId"
 87        LIBRARY XDB.DBMS_XDB_VERSION_LIB
 88        WITH CONTEXT
 89        PARAMETERS (context,
 90                    resid OCIRaw, resid indicator sb2,
 91                    RETURN INDICATOR sb4,
 92                    RETURN DURATION OCIDuration,
 93                    RETURN
 94                   );
 95  
 96    FUNCTION GetResourceByResId(resid resid_type) RETURN XMLType is
 97      LANGUAGE C NAME "qmevsGetResByResId"
 98        LIBRARY XDB.DBMS_XDB_VERSION_LIB
 99        WITH CONTEXT
100        PARAMETERS (context,
101                    resid OCIRaw, resid indicator sb2,
102                    RETURN INDICATOR sb4,
103                    RETURN DURATION OCIDuration,
104                    RETURN
105                   );
106  
107    FUNCTION GetContentsBlobByResId(resid resid_type) RETURN BLOB is
108      LANGUAGE C NAME "qmevsGetCtsBlobByResId"
109        LIBRARY XDB.DBMS_XDB_VERSION_LIB
110        WITH CONTEXT
111        PARAMETERS (context,
112                    resid OCIRaw, resid indicator sb2,
113                    RETURN INDICATOR sb4,
114                    RETURN DURATION OCIDuration,
115                    RETURN OCILobLocator
116                   );
117  
118    FUNCTION GetContentsClobByResId(resid resid_type) RETURN CLOB is
119      LANGUAGE C NAME "qmevsGetCtsClobByResId"
120        LIBRARY XDB.DBMS_XDB_VERSION_LIB
121        WITH CONTEXT
122        PARAMETERS (context,
123                    resid OCIRaw, resid indicator sb2,
124                    RETURN INDICATOR sb4,
125                    RETURN DURATION OCIDuration,
126                    RETURN OCILobLocator
127                   );
128  
129    FUNCTION GetContentsXmlByResId(resid resid_type) RETURN XMLType is
130      LANGUAGE C NAME "qmevsGetCtsXmlByResId"
131        LIBRARY XDB.DBMS_XDB_VERSION_LIB
132        WITH CONTEXT
133        PARAMETERS (context,
134                    resid OCIRaw, resid indicator sb2,
135                    RETURN INDICATOR sb4,
136                    RETURN DURATION OCIDuration,
137                    RETURN
138                   );
139  
140    FUNCTION GetVersionHistoryID(pathname varchar2) RETURN resid_type is
141      LANGUAGE C NAME "qmevsGetVerHistID"
142        LIBRARY XDB.DBMS_XDB_VERSION_LIB
143        WITH CONTEXT
144        PARAMETERS (context,
145                    pathname OCIString, pathname indicator sb4,
146                    RETURN INDICATOR sb4,
147                    RETURN LENGTH size_t
148                   );
149  
150    FUNCTION GetVersionHistory(resid resid_type) RETURN resid_list_type is
151      LANGUAGE C NAME "qmevsGetVerHist"
152        LIBRARY XDB.DBMS_XDB_VERSION_LIB
153        WITH CONTEXT
154        PARAMETERS (context,
155                    resid OCIRaw, resid indicator sb2,
156                    RETURN INDICATOR sb4,
157                    RETURN DURATION OCIDuration,
158                    RETURN
159                   );
160  
161    FUNCTION GetVersionHistoryRoot(resid resid_type) RETURN resid_type IS
162      LANGUAGE C NAME "qmevsGetVerHistRoot"
163        LIBRARY XDB.DBMS_XDB_VERSION_LIB
164        WITH CONTEXT
165        PARAMETERS (context,
166                    resid OCIRaw, resid indicator sb2,
167                    RETURN INDICATOR sb4,
168                    RETURN LENGTH size_t
169                   );
170  
171    PROCEDURE CreateRealWorkspace(wsname        IN VARCHAR2,
172                                  initializer   IN VARCHAR2,
173                                  published     IN boolean,
174                                  privateNonVCR IN boolean) IS
175      LANGUAGE C NAME "qmevsCreateRealWS"
176        LIBRARY XDB.DBMS_XDB_VERSION_LIB
177        WITH CONTEXT
178        PARAMETERS (context,
179                    wsname            OCIString,
180                    wsname        indicator sb4,
181                    initializer       OCIString,
182                    initializer   indicator sb4,
183                    published               ub2,
184                    published     indicator sb4,
185                    privateNonVCR           ub2,
186                    privateNonVCR indicator sb4
187                   );
188  
189    PROCEDURE CreateVirtualWorkspace(wsname      IN VARCHAR2,
190                                     base_wsname IN VARCHAR2) IS
191      LANGUAGE C NAME "qmevsCreateVirtualWS"
192        LIBRARY XDB.DBMS_XDB_VERSION_LIB
193        WITH CONTEXT
194        PARAMETERS (context,
195                    wsname          OCIString,
196                    wsname      indicator sb4,
197                    base_wsname     OCIString,
198                    base_wsname indicator sb4
199                   );
200  
201    PROCEDURE DeleteWorkspace(wsname IN VARCHAR2) IS
202      LANGUAGE C NAME "qmevsDeleteWS"
203        LIBRARY XDB.DBMS_XDB_VERSION_LIB
204        WITH CONTEXT
205        PARAMETERS (context,
206                    wsname     OCIString,
207                    wsname indicator sb4
208                   );
209  
210    PROCEDURE SetWorkspace(wsname IN VARCHAR2) IS
211      LANGUAGE C NAME "qmevsSetWS"
212        LIBRARY XDB.DBMS_XDB_VERSION_LIB
213        WITH CONTEXT
214        PARAMETERS (context,
215                    wsname     OCIString,
216                    wsname indicator sb4
217                   );
218  
219    PROCEDURE GetWorkspace(wsname OUT VARCHAR2) IS
220      LANGUAGE C NAME "qmevsGetWS"
221        LIBRARY XDB.DBMS_XDB_VERSION_LIB
222        WITH CONTEXT
223        PARAMETERS (context,
224                    wsname          STRING,
225                    wsname   INDICATOR sb4,
226                    wsname      LENGTH sb4,
227                    wsname      MAXLEN sb4
228                   );
229  
230    PROCEDURE PublishWorkspace(wsname IN VARCHAR2) IS
231      LANGUAGE C NAME "qmevsPublishWS"
232        LIBRARY XDB.DBMS_XDB_VERSION_LIB
233        WITH CONTEXT
234        PARAMETERS (context,
235                    wsname     OCIString,
236                    wsname indicator sb4
237                   );
238  
239    PROCEDURE UnPublishWorkspace(wsname IN VARCHAR2) IS
240      LANGUAGE C NAME "qmevsUnPublishWS"
241        LIBRARY XDB.DBMS_XDB_VERSION_LIB
242        WITH CONTEXT
243        PARAMETERS (context,
244                    wsname     OCIString,
245                    wsname indicator sb4
246                   );
247  
248    PROCEDURE UpdateWorkspace(target_wsname IN VARCHAR2,
249                              source_wsname IN VARCHAR2,
250                              privateNonVCR IN BOOLEAN) IS
251      LANGUAGE C NAME "qmevsUpdateWS"
252        LIBRARY XDB.DBMS_XDB_VERSION_LIB
253        WITH CONTEXT
254        PARAMETERS (context,
255                    target_wsname     OCIString,
256                    target_wsname indicator sb4,
257                    source_wsname     OCIString,
258                    source_wsname indicator sb4,
259                    privateNonVCR           ub2,
260                    privateNonVCR indicator sb4
261                   );
262  
263    PROCEDURE CreateBranch(name IN VARCHAR2) IS
264      LANGUAGE C NAME "qmevsCreateBranch"
265        LIBRARY XDB.DBMS_XDB_VERSION_LIB
266        WITH CONTEXT
267        PARAMETERS (context,
268                    name      OCIString,
269                    name  indicator sb4
270                   );
271  
272    PROCEDURE MakeShared(path IN VARCHAR2) IS
273      LANGUAGE C NAME "qmevsMakeShared"
274        LIBRARY XDB.DBMS_XDB_VERSION_LIB
275        WITH CONTEXT
276        PARAMETERS (context,
277                    path         OCIString,
278                    path     indicator sb4
279                   );
280  
281    PROCEDURE CreateVCR(path IN VARCHAR2, versionResID IN resid_type) IS
282      LANGUAGE C NAME "qmevsCreateVCR"
283        LIBRARY XDB.DBMS_XDB_VERSION_LIB
284        WITH CONTEXT
285        PARAMETERS (context,
286                    path             OCIString,
287                    path         indicator sb4,
288                    versionResID        OCIRaw,
289                    versionResID indicator sb4
290                   );
291  
292    PROCEDURE UpdateVCRVersion(path IN VARCHAR2, newResID IN resid_type) IS
293      LANGUAGE C NAME "qmevsUpdateVCR"
294        LIBRARY XDB.DBMS_XDB_VERSION_LIB
295        WITH CONTEXT
296        PARAMETERS (context,
297                    path             OCIString,
298                    path         indicator sb4,
299                    newResID            OCIRaw,
300                    newResID     indicator sb4
301                   );
302  
303    PROCEDURE DeleteVersion(versionResID IN resid_type) IS
304      LANGUAGE C NAME "qmevsDelVersion"
305        LIBRARY XDB.DBMS_XDB_VERSION_LIB
306        WITH CONTEXT
307        PARAMETERS (context,
308                    versionResID        OCIRaw,
309                    versionResID indicator sb4
310                   );
311  
312    PROCEDURE DeleteVersionHistory(vhid resid_type) IS
313      LANGUAGE C NAME "qmevsDeleteVerHist"
314        LIBRARY XDB.DBMS_XDB_VERSION_LIB
315        WITH CONTEXT
316        PARAMETERS (context,
317                    vhid        OCIRaw,
318                    vhid indicator sb4
319                   );
320  
321  end DBMS_XDB_VERSION;
322  /

Package body created.

SQL> show errors;
No errors.
SQL> GRANT EXECUTE ON XDB.DBMS_XDB_VERSION TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM DBMS_XDB_VERSION FOR XDB.DBMS_XDB_VERSION;

Synonym created.

SQL> 
SQL> Rem Create Path View
SQL> @@catxdbpv
SQL> Rem
SQL> Rem $Header: catxdbpv.sql 02-jun-2006.10:52:28 rmurthy Exp $
SQL> Rem
SQL> Rem catxdbpv.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbpv.sql - XDB Path View related Schema Objects
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem     This scripts contains the types, packages, views and triggers
SQL> rem     required for the Path View
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script should be run as "XDB"
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    rmurthy     05/22/06 - remove extractvalue from path view
SQL> Rem    rmurthy     01/17/05 - add symbolic links
SQL> Rem    rmurthy     01/10/05 - add link type to path view
SQL> Rem    fge         07/28/03 - add resid tp path_view
SQL> Rem    athusoo     06/19/03 - Adding alias to resource_view query
SQL> Rem    fge         05/19/03 - move stats initialization to catxdbeo.sql
SQL> Rem    fge         05/07/03 - add stats schema registration
SQL> Rem    mkrishna    02/20/03 - invokers rights for path view
SQL> Rem    fge         09/05/02 -
> Rem    fge         09/04/02 - optimize path_view
SQL> Rem    njalali     07/31/02 - undo resid change
SQL> Rem    fge         07/09/02 - add resid to path_view
SQL> Rem    fge         02/04/02 - redefine path_view
SQL> Rem    gviswana    01/29/02 - CREATE OR REPLACE SYNONYM
SQL> Rem    sichandr    01/31/02 - fix path view query to use link name
SQL> Rem    sichandr    01/18/02 - fix path_view definition
SQL> Rem    spannala    12/27/01 - setup should be run as SYS
SQL> Rem    spannala    12/13/01 - removin set echo on
SQL> Rem    nagarwal    11/15/01 - cast the path view def
SQL> Rem    nagarwal    11/05/01 - move path view schema to catxdbstd
SQL> Rem    nagarwal    10/31/01 - fix path view type definition
SQL> Rem    nagarwal    10/29/01 - grant privileges to path view
SQL> Rem    mkrishna    11/01/01 - change xmldata to xmldata
SQL> Rem    nagarwal    09/18/01 - Merged nagarwal_xdb_path_view
SQL> Rem    nagarwal    09/13/01 - add DML routines for path view
SQL> Rem    nagarwal    09/09/01 - PATH_VIEW definition
SQL> Rem    nagarwal    09/08/01 - Created
SQL> Rem
SQL> 
SQL> drop operator xdb.all_path force;
drop operator xdb.all_path force
*
ERROR at line 1:
ORA-29807: specified operator does not exist


SQL> 
SQL> /*-----------------------------------------------------------------------*/
SQL> /*  LIBRARY                                                              */
SQL> /*-----------------------------------------------------------------------*/
SQL> -- the path_view_lib is created in catxdbr.sql
SQL> 
SQL> /*------------------------------------------------------------------------*/
SQL> /*  OPERATORS                                                             */
SQL> /*------------------------------------------------------------------------*/
SQL> -- ancillary operator
SQL> create operator xdb.all_path binding (number) return xdb.path_array ancillary to
  2    xdb.under_path(sys.xmltype, number, varchar2),
  3    xdb.under_path(sys.xmltype, varchar2)
  4   without column data
  5  using xdb_ancop.allpath_func;

Operator created.

SQL> 
SQL> grant execute on xdb.all_path to public;

Grant succeeded.

SQL> create or replace public synonym all_path for xdb.all_path;

Synonym created.

SQL> 
SQL> /*------------------------------------------------------------------------*/
SQL> /*  XMLTYPE VIEW & PATH VIEW                                              */
SQL> /*------------------------------------------------------------------------*/
SQL> create or replace view xdb.path_view as
  2    select /*+ ORDERED */ t2.path path, t.res res,
  3        xmltype.createxml(xdb.xdb_link_type(NULL, r2.xmldata.dispname, t.name,
  4                          h.name, h.flags, h.parent_oid, h.child_oid,
  5                          decode(bitand(sys_op_rawtonum(h.flags), 1024), 1024,
  6                                xdb.xdb$enum_t(hextoraw('01')),
  7                                decode(bitand(sys_op_rawtonum(h.flags), 512), 512,
  8                                  xdb.xdb$enum_t(hextoraw('02')),
  9                                  xdb.xdb$enum_t(hextoraw('00'))))),
 10                     'http://xmlns.oracle.com/xdb/XDBStandard.xsd', 'LINK') link,
 11        t.resid
 12    from  ( select xdb.all_path(9999) paths, value(p) res, p.sys_nc_oid$ resid,
 13            decode(bitand(sys_op_rawtonum(p.xmldata.flags), 8388608), 8388608,
 14                   utl_raw.cast_to_varchar2(dbms_lob.substr(p.xmldata.xmllob, 4000)),
 15                   p.xmldata.dispname) name
 16            from xdb.xdb$resource p
 17            where xdb.under_path(value(p), '/', 9999)=1 ) t,
 18          TABLE( cast (t.paths as xdb.path_array) ) t2,
 19          xdb.xdb$h_link h, xdb.xdb$resource r2
 20     where t2.parent_oid = h.parent_oid and t2.childname = h.name and
 21           t2.parent_oid = r2.sys_nc_oid$;

View created.

SQL> 
SQL> show errors;
No errors.
SQL> create or replace public synonym path_view for xdb.path_view;

Synonym created.

SQL> grant select on xdb.path_view to public ;

Grant succeeded.

SQL> grant insert on xdb.path_view to public ;

Grant succeeded.

SQL> grant delete on xdb.path_view to public ;

Grant succeeded.

SQL> grant update on xdb.path_view to public ;

Grant succeeded.

SQL> 
SQL> /*-----------------------------------------------------------------------*/
SQL> /* PACKAGES and FUNCTIONS for instead-of trigger                         */
SQL> /*-----------------------------------------------------------------------*/
SQL> 
SQL> create or replace package xdb.XDB_PVTRIG_PKG  authid current_user AS
  2  
  3    procedure pvtrig_ins(res sys.xmltype, link sys.xmltype, path varchar2)
  4     is language C name "INSERT_XDBPV"
  5     library xdb.PATH_VIEW_LIB
  6     with context
  7     parameters (
  8      context,
  9      res, res INDICATOR,
 10      link, link INDICATOR,
 11      path, path INDICATOR, path LENGTH);
 12  
 13    procedure pvtrig_del(res sys.xmltype, link sys.xmltype, path varchar2)
 14     is language C name "DELETE_XDBPV"
 15     library xdb.PATH_VIEW_LIB
 16     with context
 17     parameters (
 18      context,
 19      res, res INDICATOR,
 20      link, link INDICATOR,
 21      path, path INDICATOR, path LENGTH );
 22  
 23    procedure pvtrig_upd(o_res sys.xmltype, n_res sys.xmltype,
 24                         o_link sys.xmltype, n_link sys.xmltype,
 25                         o_path varchar2, n_path varchar2)
 26     is language C name "UPDATE_XDBPV"
 27     library xdb.PATH_VIEW_LIB
 28     with context
 29     parameters (
 30      context,
 31      o_res, o_res INDICATOR, n_res, n_res INDICATOR,
 32      o_link, o_link INDICATOR, n_link, n_link INDICATOR,
 33      o_path, o_path INDICATOR, o_path LENGTH,
 34      n_path, n_path INDICATOR, n_path LENGTH);
 35  
 36  end XDB_PVTRIG_PKG;
 37  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace public synonym xdb_pvtrig_pkg for xdb.xdb_pvtrig_pkg;

Synonym created.

SQL> 
SQL> grant execute on xdb.xdb_pvtrig_pkg to public;

Grant succeeded.

SQL> 
SQL> 
SQL> /*-----------------------------------------------------------------------*/
SQL> /*  INSTEAD-OF TRIGGER                                                   */
SQL> /*-----------------------------------------------------------------------*/
SQL> create or replace trigger xdb.xdb_pv_trig INSTEAD OF insert or delete or update
  2  on xdb.path_view for each row
  3  begin
  4    if inserting then
  5      xdb.xdb_pvtrig_pkg.pvtrig_ins(:new.res, :new.link, :new.path);
  6  
  7      /* check that either the REF or the BLOB columns are filled, not both */
  8    end if;
  9  
 10    if deleting then
 11       xdb.xdb_pvtrig_pkg.pvtrig_del(:old.res, :old.link, :old.path);
 12  
 13      /* check if we get the correct values from two tables in a view */
 14    end if;
 15  
 16    if updating then
 17       xdb.xdb_pvtrig_pkg.pvtrig_upd(:old.res,    :new.res,
 18                                 :old.link,   :new.link,
 19                                 :old.path,   :new.path );
 20    end if;
 21  end;
 22  /

Trigger created.

SQL> show errors;
No errors.
SQL> 
SQL> 
SQL> Rem Initialize document links support
SQL> @@catxdbdl.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catxdbdl.sql /st_rdbms_11.2.0/1 2012/03/20 12:46:16 dmelinge Exp $
SQL> Rem
SQL> Rem catxdbdl.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2012, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbdl.sql - Setup script for document links support
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem          - Register xlink.xsd and XInclude.xsd
SQL> Rem          - Create DOCUMENT_LINKS view
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    dmelinge    03/19/12 - Dont give PUBLIC more than select privs
SQL> Rem    badeoti     12/15/08 - avoid any_path like select from rv
SQL> Rem    mrafiq      06/29/07 - making it rerunnable
SQL> Rem    rmurthy     06/22/06 - register csx forms of xlink and xinclude schemas
SQL> Rem    pnath       02/15/06 - remove link_props from document_links view
SQL> Rem    rmurthy     02/06/06 - add document_links view
SQL> Rem    rmurthy     06/02/06 - Created
SQL> Rem
SQL> 
SQL> Rem Register XLINK schema
SQL> declare
  2    c number;
  3    schema_exists EXCEPTION;
  4    PRAGMA EXCEPTION_INIT(schema_exists,-31085);
  5    XLINKXSD VARCHAR2(31000) :=
  6  '<?xml version="1.0"?>
  7  
  8  <schema targetNamespace="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink" elementFormDefault="qualified">
  9  
 10    <attribute name="type">
 11      <simpleType>
 12        <restriction base="string">
 13  
 14         <enumeration value="simple" />
 15         <enumeration value="extended" />
 16         <enumeration value="locator" />
 17         <enumeration value="arc" />
 18         <enumeration value="resource" />
 19         <enumeration value="title" />
 20         <enumeration value="none" />
 21        </restriction>
 22      </simpleType>
 23    </attribute>
 24  
 25    <attribute name="href" type="anyURI" />
 26  
 27    <attribute name="role" type="string" />
 28  
 29    <attribute name="arcrole" type="string" />
 30  
 31    <attribute name="title" type="string" />
 32  
 33    <attribute name="show">
 34      <simpleType>
 35        <restriction base="string">
 36         <enumeration value="new" />
 37         <enumeration value="replace" />
 38         <enumeration value="embed" />
 39         <enumeration value="other" />
 40         <enumeration value="none" />
 41        </restriction>
 42      </simpleType>
 43    </attribute>
 44  
 45    <attribute name="actuate">
 46     <simpleType>
 47      <restriction base="string">
 48       <enumeration value="onLoad" />
 49       <enumeration value="onRequest" />
 50       <enumeration value="other" />
 51       <enumeration value="none" />
 52      </restriction>
 53     </simpleType>
 54    </attribute>
 55  
 56    <attribute name="label" type="string" />
 57  
 58    <attribute name="from" type="string" />
 59  
 60    <attribute name="to" type="string" />
 61  </schema>';
 62  
 63    XLINKURL VARCHAR2(2000) := 'http://www.w3.org/1999/xlink.xsd';
 64    CSX_XLINKURL VARCHAR2(2000) := 'http://www.w3.org/1999/csx.xlink.xsd';
 65  
 66  begin
 67  
 68  select count(*) into c
 69  from resource_view
 70  where equals_path(RES, '/sys/schemas/PUBLIC/www.w3.org/1999/xlink.xsd')=1;
 71  
 72  if c = 0 then
 73    xdb.dbms_xmlschema.registerSchema(XLINKURL, XLINKXSD, FALSE, TRUE, FALSE, TRUE,FALSE, 'XDB');
 74  end if;
 75  
 76  select count(*) into c
 77  from resource_view
 78  where equals_path(RES, '/sys/schemas/PUBLIC/www.w3.org/1999/csx.xlink.xsd')=1;
 79  
 80  if c = 0 then
 81    xdb.dbms_xmlschema.registerSchema(CSX_XLINKURL, XLINKXSD, FALSE, FALSE, FALSE, TRUE,FALSE, 'XDB', options=>DBMS_XMLSCHEMA.REGISTER_BINARYXML);
 82  end if;
 83  
 84  exception
 85    when schema_exists then
 86      NULL;
 87  end;
 88  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Register XINCLUDE schema
SQL> declare
  2    c number;
  3    schema_exists EXCEPTION;
  4    PRAGMA EXCEPTION_INIT(schema_exists,-31085);
  5    XINCLUDEXSD VARCHAR2(31000) :=
  6  '<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xi="http://www.w3.org/2001/XInclude" targetNamespace="http://www.w3.org/2001/XInclude" finalDefault="extension">
  7  
  8    <xs:element name="include" type="xi:includeType" />
  9  
 10    <xs:complexType name="includeType" mixed="true">
 11      <xs:choice minOccurs="0" maxOccurs="unbounded" >
 12        <xs:element ref="xi:fallback" />
 13        <xs:any namespace="##other" processContents="lax" />
 14        <xs:any namespace="##local" processContents="lax" />
 15      </xs:choice>
 16  
 17      <xs:attribute name="href" use="optional" type="xs:anyURI"/>
 18      <xs:attribute name="parse" use="optional" default="xml" type="xi:parseType" />
 19      <xs:attribute name="xpointer" use="optional" type="xs:string"/>
 20      <xs:attribute name="encoding" use="optional" type="xs:string"/>
 21      <xs:attribute name="accept" use="optional" type="xs:string"/>
 22      <xs:attribute name="accept-language" use="optional" type="xs:string"/>
 23      <xs:anyAttribute namespace="##other" processContents="lax"/>
 24    </xs:complexType>
 25  
 26    <xs:simpleType name="parseType">
 27      <xs:restriction base="xs:token">
 28        <xs:enumeration value="xml"/>
 29        <xs:enumeration value="text"/>
 30      </xs:restriction>
 31    </xs:simpleType>
 32  
 33    <xs:element name="fallback" type="xi:fallbackType" />
 34  
 35    <xs:complexType name="fallbackType" mixed="true">
 36      <xs:choice minOccurs="0" maxOccurs="unbounded">
 37        <xs:element ref="xi:include"/>
 38        <xs:any namespace="##other" processContents="lax"/>
 39        <xs:any namespace="##local" processContents="lax"/>
 40      </xs:choice>
 41      <xs:anyAttribute namespace="##other" processContents="lax" />
 42    </xs:complexType>
 43  
 44  </xs:schema>';
 45  
 46    XINCLUDEURL VARCHAR2(2000) := 'http://www.w3.org/2001/XInclude.xsd';
 47    CSX_XINCLUDEURL VARCHAR2(2000) := 'http://www.w3.org/2001/csx.XInclude.xsd';
 48  
 49  begin
 50  
 51  select count(*) into c
 52  from resource_view
 53  where equals_path(RES, '/sys/schemas/PUBLIC/www.w3.org/2001/XInclude.xsd')=1;
 54  
 55  if c = 0 then
 56    xdb.dbms_xmlschema.registerSchema(XINCLUDEURL, XINCLUDEXSD, FALSE, TRUE, FALSE, TRUE,FALSE, 'XDB');
 57  end if;
 58  
 59  select count(*) into c
 60  from resource_view
 61  where equals_path(RES, '/sys/schemas/PUBLIC/www.w3.org/2001/csx.XInclude.xsd')=1;
 62  
 63  if c = 0 then
 64    xdb.dbms_xmlschema.registerSchema(CSX_XINCLUDEURL, XINCLUDEXSD, FALSE, FALSE, FALSE, TRUE, FALSE, 'XDB', options=>DBMS_XMLSCHEMA.REGISTER_BINARYXML);
 65  end if;
 66  
 67  exception
 68    when schema_exists then
 69      NULL;
 70  end;
 71  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> Rem DOCUMENT_LINKS VIEW
SQL> create or replace view XDB.DOCUMENT_LINKS
  2  (source_id,
  3  target_id,
  4  target_path,
  5  link_type,
  6  link_form,
  7  source_type) as
  8  SELECT
  9  dl.source_id,
 10  dl.target_id,
 11  dl.target_path,
 12  decode(bitand(sys_op_rawtonum(dl.flags),1),1, 'Weak',
 13         decode(bitand(sys_op_rawtonum(dl.flags),2),2,'Symbolic','Hard')),
 14  decode(bitand(sys_op_rawtonum(dl.flags),4),4, 'XInclude', 'XLink'),
 15  decode(bitand(sys_op_rawtonum(dl.flags),8),8, 'Resource Metadata',
 16         'Resource Content')
 17  from xdb.xdb$d_link dl, xdb.xdb$resource r
 18  where dl.source_id = r.object_id
 19  and sys_checkacl(r.xmldata.acloid, r.xmldata.ownerid,
 20  xmltype('<privilege
 21        xmlns="http://xmlns.oracle.com/xdb/acl.xsd"
 22        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 23        xsi:schemaLocation="http://xmlns.oracle.com/xdb/acl.xsd
 24                            http://xmlns.oracle.com/xdb/acl.xsd
 25                            DAV: http://xmlns.oracle.com/xdb/dav.xsd">
 26        <read-properties/>
 27        <read-contents/>
 28   </privilege>')) = 1;

View created.

SQL> 
SQL> show errors;
No errors.
SQL> 
SQL> create or replace public synonym document_links for xdb.document_links;

Synonym created.

SQL> grant select on xdb.document_links to public ;

Grant succeeded.

SQL> 
SQL> 
SQL> Rem Create helper package for xml index
SQL> @@dbmsxidx
SQL> Rem Copyright (c) 2000, 2011, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxidx.sql - DBMS XMLIndex index support routines
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Defines the XMLIndex index creation routines using the extensibility
SQL> Rem    mechanism
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    sipatel     05/02/11 - Backport sipatel_xmlindex_proc_replication from
SQL> Rem                           main
SQL> Rem                         - #(11067798)-change supplemental logging pragma
SQL> Rem    sipatel     04/28/11 - Backport sipatel_bug-12360609 from main
SQL> Rem                         - #(12360609)-add pending_row_count out param for
SQL> Rem                           process_pending
SQL> Rem    sipatel     01/04/11 - #(11686104)-add process_pending
SQL> Rem    thbaby      06/02/10 - revoke 'with grant option' from public
SQL> Rem    attran      03/08/10 - 9398943: default NULL schema for SyncIndex
SQL> Rem                           NumberIndex, DateIndex
SQL> Rem    badeoti     03/19/09 - cleanup for 11.2 packages: remove noderef-related
SQL> Rem                           procs/funcs NodeRefGetRef, NodeRefGetValue, NodeRefGetParentRef,
SQL> Rem                           NodeRefGetName, NodeRefGetNamespace
SQL> Rem    ajadams     11/07/08 - add with_commit to supplemental_log pragma
SQL> Rem    bhammers    08/25/08 - add getparameter
SQL> Rem    thbaby      06/24/08 - revoke grant privilege on stragg
SQL> Rem    hxzhang     04/15/08 - add dropParameter
SQL> Rem    hxzhang     11/14/07 - Index Unification Project
SQL> Rem    atabar      11/09/07 - add reindex parameter to SyncIndex
SQL> Rem    attran      10/01/07 - Partitioning + SyncIndex
SQL> Rem    thbaby      10/24/07 - add column name to
SQL> Rem                           createnumberindex/createdateindex
SQL> Rem    thbaby      06/21/07 - documentation for SyncIndex
SQL> Rem    preilly     04/23/07 - Fix bug 6003399 - gather_table_stats in logical
SQL> Rem                           standby
SQL> Rem    thbaby      02/15/07 - implement stragg as an internal aggregate
SQL> Rem    thbaby      02/14/07 - return aggregated length in stragg terminate
SQL> Rem    thbaby      02/08/07 - add stragg user defined operator
SQL> Rem    thbaby      01/30/07 - remove NodeRefGetPosPath, NodeRefGetNamePath
SQL> Rem    attran      01/16/07 - bug-5736555: export_clob
SQL> Rem    qiwang      12/14/06 - add Logmnr PLSQL pragam for dbms_xmlindex
SQL> Rem    thbaby      11/28/06 - new CreateNumberIndex that accepts xmltype name
SQL> Rem    thbaby      11/02/06 - move dbms_xmlindex package body out
SQL> Rem    thbaby      08/14/06 - rename *_xml_indexes column paths to parameters
SQL> Rem    thbaby      07/27/06 - add dbms_xmlindex.NodeRefGetRef
SQL> Rem    attran      08/01/06 - add gather_table/delete_stats
SQL> Rem    ataracha    06/08/06 - add export support
SQL> Rem    rmurthy     04/28/05 - add dbms_xnid for node id operations
SQL> Rem    attran      01/04/06 - ALTER SESSION privilege -> C routines
SQL> Rem    attran      02/04/05 - bug4148624: SQLInjection
SQL> Rem    sichandr    11/22/04 - remove set echo statements
SQL> Rem    sichandr    08/11/04 - utility package for XMLIndex
SQL> Rem    mkrishna    09/06/01 - remove existsnode/extract
SQL> Rem    mkrishna    06/29/00 - Created
SQL> Rem
SQL> 
SQL> 
SQL> /*-----------------------------------------------------------------------*/
SQL> /*  LIBRARY                                                              */
SQL> /*-----------------------------------------------------------------------*/
SQL> create or replace library XDB.XMLIndex_lib trusted as static;
  2  /

Library created.

SQL> show errors;
No errors.
SQL> 
SQL> CREATE OR REPLACE PACKAGE xdb.dbms_xmlindex AUTHID CURRENT_USER AS
  2  
  3  ----------------------------------------------------------------------------
  4  -- PROCEDURE - CreateNumberIndex
  5  --     Creates an index for number values in the XMLIndex. The index
  6  --     is created on the VALUE column of the XMLIndex path table on the
  7  --     expression TO_BINARY_DOUBLE(VALUE).
  8  -- PARAMETERS -
  9  --  xml_index_schema
 10  --     Schema of the XMLIndex: default is current user schema
 11  --  xml_index_name
 12  --     Name of the XMLIndex
 13  --  num_index_name: default is system-generated
 14  --     Name of the number index to create
 15  --  num_index_clause
 16  --     Storage clause for the number index. This would simply be appended
 17  --     to the CREATE INDEX statement.
 18  --  xmltypename
 19  --     Xml type name corresponding to the number - one of the following:
 20  --     float
 21  --     double
 22  --     decimal
 23  --     integer
 24  --     nonPositiveInteger
 25  --     negativeInteger
 26  --     long
 27  --     int
 28  --     short
 29  --     byte
 30  --     nonNegativeInteger
 31  --     unsignedLong
 32  --     unsignedInt
 33  --     unsignedShort
 34  --     unsignedByte
 35  --     positiveInteger
 36  --  column_name
 37  --     Name of the path table column on which to create the number index.
 38  ----------------------------------------------------------------------------
 39  PROCEDURE CreateNumberIndex(xml_index_schema IN VARCHAR2 := USER,
 40                              xml_index_name   IN VARCHAR2,
 41                              num_index_name   IN VARCHAR2 := NULL,
 42                              num_index_clause IN VARCHAR2 := NULL,
 43                              xmltypename      IN VARCHAR2 := NULL,
 44                              column_name      IN VARCHAR2 := NULL);
 45  PRAGMA SUPPLEMENTAL_LOG_DATA(CreateNumberIndex, AUTO_WITH_COMMIT);
 46  
 47  ----------------------------------------------------------------------------
 48  -- PROCEDURE - CreateDateIndex
 49  --     Creates an index for date values in the XMLIndex. The user specifies
 50  --     the XML type name (date, dateTime etc.) and the index is created
 51  --     on SYS_XMLCONV(VALUE) which would always return a TIMESTAMP datatype.
 52  -- PARAMETERS -
 53  --  xml_index_schema
 54  --     Schema of the XMLIndex: default is current user schema
 55  --  xml_index_name
 56  --     Name of the XMLIndex
 57  --  date_index_name: default is system generated
 58  --     Name of the date index to be created
 59  --  xmltypename
 60  --     XML type name - one of the following
 61  --         dateTime
 62  --         time
 63  --         date
 64  --         gDay
 65  --         gMonth
 66  --         gYear
 67  --         gYearMonth
 68  --         gMonthDay
 69  --  date_index_clause
 70  --     Storage clause for the date index. This would simply be appended
 71  --     to the CREATE INDEX statement.
 72  --  column_name
 73  --     Name of the path table column on which to create the date index.
 74  ----------------------------------------------------------------------------
 75  PROCEDURE CreateDateIndex(xml_index_schema  IN VARCHAR2 := USER,
 76                            xml_index_name    IN VARCHAR2,
 77                            date_index_name   IN VARCHAR2 := NULL,
 78                            xmltypename       IN VARCHAR2 := NULL,
 79                            date_index_clause IN VARCHAR2 := NULL,
 80                            column_name       IN VARCHAR2 := NULL);
 81  PRAGMA SUPPLEMENTAL_LOG_DATA(CreateDateIndex, AUTO_WITH_COMMIT);
 82  
 83  ----------------------------------------------------------------------------
 84  --    PROCEDURE SyncIndex(xml_index_schema IN VARCHAR2,
 85  --                        xml_index_name   IN VARCHAR2,
 86  --                        partition_name   IN VARCHAR2,
 87  --                        reindex          IN BOOLEAN);
 88  
 89  --    This procedure synchronizes an asynchronously maintained xmlindex.
 90  --    It applies to the xmlindex changes that are logged in the pending
 91  --    table, and brings the path table up-to-date with the base xmltype
 92  --    column.
 93  --
 94  --    PARAMETERS
 95  --    (a) xml_index_schema - Name of the owner of the XMLIndex.
 96  --    (b) xml_index_name   - Name of the XMLIndex.
 97  --    (c) partition_name   - Optional name of the partition to be synced.
 98  --    (d) reindex          - If true drops and recreates secondary indexes
 99  --                              on path table. Default is false.
100  ----------------------------------------------------------------------------
101  PROCEDURE SyncIndex(xml_index_schema IN VARCHAR2 default USER,
102                      xml_index_name   IN VARCHAR2,
103                      partition_name   IN VARCHAR2 default NULL,
104                      reindex          IN BOOLEAN  default FALSE);
105  PRAGMA SUPPLEMENTAL_LOG_DATA(SyncIndex, AUTO_WITH_COMMIT);
106  
107  PROCEDURE gather_table_stats(ownname          IN VARCHAR2,
108                               tabname          IN VARCHAR2,
109                               partname         IN VARCHAR2 default NULL,
110                               estimate_percent IN NUMBER default 0,
111                               block_sample     IN NUMBER default 0,
112                               granularity      IN VARCHAR2 default 'AUTO');
113  PRAGMA SUPPLEMENTAL_LOG_DATA(gather_table_stats, MANUAL);
114  
115  PROCEDURE delete_table_stats(ownname       IN VARCHAR2,
116                               tabname       IN VARCHAR2,
117                               partname      IN VARCHAR2 default NULL,
118                               cascade_parts IN NUMBER default 1);
119  PRAGMA SUPPLEMENTAL_LOG_DATA(delete_table_stats, UNSUPPORTED_WITH_COMMIT);
120  
121  PROCEDURE registerparameter(paramname       IN VARCHAR2,
122                              paramstr        IN CLOB);
123  PRAGMA SUPPLEMENTAL_LOG_DATA(registerparameter, UNSUPPORTED_WITH_COMMIT);
124  
125  PROCEDURE modifyparameter(paramname       IN VARCHAR2,
126                            paramstr        IN CLOB);
127  PRAGMA SUPPLEMENTAL_LOG_DATA(modifyparameter, UNSUPPORTED_WITH_COMMIT);
128  
129  PROCEDURE dropparameter(paramname       IN VARCHAR2);
130  PRAGMA SUPPLEMENTAL_LOG_DATA(dropparameter, UNSUPPORTED_WITH_COMMIT);
131  
132  FUNCTION getparameter(paramname IN VARCHAR2) RETURN VARCHAR2;
133  
134  ----------------------------------------------------------------------------
135  --    PROCEDURE PROCESS_PENDING(xml_index_schema  IN  VARCHAR2,
136  --                              xml_index_name    IN  VARCHAR2,
137  --                              pending_row_count OUT BINARY_INTEGER);
138  
139  --    This procedure executes DMLs required to complete a NONBLOCKING
140  --    alter index add_group/add_column operation.
141  --
142  --    PARAMETERS
143  --    (a) xml_index_schema - Name of the owner of the XMLIndex.
144  --    (b) xml_index_name   - Name of the XMLIndex.
145  --    (c) pending_row_count - RETURNs number of rows that still have
146  --                            to be processed/indexed.
147  ----------------------------------------------------------------------------
148  PROCEDURE process_pending(xml_index_schema  IN   VARCHAR2,
149                            xml_index_name    IN   VARCHAR2,
150                            pending_row_count OUT  BINARY_INTEGER);
151  PRAGMA SUPPLEMENTAL_LOG_DATA(process_pending, AUTO_WITH_COMMIT);
152  
153  end dbms_xmlindex;
154  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> grant execute on xdb.dbms_xmlindex to public;

Grant succeeded.

SQL> create or replace public synonym dbms_xmlindex for xdb.dbms_xmlindex;

Synonym created.

SQL> 
SQL> create or replace type string_agg_type
  2  -- OID '00000000000000000000000000020101'
  3  as object
  4  (
  5     key      raw(8),
  6  
  7     static function
  8          ODCIAggregateInitialize(sctx IN OUT string_agg_type, outopn IN RAW,
  9                                  inpopn IN RAW)
 10          return pls_integer
 11  
 12          as language c
 13          library xmltype_lib
 14          name "STRAGG_INITIALIZE"
 15          with context
 16          parameters (
 17            context,
 18            sctx, sctx INDICATOR STRUCT, sctx DURATION OCIDuration,
 19            outopn OCIRaw, inpopn OCIRaw,
 20            return int
 21          ),
 22  
 23     member function
 24          ODCIAggregateIterate(self IN OUT string_agg_type ,
 25                               value IN varchar2 )
 26          return pls_integer
 27  
 28          as language c
 29          library xmltype_lib
 30          name "STRAGG_ITERATE"
 31          with context
 32          parameters (
 33            context,
 34            self, self INDICATOR STRUCT, self DURATION OCIDuration,
 35            value, value INDICATOR, value LENGTH,
 36            return int
 37          ),
 38  
 39     member function
 40          ODCIAggregateTerminate(self IN string_agg_type,
 41                                 returnValue OUT  varchar2,
 42                                 flags IN number)
 43          return pls_integer
 44  
 45          as language c
 46          library xmltype_lib
 47          name "STRAGG_TERMINATE"
 48          with context
 49          parameters (
 50            context,
 51            self, self INDICATOR STRUCT,
 52            returnValue, returnValue INDICATOR, returnValue LENGTH,
 53            flags, flags INDICATOR,
 54            return int
 55          ),
 56  
 57     member function
 58          ODCIAggregateMerge(self IN OUT string_agg_type,
 59                             ctx2 IN string_agg_type)
 60          return pls_integer
 61  
 62          as language c
 63          library xmltype_lib
 64          name "STRAGG_MERGE"
 65          with context
 66          parameters (
 67            context,
 68            self, self INDICATOR STRUCT, self DURATION OCIDuration,
 69            ctx2, ctx2 INDICATOR STRUCT,
 70            return int
 71          )
 72  );
 73  /

Type created.

SQL> 
SQL> show errors;
No errors.
SQL> /

Type created.

SQL> 
SQL> /* stragg cannot be parallel-enabled unless order by is supported in
SQL>  * parallel mode for user defined aggregates
SQL>  */
SQL> CREATE or replace
  2  FUNCTION stragg(input varchar2 )
  3  RETURN varchar2
  4  AGGREGATE USING string_agg_type;
  5  /

Function created.

SQL> 
SQL> GRANT EXECUTE on stragg to PUBLIC;

Grant succeeded.

SQL> REVOKE EXECUTE on stragg from PUBLIC;

Revoke succeeded.

SQL> GRANT EXECUTE on stragg to PUBLIC;

Grant succeeded.

SQL> Rem Load body of xmlindex helper package (dbms_xmlindex)
SQL> @@prvtxidx.plb
SQL> SET ECHO ON
SQL> SET FEEDBACK 1
SQL> SET NUMWIDTH 10
SQL> SET LINESIZE 80
SQL> SET TRIMSPOOL ON
SQL> SET TAB OFF
SQL> SET PAGESIZE 100
SQL> CREATE OR REPLACE PACKAGE xdb.dbms_xmlindex0 wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  367 138
 21  mvgCgH3kfFgM54mF4Qu/1LK+0wwwg2PxLZ4VfC9AkPiOeMVXjrHcsV2glRRinGD8ji+kNjJS
 22  KYb9bY9puoOr50a4JJpD2Y0WM1PvV0+5rppoILHGOiXbqeKXwL0Vf7cmNAPbqd/Fvi8UpLbn
 23  G9iFV5DTwWAJ7dgNm836uvf3YIWydsjpQDSTgHxLvKHW7BWVfZGPtZCOnmpOGzK6pAySprB8
 24  6Wtu3/kXwI31XZdLEndKAZ9HSrK8MQNHn4pHytz490o9hztZ5WcpeZAS6VOQAC2ETqupkRSF
 25  w7os/IPCV5M0purs7XY=
 26  
 27  /

Package created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PACKAGE BODY xdb.dbms_xmlindex0 wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  867 260
 21  dnrUuPUHTtfz8YrO8J3/YNjH/QMwg+2Nr67WfI7UAE7qNIqgbPCTX3iuYxDC1AlLYpfcFMkc
 22  WW4flvhOYgvWk5dwgveRvdVzzhy7/gCFPhJRveZuCCp+GWGaPUj4OggNQppiN+wWsYiEhxE2
 23  6Pejw+mrjG8YC62WXpPNcsVqK3UJL56HTcnV5btaNhdK3CYRGEg4wiU6tZP6FGJ0h8M7TMEw
 24  fDTbtwHCWlyUw9FuCQTIw2zpsqmvPwWKrZS57kXfcmcYVF7tQPHGxOKni6ho4AtzxYqXiD5t
 25  Y3krwOVVkFYnHU5NO5Gda2KxF4DKZ7eZYHnoHVFFw9M5KW0/tu84QGpROW+97pmJv12iOfo6
 26  UbaikS+DNXcL7TDjI7YVVSBwIug5sLE9JhWD+OUIfSr8nsbZ1OWxQ/oDs9/OnRsd5srGF+/j
 27  s5xC24Wm2whNW/NBUtr/XOePzl82CC4T0/BljDRlY00UJcYKnWbBvKiZnBxJMlTM1cVVKaE/
 28  NOHJuScfoJJyuE00opDU+tCzZ+zdVP6jrmDEDVU2tprQuadN0+oxMTsH0fA6+PcT9ev/ncnw
 29  GB3QXl6kmMTPUzr7NG38PQ==
 30  
 31  /

Package body created.

SQL> show errors;
No errors.
SQL> grant execute on xdb.dbms_xmlindex0 to public;

Grant succeeded.

SQL> CREATE OR REPLACE PACKAGE BODY xdb.dbms_xmlindex wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  1d14 60d
 21  FgJ7ltO2ATGj741KMLy16P+gveowg82TDCCG3y+5KpKURpZh+3haJVFneMj7GFGU4GwJbCbw
 22  ENNpfihERe3SwiSdhAChoTwKUph5eFrhkwZ6vFggyVqtlV0AShaeojA1LKr50oD5Ousgnfn5
 23  CJxy59VyDGPKIUcU6aIJ2D5y8any1IQjGZC3V5biwOmHEazzhn0dp11E2UnS/4BYUZuPa/dP
 24  Kx3GvQL9p0BSoaWG5Rot1wNXQQo32wRxTOL7NLGciSvL2Ag341cMMCLlONB1m+Grf0gKewev
 25  EAQUxVtJno4o/uu9q7/Jeq3ZkVXS2I1itgO0Hns+2TY7cYpPAJdqwSL4hM6YFXNjXbvMqtH+
 26  8Ciq9JIAg9FccEJL4vUjoKodGQ+u19Or2MHPSWKZ8OJrfpayDEYHtEizTExXWLNdhCMVk9iA
 27  hbw0arBUJ+hYj4TS4rKndJiYguHCRxIK+zbhqOAYQgP5RgvpmWCoonLs8koLU1ZWfj/yBA4d
 28  22Ow/TAvCxwByVbTTjdE09kMr+3sn61oRoBkWZ1nVr45Y4XVbluNDg9rTDKYbcIfaWNrTIC3
 29  2Y8d71SZ9MOlc138dZvncf1Mo5W/lz+3QJMzCj2xzf6b2n6qqTnvMxIKefi/Q+wcrsKPLQoX
 30  qQw7PbDtgtMU0htEJkjAvNXinluLS3ZJqTQa1fTpqTmx8MBhM8qWoFV1xLJTHcJSK+6IcbLO
 31  y2IlyTv91KJGivU6waxUg7XqB3yJZpDnjxHnX+QfL6Yd/IlS4PwE6cOu5vHDFyXsyxxep/7f
 32  5lAr+3aERnFphx7HRNnHGxEsBqw26ryZFZf5sSlidT7sXj4CaK+qtNOMqVK4/UXY6PNZuolN
 33  EWWYGPFZZRD6YhD9ZAfAFsdNZfZ7ETgKgXdR6QumSFemZtgPDn/edtsh6qv2DbZkaIMIYq2K
 34  qGkDK3dZOYAzkp/gwyhc7GzJxo0JoRaxYK5CPCegellN5+A1GcGeSd5Z9upv5eMUOQ8tvToy
 35  Ibpu3i07V/vVIo91AmduIetsiYJrJj7CF056jVdlwR+ZJ3N2kXUZrZ7LfQUsT0fK2L+Lpdnc
 36  EeoX58VQNrav3dggOhGYManaZ+Mn1Q9LszJHU+GYaVBEIcVcM2a5jFsMbZMGoncQdPgLx1kW
 37  Tb+qkPD5LUV1xELifDrG/OBBw9c1tVQP17cDws0sOyj4ZlLjFUEzJNY93Gx1iTH9lU0GiZQ7
 38  tftSRWOGLJi/vNOlK3+YAPce3zHS3oKzN7xadd0Kp5cz0QaYxgcsHCgRHjR6iIU9n49D6loL
 39  tKRfdE4Nt8/NBA+tar0rNgd3ijYNq3W80KrrRzSz3fXuvkzX5XIeMXHDT/blx0x5e1PkCzrR
 40  xt4pD8VFc7qx9ixMumSLsK0ilJUKjqDRVxClhXb9YA9DLo/9EvCxbmrlJ6utEZ80kpLozegg
 41  g4PvyVhY7fhKxLdf7mQhyfORpZhfk/EqAGMw1/SFcLeWDu5FgEzBbam83dqqbzEopJYTwn9D
 42  KY4xTniq4a34aYg=
 43  
 44  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> Rem Create the XMLIndex
SQL> @@catxidx
SQL> Rem
SQL> Rem $Header: rdbms/admin/catxidx.sql /st_rdbms_11.2.0/1 2011/02/01 11:15:30 attran Exp $
SQL> Rem
SQL> Rem catxidx.sql
SQL> Rem
SQL> Rem Copyright (c) 2004, 2011, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxidx.sql - XMLIndex related schema objects
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem     This script creates the views, packages, index types, operators and
SQL> Rem     indexes required for supporting the XMLIndex
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script should be run as "XDB".
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    attran      01/31/11 - 11697039 & 11699333
SQL> Rem    thbaby      05/11/10 - remove PREDICATE xmlindex related attrs from
SQL> Rem                           XMLIndexLoad_t
SQL> Rem    bhammers    04/22/10 - support buffer > 32k at export time
SQL> Rem    thbaby      03/01/10 - add grppos column to xdb.xdb$xidx_imp_t
SQL> Rem    attran      31/01/10 - global temp imp_t
SQL> Rem    spetride    05/04/09 - add ODCIIndexUtil{GetTableNames|Cleanup}
SQL> Rem    bhammers    10/23/08 - call qmix_xmetadata only if in datapump mode
SQL> Rem    bhammers    04/22/08 - renamed col in  XDB.XDB$XIDX_IMP_T
SQL> Rem    attran      06/01/08 - 7140541: xmlindex_noop
SQL> Rem    attran      04/15/08 - list partitioned XIX
SQL> Rem    bhammers    03/11/08 - import/export datapump
SQL> Rem    bhammers    11/14/07 - modified table XDB.XDB$XIDX_IMP_T
SQL> Rem    hxzhang     11/14/07 - Index Unification Project
SQL> Rem    attran      09/24/07 - ODCIStatsUpdPartStatistics
SQL> Rem    attran      08/24/07 - table function for single INSERT
SQL> Rem    atabar      07/11/07 - Add predicate entries to XDB.XMLIndexLoad_t
SQL> Rem    ningzhan    04/12/07 - increase snapshot size in DXPTAB to 20
SQL> Rem    attran      06/03/07 - 5925800: Got rid of XMLTM_LIB/XMLTM_FUNCIMPL
SQL> Rem    attran      11/01/07 - Bug 5765339 / ExImport
SQL> Rem    attran      11/06/06 - Exception handling during upgrade
SQL> Rem    attran      08/27/06 - Exchange Partition
SQL> Rem    thbaby      08/12/06 - rename pathsdoc column to parameters
SQL> Rem    attran      06/30/06 - Bug 5280799 / AMD64
SQL> Rem    thbaby      06/16/06 - make stats type also system-managed
SQL> Rem    thbaby      06/13/06 - move drop indextype to up/down scripts
SQL> Rem    ataracha    06/07/06 - add support for export/import
SQL> Rem    attran      06/05/06 - Sys-Managed Partitioning
SQL> Rem    thbaby      05/24/06 - remove obsolete xmlindex operators
SQL> Rem    ataracha    05/16/06 - comment out system-managed part.
SQL> Rem    attran      04/30/06 - System Managed Partitioning
SQL> Rem    thbaby      04/26/06 - remove 'without column data'
SQL> Rem    thbaby      04/25/06 - xmlindex without column data
SQL> Rem    thbaby      12/21/05 - remove repeat interval from dictionary
SQL> Rem    thbaby      12/15/05 - add new xdb$dxptab columns for async idx
SQL> Rem    attran      11/30/05 - XMLIndexLoad_t TableFunction: Remove the LOB
SQL> Rem    ataracha    01/05/06 - rm xdb$dxpath, xdb$dxptab-add pathsdoc
SQL> Rem    attran      03/08/05 - Execute Privilege to the LOAD func
SQL> Rem    sichandr    03/03/05 - pipelined table func implementation
SQL> Rem    attran      03/01/05 - Load into VALUE LOBs
SQL> Rem    attran      11/08/04 - STATISTICS
SQL> Rem    smukkama    09/27/04 - move xmlidx token plsql stuff from catxdbtm.sql
SQL> Rem    attran      10/31/04 - Security: obsolete operators.
SQL> Rem    attran      09/17/04 - Security: grant to public
SQL> Rem    attran      08/20/04 - Up/Down/grade
SQL> Rem    sichandr    08/26/04 - Add isnode function
SQL> Rem    athusoo     07/30/04 - Add hastext function
SQL> Rem    athusoo     07/20/04 - use VARCHAR2 for value
SQL> Rem    sichandr    07/18/04 - Load into CLOB
SQL> Rem    athusoo     07/08/04 - Add isattr function
SQL> Rem    sichandr    06/18/04 - add pull table function
SQL> Rem    athusoo     06/03/04 - Add support for xmlindex_parent operator
SQL> Rem    sichandr    04/08/04 - add xmlindex_depth
SQL> Rem    athusoo     03/30/04 - Add maxchild function
SQL> Rem    athusoo     03/18/04 - Add pathstr parameter to IndexStart
SQL> Rem    athusoo     03/16/04 - Convert to xmlindex_getnodes operator
SQL> Rem    attran      02/17/04 - Created
SQL> 
SQL> declare
  2    errno number;
  3  begin
  4    execute immediate
  5      'disassociate statistics from indextypes XDB.XMLINDEX';
  6  EXCEPTION
  7    when others then errno := 1;-- ignore all errors !
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> SHOW ERRORS;
No errors.
SQL> 
SQL> declare
  2    exist number;
  3  begin
  4    select count(*) into exist from DBA_TABLES where table_name = 'XDB$DXPTAB'
  5    and owner = 'XDB';
  6  
  7    if exist = 0 then
  8      execute immediate
  9        'create table xdb.xdb$dxptab (
 10           idxobj#     number,                            -- object # of XMLIndex
 11           pathtabobj# number not null,                 -- object # of PATH TABLE
 12           flags       number,                      -- 0x01 INCLUDED vs EXCLUDED
 13           rawsize     number,                               -- size of RAW value
 14           parameters  XMLType,   -- PS: xml to store paths preferences,
 15                                  --     scheduler job information
 16           pendtabobj# number,                       -- object # of pending table
 17           snapshot    raw(20),   -- SCN and flashback timestamp of path table
 18                                  -- as of last successful sync
 19             constraint xdb$dxptabpk primary key (idxobj#)) xmltype column parameters store as CLOB';
 20      execute immediate
 21        'create unique index xdb.xdb$idxptab on xdb.xdb$dxptab(pathtabobj#)';
 22    end if;
 23  
 24    select count(*) into exist from DBA_TABLES
 25    where table_name = 'XDB$XIDX_IMP_T'
 26          and owner = 'XDB';
 27  
 28    if exist = 0 then
 29       execute immediate
 30        'create global temporary table XDB.XDB$XIDX_IMP_T
 31                                  (index_name VARCHAR2(40),
 32                                   schema_name VARCHAR2(40),
 33                                   id VARCHAR2(40),
 34                                   data CLOB,
 35                                   grppos NUMBER )
 36         on commit preserve rows';
 37          -- explanation of the columns:
 38          -- id:    identifies the type of the entry,
 39          --        e.g. PATHS, STRUCT_IDXGRP, STRUCT_SECIDX, etc
 40          -- data:  the data of the entry, e.g. the parameter clause
 41  
 42       -- These privileges are ok because the table contents
 43       -- are private and isolated during the session.
 44       execute immediate
 45        'grant insert, select, delete on XDB.XDB$XIDX_IMP_T to public';
 46    end if;
 47  
 48  
 49  
 50    select count(*) into exist from DBA_TABLES
 51    where table_name = 'XDB$XIDX_PARAM_T'
 52          and owner = 'XDB';
 53  
 54    if exist = 0 then
 55      execute immediate
 56        'create table XDB.XDB$XIDX_PARAM_T
 57                                  (userid number,
 58                                   param_name VARCHAR2(30),
 59                                   paramstr CLOB)';
 60      execute immediate
 61        'create unique index xdb.xdb$idxparam on xdb.xdb$xidx_param_t(userid,param_name)';
 62    end if;
 63  end;
 64  /

PL/SQL procedure successfully completed.

SQL> SHOW ERRORS;
No errors.
SQL> 
SQL> -------------------------------------------------------------------
SQL> -- Create package used by ODCIIndexGetMetadata
SQL> -------------------------------------------------------------------
SQL> CREATE OR REPLACE PACKAGE XDB.ximetadata_pkg AS
  2    FUNCTION getIndexMetadata (idxinfo  IN  sys.ODCIIndexInfo,
  3                             expver   IN  VARCHAR2,
  4                             newblock OUT number,
  5                             idxenv   IN  sys.ODCIEnv) return VARCHAR2;
  6    FUNCTION getIndexMetadataCallback (idxinfo  IN  sys.ODCIIndexInfo,
  7                                  expver   IN  VARCHAR2,
  8                                  newblock OUT number,
  9                                  idxenv   IN  sys.ODCIEnv) return CLOB;
 10    FUNCTION utlgettablenames(idxinfo  IN  sys.ODCIIndexInfo) return BOOLEAN;
 11  
 12  END ximetadata_pkg;
 13  /

Package created.

SQL> SHOW ERRORS;
No errors.
SQL> 
SQL> CREATE OR REPLACE PACKAGE BODY XDB.ximetadata_pkg AS
  2  
  3  iterate   NUMBER := 0;     -- counts the calls
  4  data      CLOB := NULL;    -- buffer storage
  5  offset NUMBER := 1;
  6  done NUMBER := 0;
  7  
  8  FUNCTION getIndexMetadata (idxinfo  IN  sys.ODCIIndexInfo,
  9                             expver   IN  VARCHAR2,
 10                             newblock OUT number,
 11                             idxenv   IN  sys.ODCIEnv) return VARCHAR2 IS
 12  
 13    invalid_input         EXCEPTION;
 14    PRAGMA EXCEPTION_INIT(invalid_input, -30980);
 15    current_plsql VARCHAR2(32000);
 16    pos    NUMBER := 0;
 17  BEGIN
 18  
 19    IF (done = 1) THEN
 20       iterate  := 0; -- reset
 21       done := 0;     -- reset
 22       RETURN '';
 23    END IF;
 24  
 25    newblock := 1; -- todo
 26  
 27    IF (sys.dbms_datapump.datapump_job) THEN
 28  
 29      IF (iterate = 0) THEN -- first call: get data from c callback once
 30        data := getIndexMetadataCallback (idxinfo, expver, newblock, idxenv);
 31        IF (length(data) <= 30000) THEN
 32          done := 1;          -- short metadata can be returned in one shot
 33          RETURN data;
 34        END IF;
 35      END IF;
 36  
 37      -- we have long metadata
 38      -- find the second occurence of 'insert into XDB.XDB'
 39      pos := dbms_lob.instr(data, 'insert into', offset, 2);
 40  
 41      IF (pos = 0) THEN -- not found
 42         current_plsql := DBMS_LOB.SUBSTR(data, 30000, offset); -- the rest
 43         done := 1;
 44      ELSE
 45         current_plsql:= DBMS_LOB.SUBSTR(data, pos - offset -1, offset);
 46        offset := pos;
 47      END IF;
 48  
 49      iterate := iterate + 1;
 50      return current_plsql;
 51  
 52    END IF;
 53    raise invalid_input;
 54  
 55    return '';
 56  END getIndexMetadata;
 57  
 58  
 59   function getIndexMetadataCallback (idxinfo  IN  sys.ODCIIndexInfo,
 60                                      expver   IN  VARCHAR2,
 61                                      newblock OUT number,
 62                                      idxenv   IN  sys.ODCIEnv)
 63           return CLOB
 64    is language C name "QMIX_XMETADATA" library XDB.XMLINDEX_LIB
 65       with context
 66       parameters (
 67         context,
 68         idxinfo, idxinfo  INDICATOR struct,
 69         expver,  expver   INDICATOR,
 70         newblock,newblock INDICATOR,
 71         idxenv,  idxenv   INDICATOR struct,
 72         RETURN OCILobLocator);
 73  
 74   FUNCTION utlgettablenames(idxinfo  IN  sys.ODCIIndexInfo) return BOOLEAN
 75   is language C name "QMIX_TABLEUTILS" library  XDB.XMLINDEX_LIB
 76        with context
 77        parameters (
 78          context,
 79          idxinfo, idxinfo  INDICATOR struct,
 80          RETURN            INDICATOR sb4,
 81          return);
 82  
 83  END ximetadata_pkg;
 84  /

Package body created.

SQL> SHOW ERRORS;
No errors.
SQL> 
SQL> 
SQL> create or replace public synonym ximetadata_pkg for XDB.ximetadata_pkg;

Synonym created.

SQL> /

Synonym created.

SQL> SHOW ERRORS;
No errors.
SQL> 
SQL> /*-----------------------------------------------------------------------*/
SQL> /*  TYPE IMPLEMENTATION                                                  */
SQL> /*-----------------------------------------------------------------------*/
SQL> create or replace type xdb.XMLIndexMethods
  2    OID '10000000000000000000000000020118'
  3    authid current_user as object
  4  (
  5    -- cursor set by IndexStart and used in IndexFetch
  6    scanctx RAW(8),
  7  
  8    -- DCLs
  9    static function ODCIGetInterfaces (ilist OUT sys.ODCIObjectList)
 10           return NUMBER,
 11  
 12    -- DDLs
 13    static function ODCIIndexCreate   (idxinfo  sys.ODCIIndexInfo,
 14                                       idxparms VARCHAR2,
 15                                       idxenv   sys.ODCIEnv)
 16           return NUMBER
 17    is language C name "QMIX_CREATE" library XDB.XMLINDEX_LIB
 18       with context
 19       parameters (
 20         context,
 21         idxinfo, idxinfo  INDICATOR struct,
 22         idxparms,idxparms INDICATOR,
 23         idxenv,  idxenv   INDICATOR struct,
 24         RETURN OCINumber),
 25  
 26    static function ODCIIndexDrop     (idxinfo sys.ODCIIndexInfo,
 27                                       idxenv  sys.ODCIEnv)
 28           return NUMBER
 29    is language C name "QMIX_DROP" library XDB.XMLINDEX_LIB
 30       with context
 31       parameters (
 32         context,
 33         idxinfo, idxinfo INDICATOR struct,
 34         idxenv,  idxenv  INDICATOR struct,
 35         RETURN OCINumber),
 36  
 37    static function ODCIIndexAlter    (idxinfo          sys.ODCIIndexInfo,
 38                                       idxparms  IN OUT VARCHAR2,
 39                                       opt              NUMBER,
 40                                       idxenv           sys.ODCIEnv)
 41           return NUMBER
 42    is language C name "QMIX_ALTER" library XDB.XMLINDEX_LIB
 43       with context
 44       parameters (
 45         context,
 46         idxinfo, idxinfo  INDICATOR struct,
 47         idxparms,idxparms INDICATOR,
 48         opt,     opt      INDICATOR,
 49         idxenv,  idxenv   INDICATOR struct,
 50         RETURN OCINumber),
 51  
 52    static function ODCIIndexTruncate (idxinfo sys.ODCIIndexInfo,
 53                                       idxenv  sys.ODCIEnv)
 54           return NUMBER
 55    is language C name "QMIX_TRUNC" library XDB.XMLINDEX_LIB
 56       with context
 57       parameters (
 58         context,
 59         idxinfo, idxinfo INDICATOR struct,
 60         idxenv,  idxenv  INDICATOR struct,
 61         RETURN OCINumber),
 62  
 63    --- DMLs ---
 64    static function ODCIIndexInsert (idxinfo sys.ODCIIndexInfo,
 65                                     rid     VARCHAR2,
 66                                     doc     sys.xmltype,
 67                                     idxenv  sys.ODCIEnv)
 68           return NUMBER
 69    is language C name "QMIX_INSERT" library XDB.XMLINDEX_LIB
 70       with context
 71       parameters (
 72         context,
 73         idxinfo, idxinfo INDICATOR struct,
 74         rid,     rid     INDICATOR,
 75         doc,     doc     INDICATOR,
 76         idxenv,  idxenv  INDICATOR struct,
 77         RETURN OCINumber),
 78  
 79    static function ODCIIndexDelete (idxinfo sys.ODCIIndexInfo,
 80                                     rid     VARCHAR2,
 81                                     doc     sys.xmltype,
 82                                     idxenv  sys.ODCIEnv)
 83           return NUMBER
 84    is language C name "QMIX_DELETE" library XDB.XMLINDEX_LIB
 85       with context
 86       parameters (
 87         context,
 88         idxinfo, idxinfo INDICATOR struct,
 89         rid,     rid     INDICATOR,
 90         doc,     doc     INDICATOR,
 91         idxenv,  idxenv  INDICATOR struct,
 92         RETURN OCINumber),
 93  
 94    static function ODCIIndexUpdate (idxinfo sys.ODCIIndexInfo,
 95                                     rid     VARCHAR2,
 96                                     olddoc  sys.xmltype,
 97                                     newdoc  sys.xmltype,
 98                                     idxenv  sys.ODCIEnv)
 99           return NUMBER
100    is language C name "QMIX_UPDATE" library XDB.XMLINDEX_LIB
101       with context
102       parameters (
103         context,
104         idxinfo, idxinfo INDICATOR struct,
105         rid,     rid     INDICATOR,
106         olddoc,  olddoc  INDICATOR,
107         newdoc,  newdoc  INDICATOR,
108         idxenv,  idxenv  INDICATOR struct,
109         RETURN OCINumber),
110  
111    --- Query ---
112    static function ODCIIndexStart (ictx    IN OUT XMLIndexMethods,
113                                    idxinfo        sys.ODCIIndexInfo,
114                                    opi            sys.ODCIPredInfo,
115                                    oqi            sys.ODCIQueryInfo,
116                                    strt           NUMBER,
117                                    stop           NUMBER,
118                                    pathstr        varchar2,
119                                    idxenv         sys.ODCIEnv)
120           return NUMBER
121    is language C name "QMIX_START" library XDB.XMLINDEX_LIB
122       with context
123       parameters (
124         context,
125         ictx,    ictx    INDICATOR struct,
126         idxinfo, idxinfo INDICATOR struct,
127         opi,     opi     INDICATOR struct,
128         oqi,     oqi     INDICATOR struct,
129         strt,    strt    INDICATOR,
130         stop,    stop    INDICATOR,
131         pathstr, pathstr LENGTH,
132         idxenv,  idxenv  INDICATOR struct,
133         return OCINumber),
134  
135    member function ODCIIndexFetch (nrows      NUMBER,
136                                    rids   OUT sys.ODCIRidList,
137                                    idxenv     sys.ODCIEnv)
138           return  NUMBER
139    is language C name "QMIX_FETCH" library XDB.XMLINDEX_LIB
140       with context
141       parameters (
142         context,
143         self,     self INDICATOR struct,
144         nrows,   nrows INDICATOR,
145         rids,     rids INDICATOR,
146         idxenv, idxenv INDICATOR struct,
147         return OCINumber),
148  
149    member function ODCIIndexClose (idxenv sys.ODCIEnv)
150           return NUMBER
151    is language C name "QMIX_CLOSE" LIBRARY XDB.XMLINDEX_LIB
152       with context parameters (
153         context,
154         self,     self INDICATOR struct,
155         idxenv, idxenv INDICATOR struct,
156         return OCINumber),
157  
158    static function ODCIIndexExchangePartition (idxPinfo sys.ODCIIndexInfo,
159                                                idxTinfo sys.ODCIIndexInfo,
160                                                idxenv   sys.ODCIEnv)
161           return NUMBER
162    is language C name "QMIX_EXCHANGE" library XDB.XMLINDEX_LIB
163       with context
164       parameters (
165         context,
166         idxPinfo, idxPinfo INDICATOR struct,
167         idxTinfo, idxTinfo INDICATOR struct,
168         idxenv,   idxenv   INDICATOR struct,
169         RETURN OCINumber),
170  
171    static function ODCIIndexUpdPartMetadata(ixdxinfo sys.ODCIIndexInfo,
172                                             palist   sys.ODCIPartInfoList,
173                                             idxenv   sys.ODCIEnv)
174           return NUMBER,
175  --  is language C name "QMIX_UPD_P_METADATA" library XDB.XMLINDEX_LIB
176  --     with context
177  --     parameters (
178  --       context,
179  --       idxinfo, idxinfo INDICATOR struct,
180  --       idxenv,  idxenv  INDICATOR struct,
181  --       RETURN OCINumber),
182  
183  
184  --- MOVE / TRANSPORTABLE TBS / IM/EXPORT ---
185    static function ODCIIndexGetMetadata(idxinfo  IN  sys.ODCIIndexInfo,
186                                         expver   IN  VARCHAR2,
187                                         newblock OUT number,
188                                         idxenv   IN  sys.ODCIEnv)
189           return VARCHAR2,
190  
191    static FUNCTION ODCIIndexUtilGetTableNames(ia IN sys.ODCIIndexInfo,
192                                        read_only IN PLS_INTEGER,
193                                        version IN varchar2,
194                                        context OUT PLS_INTEGER)
195    RETURN BOOLEAN,
196  
197    static PROCEDURE ODCIIndexUtilCleanup (context  IN PLS_INTEGER)
198  
199  );
200  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type body xdb.XMLIndexMethods
  2  is
  3    static function ODCIGetInterfaces(ilist OUT sys.ODCIObjectList)
  4      return number is
  5    begin
  6      ilist := sys.ODCIObjectList(sys.ODCIObject('SYS','ODCIINDEX2'));
  7      return ODCICONST.SUCCESS;
  8    end ODCIGetInterfaces;
  9  
 10    static function ODCIIndexUpdPartMetadata(ixdxinfo sys.ODCIIndexInfo,
 11                                             palist   sys.ODCIPartInfoList,
 12                                             idxenv   sys.ODCIEnv)
 13           return NUMBER
 14    is
 15    BEGIN
 16     RETURN ODCICONST.SUCCESS;
 17    END;
 18  
 19    static function ODCIIndexGetMetadata(idxinfo  IN  sys.ODCIIndexInfo,
 20                                         expver   IN  VARCHAR2,
 21                                         newblock OUT number,
 22                                         idxenv   IN  sys.ODCIEnv)
 23           return VARCHAR2
 24    is
 25    begin
 26      return XDB.ximetadata_pkg.getIndexMetadata(idxinfo, expver, newblock, idxenv);
 27    end ODCIIndexGetMetadata;
 28  
 29    -- path table and secondary indexes on it are already exported in schema-mode
 30    -- this routine should only expose them for Transportable Tablespaces,
 31    -- via DataPump
 32    static function ODCIIndexUtilGetTableNames(ia IN sys.ODCIIndexInfo,
 33                                               read_only IN PLS_INTEGER,
 34                                               version IN varchar2,
 35                                               context OUT PLS_INTEGER)
 36           return BOOLEAN
 37    is
 38    begin
 39      return XDB.ximetadata_pkg.utlgettablenames(ia);
 40    end ODCIIndexUtilGetTableNames;
 41  
 42    static procedure ODCIIndexUtilCleanup (context  PLS_INTEGER)
 43    is
 44    begin
 45      -- dummy routine
 46      return;
 47    end ODCIIndexUtilCleanup;
 48  
 49  end;
 50  /

Type body created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type xdb.XMLIdxStatsMethods
  2    OID '20000000000000000000000000023456'
  3    authid current_user as object
  4  (
  5    -- user-defined function cost and selectivity functions
  6    cost number,
  7  
  8    -- DCLs
  9    static function ODCIGetInterfaces (ilist OUT sys.ODCIObjectList)
 10           return NUMBER,
 11  
 12    --- STATISTICs ---
 13    static function ODCIStatsCollect(colinfo   sys.ODCIColInfo,
 14                                     options   sys.ODCIStatsOptions,
 15                                     stats OUT RAW,
 16                                     idxenv    sys.ODCIEnv)
 17           return NUMBER
 18    is language C name "QMIX_COL_STATS" LIBRARY XDB.XMLINDEX_LIB
 19       with context parameters (
 20         context,
 21         colinfo, colinfo INDICATOR struct,
 22         options, options INDICATOR struct,
 23         stats,   stats   INDICATOR, stats LENGTH,
 24         idxenv,  idxenv  INDICATOR struct,
 25         return OCINumber),
 26  
 27    static function ODCIStatsCollect(idxinfo   sys.ODCIIndexInfo,
 28                                     options   sys.ODCIStatsOptions,
 29                                     stats OUT RAW,
 30                                     idxenv    sys.ODCIEnv)
 31           return NUMBER
 32    is language C name "QMIX_IDX_STATS" LIBRARY XDB.XMLINDEX_LIB
 33       with context parameters (
 34         context,
 35         idxinfo, idxinfo INDICATOR struct,
 36         options, options INDICATOR struct,
 37         stats,   stats   INDICATOR, stats LENGTH,
 38         idxenv,  idxenv  INDICATOR struct,
 39         return OCINumber),
 40  
 41    static function ODCIStatsDelete(colinfo   sys.ODCIColInfo,
 42                                    statistics OUT RAW,
 43                                    idxenv    sys.ODCIEnv)
 44           return NUMBER
 45    is language C name "QMIX_DEL_COLSTATS" LIBRARY XDB.XMLINDEX_LIB
 46       with context parameters (
 47         context,
 48         colinfo,    colinfo    INDICATOR struct,
 49         statistics, statistics INDICATOR, statistics LENGTH,
 50         idxenv,     idxenv     INDICATOR struct,
 51         return OCINumber),
 52  
 53    static function ODCIStatsDelete(idxinfo   sys.ODCIIndexInfo,
 54                                    statistics OUT RAW,
 55                                    idxenv    sys.ODCIEnv)
 56           return NUMBER
 57    is language C name "QMIX_DEL_IDXSTATS" LIBRARY XDB.XMLINDEX_LIB
 58       with context parameters (
 59         context,
 60         idxinfo,    idxinfo    INDICATOR struct,
 61         statistics, statistics INDICATOR, statistics LENGTH,
 62         idxenv,     idxenv     INDICATOR struct,
 63         return OCINumber),
 64  
 65    static function ODCIStatsSelectivity(predinfo sys.ODCIPredInfo,
 66                                         sel  OUT number,
 67                                         args     sys.ODCIArgDescList,
 68                                         strt     number,
 69                                         stop     number,
 70                                         expr     VARCHAR2,
 71                                         datai    VARCHAR2,
 72                                         idxenv   sys.ODCIEnv)
 73           return NUMBER
 74    is language C name "QMIX_SELECTIVITY" library XDB.XMLINDEX_LIB
 75       with context
 76       parameters (
 77         context,
 78         predinfo,predinfo INDICATOR struct,
 79         sel,     sel      INDICATOR,
 80         args,    args     INDICATOR,
 81         strt,    strt     INDICATOR,
 82         stop,    stop     INDICATOR,
 83         expr,    expr     INDICATOR,
 84         datai,   datai    INDICATOR,
 85         idxenv,  idxenv   INDICATOR struct,
 86         return OCINumber),
 87  
 88    static function ODCIStatsFunctionCost(funcinfo sys.ODCIFuncInfo,
 89                                          cost OUT sys.ODCICost,
 90                                          args     sys.ODCIArgDescList,
 91                                          expr     VARCHAR2,
 92                                          datai    VARCHAR2,
 93                                          idxenv   sys.ODCIEnv)
 94           return NUMBER
 95    is language C name "QMIX_FUN_COST" library XDB.XMLINDEX_LIB
 96       with context
 97       parameters (
 98         context,
 99         funcinfo,funcinfo INDICATOR struct,
100         cost,    cost     INDICATOR struct,
101         args,    args     INDICATOR,
102         expr,    expr     INDICATOR,
103         datai,   datai    INDICATOR,
104         idxenv,  idxenv   INDICATOR struct,
105         return OCINumber),
106  
107    static function ODCIStatsIndexCost(idxinfo  sys.ODCIIndexInfo,
108                                       sel      number,
109                                       cost OUT sys.ODCICost,
110                                       qi       sys.ODCIQueryInfo,
111                                       pred     sys.ODCIPredInfo,
112                                       args     sys.ODCIArgDescList,
113                                       strt     number,
114                                       stop     number,
115                                       datai    varchar2,
116                                       idxenv   sys.ODCIEnv)
117           return NUMBER
118    is language C name "QMIX_IDX_COST" library XDB.XMLINDEX_LIB
119       with context
120       parameters (
121         context,
122         idxinfo, idxinfo INDICATOR struct,
123         sel,     sel     INDICATOR,
124         cost,    cost    INDICATOR struct,
125         qi,      qi      INDICATOR struct,
126         pred,    pred    INDICATOR struct,
127         args,    args    INDICATOR,
128         strt,    strt    INDICATOR,
129         stop,    stop    INDICATOR,
130         datai,   datai   INDICATOR,
131         idxenv,  idxenv  INDICATOR struct,
132         return OCINumber),
133  
134    static function ODCIStatsUpdPartStatistics(idxinfo sys.ODCIIndexInfo,
135                                               palist  sys.ODCIPartInfoList,
136                                               idxenv  sys.ODCIEnv)
137           return NUMBER
138    is language C name "QMIX_UPD_PARTSTATS" library XDB.XMLINDEX_LIB
139       with context
140       parameters (
141         context,
142         idxinfo, idxinfo INDICATOR struct,
143         palist,  palist  INDICATOR,
144         idxenv,  idxenv  INDICATOR struct,
145         return OCINumber)
146  );
147  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace type body xdb.XMLIdxStatsMethods
  2  is
  3    static function ODCIGetInterfaces(ilist OUT sys.ODCIObjectList)
  4      return number is
  5    begin
  6      ilist := sys.ODCIObjectList(sys.ODCIObject('SYS','ODCISTATS2'));
  7      return ODCICONST.SUCCESS;
  8    end ODCIGetInterfaces;
  9  end;
 10  /

Type body created.

SQL> show errors;
No errors.
SQL> 
SQL> 
SQL> /*------------------------------------------------------------------------*/
SQL> /*  TABLE FUNCTIONs                                                       */
SQL> /*  - XMLIndexLoad to parallellize the source cursor.                     */
SQL> /*------------------------------------------------------------------------*/
SQL> drop function XDB.XMLIndexInsFunc;
drop function XDB.XMLIndexInsFunc
*
ERROR at line 1:
ORA-04043: object XMLINDEXINSFUNC does not exist


SQL> drop function XDB.XMLIndexLoadFunc;
drop function XDB.XMLIndexLoadFunc
*
ERROR at line 1:
ORA-04043: object XMLINDEXLOADFUNC does not exist


SQL> drop type XDB.XMLIndexLoad_Imp_t force;
drop type XDB.XMLIndexLoad_Imp_t force
*
ERROR at line 1:
ORA-04043: object XMLINDEXLOAD_IMP_T does not exist


SQL> drop type XDB.XMLIndexTab_t;
drop type XDB.XMLIndexTab_t
*
ERROR at line 1:
ORA-04043: object XMLINDEXTAB_T does not exist


SQL> drop type XDB.XMLIndexLoad_t force;
drop type XDB.XMLIndexLoad_t force
*
ERROR at line 1:
ORA-04043: object XMLINDEXLOAD_T does not exist


SQL> create or replace type XDB.XMLIndexLoad_t as object
  2  (
  3    RID    VARCHAR2(18),
  4    PID    RAW(8),
  5    OK     RAW(1000),
  6    LOC    RAW(2000),
  7    VALUE  VARCHAR2(4000)
  8  )
  9  /

Type created.

SQL> 
SQL> create or replace type XDB.XMLIndexTab_t as TABLE of XDB.XMLIndexLoad_t
  2  /

Type created.

SQL> 
SQL> create or replace type XDB.XMLIndexLoad_Imp_t
  2    authid current_user as object
  3  (
  4    key RAW(8),
  5  
  6    static function ODCITableStart(sctx IN OUT XDB.XMLIndexLoad_Imp_t)
  7           return PLS_INTEGER
  8      is language C name "QMIX_INSSTART" library XDB.XMLINDEX_LIB
  9      with context
 10      parameters (
 11        context,
 12        sctx,        sctx        INDICATOR STRUCT,
 13        return INT
 14      ),
 15  
 16    static function ODCITableStart(sctx IN OUT XDB.XMLIndexLoad_Imp_t,
 17                                   load_cursor SYS_REFCURSOR,
 18                                   flags IN Number)
 19           return PLS_INTEGER
 20      is language C name "QMIX_LOADSTART" library XDB.XMLINDEX_LIB
 21      with context
 22      parameters (
 23        context,
 24        sctx,        sctx        INDICATOR STRUCT,
 25        load_cursor, load_cursor INDICATOR,
 26        flags,
 27        return INT
 28      ),
 29  
 30    member function ODCITableFetch(self IN OUT XDB.XMLIndexLoad_Imp_t,
 31                                   nrows    IN Number,
 32                                   xmlrws  OUT XDB.XMLIndexTab_t)
 33           return PLS_INTEGER
 34      as language C name "QMIX_LOADFETCH" library XDB.XMLINDEX_LIB
 35      with context
 36      parameters (
 37        context,
 38        self, self INDICATOR STRUCT,
 39        nrows,
 40        xmlrws OCIColl, xmlrws INDICATOR sb2, xmlrws DURATION OCIDuration,
 41        return INT
 42      ),
 43  
 44    member function ODCITableClose(self IN XDB.XMLIndexLoad_Imp_t)
 45           return PLS_INTEGER
 46      as language C name "QMIX_LOADCLOSE" library XDB.XMLINDEX_LIB
 47      with context
 48      parameters (
 49        context,
 50        self, self INDICATOR STRUCT,
 51        return INT
 52      )
 53  );
 54  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace function XDB.XMLIndexLoadFunc(p IN SYS_REFCURSOR,
  2                                                  flags NUMBER)
  3         return XDB.XMLIndexTab_t
  4  authid current_user
  5  parallel_enable (partition p by ANY)
  6  pipelined using XDB.XMLIndexLoad_Imp_t;
  7  /

Function created.

SQL> show errors;
No errors.
SQL> grant execute on XDB.XMLIndexLoadFunc to public;

Grant succeeded.

SQL> 
SQL> create or replace function XDB.XMLIndexInsFunc
  2         return XDB.XMLIndexTab_t
  3  authid current_user
  4  pipelined using XDB.XMLIndexLoad_Imp_t;
  5  /

Function created.

SQL> show errors;
No errors.
SQL> grant execute on XDB.XMLIndexInsFunc to public;

Grant succeeded.

SQL> 
SQL> /*------------------------------------------------------------------------*/
SQL> /*  INDEXTYPE                                                             */
SQL> /*------------------------------------------------------------------------*/
SQL> create or replace package XDB.XMLIndex_FUNCIMPL authid current_user is
  2    function xmlindex_noop(res sys.xmltype,
  3                           pathstr varchar2,
  4                           ia sys.odciindexctx,
  5                           sctx IN OUT XDB.XMLIndexMethods,
  6                           sflg number)
  7    return number;
  8  end XMLIndex_FUNCIMPL;
  9  /

Package created.

SQL> show errors;
No errors.
SQL> create or replace package body XDB.XMLIndex_FUNCIMPL as
  2    function xmlindex_noop(res sys.xmltype,
  3                           pathstr varchar2,
  4                           ia sys.odciindexctx,
  5                           sctx IN OUT XDB.XMLIndexMethods,
  6                           sflg number)
  7    return number is
  8    begin
  9     return 0;
 10    end;
 11  end;
 12  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace operator XDB.xmlindex_noop binding
  2    (sys.xmltype, varchar2) return number with index context,
  3      scan context XDB.XMLIndexMethods
  4      without column data using XDB.XMLIndex_FUNCIMPL.xmlindex_noop;

Operator created.

SQL> show errors;
No errors.
SQL> grant execute on XDB.xmlindex_noop to public;

Grant succeeded.

SQL> 
SQL> create or replace indextype XDB.XMLIndex for
  2    XDB.xmlindex_noop(sys.xmltype, varchar2)
  3    using XDB.XMLIndexMethods
  4    with local partition
  5    with system managed storage tables;

Indextype created.

SQL> --  without column data;
SQL> --  with array dml (sys.xmltype, varray_xmltype)
SQL> show errors;
No errors.
SQL> 
SQL> grant execute on XDB.XMLIndex to public;

Grant succeeded.

SQL> 
SQL> associate statistics with indextypes XDB.XMLIndex using XDB.XMLIdxStatsMethods
  2  with system managed storage tables;

Statistics associated.

SQL> 
SQL> /************ Path suffix table function *********************/
SQL> -- create trusted library
SQL> CREATE OR REPLACE LIBRARY XDB.XMLTM_LIB TRUSTED AS STATIC;
  2  /

Library created.

SQL> show errors
No errors.
SQL> 
SQL> 
SQL> Rem Create the Structured XMLIndex tables
SQL> @@catxtbix
SQL> Rem
SQL> Rem $Header: rdbms/admin/catxtbix.sql /st_rdbms_11.2.0/1 2010/08/05 10:57:16 juding Exp $
SQL> Rem
SQL> Rem catxtbix.sql
SQL> Rem
SQL> Rem Copyright (c) 2004, 2010, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxtbix.sql - XMLTableIndex related schema objects
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem     This script creates the views, packages, index types, operators and
SQL> Rem     indexes required for supporting the XMLTableIndex
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script should be run as "XDB".
SQL> Rem
SQL> Rem    MODIFIED     (MM/DD/YY)
SQL> Rem    juding       08/03/10 - Backport juding_bug-9903850 from main
SQL> Rem    thbaby       06/08/10 - add segattrs column to xdb.xdb$xtab
SQL> Rem    thbaby       02/26/10 - add depgrppos column
SQL> Rem    thbaby       02/25/10 - add grppos column to xdb$xtab
SQL> Rem    thbaby       05/21/09 - remove xtimetadata_pkg
SQL> Rem    sipatel      09/16/08 - #(7414934) - change schema from sys to xdb
SQL> Rem    thbaby       07/30/08 - disable xmltableindex indextype
SQL> Rem    bhammers     10/30/07 - change ODCIIndexGetMetadata for imp/exp
SQL> Rem                            deactivate ODCIIndexUtilGetTableNames
SQL> Rem                            added xtimetadata_pkg package
SQL> Rem    hxzhang      03/18/08 - coltype to varchar2(100)
SQL> Rem    shvenugo     10/04/07 - partitioning
SQL> Rem    hxzhang      08/27/07 - add add/drop column
SQL> Rem    hxzhang      05/16/07 - change xpath to varchar2(4000)
SQL> Rem    bhammers     04/19/07 - add flag for orig col type
SQL> Rem    hxzhang      06/26/06 - add group#
SQL> Rem    hxzhang      06/06/06 - add flag column to xtabcols
SQL> Rem    rburns       05/05/06 - rename script
SQL> Rem    hxzhang      12/14/05 - Created
SQL> 
SQL> declare
  2    exist number;
  3    sys_exist number;
  4  begin
  5    select count(*) into exist from DBA_TABLES where table_name = 'XDB$XTAB'
  6    and owner = 'XDB';
  7  
  8    if exist = 0 then
  9      select count(*) into sys_exist from DBA_TABLES where table_name = 'XDB$XTAB'
 10      and owner = 'SYS';
 11  
 12      if sys_exist = 1 then
 13        begin
 14          execute immediate
 15            'drop library sys.xmltableindex_lib force';
 16        exception
 17          when others then null;
 18        end;
 19  
 20        begin
 21          execute immediate
 22            'drop table sys.xdb$xtab force';
 23        exception
 24          when others then null;
 25        end;
 26  
 27        begin
 28          execute immediate
 29            'drop table sys.xdb$xtabnmsp force';
 30        exception
 31          when others then null;
 32        end;
 33  
 34        begin
 35          execute immediate
 36            'drop table sys.xdb$xtabcols force';
 37        exception
 38          when others then null;
 39        end;
 40      end if;
 41  
 42      execute immediate
 43        'create table xdb.xdb$xtab (
 44           idxobj#    number not null,             -- object # of XMLTableIndex
 45           groupName  NVARCHAR2(30)  not null,     -- group name of XMLTableIndex
 46           xmltabobj# number not null,             -- object # of XML TABLE
 47           ptabobj#   number,                      -- object # of parent table
 48           xpath      VARCHAR2(4000) not null,    -- row source
 49           xquery     clob,                       -- xquery row source
 50           flags      number,
 51           parameters XMLType,
 52           grppos     number,                     -- group position
 53           depgrppos  number,                     -- dependent group position
 54           segattrs   varchar2(4000),             -- segment attributes and
 55                                                  -- table properties
 56             constraint xdb$xtabpk primary key (idxobj#,groupName,xmltabobj#)) xmltype column parameters store as CLOB';
 57      execute immediate
 58        'create index xdb.xdb$idxxtab_1 on xdb.xdb$xtab(idxobj#, groupname, ptabobj#)';
 59      execute immediate
 60        'create index xdb.xdb$idxxtab_2 on xdb.xdb$xtab(idxobj#, depgrppos, xmltabobj#)';
 61  
 62      execute immediate
 63        'create table xdb.xdb$xtabnmsp (
 64           idxobj# number not null,           -- object # of XMLTableIndex
 65           groupName  NVARCHAR2(30) not null, -- group  name of XMLTableIndex
 66           xmltabobj# number not null,        -- object # of XMLTable
 67           prefix  NVARCHAR2(30),             -- namespace prefix
 68           namespace   NVARCHAR2(2000),       -- namespace or xpath
 69           flags   number not null)';         -- 0x01 NAMESPACE
 70      execute immediate
 71        'create index xdb.xdb$idxtabnmsp_1 on xdb.xdb$xtabnmsp(idxobj#, groupname, xmltabobj#, flags)';
 72  
 73      execute immediate
 74        'create table xdb.xdb$xtabcols (
 75           idxobj# number not null,           -- object # of XMLTableIndex
 76           groupName  NVARCHAR2(30) not null, -- group  name of XMLTableIndex
 77           xmltabobj# number not null,        -- object # of XMLTable
 78           colname  NVARCHAR2(2000) not null, -- column name
 79           coltype  NVARCHAR2(100)   not null, -- column type
 80           xpath    VARCHAR2(4000) not null,  -- xpath
 81           flags number not null)';    -- flags
 82      execute immediate
 83        'create index xdb.xdb$idxtabcols_1 on xdb.xdb$xtabcols(idxobj#, groupname, xmltabobj#)';
 84    end if;
 85  
 86  end;
 87  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> Rem Initialize extensible optimizer
SQL> @@catxdbeo.sql
SQL> Rem
SQL> Rem $Header: catxdbeo.sql 20-may-2003.00:27:34 njalali Exp $
SQL> Rem
SQL> Rem catxdbeo.sql
SQL> Rem
SQL> Rem Copyright (c) 2003, Oracle Corporation.  All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbeo.sql - XDB repository views extensible optimizer
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script creates statistics type and schema
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    njalali     05/20/03 - njalali_all_xml_schemas2
SQL> Rem    fge         05/19/03 - support repository views extensible optimizer
SQL> Rem    fge         05/19/03 - Created
SQL> Rem
SQL> 
SQL> /* disassociate statistics type */
SQL> disassociate statistics from indextypes xdb.xdbhi_idxtyp;
disassociate statistics from indextypes xdb.xdbhi_idxtyp
*
ERROR at line 1:
ORA-29931: specified association does not exist


SQL> disassociate statistics from packages xdb.xdb_funcimpl;
disassociate statistics from packages xdb.xdb_funcimpl
*
ERROR at line 1:
ORA-29931: specified association does not exist


SQL> 
SQL> /* drop statistics type */
SQL> drop type xdb.funcstats;
drop type xdb.funcstats
*
ERROR at line 1:
ORA-04043: object FUNCSTATS does not exist


SQL> 
SQL> /* --------------------------------------------------------------------------*/
SQL> /* create statistics type                                                    */
SQL> /* --------------------------------------------------------------------------*/
SQL> create or replace type xdb.funcstats
  2  OID '0000000000000000000000000002015E'
  3  authid definer as object
  4  (
  5    -- user-defined function cost and selectivity functions
  6    j number,
  7  
  8    static function ODCIGetInterfaces(ifclist OUT sys.ODCIObjectList)
  9      return number,
 10  
 11    -- function to collect index statistics
 12    static function ODCIStatsCollect(ia sys.ODCIIndexInfo,
 13                                     options sys.ODCIStatsOptions,
 14                                     statistics OUT RAW,
 15                                     env sys.ODCIEnv)
 16    return number
 17    is language C
 18    name "STATSCOLL_XDBHI"
 19    library XDB.RESOURCE_VIEW_LIB
 20    with context
 21    parameters (
 22      context,
 23      ia,
 24      ia INDICATOR STRUCT,
 25      options,
 26      options INDICATOR STRUCT,
 27      statistics,
 28      statistics INDICATOR,
 29      statistics LENGTH,
 30      env,
 31      env INDICATOR STRUCT,
 32      return OCINumber),
 33  
 34    -- funtion to delete index statistics
 35    static function ODCIStatsDelete(ia sys.ODCIIndexInfo,
 36                                    statistics OUT RAW,
 37                                    env sys.ODCIEnv)
 38    return number
 39    is language C
 40    name "STATSDEL_XDBHI"
 41    library XDB.RESOURCE_VIEW_LIB
 42    with context
 43    parameters (
 44      context,
 45      ia,
 46      ia INDICATOR STRUCT,
 47      statistics,
 48      statistics INDICATOR,
 49      statistics LENGTH,
 50      env,
 51      env INDICATOR STRUCT,
 52      return OCINumber),
 53  
 54    -- index cost
 55    static function ODCIStatsIndexCost(ia sys.ODCIIndexInfo,
 56                                       sel number,
 57                                       cost OUT sys.ODCICost,
 58                                       qi sys.ODCIQueryInfo,
 59                                       pred sys.ODCIPredInfo,
 60                                       args sys.ODCIArgDescList,
 61                                       strt number,
 62                                       stop number,
 63                                       depth number,
 64                                       valarg varchar2,
 65                                       env sys.ODCIenv)
 66    return number
 67    is language C
 68    name "STATSINDCOST_XDBHI"
 69    library XDB.RESOURCE_VIEW_LIB
 70    with context
 71    parameters (
 72      context,
 73      ia,
 74      ia INDICATOR STRUCT,
 75      sel,
 76      sel INDICATOR,
 77      cost,
 78      cost INDICATOR STRUCT,
 79      qi,
 80      qi INDICATOR STRUCT,
 81      pred,
 82      pred INDICATOR STRUCT,
 83      args,
 84      args INDICATOR,
 85      strt,
 86      strt INDICATOR,
 87      stop,
 88      stop INDICATOR,
 89      depth,
 90      depth INDICATOR,
 91      valarg,
 92      valarg INDICATOR,
 93      env,
 94      env INDICATOR STRUCT,
 95      return OCINumber),
 96  
 97    static function ODCIStatsIndexCost(ia sys.ODCIIndexInfo,
 98                                       sel number,
 99                                       cost OUT sys.ODCICost,
100                                       qi sys.ODCIQueryInfo,
101                                       pred sys.ODCIPredInfo,
102                                       args sys.ODCIArgDescList,
103                                       strt number,
104                                       stop number,
105                                       valarg varchar2,
106                                       env sys.ODCIenv)
107    return number
108    is language C
109    name "STATSINDCOST1_XDBHI"
110    library XDB.RESOURCE_VIEW_LIB
111    with context
112    parameters (
113      context,
114      ia,
115      ia INDICATOR STRUCT,
116      sel,
117      sel INDICATOR,
118      cost,
119      cost INDICATOR STRUCT,
120      qi,
121      qi INDICATOR STRUCT,
122      pred,
123      pred INDICATOR STRUCT,
124      args,
125      args INDICATOR,
126      strt,
127      strt INDICATOR,
128      stop,
129      stop INDICATOR,
130      valarg,
131      valarg INDICATOR,
132      env,
133      env INDICATOR STRUCT,
134      return OCINumber),
135  
136    -- function cost
137  
138    static function ODCIStatsFunctionCost(func sys.ODCIFuncInfo,
139                                          cost OUT sys.ODCICost,
140                                          args sys.ODCIArgDescList,
141                                          colval xmltype,
142                                          depth number,
143                                          valarg varchar2,
144                                          env  sys.ODCIEnv)
145    return number
146    is language C
147    name "STATSFUNCCOST_XDBHI"
148    library XDB.RESOURCE_VIEW_LIB
149    with context
150    parameters (
151      context,
152      func,
153      func INDICATOR STRUCT,
154      cost,
155      cost INDICATOR STRUCT,
156      args,
157      args INDICATOR,
158      colval,
159      colval INDICATOR,
160      depth,
161      depth INDICATOR,
162      valarg,
163      valarg INDICATOR,
164      env,
165      env INDICATOR STRUCT,
166      return OCINumber),
167  
168    static function ODCIStatsFunctionCost(func sys.ODCIFuncInfo,
169                                          cost OUT sys.ODCICost,
170                                          args sys.ODCIArgDescList,
171                                          colval xmltype,
172                                          valarg varchar2,
173                                          env  sys.ODCIEnv)
174    return number
175    is language C
176    name "STATSFUNCCOST1_XDBHI"
177    library XDB.RESOURCE_VIEW_LIB
178    with context
179    parameters (
180      context,
181      func,
182      func INDICATOR STRUCT,
183      cost,
184      cost INDICATOR STRUCT,
185      args,
186      args INDICATOR,
187      colval,
188      colval INDICATOR,
189      valarg,
190      valarg INDICATOR,
191      env,
192      env INDICATOR STRUCT,
193      return OCINumber),
194  
195     static function ODCIStatsSelectivity(pred sys.ODCIPredInfo,
196                                          sel OUT number,
197                                          args sys.ODCIArgDescList,
198                                          strt number,
199                                          stop number,
200                                          colval xmltype,
201                                          depth number,
202                                          valarg varchar2,
203                                         env sys.ODCIenv)
204    return number
205    is language C
206    name "STATSSEL_XDBHI"
207    library XDB.RESOURCE_VIEW_LIB
208    with context
209    parameters (
210      context,
211      pred,
212      pred INDICATOR STRUCT,
213      sel,
214      sel INDICATOR,
215      args,
216      args INDICATOR,
217      strt,
218      strt INDICATOR,
219      stop,
220      stop INDICATOR,
221      colval,
222      colval INDICATOR,
223      depth,
224      depth INDICATOR,
225      valarg,
226      valarg INDICATOR,
227      env,
228      env INDICATOR STRUCT,
229      return OCINumber),
230  
231   -- selectivity for under_path_func1
232    static function ODCIStatsSelectivity(pred sys.ODCIPredInfo,
233                                         sel OUT number,
234                                         args sys.ODCIArgDescList,
235                                         strt number,
236                                         stop number,
237                                         colval xmltype,
238                                         valarg varchar2,
239                                         env sys.ODCIenv)
240    return number
241    is language C
242    name "STATSSEL1_XDBHI"
243    library XDB.RESOURCE_VIEW_LIB
244    with context
245    parameters (
246      context,
247      pred,
248      pred INDICATOR STRUCT,
249      sel,
250      sel INDICATOR,
251      args,
252      args INDICATOR,
253      strt,
254      strt INDICATOR,
255      stop,
256      stop INDICATOR,
257      colval,
258      colval INDICATOR,
259      valarg,
260      valarg INDICATOR,
261      env,
262      env INDICATOR STRUCT,
263      return OCINumber)
264  );
265  /

Type created.

SQL> 
SQL> show errors;
No errors.
SQL> 
SQL> /* --------------------------------------------------------------------------*/
SQL> /* create statistics type bodies                                             */
SQL> /* --------------------------------------------------------------------------*/
SQL> create or replace type body xdb.funcstats is
  2     static function ODCIGetInterfaces(ifclist OUT sys.ODCIObjectList)
  3         return number is
  4     begin
  5         ifclist := sys.ODCIObjectList(sys.ODCIObject('SYS','ODCISTATS2'));
  6         return ODCIConst.Success;
  7     end ODCIGetInterfaces;
  8  
  9  end;
 10  /

Type body created.

SQL> show errors;
No errors.
SQL> 
SQL> grant execute on xdb.funcstats to public;

Grant succeeded.

SQL> 
SQL> associate statistics with indextypes xdb.xdbhi_idxtyp using xdb.funcstats;

Statistics associated.

SQL> associate statistics with packages xdb.xdb_funcimpl using xdb.funcstats;

Statistics associated.

SQL> 
SQL> /* --------------------------------------------------------------------------*/
SQL> /* register statistics schema
SQL> /* --------------------------------------------------------------------------*/
SQL> declare
  2    STATSXSD VARCHAR2(4000) :=
  3  '<schema xmlns="http://www.w3.org/2001/XMLSchema"
  4          xmlns:xdb="http://xmlns.oracle.com/xdb"
  5          xmlns:st="http://xmlns.oracle.com/xdb/stats.xsd"
  6          targetNamespace="http://xmlns.oracle.com/xdb/stats.xsd"
  7          elementFormDefault="qualified">
  8     <simpleType name="OIDType"> <restriction base="hexBinary"> <maxLength value="32"/> </restriction> </simpleType>
  9     <element name="ContainerStats" xdb:defaultTable="XDB$STATS" xdb:columnProps="constraint stats_pk PRIMARY KEY(xmldata.RESOID)">
 10       <complexType>
 11         <sequence>
 12           <element name="TotalRows" type="double"/>
 13           <element name="TotalContainers" type="double"/>
 14           <element name="FanOut" type="integer"/>
 15           <element name="ImmediateContainers" type="integer"/>
 16           <element name="LastAnalyzedDate" type="dateTime"/>
 17         </sequence>
 18         <attribute name="ResOid" type="st:OIDType" xdb:SQLName="RESOID"/>
 19       </complexType>
 20     </element>
 21  </schema>';
 22  
 23    STATSURL VARCHAR2(2000) := 'http://xmlns.oracle.com/xdb/stats.xsd';
 24    n integer;
 25  begin
 26    select count(*) into n from xdb.xdb$schema s
 27    where s.xmldata.schema_url = 'http://xmlns.oracle.com/xdb/stats.xsd';
 28  
 29    if (n = 0) then
 30      xdb.dbms_xmlschema.registerSchema(STATSURL, STATSXSD, FALSE, TRUE,
 31                                        FALSE, TRUE, FALSE, 'XDB');
 32    end if;
 33  end;
 34  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Initialize XDB configuration management
SQL> @@catxdbc1
SQL> Rem
SQL> Rem $Header: catxdbc1.sql 29-apr-2008.15:26:09 vhosur Exp $
SQL> Rem
SQL> Rem catxdbc1.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2008, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbc1.sql - Registration of XDB Config Schema
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script registers the XDB configuration schema
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Subject to change, as the schema evolves
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    vhosur      04/29/08 - IPv6 support
SQL> Rem    rangrish    07/03/07 - change roles for web services
SQL> Rem    rangrish    08/15/06 - create new WS roles
SQL> Rem    abagrawa    03/11/06 - Use xdbconfig.xsd in registerschema
SQL> Rem    pnath       10/13/05 - add num_job_queue_processes
SQL> Rem    najain      12/28/04 - no length restriction on ipaddress
SQL> Rem    abagrawa    12/27/05 - Use CSX for xdbconfig
SQL> Rem    rtjoa       11/21/05 - Adding http and http2 host into xdbconfig
SQL> Rem    mrafiq      09/20/05 - merging changes for upgrade/downgrade
SQL> Rem    thbaby      09/19/05 - add acl-evaluation-method
SQL> Rem    najain      12/28/04 - no length restriction on ipaddress
SQL> Rem    rpang       04/01/05 - request-validation-function/input-filter-enable
SQL> Rem    rpang       03/24/05 - Fix SSO typo
SQL> Rem    petam       03/18/05 - add allow-repository-anonymous-access for http
SQL> Rem    abagrawa    02/08/05 - Remove public grants on xdb$config
SQL> Rem    rpang       12/01/04 - Reordered plsql element
SQL> Rem    petam       11/02/04 - bug#3957281 - add element <ftp-welcome-message>
SQL> Rem    petam       11/11/04 - added <authentication> element
SQL> Rem    spannala    11/21/04 - adding rollback-on-error and
SQL> Rem                           copy-on-inconsistent-update
SQL> Rem    spannala    03/22/04 - adding nfsconfig
SQL> Rem    rpang       10/27/04 - Added owa-debug-enable
SQL> Rem    rpang       10/14/04 - plsql-servlet-config to the end for downgrade
SQL> Rem    rpang       07/28/04 - Added database-username attribute
SQL> Rem    rpang       06/02/04 - Added PL/SQL servlet configuration
SQL> Rem    rangrish    05/11/04 - add XDBWEBSERVICES role
SQL> Rem    spannala    05/10/04 - remove http2 listener
SQL> Rem    thbaby      02/17/04 - add HTTP2 elements to schema
SQL> Rem    spannala    07/11/03 - put new elements at the end
SQL> Rem    athusoo     07/17/03 - Set minOccurs=0 for new elements
SQL> Rem    athusoo     03/11/03 - Add xdbcore-xobmem-bound
SQL> Rem    rmurthy     11/20/02 - add schemalocation and xml mimetype mappings
SQL> Rem    njalali     09/26/02 - granting select privs on config tbl to public
SQL> Rem    dchiba      06/28/02 - Adding default URL charset in httpconfig
SQL> Rem    nmontoya    05/20/02 - ADD acl-cache-size
SQL> Rem    spannala    07/10/02 - adding case-sensitive-index-clause
SQL> Rem    nmontoya    07/08/02 - GRANT ALL ON xdb$config to xdbadmin
SQL> Rem    fge         04/26/02 - add resource-view-cache-size to sysconfig
SQL> Rem    abagrawa    03/08/02 - Change default log values
SQL> Rem    abagrawa    03/04/02 - Change userconfig to have minoccurs=0
SQL> Rem    nmontoya    02/26/02 - SET acl-max-age TYPE TO unsignedInt
SQL> Rem    rmurthy     02/14/02 - fix schema
SQL> Rem    spannala    01/31/02 - removing ftp-root
SQL> Rem    esedlar     02/05/02 - Remove duplicate type defs for protocols
SQL> Rem    rmurthy     12/28/01 - set elementForm to qualified
SQL> Rem    spannala    12/27/01 - setup should be run as SYS
SQL> Rem    sidicula    12/14/01 - Adding max-header-size in httpconfig
SQL> Rem    rmurthy     12/17/01 - fix schemas
SQL> Rem    abagrawa    11/19/01 - Add servlet realm
SQL> Rem    abagrawa    11/20/01 - Add default table
SQL> Rem    sidicula    11/08/01 - Config params for HTTP & FTP
SQL> Rem    jwwarner    10/24/01 - add authenticated user role
SQL> Rem    abagrawa    10/17/01 - Adding <servlet-schema>
SQL> Rem    sidicula    10/24/01 - Timeouts
SQL> Rem    abagrawa    10/07/01 - Merged abagrawa_http_trans
SQL> Rem    abagrawa    09/20/01 - Created
SQL> Rem
SQL> 
SQL> Rem alter session set events='31156 trace name context forever';
SQL> Rem Register Config Schema
SQL> 
SQL> declare
  2   CONFIGURL VARCHAR2(2000) := 'http://xmlns.oracle.com/xdb/xdbconfig.xsd';
  3   CONFIGXSD BFILE := dbms_metadata_hack.get_bfile('xdbconfig.xsd.11.2');
  4  begin
  5   xdb.dbms_xmlschema.registerSchema(CONFIGURL, CONFIGXSD, FALSE, FALSE, FALSE, TRUE, FALSE, 'XDB', options => DBMS_XMLSCHEMA.REGISTER_BINARYXML);
  6  end;
  7  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> -- create the "virtual" authenticated user role we use in servlets
SQL> create role authenticatedUser;

Role created.

SQL> 
SQL> -- create role for web services.  Must be granted to users for web services use
SQL> create role XDB_WEBSERVICES;

Role created.

SQL> -- grant XDB_WEBSERVICES to xdb;
SQL> create role XDB_WEBSERVICES_WITH_PUBLIC;

Role created.

SQL> create role XDB_WEBSERVICES_OVER_HTTP;

Role created.

SQL> 
SQL> -- grant database privileges on xdb$config table so that users with xdbadmin
SQL> --   role can proceed with xdb configuration update
SQL> grant all on xdb.xdb$config to xdbadmin ;

Grant succeeded.

SQL> 
SQL> create or replace trigger xdb.xdbconfig_validate before insert or update
  2  on xdb.XDB$CONFIG for each row
  3  declare
  4    xdoc xmltype;
  5  begin
  6    xdoc := :new.sys_nc_rowinfo$;
  7    xmltype.schemaValidate(xdoc);
  8  end;
  9  /

Trigger created.

SQL> @@catxdbc2
SQL> Rem
SQL> Rem $Header: rdbms/admin/catxdbc2.sql /main/32 2009/11/05 09:13:41 spetride Exp $
SQL> Rem
SQL> Rem catxdbc2.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2009, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbc2.sql - Registration of default configuration for XDB
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script registers the default configuration XML document
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    spetride    10/30/09 - servlet realm should not specify Basic
SQL> Rem    vkapoor     07/25/06 - Bug 5371725
SQL> Rem    mrafiq      04/26/06 - change value for ac-max-age
SQL> Rem    pbelknap    08/19/05 - add report framework servlet
SQL> Rem    petam       04/07/06 - manually initialize resconfig after xdbconfig
SQL> Rem    thbaby      02/21/06 - Put NFS info into rootinfo
SQL> Rem    vkapoor     02/02/06 - remove , as invalid char
SQL> Rem    sidicula    01/18/06 - Put protocol info into rootinfo
SQL> Rem    thbaby      02/16/05 - Set ACL of xdbconfig.xml to all_owner_acl.xml
SQL> Rem    abagrawa    08/25/04 - Make xdbconfig.xml only readable by XDBADMIN
SQL> Rem    petam       11/11/04 - added <authentication>, increase call-timeout
SQL> Rem    pnath       12/03/04 - change default http port to 0
SQL> Rem    spannala    10/26/04 - fix bug 3926784
SQL> Rem    rpang       10/14/04 - add mimetype mapping for js/css/png/svg
SQL> Rem    spannala    07/11/03 - put new elements at the end
SQL> Rem    athusoo     03/11/03 - Add xdbcore-xobmem-bound
SQL> Rem    athusoo     03/04/03 - add xdbcore-partition-size
SQL> Rem    ataracha    02/04/03 - add mimetype mapping for xsl
SQL> Rem    rshaikh     09/12/02 - add mimetype mapping for xsd
SQL> Rem    abagrawa    09/16/02 - Make config valid against schema
SQL> Rem    njalali     07/15/02 - adding value for resource-view-cache-size
SQL> Rem    esedlar     02/06/02 - Remove numusers
SQL> Rem    nmontoya    05/20/02 - ADD acl-cache-size
SQL> Rem    abagrawa    03/04/02 - Remove logging info, userconfig
SQL> Rem    spannala    01/31/02 - removing ftp-root
SQL> Rem    rmurthy     12/26/01 - change to 2001 xmlschema-instance namespace
SQL> Rem    spannala    12/27/01 - setup should be run as SYS
SQL> Rem    sidicula    12/14/01 - Adding max-header-size in httpconfig
SQL> Rem    sidicula    12/19/01 - Enabling session pooling
SQL> Rem    mmorsi      11/29/01 - Add ftp and http configuration
SQL> Rem    abagrawa    11/19/01 - Add servlet realm
SQL> Rem    sidicula    11/19/01 - Setting session pool size to 0
SQL> Rem    jwwarner    11/12/01 - increasing size of the document buffer
SQL> Rem    sidicula    11/08/01 - Config params for HTTP & FTP
SQL> Rem    nmontoya    11/12/01 - USE dbms_xdb.createresource
SQL> Rem    sidicula    10/31/01 - Adding timeouts
SQL> Rem    abagrawa    10/15/01 - Adding mime type mappings
SQL> Rem    jwwarner    10/19/01 - Add dburi servlet information
SQL> Rem    abagrawa    10/17/01 - Adding <servlet-schema>
SQL> Rem    abagrawa    10/07/01 - Merged abagrawa_http_trans
SQL> Rem    abagrawa    09/20/01 - Creation
SQL> Rem
SQL> 
SQL> Rem Register Config Schema
SQL> 
SQL> declare
  2  retbool BOOLEAN;
  3  b_abspath VARCHAR(20) := '/xdbconfig.xml';
  4  acl_abspath VARCHAR(40) := '/sys/acls/all_owner_acl.xml';
  5  b_data VARCHAR(32767) :=
  6  '<xdbconfig xmlns="http://xmlns.oracle.com/xdb/xdbconfig.xsd"
  7                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  8                   xsi:schemaLocation="http://xmlns.oracle.com/xdb/xdbconfig.xsd http://xmlns.oracle.com/xdb/xdbconfig.xsd">
  9     <sysconfig>
 10        <acl-max-age>15</acl-max-age>
 11        <acl-cache-size>32</acl-cache-size>
 12        <invalid-pathname-chars></invalid-pathname-chars>
 13        <case-sensitive>true</case-sensitive>
 14        <call-timeout>6000</call-timeout>
 15        <max-link-queue>65536</max-link-queue>
 16        <max-session-use>100</max-session-use>
 17        <persistent-sessions>false</persistent-sessions>
 18        <default-lock-timeout>3600</default-lock-timeout>
 19        <xdbcore-logfile-path/>
 20        <xdbcore-log-level>0</xdbcore-log-level>
 21        <resource-view-cache-size>1048576</resource-view-cache-size>
 22        <protocolconfig>
 23            <common>
 24               <extension-mappings>
 25                  <mime-mappings>
 26          <mime-mapping>
 27                  <extension>au</extension>
 28                  <mime-type>audio/basic</mime-type>
 29          </mime-mapping>
 30          <mime-mapping>
 31                  <extension>avi</extension>
 32                  <mime-type>video/x-msvideo</mime-type>
 33          </mime-mapping>
 34          <mime-mapping>
 35                  <extension>bin</extension>
 36                  <mime-type>application/octet-stream</mime-type>
 37          </mime-mapping>
 38          <mime-mapping>
 39                  <extension>bmp</extension>
 40                  <mime-type>image/bmp</mime-type>
 41          </mime-mapping>
 42          <mime-mapping>
 43                  <extension>css</extension>
 44                  <mime-type>text/css</mime-type>
 45          </mime-mapping>
 46          <mime-mapping>
 47                  <extension>doc</extension>
 48                  <mime-type>application/msword</mime-type>
 49          </mime-mapping>
 50          <mime-mapping>
 51                  <extension>eml</extension>
 52                  <mime-type>message/rfc822</mime-type>
 53          </mime-mapping>
 54          <mime-mapping>
 55                  <extension>gif</extension>
 56                  <mime-type>image/gif</mime-type>
 57          </mime-mapping>
 58          <mime-mapping>
 59                  <extension>htm</extension>
 60                  <mime-type>text/html</mime-type>
 61          </mime-mapping>
 62          <mime-mapping>
 63                  <extension>html</extension>
 64                  <mime-type>text/html</mime-type>
 65          </mime-mapping>
 66          <mime-mapping>
 67                  <extension>jpe</extension>
 68                  <mime-type>image/jpeg</mime-type>
 69          </mime-mapping>
 70          <mime-mapping>
 71                  <extension>jpeg</extension>
 72                  <mime-type>image/jpeg</mime-type>
 73          </mime-mapping>
 74          <mime-mapping>
 75                  <extension>jpg</extension>
 76                  <mime-type>image/jpeg</mime-type>
 77          </mime-mapping>
 78          <mime-mapping>
 79                  <extension>js</extension>
 80                  <mime-type>application/x-javascript</mime-type>
 81          </mime-mapping>
 82          <mime-mapping>
 83                  <extension>jsp</extension>
 84                  <mime-type>text/html</mime-type>
 85          </mime-mapping>
 86          <mime-mapping>
 87                  <extension>mid</extension>
 88                  <mime-type>audio/mid</mime-type>
 89          </mime-mapping>
 90          <mime-mapping>
 91                  <extension>mov</extension>
 92                  <mime-type>video/quicktime</mime-type>
 93          </mime-mapping>
 94          <mime-mapping>
 95                  <extension>movie</extension>
 96                  <mime-type>video/x-sgi-movie</mime-type>
 97          </mime-mapping>
 98          <mime-mapping>
 99                  <extension>mp3</extension>
100                  <mime-type>audio/mpeg</mime-type>
101          </mime-mapping>
102          <mime-mapping>
103                  <extension>mpe</extension>
104                  <mime-type>video/mpg</mime-type>
105          </mime-mapping>
106          <mime-mapping>
107                  <extension>mpeg</extension>
108                  <mime-type>video/mpg</mime-type>
109          </mime-mapping>
110          <mime-mapping>
111                  <extension>mpg</extension>
112                  <mime-type>video/mpg</mime-type>
113          </mime-mapping>
114          <mime-mapping>
115                  <extension>msa</extension>
116                  <mime-type>application/x-msaccess</mime-type>
117          </mime-mapping>
118          <mime-mapping>
119                  <extension>msw</extension>
120                  <mime-type>application/x-msworks-wp</mime-type>
121          </mime-mapping>
122          <mime-mapping>
123                  <extension>pcx</extension>
124                  <mime-type>application/x-pc-paintbrush</mime-type>
125          </mime-mapping>
126          <mime-mapping>
127                  <extension>pdf</extension>
128                  <mime-type>application/pdf</mime-type>
129          </mime-mapping>
130          <mime-mapping>
131                  <extension>png</extension>
132                  <mime-type>image/png</mime-type>
133          </mime-mapping>
134          <mime-mapping>
135                  <extension>ppt</extension>
136                  <mime-type>application/vnd.ms-powerpoint</mime-type>
137          </mime-mapping>
138          <mime-mapping>
139                  <extension>ps</extension>
140                  <mime-type>application/postscript</mime-type>
141          </mime-mapping>
142          <mime-mapping>
143                  <extension>qt</extension>
144                  <mime-type>video/quicktime</mime-type>
145          </mime-mapping>
146          <mime-mapping>
147                  <extension>ra</extension>
148                  <mime-type>audio/x-realaudio</mime-type>
149          </mime-mapping>
150          <mime-mapping>
151                  <extension>ram</extension>
152                  <mime-type>audio/x-realaudio</mime-type>
153          </mime-mapping>
154          <mime-mapping>
155                  <extension>rm</extension>
156                  <mime-type>audio/x-realaudio</mime-type>
157          </mime-mapping>
158          <mime-mapping>
159                  <extension>rtf</extension>
160                  <mime-type>application/rtf</mime-type>
161          </mime-mapping>
162          <mime-mapping>
163                  <extension>rv</extension>
164                  <mime-type>video/x-realvideo</mime-type>
165          </mime-mapping>
166          <mime-mapping>
167                  <extension>sgml</extension>
168                  <mime-type>text/sgml</mime-type>
169          </mime-mapping>
170          <mime-mapping>
171                  <extension>svg</extension>
172                  <mime-type>image/svg+xml</mime-type>
173          </mime-mapping>
174          <mime-mapping>
175                  <extension>tif</extension>
176                  <mime-type>image/tiff</mime-type>
177          </mime-mapping>
178          <mime-mapping>
179                  <extension>tiff</extension>
180                  <mime-type>image/tiff</mime-type>
181          </mime-mapping>
182          <mime-mapping>
183                  <extension>txt</extension>
184                  <mime-type>text/plain</mime-type>
185          </mime-mapping>
186          <mime-mapping>
187                  <extension>url</extension>
188                  <mime-type>text/plain</mime-type>
189          </mime-mapping>
190          <mime-mapping>
191                  <extension>vrml</extension>
192                  <mime-type>x-world/x-vrml</mime-type>
193          </mime-mapping>
194          <mime-mapping>
195                  <extension>wav</extension>
196                  <mime-type>audio/wav</mime-type>
197          </mime-mapping>
198          <mime-mapping>
199                  <extension>wpd</extension>
200                  <mime-type>application/wordperfect5.1</mime-type>
201          </mime-mapping>
202          <mime-mapping>
203                  <extension>xls</extension>
204                  <mime-type>application/vnd.ms-excel</mime-type>
205          </mime-mapping>
206          <mime-mapping>
207                  <extension>xml</extension>
208                  <mime-type>text/xml</mime-type>
209          </mime-mapping>
210          <mime-mapping>
211                  <extension>xsd</extension>
212                  <mime-type>text/xml</mime-type>
213          </mime-mapping>
214          <mime-mapping>
215                  <extension>xsl</extension>
216                  <mime-type>text/xml</mime-type>
217          </mime-mapping>
218          <mime-mapping>
219                  <extension>zip</extension>
220                  <mime-type>application/x-zip-compressed</mime-type>
221          </mime-mapping>
222                  </mime-mappings>
223                  <lang-mappings>
224                     <lang-mapping><extension>en</extension>
225                                   <lang>english</lang>
226                     </lang-mapping>
227                  </lang-mappings>
228  
229                  <charset-mappings>
230                  </charset-mappings>
231  
232                  <encoding-mappings>
233                      <encoding-mapping><extension>gzip</extension>
234                                       <encoding>zip file</encoding>
235                      </encoding-mapping>
236                      <encoding-mapping><extension>tar</extension>
237                                       <encoding>tar file</encoding>
238                      </encoding-mapping>
239                  </encoding-mappings>
240               </extension-mappings>
241               <session-pool-size>50</session-pool-size>
242               <session-timeout>6000</session-timeout>
243            </common>
244  
245            <ftpconfig>
246              <ftp-port>0</ftp-port>
247              <ftp-listener>local_listener</ftp-listener>
248              <ftp-protocol>tcp</ftp-protocol>
249              <logfile-path/>
250              <log-level>0</log-level>
251              <session-timeout>6000</session-timeout>
252              <buffer-size>8192</buffer-size>
253            </ftpconfig>
254  
255            <httpconfig>
256              <http-port>0</http-port>
257              <http-listener>local_listener</http-listener>
258              <http-protocol>tcp</http-protocol>
259              <max-http-headers>64</max-http-headers>
260              <max-header-size>16384</max-header-size>
261              <max-request-body>2000000000</max-request-body>
262              <session-timeout>6000</session-timeout>
263              <server-name>XDB HTTP Server</server-name>
264              <logfile-path/>
265              <log-level>0</log-level>
266              <servlet-realm>XDB</servlet-realm>
267              <webappconfig>
268                <welcome-file-list>
269                  <welcome-file>index.html</welcome-file>
270                  <welcome-file>index.htm</welcome-file>
271                </welcome-file-list>
272                <error-pages>
273                </error-pages>
274                <servletconfig>
275                  <servlet-mappings>
276                    <servlet-mapping>
277                      <servlet-pattern>/Test</servlet-pattern>
278                      <servlet-name>TestServlet</servlet-name>
279                    </servlet-mapping>
280                    <servlet-mapping>
281                      <servlet-pattern>/oradb/*</servlet-pattern>
282                      <servlet-name>DBURIServlet</servlet-name>
283                    </servlet-mapping>
284                    <servlet-mapping>
285                      <servlet-pattern>/orarep/*</servlet-pattern>
286                      <servlet-name>ReportFmwkServlet</servlet-name>
287                    </servlet-mapping>
288                  </servlet-mappings>
289  
290                  <servlet-list>
291                    <servlet>
292                      <servlet-name>TestServlet</servlet-name>
293                      <servlet-language>Java</servlet-language>
294                      <display-name>XDB Test Servlet</display-name>
295                      <description>A servlet to test the internals of the XDB Servlet API</description>
296                      <servlet-class>xdbtserv</servlet-class>
297                      <servlet-schema>xdb</servlet-schema>
298                    </servlet>
299                    <servlet>
300                      <servlet-name>DBURIServlet</servlet-name>
301                      <servlet-language>C</servlet-language>
302                      <display-name>DBURI</display-name>
303                      <description>Servlet for accessing DBURIs</description>
304                      <security-role-ref>
305                        <role-name>authenticatedUser</role-name>
306                        <role-link>authenticatedUser</role-link>
307                      </security-role-ref>
308                    </servlet>
309                    <servlet>
310                      <servlet-name>ReportFmwkServlet</servlet-name>
311                      <servlet-language>C</servlet-language>
312                      <display-name>REPT</display-name>
313                      <description>Servlet for accessing reports</description>
314                      <security-role-ref>
315                        <role-name>authenticatedUser</role-name>
316                        <role-link>authenticatedUser</role-link>
317                      </security-role-ref>
318                    </servlet>
319                  </servlet-list>
320                </servletconfig>
321              </webappconfig>
322              <authentication>
323                <allow-mechanism>basic</allow-mechanism>
324                <digest-auth>
325                  <nonce-timeout>300</nonce-timeout>
326                </digest-auth>
327              </authentication>
328            </httpconfig>
329        </protocolconfig>
330        <xdbcore-xobmem-bound>1024</xdbcore-xobmem-bound>
331        <xdbcore-loadableunit-size>16</xdbcore-loadableunit-size>
332        <acl-evaluation-method>ace-order</acl-evaluation-method>
333     </sysconfig>
334  </xdbconfig>';
335  
336  
337  begin
338  
339          retbool := dbms_xdb.createresource(b_abspath, b_data);
340          dbms_xdb.setAcl(b_abspath, acl_abspath);
341  end;
342  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Update ROOT_INFO with protocol info
SQL> -- A simple select first to check if it works
SQL> select extractValue(value(e),
  2            '/xdbconfig/sysconfig/protocolconfig/ftpconfig/ftp-port'),
  3          extractValue(value(e),
  4            '/xdbconfig/sysconfig/protocolconfig/ftpconfig/ftp-protocol'),
  5          extractValue(value(e),
  6            '/xdbconfig/sysconfig/protocolconfig/httpconfig/http-port'),
  7          extractValue(value(e),
  8            '/xdbconfig/sysconfig/protocolconfig/httpconfig/http-protocol'),
  9          extractValue(value(e),
 10            '/xdbconfig/sysconfig/protocolconfig/httpconfig/http-host'),
 11          extractValue(value(e),
 12            '/xdbconfig/sysconfig/protocolconfig/httpconfig/http2-port'),
 13          extractValue(value(e),
 14            '/xdbconfig/sysconfig/protocolconfig/httpconfig/http2-protocol'),
 15          extractValue(value(e),
 16            '/xdbconfig/sysconfig/protocolconfig/httpconfig/http2-host'),
 17          extractValue(value(e),
 18            '/xdbconfig/sysconfig/protocolconfig/nfsconfig/nfs-port'),
 19          extractValue(value(e),
 20            '/xdbconfig/sysconfig/protocolconfig/nfsconfig/nfs-protocol')
 21   from xdb.xdb$config e;

EXTRACTVALUE(VALUE(E),'/XDBCONFIG/SYSCONFIG/PROTOCOLCONFIG/FTPCONFIG/FTP-PORT')
-------------------------------------------------------------------------------
EXTRACTVALUE(VALUE(E),'/XDBCONFIG/SYSCONFIG/PROTOCOLCONFIG/FTPCONFIG/FTP-PROTOCO
--------------------------------------------------------------------------------
EXTRACTVALUE(VALUE(E),'/XDBCONFIG/SYSCONFIG/PROTOCOLCONFIG/HTTPCONFIG/HTTP-PORT'
--------------------------------------------------------------------------------
EXTRACTVALUE(VALUE(E),'/XDBCONFIG/SYSCONFIG/PROTOCOLCONFIG/HTTPCONFIG/HTTP-PROTO
--------------------------------------------------------------------------------
EXTRACTVALUE(VALUE(E),'/XDBCONFIG/SYSCONFIG/PROTOCOLCONFIG/HTTPCONFIG/HTTP-HOST'
--------------------------------------------------------------------------------
EXTRACTVALUE(VALUE(E),'/XDBCONFIG/SYSCONFIG/PROTOCOLCONFIG/HTTPCONFIG/HTTP2-PORT
--------------------------------------------------------------------------------
EXTRACTVALUE(VALUE(E),'/XDBCONFIG/SYSCONFIG/PROTOCOLCONFIG/HTTPCONFIG/HTTP2-PROT
--------------------------------------------------------------------------------
EXTRACTVALUE(VALUE(E),'/XDBCONFIG/SYSCONFIG/PROTOCOLCONFIG/HTTPCONFIG/HTTP2-HOST
--------------------------------------------------------------------------------
EXTRACTVALUE(VALUE(E),'/XDBCONFIG/SYSCONFIG/PROTOCOLCONFIG/NFSCONFIG/NFS-PORT')
-------------------------------------------------------------------------------
EXTRACTVALUE(VALUE(E),'/XDBCONFIG/SYSCONFIG/PROTOCOLCONFIG/NFSCONFIG/NFS-PROTOCO
--------------------------------------------------------------------------------
                                                                              0
tcp
                                                                               0
tcp








1 row selected.

SQL> 
SQL> update xdb.xdb$root_info set
  2  (ftp_port, ftp_protocol, http_port, http_protocol, http_host, http2_port, http2_protocol, http2_host, nfs_port, nfs_protocol)
  3  =
  4  (select extractValue(value(e),
  5            '/xdbconfig/sysconfig/protocolconfig/ftpconfig/ftp-port'),
  6          extractValue(value(e),
  7            '/xdbconfig/sysconfig/protocolconfig/ftpconfig/ftp-protocol'),
  8          extractValue(value(e),
  9            '/xdbconfig/sysconfig/protocolconfig/httpconfig/http-port'),
 10          extractValue(value(e),
 11            '/xdbconfig/sysconfig/protocolconfig/httpconfig/http-protocol'),
 12          extractValue(value(e),
 13            '/xdbconfig/sysconfig/protocolconfig/httpconfig/http-host'),
 14          extractValue(value(e),
 15            '/xdbconfig/sysconfig/protocolconfig/httpconfig/http2-port'),
 16          extractValue(value(e),
 17            '/xdbconfig/sysconfig/protocolconfig/httpconfig/http2-protocol'),
 18          extractValue(value(e),
 19            '/xdbconfig/sysconfig/protocolconfig/httpconfig/http2-host'),
 20          extractValue(value(e),
 21            '/xdbconfig/sysconfig/protocolconfig/nfsconfig/nfs-port'),
 22          extractValue(value(e),
 23            '/xdbconfig/sysconfig/protocolconfig/nfsconfig/nfs-protocol')
 24   from xdb.xdb$config e);

1 row updated.

SQL> 
SQL> -- Reinitialize ResConfig since we are in a stable state now.
SQL> call xdb.dbms_xdbz0.initXDBResConfig();

Call completed.

SQL> 
SQL> Rem Setup XDB Digest Authentication
SQL> @@xdbinstd.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/xdbinstd.sql /main/3 2009/04/06 20:28:12 badeoti Exp $
SQL> Rem
SQL> Rem xdbinstd.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2009, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      xdbinstd.sql - Execute all XDB Digest Authentication Setup here
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    badeoti     03/19/09 - dbms_xdb_admin.createnoncekey moved to dbms_xdbz
SQL> Rem    petam       01/19/05 - create table to store nonce key
SQL> Rem    petam       01/19/05 - Created
SQL> Rem
SQL> 
SQL> CREATE TABLE XDB.XDB$NONCEKEY(nonceKey CHAR(32));

Table created.

SQL> 
SQL> --need to comment this out when the Digest project goes in
SQL> exec dbms_xdbz.CreateNonceKey()

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Create Embedded PL/SQL Gateway package and schema objects
SQL> @@dbmsepg
SQL> Rem
SQL> Rem $Header: dbmsepg.sql 05-jan-2006.17:56:32 rpang Exp $
SQL> Rem
SQL> Rem dbmsepg.sql
SQL> Rem
SQL> Rem Copyright (c) 2004, 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsepg.sql - DBMS Embedded PL/SQL Gateway package
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This package provides the PL/SQL interface to administer the
SQL> Rem      embedded PL/SQL gateway.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This package must be created under SYS.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    rpang       01/05/06 - Add constants for log-levels
SQL> Rem    rpang       09/22/05 - Add anonymous authentication
SQL> Rem    rpang       04/21/05 - Add new DAD attributes
SQL> Rem    rpang       03/11/05 - Add invalid_dad_name exception
SQL> Rem    rpang       10/08/04 - Move table creation to catepg.sql
SQL> Rem    rpang       08/31/04 - Add authorization API
SQL> Rem    rpang       06/22/04 - Created for XML DB integration
SQL> Rem
SQL> 
SQL> CREATE OR REPLACE PACKAGE dbms_epg AUTHID CURRENT_USER IS
  2  
  3    --
  4    -- The PL/SQL gateway enables a Web browser to invoke a PL/SQL stored
  5    -- procedure through an HTTP listener. It is a platform on which PL/SQL
  6    -- users develop and deploy PL/SQL Web applications. The embedded PL/SQL
  7    -- gateway is an embedded version of the PL/SQL gateway that runs in the
  8    -- XML DB HTTP Server in the Oracle database. It provides the core
  9    -- features of mod_plsql in the database but does not require the
 10    -- Oracle HTTP Server powered by Apache.
 11    --
 12  
 13    ----------------
 14    ---- Types -----
 15    ----------------
 16    type VARCHAR2_TABLE is table of varchar2(4000) INDEX BY BINARY_INTEGER;
 17  
 18    ----------------
 19    -- Exceptions --
 20    ----------------
 21    invalid_dad_name  EXCEPTION;
 22    dad_not_found     EXCEPTION;
 23    unknown_attribute EXCEPTION;
 24    PRAGMA EXCEPTION_INIT(invalid_dad_name,       -24240);
 25    PRAGMA EXCEPTION_INIT(dad_not_found,          -24231);
 26    PRAGMA EXCEPTION_INIT(unknown_attribute,      -24232);
 27    invalid_dad_name_num  constant PLS_INTEGER := -24240;
 28    dad_not_found_num     constant PLS_INTEGER := -24231;
 29    unknown_attribute_num constant PLS_INTEGER := -24232;
 30  
 31    ---------------
 32    -- Constants --
 33    ---------------
 34    -- Log levels for the global attribute "log-level"
 35    LOG_EMERG   CONSTANT PLS_INTEGER := 0;
 36    LOG_ALERT   CONSTANT PLS_INTEGER := 1;
 37    LOG_CRIT    CONSTANT PLS_INTEGER := 2;
 38    LOG_ERR     CONSTANT PLS_INTEGER := 3;
 39    LOG_WARNING CONSTANT PLS_INTEGER := 4;
 40    LOG_NOTICE  CONSTANT PLS_INTEGER := 5;
 41    LOG_INFO    CONSTANT PLS_INTEGER := 6;
 42    LOG_DEBUG   CONSTANT PLS_INTEGER := 7;
 43  
 44    ----------------------------- Configuration API ----------------------------
 45    -- The XDBADMIN role is required to modify the embedded gateway
 46    -- configuration through the configuration API. Modification of the
 47    -- configuration by a user without the role will result in an "access denied"
 48    -- exception.
 49  
 50    --------------------------------------------
 51    ------ Global Attribute Configuration ------
 52    --------------------------------------------
 53  
 54    --
 55    -- Sets a global attribute.
 56    --
 57    -- If the attribute has been set before, the old value will be overwritten
 58    -- with the new value. The attribute name is case sensitive. The value
 59    -- may or may not be case-sensitive depending on the attribute.
 60    --
 61    -- PARAMETERS
 62    --   attr_name   The global attribute to set
 63    --   attr_value  The attribute value to set
 64    -- RETURN
 65    --   None
 66    -- EXCEPTIONS
 67    --   - if the attribute is unknown
 68    --   - if the invoker does not have the XDBADMIN role
 69    -- EXAMPLES
 70    --   dbms_epg.set_global_attribute('max-parameters', '100');
 71    --
 72    procedure set_global_attribute(attr_name  IN varchar2,
 73                                   attr_value IN varchar2);
 74  
 75    --
 76    -- Gets the value of a global attribute.
 77    --
 78    -- PARAMETERS
 79    --   attr_name   The global attribute to retrieve
 80    -- RETURN
 81    --   The global attribute value. Returns NULL if the attribute is unknown or
 82    --   has not been set.
 83    -- EXCEPTIONS
 84    --   None
 85    --
 86    function get_global_attribute(attr_name IN varchar2) return varchar2;
 87  
 88    --
 89    -- Deletes a global attribute.
 90    --
 91    -- PARAMETERS
 92    --   attr_name   The global attribute to delete
 93    -- RETURN
 94    --   None
 95    -- EXCEPTIONS
 96    --   None
 97    --
 98    procedure delete_global_attribute(attr_name IN varchar2);
 99  
100    --
101    -- Gets all global attributes/values.
102    --
103    -- The outputs are 2 correlated index-by tables of the name/value pairs.
104    --
105    -- PARAMETERS
106    --   attr_names  The global attribute names
107    --   attr_values The values of the global attributes
108    -- RETURN
109    --   None
110    -- EXCEPTIONS
111    --   None
112    -- NOTES
113    --   If no global attribute has been set, "attr_names" and "attr_values"
114    --   will be set to empty arrays.
115    --
116    procedure get_all_global_attributes(attr_names  OUT NOCOPY VARCHAR2_TABLE,
117                                        attr_values OUT NOCOPY VARCHAR2_TABLE);
118  
119    ----------------------------------------------------------
120    ----- Database Access Descriptor (DAD) Configuration -----
121    ----------------------------------------------------------
122  
123    --
124    -- In order to make a PL/SQL application accessible from the browser via
125    -- HTTP, a Database Access Descriptor (DAD) must be created and mapped to
126    -- a virtual path. A DAD is a set of configuration values used for database
127    -- access and the virtual-path mapping makes the application accessible
128    -- under a virtual path of the XML DB HTTP Server. A DAD is represented
129    -- as a servlet in XML DB HTTP Server.
130    --
131  
132    --
133    -- Creates a new DAD. None of its attributes will be set. If a virtual path
134    -- is given, the DAD will be mapped to the virtual path. Otherwise, the DAD
135    -- will not be mapped. If the virtual path exists already, the virtual path
136    -- will be mapped to the new DAD.
137    --
138    -- DAD name is case-sensitive. If a DAD with this name already exists,
139    -- the old DAD's information will be deleted.
140    --
141    -- The embedded gateway handles database authentication differently from
142    -- mod_plsql. In particular, it does not store any database password in a
143    -- DAD. The following explains the database authentication schemes.
144    --
145    -- 1. Static Authentication
146    --
147    -- For mod_plsql users who store database usernames/passwords in the DADs
148    -- so that the browser user will not be required to enter the database
149    -- authentication information, they can utilize the embedded gateway's static
150    -- authentication scheme. To use this scheme, the administrator with the
151    -- XDBADMIN role creates the DAD with the DAD attribute "database-username"
152    -- set, for example,
153    --
154    --   > sqlplus xdb/...
155    --   SQL> begin
156    --     dbms_epg.create_dad('HR', '/hrweb/*');
157    --     dbms_epg.set_dad_attribute('HR', 'database-username', 'SCOTT');
158    --    end;/
159    --
160    -- and the database user authorizes the embedded gateway to use his
161    -- privileges to invoke procedures and access document tables through the
162    -- DAD, for example,
163    --
164    --   > sqlplus scott/...
165    --   SQL> begin
166    --     dbms_epg.authorize_dad('HR');
167    --   end;
168    --   /
169    --
170    -- In order to use this scheme, both the DAD attribute "database-username"
171    -- must be set and the DAD must be authorized to use the user's privileges.
172    -- The DAD attribute "database-username" is case-sensitive. See the
173    -- description of the "set_dad_attribute" procedure for details.
174    --
175    -- Note that in this scheme, the embedded gateway, unlike mod_plsql, logs on
176    -- to the database as the special user "ANONYMOUS" but accesses database
177    -- objects using the user's privileges and default roles. Access will be
178    -- rejected if the browser user attempts to log on explicitly with the HTTP
179    -- "Authorization" header.
180    --
181    -- 2. Dynamic Authentication
182    --
183    -- For mod_plsql users who do not store database usernames/passwords in
184    -- the DADs, they can utilize the embedded gateway's dynamic authentication
185    -- scheme. To use this scheme, the administrator with the XDBADMIN role
186    -- simply creates the DAD. For example,
187    --
188    --   > sqlplus xdb/...
189    --   SQL> begin
190    --     dbms_epg.create_dad('HR', '/hrweb/*');
191    --   end;
192    --   /
193    --
194    -- To access the procedures or document tables through the DAD, browser users
195    -- will be required to supply the database authentication information via the
196    -- HTTP Basic Authentication scheme to log on to the database. If the DAD
197    -- attribute "database-username" is set, logon will be restricted to the
198    -- specified user. Caution: since the passwords sent through the HTTP Basic
199    -- Authentication scheme are not encrypted, the administrator should set up
200    -- the embedded gateway to use the HTTPS protocol to protect the passwords
201    -- sent by the browser users.
202    --
203    -- Note that in this scheme, the embedded gateway logs on to the database as
204    -- the user supplied by the browser user. The database user does not have to
205    -- authorize the embedded gateway to use his privileges to access database
206    -- objects since the browser user provides the database authentication
207    -- information to log on explicitly.
208    --
209    -- 3. Anonymous Authentication
210    --
211    -- For mod_plsql users who create a special DAD database user for database
212    -- logon purpose but store the application procedures and document tables
213    -- in a different schema and grant access to the procedures and document
214    -- tables to PUBLIC, they can utilize the embedded gateway's anonymous
215    -- authentication scheme. To use this scheme, the administrator with the
216    -- XDBADMIN role simply creates the DAD with the DAD attribute
217    -- "database-username" set to "ANONYMOUS" (case-sensitive). For example,
218    --
219    --   > sqlplus xdb/...
220    --   SQL> begin
221    --     dbms_epg.create_dad('HR', '/hrweb/*');
222    --     dbms_epg.set_dad_attribute('HR', 'database-username', 'ANONYMOUS');
223    --   end;
224    --   /
225    --
226    -- In order to use this scheme, the DAD attribute "database-username" must be
227    -- set to "ANONYMOUS" (case-sensitive). There is no need to authorize the
228    -- embedded gateway to use ANONYMOUS' privileges to access database objects
229    -- since ANONYMOUS has no system privileges and owns no database objects.
230    --
231    -- PARAMETERS
232    --   dad_name    The name of the DAD to create
233    --   path        The virtual path to map the DAD to
234    -- RETURN
235    --   None
236    -- EXCEPTIONS
237    --   - if the invoker does not have the XDBADMIN role
238    --
239    procedure create_dad(dad_name IN varchar2, path IN varchar2 DEFAULT NULL);
240  
241    --
242    -- Drops a DAD. All virtual-path mappings of the DAD will be dropped also
243    -- but the authorizations of the DAD will not be dropped.
244    --
245    -- PARAMETERS
246    --   dad_name    The DAD to drop
247    -- RETURN
248    --   None
249    -- EXCEPTIONS
250    --   - if the DAD does not exist
251    --   - if the invoker does not have the XDBADMIN role
252    --
253    procedure drop_dad(dad_name IN varchar2);
254  
255    --
256    -- Sets an attribute for a DAD.
257    --
258    -- If the attribute has been set before, the old value will be overwritten
259    -- with the new value for single-occurrence attributes. For multi-occurrence
260    -- attributes, the value will be appended instead.
261    --
262    -- The DAD attribute name is case-sensitive. The attribute value may or may
263    -- not be case-sensitive depending on the attribute.
264    --
265    -- DAD attributes are named differently from the DAD attributes of mod_plsql.
266    -- The name mapping is as follows:
267    --
268    --   mod_plsql attributes            embedded PL/SQL gateway attributes
269    --   -----------------------------   ----------------------------------
270    --   PlsqlDatabaseUsername           database-username
271    --   PlsqlAuthenticationMode         authentication-mode
272    --   PlsqlSessionCookieName          session-cookie-name
273    --   PlsqlSessionStateManagement     session-state-management
274    --   PlsqlMaxRequestsPerSession      max-requests-per-session
275    --   PlsqlDefaultPage                default-page
276    --   PlsqlDocumentTablename          document-table-name
277    --   PlsqlDocumentPath               document-path
278    --   PlsqlDocumentProcedure          document-procedure
279    --   PlsqlUploadAsLongRaw            upload-as-long-raw
280    --   PlsqlPathAlias                  path-alias
281    --   PlsqlPathAliasProcedure         path-alias-procedure
282    --   PlsqlExclusionList              exclusion-list
283    --   PlsqlCGIEnvironmentList         cgi-environment-list
284    --   PlsqlCompatibilityMode          compatibility-mode
285    --   PlsqlNLSLanguage                nls-language
286    --   PlsqlFetchBufferSize            fetch-buffer-size
287    --   PlsqlErrorStyle                 error-style
288    --   PlsqlTransferMode               transfer-mode
289    --   PlsqlBeforeProcedure            before-procedure
290    --   PlsqlAfterProcedure             after-procedure
291    --   PlsqlBindBucketLengths          bind-bucket-lengths
292    --   PlsqlBindBucketWidths           bind-bucket-widths
293    --   PlsqlAlwaysDescribeProcedure    always-describe-procedure
294    --   PlsqlInfoLogging                info-logging
295    --   PlsqlOWADebugEnable             owa-debug-enable
296    --   PlsqlRequestValidationFunction  request-validation-function
297    --   PlsqlInputFilterEnable          input-filter-enable
298    --
299    -- Note that the embedded gateway DAD attribute "database-username", unlike
300    -- its matching mod_plsql DAD attribute "PlsqlDatabaseUsername", is
301    -- case-sensitive as in the USERNAME column of the ALL_USERS view. The DAD
302    -- attribute "PlsqlDatabasePassword" is not needed. See the explanation of
303    -- the database authentication schemes in the "create_dad" procedure. Also,
304    -- the DAD attribute "PlsqlDatabaseConnectString" is not needed since the
305    -- embedded gateway does not support logon to external databases.
306    --
307    -- PARAMETERS
308    --   dad_name    The DAD to set attribute
309    --   attr_name   The DAD attribute to set
310    --   attr_value  The attribute value to set
311    -- RETURN
312    --   None
313    -- EXCEPTIONS
314    --   - if the DAD does not exist
315    --   - if the attribute is unknown
316    --   - if the invoker does not have the XDBADMIN role
317    -- EXAMPLES
318    --   dbms_epg.set_dad_attribute('HR', 'default-page', 'HRApp.home');
319    --
320    procedure set_dad_attribute(dad_name   IN varchar2,
321                                attr_name  IN varchar2,
322                                attr_value IN varchar2);
323  
324    --
325    -- Gets the value of a DAD attribute.
326    --
327    -- PARAMETERS
328    --   dad_name    The DAD to get attribute
329    --   attr_name   The DAD attribute to get
330    -- RETURN
331    --   The DAD attribute value. Returns NULL if the attribute is unknown or
332    --   has not been set.
333    -- EXCEPTIONS
334    --   - if the DAD does not exist
335    --
336    function get_dad_attribute(dad_name   IN varchar2,
337                               attr_name  IN varchar2) return varchar2;
338  
339    --
340    -- Gets all attributes of a DAD.
341    --
342    -- The outputs are 2 correlated index-by tables of the name/value pairs.
343    --
344    -- PARAMETERS
345    --   dad_name    The DAD to get attributes
346    --   attr_names  The DAD attribute names
347    --   attr_values The values of the DAD attributes
348    -- RETURN
349    --   None
350    -- EXCEPTIONS
351    --   - if the DAD does not exist
352    -- NOTE
353    --   If the DAD has no attributes set, "attr_names" and "attr_values"
354    --   will be set to empty arrays.
355    --
356    procedure get_all_dad_attributes(dad_name    IN  varchar2,
357                                     attr_names  OUT NOCOPY VARCHAR2_TABLE,
358                                     attr_values OUT NOCOPY VARCHAR2_TABLE);
359  
360    --
361    -- Deletes a DAD attribute.
362    --
363    -- PARAMETERS
364    --   dad_name    The DAD to delete attribute
365    --   attr_name   The DAD attribute to delete
366    -- RETURN
367    --   None
368    -- EXCEPTIONS
369    --   - if the DAD does not exist
370    --
371    procedure delete_dad_attribute(dad_name   IN varchar2,
372                                   attr_name  IN varchar2);
373  
374    --
375    -- Maps a DAD to a virtual path. If the virtual path exists already, the
376    -- virtual path will be mapped to the new DAD.
377    --
378    -- PARAMETERS
379    --   dad_name    The DAD to map
380    --   path        The virtual path to map
381    -- RETURN
382    --   None
383    -- EXCEPTIONS
384    --   - if the DAD does not exist
385    --
386    procedure map_dad(dad_name IN varchar2, path IN varchar2);
387  
388    --
389    -- Unmaps a DAD from a virtual path. If the virtual path is NULL, unmap the
390    -- DAD from all virtual paths.
391    --
392    -- PARAMETERS
393    --   dad_name    The DAD to unmap
394    --   path        The virtual path to unmap
395    -- RETURN
396    --   None
397    -- EXCEPTIONS
398    --   - if the DAD does not exist
399    --
400    procedure unmap_dad(dad_name IN varchar2, path IN varchar2 DEFAULT NULL);
401  
402    --
403    -- Gets all virtual paths a DAD is mapped to.
404    --
405    -- PARAMETERS
406    --   dad_name    The DAD to retrieve virtual-path mappings
407    --   paths       The virtual paths mapped to the DAD
408    -- RETURN
409    --   None
410    -- EXCEPTIONS
411    --   - if the DAD does not exist
412    -- NOTE
413    --   If the DAD is not mapped to any virtual path, "paths" will be set
414    --   to an empty array.
415    --
416    procedure get_all_dad_mappings(dad_name IN  varchar2,
417                                   paths    OUT NOCOPY VARCHAR2_TABLE);
418  
419    --
420    -- Gets the list of all DADs.
421    --
422    -- PARAMETERS
423    --   dad_names   The list of all DADs
424    -- RETURN
425    --   None
426    -- EXCEPTIONS
427    --   None
428    -- NOTE
429    --   If no DADs exist, "dad_names" will be set to an empty array.
430    --
431    procedure get_dad_list(dad_names OUT NOCOPY VARCHAR2_TABLE);
432  
433    ---------------------------- Authorization API -----------------------------
434    -- Any user can authorize the use of his privileges to the embedded gateway
435    -- through the authorization API in his schema. The XDBADMIN role is not
436    -- required to perform such authorization.
437  
438    --
439    -- Authorizes a DAD to use a user's privileges to invoke procedures and
440    -- access document tables. The invoker can always authorize the use of
441    -- his own privileges. To authorize the use of another user's privileges,
442    -- the invoker must have the the ALTER USER system privilege.
443    --
444    -- The DAD authorization may be performed before the DAD is created. The
445    -- DAD attribute "database-username" does not have to be set to user to
446    -- authorize. Multiple users can authorize the same DAD and it is up to
447    -- DAD's "database-username" attribute setting to decide which user's
448    -- privileges to use. To view the DAD authorizations, see the database
449    -- dictionary views USER_EPG_DAD_AUTHORIZATION and DBA_EPG_DAD_AUTHORIZATION.
450    --
451    -- PARAMETERS
452    --   dad_name  The DAD to authorize use
453    --   user      The user whose privileges to authorize. If the user is NULL,
454    --             the invoker is assumed. The username is case-sensitive as in
455    --             the USERNAME column of the ALL_USERS view.
456  
457    -- RETURN
458    --   None
459    -- EXCEPTIONS
460    --   - if the user does not exist
461    --   - if the invoker authorizes for another user but he does not have the
462    --     ALTER USER system privilege
463    -- EXAMPLE
464    --   dbms_epg.authorize_dad('HR');
465    --
466    procedure authorize_dad(dad_name IN varchar2,
467                            user     IN varchar2 DEFAULT NULL);
468  
469    --
470    -- Deauthorizes a DAD's use of a user's privileges to invoke procedures and
471    -- access document tables. The invoker can always deauthorize the use of
472    -- his own privileges. To deauthorize the use of another user's privileges,
473    -- the invoker must have the the ALTER USER system privilege.
474    --
475    -- PARAMETERS
476    --   dad_name  The DAD to deauthorize use
477    --   user      The user whose privileges to deauthorize. If the user is NULL,
478    --             the invoker is assumed. The username is case-sensitive as in
479    --             the USERNAME column of the ALL_USERS view.
480    -- RETURN
481    --   None
482    -- EXCEPTIONS
483    --   - if the user does not exist
484    --   - if the invoker deauthorizes for another user but he does not have the
485    --     ALTER USER system privilege
486    -- EXAMPLE
487    --   dbms_epg.deauthorize_dad('HR');
488    --
489    procedure deauthorize_dad(dad_name IN varchar2,
490                              user     IN varchar2 DEFAULT NULL);
491  
492  END dbms_epg;
493  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_epg FOR sys.dbms_epg
  2  /

Synonym created.

SQL> GRANT EXECUTE ON dbms_epg TO PUBLIC
  2  /

Grant succeeded.

SQL> @@prvtepg.plb
SQL> CREATE OR REPLACE PACKAGE BODY dbms_epg wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  2fd6 bd9
 21  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
 62  iL5rVVdZlxBDVjTmTPGJtJwGHEVqTiD5Od6gUmc=
 63  
 64  /

Package body created.

SQL> @@catepg
SQL> Rem
SQL> Rem $Header: catepg.sql 15-feb-2005.11:00:12 rpang Exp $
SQL> Rem
SQL> Rem catepg.sql
SQL> Rem
SQL> Rem Copyright (c) 2004, 2005, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catepg.sql - Embedded PL/SQL Gateway related schema objects
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem     This script creates the tables and views required for supporting the
SQL> Rem     the embedded PL/SQL gateway.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script should be run as "SYS".
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    rpang       02/15/05 - No set echo
SQL> Rem    rpang       10/08/04 - Created
SQL> Rem
SQL> 
SQL> 
SQL> Rem
SQL> Rem DAD authorization information storage
SQL> Rem
SQL> 
SQL> create table EPG$_AUTH
  2  ( DADNAME            varchar2(64) not null,                      /* DAD name */
  3    USER#              number not null, /* user authorized for use by this DAD */
  4    constraint epg$_auth_pk primary key (dadname,user#)
  5  )
  6  /

Table created.

SQL> 
SQL> Rem
SQL> Rem User DAD authorization view
SQL> Rem
SQL> 
SQL> create or replace view USER_EPG_DAD_AUTHORIZATION
  2  (DAD_NAME)
  3  as
  4  select ea.dadname
  5  from epg$_auth ea
  6  where ea.user# = userenv('SCHEMAID')
  7  /

View created.

SQL> create or replace public synonym USER_EPG_DAD_AUTHORIZATION for USER_EPG_DAD_AUTHORIZATION
  2  /

Synonym created.

SQL> grant select on USER_EPG_DAD_AUTHORIZATION to public
  2  /

Grant succeeded.

SQL> comment on table USER_EPG_DAD_AUTHORIZATION is
  2  'DADs authorized to use the user''s privileges'
  3  /

Comment created.

SQL> comment on column USER_EPG_DAD_AUTHORIZATION.DAD_NAME is
  2  'Name of DAD'
  3  /

Comment created.

SQL> 
SQL> Rem
SQL> Rem DBA DAD authorization view
SQL> Rem
SQL> 
SQL> create or replace view DBA_EPG_DAD_AUTHORIZATION
  2  (DAD_NAME, USERNAME)
  3  as
  4  select ea.dadname, u.name
  5  from epg$_auth ea, user$ u
  6  where ea.user# = u.user#
  7  /

View created.

SQL> create or replace public synonym DBA_EPG_DAD_AUTHORIZATION for DBA_EPG_DAD_AUTHORIZATION
  2  /

Synonym created.

SQL> grant select on DBA_EPG_DAD_AUTHORIZATION to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on DBA_EPG_DAD_AUTHORIZATION to xdbadmin
  2  /

Grant succeeded.

SQL> comment on table DBA_EPG_DAD_AUTHORIZATION is
  2  'DADs authorized to use different user''s privileges'
  3  /

Comment created.

SQL> comment on column DBA_EPG_DAD_AUTHORIZATION.DAD_NAME is
  2  'Name of DAD'
  3  /

Comment created.

SQL> comment on column DBA_PLSQL_OBJECT_SETTINGS.OWNER is
  2  'Name of the user whose privileges the DAD is authorized to use'
  3  /

Comment created.

SQL> 
SQL> Rem Add the various views to be created on xdb data
SQL> @@catxdbv
SQL> Rem
SQL> Rem $Header: rdbms/admin/catxdbv.sql /st_rdbms_11.2.0/5 2012/02/18 04:39:33 atabar Exp $
SQL> Rem
SQL> Rem catxdbv.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2012, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbv.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    apfwkr      02/15/12 - Backport atabar_bug-13031694 from main
SQL> Rem    bhammers    12/15/11 - bug 13089022, remove catxdbvfexp.sql
SQL> Rem    spetride    05/11/11 - created catxdbvfexp.sql script for export views
SQL> Rem    spetride    02/07/11 - additional view for XML schemas export
SQL> Rem    spetride    04/26/10 - DBA_XML_SCHEMA_DEPENDENCY: account for hidden sch
SQL> Rem    spetride    02/23/10 - add schemaoids to DBA_XML_SCHEMA_DEPENDENCY
SQL> Rem    spetride    01/21/10 - add DBA_XML_SCHEMA_DEPENDENCY
SQL> Rem    bhammers    04/08/09 - add OR to type in USER_XML_INDEXES
SQL> Rem    attran      03/03/09 - #(8313982) - ASYNC
SQL> Rem    sipatel     10/01/08 - #(7414934) - xdb@xtab* moved from sys to xdb
SQL> Rem    shvenugo    08/19/08 - enhance *_xml_indexes definition
SQL> Rem    bsthanik    07/12/07 - 6152793:dont access repos for schema internal
SQL> Rem                           name
SQL> Rem    sichandr    11/22/06 - display ANYSCHEMA options
SQL> Rem    attran      10/18/06 - enhance the views **_xml_indexes
SQL> Rem    thbaby      08/12/06 - rename PATHS column to PARAMETERS
SQL> Rem    thbaby      06/15/06 - add async column to *_xml_indexes
SQL> Rem    hxzhang     06/08/06 - lrg#2262415, remove all select * from dba_errors
SQL> Rem    ataracha    01/26/06 - change user_xml_indexes to use xdb$dxpath alone
SQL> Rem    sichandr    05/07/06 - fix CSX info for SB tables
SQL> Rem    abagrawa    10/27/05 - Add XSLT for CSX schemas
SQL> Rem    abagrawa    10/24/05 - Add CSX cols to views
SQL> Rem    sichandr    08/11/05 - catalog view support
SQL> Rem    pnath       05/18/05 - add view for bug 4376605
SQL> Rem    thbaby      01/20/05 - Add HIER_TYPE column to XXX_XML_SCHEMAS
SQL> Rem    sichandr    07/19/04 - add xmlindex catalog views
SQL> Rem    spannala    05/24/04 - upgrade might disable xdbhi_idx, rebuild it
SQL> Rem    najain      12/08/03 - add xml_schema_name_present
SQL> Rem    njalali     05/12/03 - added all_xml_schemas2
SQL> Rem    amanikut    04/29/03 - 2917744 : include NSB cols/views in catalog views
SQL> Rem    amanikut    04/29/03 - bug 2917744 : include NSB XVs in USER_XML_VIEWS
SQL> Rem    njalali     03/26/03 - removing connect statement and recompiles
SQL> Rem    abagrawa    04/02/03 - Add comment to keep in sync
SQL> Rem    abagrawa    10/17/02 - Fix element name for element refs
SQL> Rem    njalali     08/13/02 - removing SET statements
SQL> Rem    ataracha    08/12/02 - compile KU$ views after catmetx
SQL> Rem    sichandr    02/25/02 - add int/qualified schema
SQL> Rem    sichandr    02/07/02 - fix hex conversions
SQL> Rem    gviswana    01/29/02 - CREATE OR REPLACE SYNONYM
SQL> Rem    spannala    01/08/02 - correcting name in comments
SQL> Rem    lbarton     01/09/02 - add catmetx.sql
SQL> Rem    nmontoya    12/12/01 - remove set echo on
SQL> Rem    mkrishna    11/01/01 - change xmldata to xmldata
SQL> Rem    sichandr    11/28/01 - catalog view fixes
SQL> Rem    mkrishna    09/26/01 - fix catxdbv
SQL> Rem    sichandr    09/05/01 - add xxx_XML_SCHEMAS and xxx_XML_VIEWS
SQL> Rem    mkrishna    08/02/01 - Merged mkrishna_bug-1753473
SQL> Rem    mkrishna    07/29/01 - Created
SQL> Rem
SQL> 
SQL> create or replace force view DBA_XML_TABLES
  2   (OWNER, TABLE_NAME, XMLSCHEMA, SCHEMA_OWNER, ELEMENT_NAME, STORAGE_TYPE,
  3    ANYSCHEMA, NONSCHEMA)
  4   as select u.name, o.name, null, null, null,
  5      case when bitand(opq.flags,69) = 1 then 'OBJECT-RELATIONAL'
  6           when bitand(opq.flags,69) = 68 then 'BINARY'
  7      else 'CLOB' end,
  8      case when bitand(opq.flags,69) = 68 then
  9          case when bitand(opq.flags,128) = 128 then 'YES' else 'NO' end
 10      else NULL end,
 11      case when bitand(opq.flags,69) = 68  then
 12          case when bitand(opq.flags,256) = 256 then 'NO' else 'YES' end
 13      else NULL end
 14   from sys.opqtype$ opq, sys.tab$ t, sys.user$ u, sys.obj$ o,
 15        sys.coltype$ ac, sys.col$ tc
 16   where o.owner# = u.user#
 17    and o.obj# = t.obj#
 18    and bitand(t.property, 1) = 1
 19    and t.obj# = tc.obj#
 20    and tc.name = 'SYS_NC_ROWINFO$'
 21    and tc.obj# = ac.obj#
 22    and tc.intcol# = ac.intcol#
 23    and ac.toid = '00000000000000000000000000020100'
 24    and tc.intcol# =  opq.intcol#
 25    and tc.obj# =  opq.obj#
 26    and bitand(opq.flags,2) = 0
 27   union all
 28   select u.name, o.name, schm.xmldata.schema_url, schm.xmldata.schema_owner,
 29          decode(xel.xmldata.property.name, null,
 30          xel.xmldata.property.propref_name.name, xel.xmldata.property.name),
 31          case when bitand(opq.flags,69) = 1 then 'OBJECT-RELATIONAL'
 32               when bitand(opq.flags,69) = 68 then 'BINARY'
 33          else 'CLOB' end,
 34          case when bitand(opq.flags,69) = 68 then
 35              case when bitand(opq.flags,128) = 128 then 'YES' else 'NO' end
 36          else NULL end,
 37          case when bitand(opq.flags,69) = 68  then
 38              case when bitand(opq.flags,256) = 256 then 'NO' else 'YES' end
 39          else NULL end
 40   from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
 41        sys.tab$ t, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
 42  where o.owner# = u.user#
 43    and o.obj# = t.obj#
 44    and bitand(t.property, 1) = 1
 45    and t.obj# = tc.obj#
 46    and tc.name = 'SYS_NC_ROWINFO$'
 47    and tc.obj# = ac.obj#
 48    and tc.intcol# = ac.intcol#
 49    and ac.toid = '00000000000000000000000000020100'
 50    and tc.intcol# =  opq.intcol#
 51    and tc.obj# =  opq.obj#
 52    and bitand(opq.flags,2) = 2
 53    and opq.schemaoid =  schm.sys_nc_oid$
 54    and opq.elemnum =  xel.xmldata.property.prop_number
 55  /

View created.

SQL> grant select on dba_xml_tables to select_catalog_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym dba_xml_tables for dba_xml_tables;

Synonym created.

SQL> 
SQL> comment on table DBA_XML_TABLES is
  2  'Description of all XML tables in the database'
  3  /

Comment created.

SQL> comment on column DBA_XML_TABLES.OWNER is
  2  'Name of the owner of the XML table'
  3  /

Comment created.

SQL> comment on column DBA_XML_TABLES.TABLE_NAME is
  2  'Name of the XML table'
  3  /

Comment created.

SQL> comment on column DBA_XML_TABLES.XMLSCHEMA is
  2  'Name of the XMLSchema that is used for the table definition'
  3  /

Comment created.

SQL> comment on column DBA_XML_TABLES.SCHEMA_OWNER is
  2  'Name of the owner of the XMLSchema used for table definition'
  3  /

Comment created.

SQL> comment on column DBA_XML_TABLES.ELEMENT_NAME is
  2  'Name XMLSChema element that is used for the table'
  3  /

Comment created.

SQL> comment on column DBA_XML_TABLES.STORAGE_TYPE is
  2  'Type of storage option for the XMLtype data'
  3  /

Comment created.

SQL> comment on column DBA_XML_TABLES.ANYSCHEMA is
  2  'If storage is BINARY, does this column allow ANYSCHEMA?'
  3  /

Comment created.

SQL> comment on column DBA_XML_TABLES.NONSCHEMA is
  2  'If storage is BINARY, does this column allow NONSCHEMA?'
  3  /

Comment created.

SQL> 
SQL> create or replace force view ALL_XML_TABLES
  2   (OWNER, TABLE_NAME, XMLSCHEMA, SCHEMA_OWNER, ELEMENT_NAME, STORAGE_TYPE,
  3    ANYSCHEMA, NONSCHEMA)
  4   as
  5    select u.name, o.name, null, null, null,
  6      case when bitand(opq.flags,69) = 1 then 'OBJECT-RELATIONAL'
  7           when bitand(opq.flags,69) = 68 then 'BINARY'
  8      else 'CLOB' end,
  9      case when bitand(opq.flags,69) = 68 then
 10          case when bitand(opq.flags,128) = 128 then 'YES' else 'NO' end
 11      else NULL end,
 12      case when bitand(opq.flags,69) = 68  then
 13          case when bitand(opq.flags,256) = 256 then 'NO' else 'YES' end
 14      else NULL end
 15   from sys.opqtype$ opq, sys.tab$ t, sys.user$ u, sys.obj$ o,
 16        sys.coltype$ ac, sys.col$ tc
 17   where o.owner# = u.user#
 18    and o.obj# = t.obj#
 19    and bitand(t.property, 1) = 1
 20    and t.obj# = tc.obj#
 21    and tc.name = 'SYS_NC_ROWINFO$'
 22    and tc.obj# = ac.obj#
 23    and tc.intcol# = ac.intcol#
 24    and ac.toid = '00000000000000000000000000020100'
 25    and tc.intcol# =  opq.intcol#
 26    and tc.obj# =  opq.obj#
 27    and bitand(opq.flags,2) = 0
 28    and (o.owner# = userenv('SCHEMAID')
 29         or o.obj# in
 30              (select oa.obj#
 31               from sys.objauth$ oa
 32               where grantee# in ( select kzsrorol
 33                                   from x$kzsro
 34                                 )
 35              )
 36         or /* user has system privileges */
 37           exists (select null from v$enabledprivs
 38                   where priv_number in (-45 /* LOCK ANY TABLE */,
 39                                         -47 /* SELECT ANY TABLE */,
 40                                         -48 /* INSERT ANY TABLE */,
 41                                         -49 /* UPDATE ANY TABLE */,
 42                                         -50 /* DELETE ANY TABLE */)
 43                   )
 44        )
 45   union all
 46   select u.name, o.name, schm.xmldata.schema_url, schm.xmldata.schema_owner,
 47   decode(xel.xmldata.property.name, null,
 48          xel.xmldata.property.propref_name.name, xel.xmldata.property.name),
 49    case when bitand(opq.flags,69) = 1 then 'OBJECT-RELATIONAL'
 50         when bitand(opq.flags,69) = 68 then 'BINARY'
 51    else 'CLOB' end,
 52    case when bitand(opq.flags,69) = 68 then
 53        case when bitand(opq.flags,128) = 128 then 'YES' else 'NO' end
 54    else NULL end,
 55    case when bitand(opq.flags,69) = 68  then
 56        case when bitand(opq.flags,256) = 256 then 'NO' else 'YES' end
 57    else NULL end
 58  from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
 59        sys.tab$ t, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
 60  where o.owner# = u.user#
 61    and o.obj# = t.obj#
 62    and bitand(t.property, 1) = 1
 63    and t.obj# = tc.obj#
 64    and tc.name = 'SYS_NC_ROWINFO$'
 65    and tc.obj# = ac.obj#
 66    and tc.intcol# = ac.intcol#
 67    and ac.toid = '00000000000000000000000000020100'
 68    and tc.intcol# =  opq.intcol#
 69    and tc.obj# =  opq.obj#
 70    and opq.schemaoid =  schm.sys_nc_oid$
 71    and bitand(opq.flags,2) = 2
 72    and opq.elemnum =  xel.xmldata.property.prop_number
 73    and (o.owner# = userenv('SCHEMAID')
 74         or o.obj# in
 75              (select oa.obj#
 76               from sys.objauth$ oa
 77               where grantee# in ( select kzsrorol
 78                                   from x$kzsro
 79                                 )
 80              )
 81         or /* user has system privileges */
 82           exists (select null from v$enabledprivs
 83                   where priv_number in (-45 /* LOCK ANY TABLE */,
 84                                         -47 /* SELECT ANY TABLE */,
 85                                         -48 /* INSERT ANY TABLE */,
 86                                         -49 /* UPDATE ANY TABLE */,
 87                                         -50 /* DELETE ANY TABLE */)
 88                   )
 89        )
 90  /

View created.

SQL> grant select on all_xml_tables to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym all_xml_tables for all_xml_tables;

Synonym created.

SQL> 
SQL> comment on table ALL_XML_TABLES is
  2  'Description of the all XMLType tables that the user has privileges on'
  3  /

Comment created.

SQL> comment on column ALL_XML_TABLES.OWNER is
  2  'Owner of the table '
  3  /

Comment created.

SQL> comment on column ALL_XML_TABLES.TABLE_NAME is
  2  'Name of the table '
  3  /

Comment created.

SQL> comment on column ALL_XML_TABLES.XMLSCHEMA is
  2  'Name of the XMLSchema that is used for the table definition'
  3  /

Comment created.

SQL> comment on column ALL_XML_TABLES.SCHEMA_OWNER is
  2  'Name of the owner of the XMLSchema used for table definition'
  3  /

Comment created.

SQL> comment on column ALL_XML_TABLES.ELEMENT_NAME is
  2  'Name XMLSChema element that is used for the table'
  3  /

Comment created.

SQL> comment on column ALL_XML_TABLES.STORAGE_TYPE is
  2  'Type of storage option for the XMLtype data'
  3  /

Comment created.

SQL> comment on column ALL_XML_TABLES.ANYSCHEMA is
  2  'If storage is BINARY, does this column allow ANYSCHEMA?'
  3  /

Comment created.

SQL> comment on column ALL_XML_TABLES.NONSCHEMA is
  2  'If storage is BINARY, does this column allow NONSCHEMA?'
  3  /

Comment created.

SQL> 
SQL> create or replace force view USER_XML_TABLES
  2   (TABLE_NAME, XMLSCHEMA, SCHEMA_OWNER, ELEMENT_NAME, STORAGE_TYPE,
  3    ANYSCHEMA, NONSCHEMA)
  4   as select o.name, null, null, null,
  5      case when bitand(opq.flags,69) = 1 then 'OBJECT-RELATIONAL'
  6           when bitand(opq.flags,69) = 68 then 'BINARY'
  7      else 'CLOB' end,
  8      case when bitand(opq.flags,69) = 68 then
  9          case when bitand(opq.flags,128) = 128 then 'YES' else 'NO' end
 10      else NULL end,
 11      case when bitand(opq.flags,69) = 68  then
 12          case when bitand(opq.flags,256) = 256 then 'NO' else 'YES' end
 13      else NULL end
 14  from sys.opqtype$ opq, sys.tab$ t, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
 15  where o.owner# = userenv('SCHEMAID')
 16    and o.obj# = t.obj#
 17    and bitand(t.property, 1) = 1
 18    and t.obj# = tc.obj#
 19    and tc.name = 'SYS_NC_ROWINFO$'
 20    and tc.obj# = ac.obj#
 21    and tc.intcol# = ac.intcol#
 22    and ac.toid = '00000000000000000000000000020100'
 23    and tc.intcol# =  opq.intcol#
 24    and tc.obj# =  opq.obj#
 25    and bitand(opq.flags,2) = 0
 26   union all
 27    select o.name, schm.xmldata.schema_url, schm.xmldata.schema_owner,
 28  decode(xel.xmldata.property.name, null,
 29          xel.xmldata.property.propref_name.name, xel.xmldata.property.name),
 30    case when bitand(opq.flags,69) = 1 then 'OBJECT-RELATIONAL'
 31         when bitand(opq.flags,69) = 68 then 'BINARY'
 32    else 'CLOB' end,
 33    case when bitand(opq.flags,69) = 68 then
 34        case when bitand(opq.flags,128) = 128 then 'YES' else 'NO' end
 35    else NULL end,
 36    case when bitand(opq.flags,69) = 68  then
 37        case when bitand(opq.flags,256) = 256 then 'NO' else 'YES' end
 38    else NULL end
 39  from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
 40        sys.tab$ t, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
 41  where o.owner# = userenv('SCHEMAID')
 42    and o.obj# = t.obj#
 43    and bitand(t.property, 1) = 1
 44    and t.obj# = tc.obj#
 45    and tc.name = 'SYS_NC_ROWINFO$'
 46    and tc.obj# = ac.obj#
 47    and tc.intcol# = ac.intcol#
 48    and ac.toid = '00000000000000000000000000020100'
 49    and tc.intcol# =  opq.intcol#
 50    and tc.obj# =  opq.obj#
 51    and opq.schemaoid =  schm.sys_nc_oid$
 52    and bitand(opq.flags,2) = 2
 53    and opq.elemnum =  xel.xmldata.property.prop_number
 54  /

View created.

SQL> grant select on user_xml_tables to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym user_xml_tables for user_xml_tables;

Synonym created.

SQL> 
SQL> comment on table USER_XML_TABLES is
  2  'Description of the user''s own XMLType tables'
  3  /

Comment created.

SQL> comment on column USER_XML_TABLES.TABLE_NAME is
  2  'Name of the XMLType table'
  3  /

Comment created.

SQL> comment on column USER_XML_TABLES.XMLSCHEMA is
  2  'Name of the XMLSchema that is used for the table definition'
  3  /

Comment created.

SQL> comment on column USER_XML_TABLES.SCHEMA_OWNER is
  2  'Name of the owner of the XMLSchema used for table definition'
  3  /

Comment created.

SQL> comment on column USER_XML_TABLES.ELEMENT_NAME is
  2  'Name XMLSChema element that is used for the table'
  3  /

Comment created.

SQL> comment on column USER_XML_TABLES.STORAGE_TYPE is
  2  'Type of storage option for the XMLtype data'
  3  /

Comment created.

SQL> comment on column USER_XML_TABLES.ANYSCHEMA is
  2  'If storage is BINARY, does this column allow ANYSCHEMA?'
  3  /

Comment created.

SQL> comment on column USER_XML_TABLES.NONSCHEMA is
  2  'If storage is BINARY, does this column allow NONSCHEMA?'
  3  /

Comment created.

SQL> 
SQL> create or replace force view DBA_XML_TAB_COLS
  2   (OWNER, TABLE_NAME, COLUMN_NAME, XMLSCHEMA, SCHEMA_OWNER,
  3    ELEMENT_NAME, STORAGE_TYPE, ANYSCHEMA, NONSCHEMA)
  4   as select u.name, o.name,
  5     decode(bitand(tc.property, 1), 1, attr.name, tc.name),
  6     null, null, null,
  7     case when bitand(opq.flags,69) = 1 then 'OBJECT-RELATIONAL'
  8          when bitand(opq.flags,69) = 68 then 'BINARY'
  9     else 'CLOB' end,
 10     case when bitand(opq.flags,69) = 68 then
 11         case when bitand(opq.flags,128) = 128 then 'YES' else 'NO' end
 12     else NULL end,
 13     case when bitand(opq.flags,69) = 68  then
 14         case when bitand(opq.flags,256) = 256 then 'NO' else 'YES' end
 15     else NULL end
 16  from sys.opqtype$ opq, sys.tab$ t, sys.user$ u, sys.obj$ o,
 17       sys.coltype$ ac, sys.col$ tc, sys.attrcol$ attr
 18  where o.owner# = u.user#
 19    and o.obj# = t.obj#
 20    and t.obj# = tc.obj#
 21    and tc.obj# = ac.obj#
 22    and tc.intcol# = ac.intcol#
 23    and tc.obj#    = attr.obj#(+)
 24    and tc.intcol# = attr.intcol#(+)
 25    and tc.name != 'SYS_NC_ROWINFO$'
 26    and ac.toid = '00000000000000000000000000020100'
 27    and tc.intcol# =  opq.intcol#
 28    and tc.obj# =  opq.obj#
 29    and bitand(opq.flags,2) = 0
 30   union all
 31    select u.name, o.name,
 32     decode(bitand(tc.property, 1), 1, attr.name, tc.name),
 33     schm.xmldata.schema_url, schm.xmldata.schema_owner,
 34  decode(xel.xmldata.property.name, null,
 35          xel.xmldata.property.propref_name.name, xel.xmldata.property.name),
 36      case when bitand(opq.flags,69) = 1 then 'OBJECT-RELATIONAL'
 37           when bitand(opq.flags,69) = 68 then 'BINARY'
 38      else 'CLOB' end,
 39      case when bitand(opq.flags,69) = 68 then
 40          case when bitand(opq.flags,128) = 128 then 'YES' else 'NO' end
 41      else NULL end,
 42      case when bitand(opq.flags,69) = 68  then
 43          case when bitand(opq.flags,256) = 256 then 'NO' else 'YES' end
 44      else NULL end
 45  from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
 46        sys.tab$ t, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
 47        sys.attrcol$ attr
 48  where o.owner# = u.user#
 49    and o.obj# = t.obj#
 50    and t.obj# = tc.obj#
 51    and tc.obj# = ac.obj#
 52    and ac.toid = '00000000000000000000000000020100'
 53    and tc.intcol# = ac.intcol#
 54    and tc.obj#    = attr.obj#(+)
 55    and tc.intcol# = attr.intcol#(+)
 56    and tc.name != 'SYS_NC_ROWINFO$'
 57    and tc.intcol# =  opq.intcol#
 58    and tc.obj# =  opq.obj#
 59    and opq.schemaoid =  schm.sys_nc_oid$
 60    and bitand(opq.flags,2) = 2
 61    and opq.elemnum =  xel.xmldata.property.prop_number
 62  /

View created.

SQL> grant select on dba_xml_tab_cols to select_catalog_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym dba_xml_tab_cols for dba_xml_tab_cols;

Synonym created.

SQL> 
SQL> comment on table DBA_XML_TAB_COLS is
  2  'Description of all XML tables in the database'
  3  /

Comment created.

SQL> comment on column DBA_XML_TAB_COLS.OWNER is
  2  'Name of the owner of the XML table'
  3  /

Comment created.

SQL> comment on column DBA_XML_TAB_COLS.TABLE_NAME is
  2  'Name of the XML table'
  3  /

Comment created.

SQL> comment on column DBA_XML_TAB_COLS.COLUMN_NAME is
  2  'Name of the XML table column'
  3  /

Comment created.

SQL> comment on column DBA_XML_TAB_COLS.XMLSCHEMA is
  2  'Name of the XMLSchema that is used for the table definition'
  3  /

Comment created.

SQL> comment on column DBA_XML_TAB_COLS.SCHEMA_OWNER is
  2  'Name of the owner of the XMLSchema used for table definition'
  3  /

Comment created.

SQL> comment on column DBA_XML_TAB_COLS.ELEMENT_NAME is
  2  'Name XMLSChema element that is used for the table'
  3  /

Comment created.

SQL> comment on column DBA_XML_TAB_COLS.STORAGE_TYPE is
  2  'Type of storage option for the XMLtype data'
  3  /

Comment created.

SQL> comment on column DBA_XML_TAB_COLS.ANYSCHEMA is
  2  'If storage is BINARY, does this column allow ANYSCHEMA?'
  3  /

Comment created.

SQL> comment on column DBA_XML_TAB_COLS.NONSCHEMA is
  2  'If storage is BINARY, does this column allow NONSCHEMA?'
  3  /

Comment created.

SQL> 
SQL> create or replace force view ALL_XML_TAB_COLS
  2   (OWNER, TABLE_NAME, COLUMN_NAME, XMLSCHEMA, SCHEMA_OWNER,
  3    ELEMENT_NAME, STORAGE_TYPE, ANYSCHEMA, NONSCHEMA)
  4    as select u.name, o.name,
  5     decode(bitand(tc.property, 1), 1, attr.name, tc.name),null,null,null,
  6     case when bitand(opq.flags,69) = 1 then 'OBJECT-RELATIONAL'
  7          when bitand(opq.flags,69) = 68 then 'BINARY'
  8     else 'CLOB' end,
  9     case when bitand(opq.flags,69) = 68 then
 10         case when bitand(opq.flags,128) = 128 then 'YES' else 'NO' end
 11     else NULL end,
 12     case when bitand(opq.flags,69) = 68  then
 13         case when bitand(opq.flags,256) = 256 then 'NO' else 'YES' end
 14     else NULL end
 15  from  sys.opqtype$ opq,
 16        sys.tab$ t, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
 17        sys.attrcol$ attr
 18  where o.owner# = u.user#
 19    and o.obj# = t.obj#
 20    and t.obj# = tc.obj#
 21    and tc.obj# = ac.obj#
 22    and tc.intcol# = ac.intcol#
 23    and ac.toid = '00000000000000000000000000020100'
 24    and tc.intcol# = opq.intcol#
 25    and tc.obj# =  opq.obj#
 26    and tc.obj#    = attr.obj#(+)
 27    and tc.intcol# = attr.intcol#(+)
 28    and bitand(opq.flags,2) = 0
 29    and tc.name != 'SYS_NC_ROWINFO$'
 30    and (o.owner# = userenv('SCHEMAID')
 31         or o.obj# in
 32              (select oa.obj#
 33               from sys.objauth$ oa
 34               where grantee# in ( select kzsrorol
 35                                   from x$kzsro
 36                                 )
 37              )
 38         or /* user has system privileges */
 39           exists (select null from v$enabledprivs
 40                   where priv_number in (-45 /* LOCK ANY TABLE */,
 41                                         -47 /* SELECT ANY TABLE */,
 42                                         -48 /* INSERT ANY TABLE */,
 43                                         -49 /* UPDATE ANY TABLE */,
 44                                         -50 /* DELETE ANY TABLE */)
 45                   )
 46        )
 47    union all
 48   select u.name, o.name,
 49    decode(bitand(tc.property, 1), 1, attr.name, tc.name),
 50    schm.xmldata.schema_url, schm.xmldata.schema_owner,
 51  decode(xel.xmldata.property.name, null,
 52          xel.xmldata.property.propref_name.name, xel.xmldata.property.name),
 53      case when bitand(opq.flags,69) = 1 then 'OBJECT-RELATIONAL'
 54           when bitand(opq.flags,69) = 68 then 'BINARY'
 55      else 'CLOB' end,
 56      case when bitand(opq.flags,69) = 68 then
 57          case when bitand(opq.flags,128) = 128 then 'YES' else 'NO' end
 58      else NULL end,
 59      case when bitand(opq.flags,69) = 68  then
 60          case when bitand(opq.flags,256) = 256 then 'NO' else 'YES' end
 61      else NULL end
 62   from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
 63        sys.tab$ t, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
 64        sys.attrcol$ attr
 65   where o.owner# = u.user#
 66    and o.obj# = t.obj#
 67    and t.obj# = tc.obj#
 68    and tc.obj# = ac.obj#
 69    and tc.intcol# = ac.intcol#
 70    and ac.toid = '00000000000000000000000000020100'
 71    and tc.intcol# = opq.intcol#
 72    and tc.obj# =  opq.obj#
 73    and tc.obj#    = attr.obj#(+)
 74    and tc.intcol# = attr.intcol#(+)
 75    and tc.name != 'SYS_NC_ROWINFO$'
 76    and opq.schemaoid =  schm.sys_nc_oid$
 77    and opq.elemnum =  xel.xmldata.property.prop_number
 78    and bitand(opq.flags,2) = 2
 79    and (o.owner# = userenv('SCHEMAID')
 80         or o.obj# in
 81              (select oa.obj#
 82               from sys.objauth$ oa
 83               where grantee# in ( select kzsrorol
 84                                   from x$kzsro
 85                                 )
 86              )
 87         or /* user has system privileges */
 88           exists (select null from v$enabledprivs
 89                   where priv_number in (-45 /* LOCK ANY TABLE */,
 90                                         -47 /* SELECT ANY TABLE */,
 91                                         -48 /* INSERT ANY TABLE */,
 92                                         -49 /* UPDATE ANY TABLE */,
 93                                         -50 /* DELETE ANY TABLE */)
 94                   )
 95        )
 96  /

View created.

SQL> grant select on all_xml_tab_cols to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym all_xml_tab_cols for all_xml_tab_cols;

Synonym created.

SQL> 
SQL> comment on table ALL_XML_TAB_COLS is
  2  'Description of the all XMLType tables that the user has privileges on'
  3  /

Comment created.

SQL> comment on column ALL_XML_TAB_COLS.OWNER is
  2  'Owner of the table '
  3  /

Comment created.

SQL> comment on column ALL_XML_TAB_COLS.TABLE_NAME is
  2  'Name of the table '
  3  /

Comment created.

SQL> comment on column ALL_XML_TAB_COLS.XMLSCHEMA is
  2  'Name of the XMLSchema that is used for the table definition'
  3  /

Comment created.

SQL> comment on column ALL_XML_TAB_COLS.SCHEMA_OWNER is
  2  'Name of the owner of the XMLSchema used for table definition'
  3  /

Comment created.

SQL> comment on column ALL_XML_TAB_COLS.ELEMENT_NAME is
  2  'Name XMLSChema element that is used for the table'
  3  /

Comment created.

SQL> comment on column ALL_XML_TAB_COLS.STORAGE_TYPE is
  2  'Type of storage option for the XMLtype data'
  3  /

Comment created.

SQL> comment on column ALL_XML_TAB_COLS.ANYSCHEMA is
  2  'If storage is BINARY, does this column allow ANYSCHEMA?'
  3  /

Comment created.

SQL> comment on column ALL_XML_TAB_COLS.NONSCHEMA is
  2  'If storage is BINARY, does this column allow NONSCHEMA?'
  3  /

Comment created.

SQL> 
SQL> create or replace force view USER_XML_TAB_COLS
  2   (TABLE_NAME, COLUMN_NAME, XMLSCHEMA, SCHEMA_OWNER, ELEMENT_NAME, STORAGE_TYPE,
  3    ANYSCHEMA, NONSCHEMA)
  4   as select o.name,
  5     decode(bitand(tc.property, 1), 1, attr.name, tc.name),null, null, null,
  6     case when bitand(opq.flags,69) = 1 then 'OBJECT-RELATIONAL'
  7          when bitand(opq.flags,69) = 68 then 'BINARY'
  8     else 'CLOB' end,
  9     case when bitand(opq.flags,69) = 68 then
 10         case when bitand(opq.flags,128) = 128 then 'YES' else 'NO' end
 11     else NULL end,
 12     case when bitand(opq.flags,69) = 68  then
 13         case when bitand(opq.flags,256) = 256 then 'NO' else 'YES' end
 14     else NULL end
 15  from  sys.opqtype$ opq,
 16        sys.tab$ t, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
 17        sys.attrcol$ attr
 18  where o.owner# = userenv('SCHEMAID')
 19    and o.obj# = t.obj#
 20    and t.obj# = tc.obj#
 21    and tc.obj# = ac.obj#
 22    and tc.intcol# = ac.intcol#
 23    and ac.toid = '00000000000000000000000000020100'
 24    and tc.intcol# =  opq.intcol#
 25    and tc.obj# =  opq.obj#
 26    and tc.obj#    = attr.obj#(+)
 27    and tc.intcol# = attr.intcol#(+)
 28    and tc.name != 'SYS_NC_ROWINFO$'
 29    and bitand(opq.flags,2) = 0
 30    union all
 31   select o.name,
 32     decode(bitand(tc.property, 1), 1, attr.name, tc.name),
 33     schm.xmldata.schema_url, schm.xmldata.schema_owner,
 34  decode(xel.xmldata.property.name, null,
 35          xel.xmldata.property.propref_name.name, xel.xmldata.property.name),
 36      case when bitand(opq.flags,69) = 1 then 'OBJECT-RELATIONAL'
 37           when bitand(opq.flags,69) = 68 then 'BINARY'
 38      else 'CLOB' end,
 39      case when bitand(opq.flags,69) = 68 then
 40          case when bitand(opq.flags,128) = 128 then 'YES' else 'NO' end
 41      else NULL end,
 42      case when bitand(opq.flags,69) = 68  then
 43          case when bitand(opq.flags,256) = 256 then 'NO' else 'YES' end
 44      else NULL end
 45   from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
 46        sys.tab$ t, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
 47        sys.attrcol$ attr
 48   where o.owner# = userenv('SCHEMAID')
 49    and o.obj# = t.obj#
 50    and t.obj# = tc.obj#
 51    and tc.obj# = ac.obj#
 52    and tc.intcol# = ac.intcol#
 53    and ac.toid = '00000000000000000000000000020100'
 54    and tc.intcol# =  opq.intcol#
 55    and tc.obj# =  opq.obj#
 56    and tc.obj#    = attr.obj#(+)
 57    and tc.intcol# = attr.intcol#(+)
 58    and bitand(opq.flags,2) = 2
 59    and opq.schemaoid =  schm.sys_nc_oid$
 60    and opq.elemnum =  xel.xmldata.property.prop_number
 61  /

View created.

SQL> grant select on user_xml_tab_cols to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym user_xml_tab_cols for user_xml_tab_cols;

Synonym created.

SQL> 
SQL> comment on table USER_XML_TAB_COLS is
  2  'Description of the user''s own XMLType tables'
  3  /

Comment created.

SQL> comment on column USER_XML_TAB_COLS.TABLE_NAME is
  2  'Name of the XMLType table'
  3  /

Comment created.

SQL> comment on column USER_XML_TAB_COLS.XMLSCHEMA is
  2  'Name of the XMLSchema that is used for the table definition'
  3  /

Comment created.

SQL> comment on column USER_XML_TAB_COLS.SCHEMA_OWNER is
  2  'Name of the owner of the XMLSchema used for table definition'
  3  /

Comment created.

SQL> comment on column USER_XML_TAB_COLS.ELEMENT_NAME is
  2  'Name XMLSChema element that is used for the table'
  3  /

Comment created.

SQL> comment on column USER_XML_TAB_COLS.STORAGE_TYPE is
  2  'Type of storage option for the XMLtype data'
  3  /

Comment created.

SQL> comment on column USER_XML_TAB_COLS.ANYSCHEMA is
  2  'If storage is BINARY, does this column allow ANYSCHEMA?'
  3  /

Comment created.

SQL> comment on column USER_XML_TAB_COLS.NONSCHEMA is
  2  'If storage is BINARY, does this column allow NONSCHEMA?'
  3  /

Comment created.

SQL> 
SQL> create or replace force view DBA_XML_VIEWS
  2   (OWNER, VIEW_NAME, XMLSCHEMA, SCHEMA_OWNER, ELEMENT_NAME)
  3   as
  4  select u.name, o.name, null, null, null
  5   from sys.opqtype$ opq, sys.view$ v, sys.user$ u, sys.obj$ o,
  6        sys.coltype$ ac, sys.col$ tc
  7   where o.owner# = u.user#
  8    and o.obj# = v.obj#
  9    and bitand(v.property, 1) = 1
 10    and v.obj# = tc.obj#
 11    and tc.name = 'SYS_NC_ROWINFO$'
 12    and tc.obj# = ac.obj#
 13    and tc.intcol# = ac.intcol#
 14    and ac.toid = '00000000000000000000000000020100'
 15    and tc.intcol# =  opq.intcol#
 16    and tc.obj# =  opq.obj#
 17    and bitand(opq.flags,2) = 0
 18   union all
 19    select u.name, o.name, schm.xmldata.schema_url, schm.xmldata.schema_owner,
 20  decode(xel.xmldata.property.name, null,
 21          xel.xmldata.property.propref_name.name, xel.xmldata.property.name)
 22  from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
 23        sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
 24  where o.owner# = u.user#
 25    and o.obj# = v.obj#
 26    and bitand(v.property, 1) = 1
 27    and v.obj# = tc.obj#
 28    and tc.name = 'SYS_NC_ROWINFO$'
 29    and tc.obj# = ac.obj#
 30    and tc.intcol# = ac.intcol#
 31    and ac.toid = '00000000000000000000000000020100'
 32    and tc.intcol# =  opq.intcol#
 33    and tc.obj# =  opq.obj#
 34    and bitand(opq.flags,2) = 2
 35    and opq.schemaoid =  schm.sys_nc_oid$
 36    and opq.elemnum =  xel.xmldata.property.prop_number
 37  /

View created.

SQL> grant select on dba_xml_views to select_catalog_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym dba_xml_views for dba_xml_views;

Synonym created.

SQL> 
SQL> comment on table DBA_XML_VIEWS is
  2  'Description of all XML views in the database'
  3  /

Comment created.

SQL> comment on column DBA_XML_VIEWS.OWNER is
  2  'Name of the owner of the XML view'
  3  /

Comment created.

SQL> comment on column DBA_XML_VIEWS.VIEW_NAME is
  2  'Name of the XML view'
  3  /

Comment created.

SQL> comment on column DBA_XML_VIEWS.XMLSCHEMA is
  2  'Name of the XMLSchema that is used for the view definition'
  3  /

Comment created.

SQL> comment on column DBA_XML_VIEWS.SCHEMA_OWNER is
  2  'Name of the owner of the XMLSchema used for table definition'
  3  /

Comment created.

SQL> comment on column DBA_XML_VIEWS.ELEMENT_NAME is
  2  'Name XMLSChema element that is used for the view'
  3  /

Comment created.

SQL> 
SQL> create or replace force view ALL_XML_VIEWS
  2   (OWNER, VIEW_NAME, XMLSCHEMA, SCHEMA_OWNER, ELEMENT_NAME)
  3   as
  4   select u.name, o.name, null, null, null
  5   from sys.opqtype$ opq,
  6        sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
  7   where o.owner# = u.user#
  8    and o.obj# = v.obj#
  9    and bitand(v.property, 1) = 1
 10    and v.obj# = tc.obj#
 11    and tc.name = 'SYS_NC_ROWINFO$'
 12    and tc.obj# = ac.obj#
 13    and tc.intcol# = ac.intcol#
 14    and ac.toid = '00000000000000000000000000020100'
 15    and tc.intcol# =  opq.intcol#
 16    and tc.obj# =  opq.obj#
 17    and bitand(opq.flags,2) = 0
 18    and (o.owner# = userenv('SCHEMAID')
 19         or o.obj# in
 20              (select oa.obj#
 21               from sys.objauth$ oa
 22               where grantee# in ( select kzsrorol
 23                                   from x$kzsro
 24                                 )
 25              )
 26         or /* user has system privileges */
 27           exists (select null from v$enabledprivs
 28                   where priv_number in (-45 /* LOCK ANY TABLE */,
 29                                         -47 /* SELECT ANY TABLE */,
 30                                         -48 /* INSERT ANY TABLE */,
 31                                         -49 /* UPDATE ANY TABLE */,
 32                                         -50 /* DELETE ANY TABLE */)
 33                   )
 34        )
 35   union all
 36   select u.name, o.name, schm.xmldata.schema_url, schm.xmldata.schema_owner,
 37     decode(xel.xmldata.property.name, null,
 38          xel.xmldata.property.propref_name.name, xel.xmldata.property.name)
 39   from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
 40        sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
 41   where o.owner# = u.user#
 42    and o.obj# = v.obj#
 43    and bitand(v.property, 1) = 1
 44    and v.obj# = tc.obj#
 45    and tc.name = 'SYS_NC_ROWINFO$'
 46    and tc.obj# = ac.obj#
 47    and tc.intcol# = ac.intcol#
 48    and ac.toid = '00000000000000000000000000020100'
 49    and tc.intcol# =  opq.intcol#
 50    and tc.obj# =  opq.obj#
 51    and opq.schemaoid =  schm.sys_nc_oid$
 52    and opq.elemnum =  xel.xmldata.property.prop_number
 53    and (o.owner# = userenv('SCHEMAID')
 54         or o.obj# in
 55              (select oa.obj#
 56               from sys.objauth$ oa
 57               where grantee# in ( select kzsrorol
 58                                   from x$kzsro
 59                                 )
 60              )
 61         or /* user has system privileges */
 62           exists (select null from v$enabledprivs
 63                   where priv_number in (-45 /* LOCK ANY TABLE */,
 64                                         -47 /* SELECT ANY TABLE */,
 65                                         -48 /* INSERT ANY TABLE */,
 66                                         -49 /* UPDATE ANY TABLE */,
 67                                         -50 /* DELETE ANY TABLE */)
 68                   )
 69        )
 70  /

View created.

SQL> grant select on all_xml_views to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym all_xml_views for all_xml_views;

Synonym created.

SQL> 
SQL> comment on table ALL_XML_VIEWS is
  2  'Description of the all XMLType views that the user has privileges on'
  3  /

Comment created.

SQL> comment on column ALL_XML_VIEWS.OWNER is
  2  'Owner of the view '
  3  /

Comment created.

SQL> comment on column ALL_XML_VIEWS.VIEW_NAME is
  2  'Name of the view '
  3  /

Comment created.

SQL> comment on column ALL_XML_VIEWS.XMLSCHEMA is
  2  'Name of the XMLSchema that is used for the view definition'
  3  /

Comment created.

SQL> comment on column ALL_XML_VIEWS.SCHEMA_OWNER is
  2  'Name of the owner of the XMLSchema used for table definition'
  3  /

Comment created.

SQL> comment on column ALL_XML_VIEWS.ELEMENT_NAME is
  2  'Name XMLSChema element that is used for the view'
  3  /

Comment created.

SQL> 
SQL> create or replace force view USER_XML_VIEWS
  2   (VIEW_NAME, XMLSCHEMA, SCHEMA_OWNER, ELEMENT_NAME)
  3   as
  4   select o.name, null, null, null
  5  from sys.opqtype$ opq,
  6        sys.view$ v, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
  7  where o.owner# = userenv('SCHEMAID')
  8    and o.obj# = v.obj#
  9    and bitand(v.property, 1) = 1
 10    and v.obj# = tc.obj#
 11    and tc.name = 'SYS_NC_ROWINFO$'
 12    and tc.obj# = ac.obj#
 13    and tc.intcol# = ac.intcol#
 14    and ac.toid = '00000000000000000000000000020100'
 15    and tc.intcol# =  opq.intcol#
 16    and tc.obj# =  opq.obj#
 17    and bitand(opq.flags,2) = 0
 18  union all
 19   select o.name, schm.xmldata.schema_url, schm.xmldata.schema_owner,
 20  decode(xel.xmldata.property.name, null,
 21          xel.xmldata.property.propref_name.name, xel.xmldata.property.name)
 22  from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
 23        sys.view$ v, sys.obj$ o, sys.coltype$ ac, sys.col$ tc
 24  where o.owner# = userenv('SCHEMAID')
 25    and o.obj# = v.obj#
 26    and bitand(v.property, 1) = 1
 27    and v.obj# = tc.obj#
 28    and tc.name = 'SYS_NC_ROWINFO$'
 29    and tc.obj# = ac.obj#
 30    and tc.intcol# = ac.intcol#
 31    and ac.toid = '00000000000000000000000000020100'
 32    and tc.intcol# =  opq.intcol#
 33    and tc.obj# =  opq.obj#
 34    and opq.schemaoid =  schm.sys_nc_oid$
 35    and opq.elemnum =  xel.xmldata.property.prop_number
 36  /

View created.

SQL> grant select on user_xml_views to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym user_xml_views for user_xml_views;

Synonym created.

SQL> 
SQL> comment on table USER_XML_VIEWS is
  2  'Description of the user''s own XMLType views'
  3  /

Comment created.

SQL> comment on column USER_XML_VIEWS.VIEW_NAME is
  2  'Name of the XMLType view'
  3  /

Comment created.

SQL> comment on column USER_XML_VIEWS.XMLSCHEMA is
  2  'Name of the XMLSchema that is used for the view definition'
  3  /

Comment created.

SQL> comment on column USER_XML_VIEWS.SCHEMA_OWNER is
  2  'Name of the owner of the XMLSchema used for table definition'
  3  /

Comment created.

SQL> comment on column USER_XML_VIEWS.ELEMENT_NAME is
  2  'Name XMLSChema element that is used for the view'
  3  /

Comment created.

SQL> create or replace force view DBA_XML_VIEW_COLS
  2   (OWNER, VIEW_NAME, COLUMN_NAME, XMLSCHEMA, SCHEMA_OWNER, ELEMENT_NAME)
  3   as
  4  select u.name, o.name,
  5     decode(bitand(tc.property, 1), 1, attr.name, tc.name),
  6     null, null, null
  7  from  sys.opqtype$ opq,
  8        sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
  9        sys.attrcol$ attr
 10  where o.owner# = u.user#
 11    and o.obj# = v.obj#
 12    and bitand(v.property, 1) = 1
 13    and v.obj# = tc.obj#
 14    and tc.obj# = ac.obj#
 15    and tc.intcol# = ac.intcol#
 16    and tc.obj#    = attr.obj#(+)
 17    and tc.intcol# = attr.intcol#(+)
 18    and ac.toid = '00000000000000000000000000020100'
 19    and tc.intcol# =  opq.intcol#
 20    and tc.obj# =  opq.obj#
 21    and bitand(opq.flags,2) = 0
 22  union all
 23  select u.name, o.name,
 24     decode(bitand(tc.property, 1), 1, attr.name, tc.name),
 25     schm.xmldata.schema_url, schm.xmldata.schema_owner,
 26  decode(xel.xmldata.property.name, null,
 27          xel.xmldata.property.propref_name.name, xel.xmldata.property.name)
 28  from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
 29        sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
 30        sys.attrcol$ attr
 31  where o.owner# = u.user#
 32    and o.obj# = v.obj#
 33    and bitand(v.property, 1) = 1
 34    and v.obj# = tc.obj#
 35    and tc.obj# = ac.obj#
 36    and tc.intcol# = ac.intcol#
 37    and tc.obj#    = attr.obj#(+)
 38    and tc.intcol# = attr.intcol#(+)
 39    and ac.toid = '00000000000000000000000000020100'
 40    and tc.intcol# =  opq.intcol#
 41    and tc.obj# =  opq.obj#
 42    and opq.schemaoid =  schm.sys_nc_oid$
 43    and opq.elemnum =  xel.xmldata.property.prop_number
 44  /

View created.

SQL> grant select on dba_xml_view_cols to select_catalog_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym dba_xml_view_cols for dba_xml_view_cols;

Synonym created.

SQL> 
SQL> comment on table DBA_XML_VIEW_COLS is
  2  'Description of all XML views in the database'
  3  /

Comment created.

SQL> comment on column DBA_XML_VIEW_COLS.OWNER is
  2  'Name of the owner of the XML view'
  3  /

Comment created.

SQL> comment on column DBA_XML_VIEW_COLS.VIEW_NAME is
  2  'Name of the XML view'
  3  /

Comment created.

SQL> comment on column DBA_XML_VIEW_COLS.COLUMN_NAME is
  2  'Name of the XML view column'
  3  /

Comment created.

SQL> comment on column DBA_XML_VIEW_COLS.XMLSCHEMA is
  2  'Name of the XMLSchema that is used for the view definition'
  3  /

Comment created.

SQL> comment on column DBA_XML_VIEW_COLS.SCHEMA_OWNER is
  2  'Name of the owner of the XMLSchema used for table definition'
  3  /

Comment created.

SQL> comment on column DBA_XML_VIEW_COLS.ELEMENT_NAME is
  2  'Name XMLSChema element that is used for the view'
  3  /

Comment created.

SQL> 
SQL> create or replace force view ALL_XML_VIEW_COLS
  2   (OWNER, VIEW_NAME, COLUMN_NAME, XMLSCHEMA, SCHEMA_OWNER, ELEMENT_NAME)
  3   as
  4   select u.name, o.name,
  5    decode(bitand(tc.property, 1), 1, attr.name, tc.name),
  6    null, null, null
  7  from sys.opqtype$ opq,
  8        sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
  9        sys.attrcol$ attr
 10  where o.owner# = u.user#
 11    and o.obj# = v.obj#
 12    and bitand(v.property, 1) = 1
 13    and v.obj# = tc.obj#
 14    and tc.obj# = ac.obj#
 15    and tc.intcol# = ac.intcol#
 16    and ac.toid = '00000000000000000000000000020100'
 17    and tc.intcol# = opq.intcol#
 18    and tc.obj# =  opq.obj#
 19    and tc.obj#    = attr.obj#(+)
 20    and tc.intcol# = attr.intcol#(+)
 21    and bitand(opq.flags,2) = 0
 22    and (o.owner# = userenv('SCHEMAID')
 23         or o.obj# in
 24              (select oa.obj#
 25               from sys.objauth$ oa
 26               where grantee# in ( select kzsrorol
 27                                   from x$kzsro
 28                                 )
 29              )
 30         or /* user has system privileges */
 31           exists (select null from v$enabledprivs
 32                   where priv_number in (-45 /* LOCK ANY VIEWLE */,
 33                                         -47 /* SELECT ANY VIEWLE */,
 34                                         -48 /* INSERT ANY VIEWLE */,
 35                                         -49 /* UPDATE ANY VIEWLE */,
 36                                         -50 /* DELETE ANY VIEWLE */)
 37                   )
 38        )
 39  union all
 40  select u.name, o.name,
 41    decode(bitand(tc.property, 1), 1, attr.name, tc.name),
 42    schm.xmldata.schema_url, schm.xmldata.schema_owner,
 43  decode(xel.xmldata.property.name, null,
 44          xel.xmldata.property.propref_name.name, xel.xmldata.property.name)
 45  from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
 46        sys.view$ v, sys.user$ u, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
 47        sys.attrcol$ attr
 48  where o.owner# = u.user#
 49    and o.obj# = v.obj#
 50    and bitand(v.property, 1) = 1
 51    and v.obj# = tc.obj#
 52    and tc.obj# = ac.obj#
 53    and tc.intcol# = ac.intcol#
 54    and ac.toid = '00000000000000000000000000020100'
 55    and tc.intcol# = opq.intcol#
 56    and tc.obj# =  opq.obj#
 57    and tc.obj#    = attr.obj#(+)
 58    and tc.intcol# = attr.intcol#(+)
 59    and opq.schemaoid =  schm.sys_nc_oid$
 60    and opq.elemnum =  xel.xmldata.property.prop_number
 61    and (o.owner# = userenv('SCHEMAID')
 62         or o.obj# in
 63              (select oa.obj#
 64               from sys.objauth$ oa
 65               where grantee# in ( select kzsrorol
 66                                   from x$kzsro
 67                                 )
 68              )
 69         or /* user has system privileges */
 70           exists (select null from v$enabledprivs
 71                   where priv_number in (-45 /* LOCK ANY VIEWLE */,
 72                                         -47 /* SELECT ANY VIEWLE */,
 73                                         -48 /* INSERT ANY VIEWLE */,
 74                                         -49 /* UPDATE ANY VIEWLE */,
 75                                         -50 /* DELETE ANY VIEWLE */)
 76                   )
 77        )
 78  /

View created.

SQL> grant select on all_xml_view_cols to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym all_xml_view_cols for all_xml_view_cols;

Synonym created.

SQL> 
SQL> comment on table ALL_XML_VIEW_COLS is
  2  'Description of the all XMLType views that the user has privileges on'
  3  /

Comment created.

SQL> comment on column ALL_XML_VIEW_COLS.OWNER is
  2  'Owner of the view '
  3  /

Comment created.

SQL> comment on column ALL_XML_VIEW_COLS.VIEW_NAME is
  2  'Name of the view '
  3  /

Comment created.

SQL> comment on column ALL_XML_VIEW_COLS.XMLSCHEMA is
  2  'Name of the XMLSchema that is used for the view definition'
  3  /

Comment created.

SQL> comment on column ALL_XML_VIEW_COLS.SCHEMA_OWNER is
  2  'Name of the owner of the XMLSchema used for table definition'
  3  /

Comment created.

SQL> comment on column ALL_XML_VIEW_COLS.ELEMENT_NAME is
  2  'Name XMLSChema element that is used for the view'
  3  /

Comment created.

SQL> 
SQL> create or replace force view USER_XML_VIEW_COLS
  2   (VIEW_NAME, COLUMN_NAME, XMLSCHEMA, SCHEMA_OWNER, ELEMENT_NAME)
  3   as
  4  select o.name,
  5     decode(bitand(tc.property, 1), 1, attr.name, tc.name),
  6     null, null, null
  7  from  sys.opqtype$ opq,
  8        sys.view$ v, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
  9        sys.attrcol$ attr
 10  where o.owner# = userenv('SCHEMAID')
 11    and o.obj# = v.obj#
 12    and bitand(v.property, 1) = 1
 13    and v.obj# = tc.obj#
 14    and tc.obj# = ac.obj#
 15    and tc.intcol# = ac.intcol#
 16    and ac.toid = '00000000000000000000000000020100'
 17    and tc.intcol# =  opq.intcol#
 18    and tc.obj# =  opq.obj#
 19    and tc.obj#    = attr.obj#(+)
 20    and tc.intcol# = attr.intcol#(+)
 21    and bitand(opq.flags,2) = 0
 22  union all
 23  select o.name,
 24     decode(bitand(tc.property, 1), 1, attr.name, tc.name),
 25     schm.xmldata.schema_url, schm.xmldata.schema_owner,
 26  decode(xel.xmldata.property.name, null,
 27          xel.xmldata.property.propref_name.name, xel.xmldata.property.name)
 28  from xdb.xdb$element xel, xdb.xdb$schema schm, sys.opqtype$ opq,
 29        sys.view$ v, sys.obj$ o, sys.coltype$ ac, sys.col$ tc,
 30        sys.attrcol$ attr
 31  where o.owner# = userenv('SCHEMAID')
 32    and o.obj# = v.obj#
 33    and bitand(v.property, 1) = 1
 34    and v.obj# = tc.obj#
 35    and tc.obj# = ac.obj#
 36    and tc.intcol# = ac.intcol#
 37    and ac.toid = '00000000000000000000000000020100'
 38    and tc.intcol# =  opq.intcol#
 39    and tc.obj# =  opq.obj#
 40    and tc.obj#    = attr.obj#(+)
 41    and tc.intcol# = attr.intcol#(+)
 42    and opq.schemaoid =  schm.sys_nc_oid$
 43    and opq.elemnum =  xel.xmldata.property.prop_number
 44  /

View created.

SQL> grant select on user_xml_view_cols to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym user_xml_view_cols for user_xml_view_cols;

Synonym created.

SQL> 
SQL> comment on table USER_XML_VIEW_COLS is
  2  'Description of the user''s own XMLType views'
  3  /

Comment created.

SQL> comment on column USER_XML_VIEW_COLS.VIEW_NAME is
  2  'Name of the XMLType view'
  3  /

Comment created.

SQL> comment on column USER_XML_VIEW_COLS.XMLSCHEMA is
  2  'Name of the XMLSchema that is used for the view definition'
  3  /

Comment created.

SQL> comment on column USER_XML_VIEW_COLS.SCHEMA_OWNER is
  2  'Name of the owner of the XMLSchema used for table definition'
  3  /

Comment created.

SQL> comment on column USER_XML_VIEW_COLS.ELEMENT_NAME is
  2  'Name XMLSChema element that is used for the view'
  3  /

Comment created.

SQL> 
SQL> Rem DBA_XML_SCHEMAS
SQL> Rem This view presents a listing of all XML Schemas registered
SQL> Rem in the system.
SQL> 
SQL> create or replace force view DBA_XML_SCHEMAS
  2   (OWNER, SCHEMA_URL, LOCAL, SCHEMA, INT_OBJNAME, QUAL_SCHEMA_URL, HIER_TYPE, BINARY, SCHEMA_ID, HIDDEN)
  3   as select s.xmldata.schema_owner, s.xmldata.schema_url,
  4            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
  5                 then 'NO' else 'YES' end,
  6            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16384) = 16384
  7                 then xdb.dbms_csx_int.GetCSXSchema(xmltype(value(s).getclobval())) else value(s) end,
  8            xdb.dbms_xmlschema_int.xdb$Oid2IntName(s.object_id),
  9            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
 10                 then s.xmldata.schema_url
 11                 else 'http://xmlns.oracle.com/xdb/schemas/' ||
 12                      s.xmldata.schema_owner || '/' ||
 13                      case when substr(s.xmldata.schema_url, 1, 7) = 'http://'
 14                           then substr(s.xmldata.schema_url, 8)
 15                           else s.xmldata.schema_url
 16                      end
 17            end,
 18            case when bitand(to_number(s.xmldata.flags, 'xxxxxxxx'), 128) = 128
 19                 then 'NONE'
 20                 else case when
 21                      bitand(to_number(s.xmldata.flags, 'xxxxxxxx'), 64) = 64
 22                      then  'RESMETADATA'
 23                      else  'CONTENTS'
 24                      end
 25            end,
 26            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16384) = 16384
 27                then 'YES' else 'NO' end,
 28            s.sys_nc_oid$,
 29            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 32768) = 32768
 30                then 'YES' else 'NO' end
 31      from xdb.xdb$schema s
 32  /

View created.

SQL> grant select on dba_xml_schemas to select_catalog_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym dba_xml_schemas for dba_xml_schemas;

Synonym created.

SQL> 
SQL> comment on table DBA_XML_SCHEMAS is
  2  'Description of all the XML Schemas registered'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMAS.OWNER is
  2  'Owner of the XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMAS.SCHEMA_URL is
  2  'Schema URL of the XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMAS.LOCAL is
  2  'Is this XML Schema local or global'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMAS.SCHEMA is
  2  'The XML Schema document'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMAS.INT_OBJNAME is
  2  'The internal database object name for the schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMAS.QUAL_SCHEMA_URL is
  2  'The fully qualified schema URL'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMAS.HIER_TYPE is
  2  'The type of hierarchy for which the schema is enabled'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMAS.BINARY is
  2  'Is this XML Schema registered for binary encoding usage?'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMAS.SCHEMA_ID is
  2  '16 byte opaque schema identifier'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMAS.HIDDEN is
  2  'Has this XML Schema been deleted in hidden mode?'
  3  /

Comment created.

SQL> 
SQL> Rem NOTE: Make sure that ALL_XML_SCHEMAS AND ALL_XML_SCHEMAS2
SQL> Rem are kept in sync with catxdbdv.sql
SQL> 
SQL> Rem ALL_XML_SCHEMAS
SQL> Rem Lists all schemas that user has permission to see. This should
SQL> Rem be the ones owned by the user plus the global ones. Note that we
SQL> Rem do not have the concept of "schema/user" qualified names so we
SQL> Rem don't need to include schemas owned by others that this user
SQL> Rem has permission to read (because anyway they can't be used)
SQL> 
SQL> create or replace force view ALL_XML_SCHEMAS
  2   (OWNER, SCHEMA_URL, LOCAL, SCHEMA, INT_OBJNAME, QUAL_SCHEMA_URL, HIER_TYPE, BINARY, SCHEMA_ID, HIDDEN)
  3   as select u.name, s.xmldata.schema_url,
  4            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
  5                 then 'NO' else 'YES' end,
  6            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16384) = 16384
  7                 then xdb.dbms_csx_int.GetCSXSchema(xmltype(value(s).getclobval())) else value(s) end,
  8            xdb.dbms_xmlschema_int.xdb$Oid2IntName(s.object_id),
  9            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
 10                 then s.xmldata.schema_url
 11                 else 'http://xmlns.oracle.com/xdb/schemas/' ||
 12                      s.xmldata.schema_owner || '/' ||
 13                      case when substr(s.xmldata.schema_url, 1, 7) = 'http://'
 14                           then substr(s.xmldata.schema_url, 8)
 15                           else s.xmldata.schema_url
 16                      end
 17            end,
 18            case when bitand(to_number(s.xmldata.flags, 'xxxxxxxx'), 128) = 128
 19                 then 'NONE'
 20                 else case when
 21                      bitand(to_number(s.xmldata.flags, 'xxxxxxxx'), 64) = 64
 22                      then  'RESMETADATA'
 23                      else  'CONTENTS'
 24                      end
 25            end,
 26            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16384) = 16384
 27                then 'YES' else 'NO' end,
 28            s.sys_nc_oid$,
 29            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 32768) = 32768
 30                then 'YES' else 'NO' end
 31      from user$ u, xdb.xdb$schema s
 32      where u.user# = userenv('SCHEMAID')
 33      and   u.name  = s.xmldata.schema_owner
 34      union all
 35      select s.xmldata.schema_owner, s.xmldata.schema_url, 'NO', value(s),
 36            xdb.dbms_xmlschema_int.xdb$Oid2IntName(s.object_id),
 37            s.xmldata.schema_url,
 38            case when bitand(to_number(s.xmldata.flags, 'xxxxxxxx'), 128) = 128
 39                 then 'NONE'
 40                 else case when
 41                      bitand(to_number(s.xmldata.flags, 'xxxxxxxx'), 64) = 64
 42                      then  'RESMETADATA'
 43                      else  'CONTENTS'
 44                      end
 45            end,
 46            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16384) = 16384
 47                then 'YES' else 'NO' end,
 48            s.sys_nc_oid$,
 49            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 32768) = 32768
 50                then 'YES' else 'NO' end
 51      from xdb.xdb$schema s
 52      where bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
 53      and s.xmldata.schema_url
 54         not in (select s2.xmldata.schema_url
 55                 from xdb.xdb$schema s2, user$ u2
 56                 where u2.user# = userenv('SCHEMAID')
 57                 and   u2.name  = s.xmldata.schema_owner)
 58  /

View created.

SQL> grant select on all_xml_schemas to public with grant option;

Grant succeeded.

SQL> 
SQL> create or replace public synonym all_xml_schemas for all_xml_schemas;

Synonym created.

SQL> 
SQL> comment on table ALL_XML_SCHEMAS is
  2  'Description of all XML Schemas that user has privilege to reference'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS.OWNER is
  2  'Owner of the XML Schema'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS.SCHEMA_URL is
  2  'Schema URL of the XML Schema'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS.LOCAL is
  2  'Is this XML Schema local or global'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS.SCHEMA is
  2  'The XML Schema document'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS.INT_OBJNAME is
  2  'The internal database object name for the schema'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS.QUAL_SCHEMA_URL is
  2  'The fully qualified schema URL'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS.HIER_TYPE is
  2  'The type of hierarchy for which the schema is enabled'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS.BINARY is
  2  'Is this XML Schema registered for binary encoding usage?'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS.SCHEMA_ID is
  2  '16 byte opaque schema identifier'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS.HIDDEN is
  2  'Has this XML Schema been deleted in hidden mode?'
  3  /

Comment created.

SQL> 
SQL> Rem ALL_XML_SCHEMAS2
SQL> Rem Since XMLTYPE may not be present at the stage when catalog.sql runs
SQL> Rem this file, we need a version of ALL_XML_SCHEMAS that ALL_OBJECTS
SQL> Rem can depend on that doesn't include XMLTYPE.  This way, ALL_OBJECTS
SQL> Rem won't be invalidated when we redefine the real ALL_XML_SCHEMAS from
SQL> Rem dbmsxmlt.sql.
SQL> 
SQL> create or replace force view ALL_XML_SCHEMAS2
  2   (OWNER, SCHEMA_URL, LOCAL, INT_OBJNAME, QUAL_SCHEMA_URL)
  3   as select u.name, s.xmldata.schema_url,
  4            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
  5                 then 'NO' else 'YES' end,
  6            xdb.dbms_xmlschema_int.xdb$Oid2IntName(s.object_id),
  7            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
  8                 then s.xmldata.schema_url
  9                 else 'http://xmlns.oracle.com/xdb/schemas/' ||
 10                      s.xmldata.schema_owner || '/' ||
 11                      case when substr(s.xmldata.schema_url, 1, 7) = 'http://'
 12                           then substr(s.xmldata.schema_url, 8)
 13                           else s.xmldata.schema_url
 14                      end
 15            end
 16      from user$ u, xdb.xdb$schema s
 17      where u.user# = userenv('SCHEMAID')
 18      and   u.name  = s.xmldata.schema_owner
 19      union all
 20      select s.xmldata.schema_owner, s.xmldata.schema_url, 'NO',
 21            xdb.dbms_xmlschema_int.xdb$Oid2IntName(s.object_id),
 22            s.xmldata.schema_url
 23      from xdb.xdb$schema s
 24      where bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
 25      and s.xmldata.schema_url
 26         not in (select s2.xmldata.schema_url
 27                 from xdb.xdb$schema s2, user$ u2
 28                 where u2.user# = userenv('SCHEMAID')
 29                 and   u2.name  = s.xmldata.schema_owner)
 30  /

View created.

SQL> grant select on all_xml_schemas2 to public with grant option;

Grant succeeded.

SQL> 
SQL> create or replace public synonym all_xml_schemas2 for all_xml_schemas2;

Synonym created.

SQL> 
SQL> comment on table ALL_XML_SCHEMAS2 is
  2  'Dummy version of ALL_XML_SCHEMAS that does not have an XMLTYPE column'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS2.OWNER is
  2  'Owner of the XML Schema'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS2.SCHEMA_URL is
  2  'Schema URL of the XML Schema'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS2.LOCAL is
  2  'Is this XML Schema local or global'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS2.INT_OBJNAME is
  2  'The internal database object name for the schema'
  3  /

Comment created.

SQL> comment on column ALL_XML_SCHEMAS2.QUAL_SCHEMA_URL is
  2  'The fully qualified schema URL'
  3  /

Comment created.

SQL> 
SQL> Rem ALL_OBJECTS depends on xml_schema_name_present. Recreate the package
SQL> Rem body, nothing will get invalidated
SQL> 
SQL> create or replace package body xml_schema_name_present as
  2  
  3  function is_schema_present(objname in varchar2,
  4                             userno  in number) return number as
  5  
  6    sel_stmt        VARCHAR2(4000);
  7    tmp_num         NUMBER;
  8  
  9  BEGIN
 10  
 11      sel_stmt := ' select count(*) ' ||
 12      ' from user$ u, xdb.xdb$schema s ' ||
 13      ' where u.user# = :1 ' ||
 14      ' and   u.name  = s.xmldata.schema_owner ' ||
 15      ' and  (xdb.dbms_xmlschema_int.xdb$Oid2IntName(s.object_id) = :2)';
 16  
 17      EXECUTE IMMEDIATE sel_stmt INTO tmp_num USING userno, objname;
 18  
 19      /* schema found */
 20      IF (tmp_num > 0) THEN
 21        RETURN 1;
 22      END IF;
 23  
 24      sel_stmt := ' select count(*) '||
 25      ' from xdb.xdb$schema s ' ||
 26      ' where bitand(to_number(s.xmldata.flags, ''xxxxxxxx''), 16) = 16 ' ||
 27      ' and xdb.dbms_xmlschema_int.xdb$Oid2IntName(s.object_id)  = :1 ' ||
 28      ' and s.xmldata.schema_url ' ||
 29      '   not in (select s2.xmldata.schema_url ' ||
 30      '          from xdb.xdb$schema s2, user$ u2 ' ||
 31      '          where u2.user# = :2 ' ||
 32      '          and   u2.name  = s.xmldata.schema_owner) ';
 33  
 34      EXECUTE IMMEDIATE sel_stmt INTO tmp_num USING objname, userno;
 35  
 36      /* schema found */
 37      IF (tmp_num > 0) THEN
 38        RETURN 1;
 39      END IF;
 40  
 41      RETURN 0;
 42  END;
 43  
 44  end xml_schema_name_present;
 45  /

Package body created.

SQL> 
SQL> Rem USER_XML_SCHEMAS
SQL> Rem List of all XML Schemas owned by the current user
SQL> create or replace force view USER_XML_SCHEMAS
  2   (SCHEMA_URL, LOCAL, SCHEMA, INT_OBJNAME, QUAL_SCHEMA_URL, HIER_TYPE, BINARY, SCHEMA_ID, HIDDEN)
  3   as select s.xmldata.schema_url,
  4            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
  5                 then 'NO' else 'YES' end,
  6            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16384) = 16384
  7                 then xdb.dbms_csx_int.GetCSXSchema(xmltype(value(s).getclobval())) else value(s) end,
  8            xdb.dbms_xmlschema_int.xdb$Oid2IntName(s.object_id),
  9            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16) = 16
 10                 then s.xmldata.schema_url
 11                 else 'http://xmlns.oracle.com/xdb/schemas/' ||
 12                      s.xmldata.schema_owner || '/' ||
 13                      case when substr(s.xmldata.schema_url, 1, 7) = 'http://'
 14                           then substr(s.xmldata.schema_url, 8)
 15                           else s.xmldata.schema_url
 16                      end
 17            end,
 18            case when bitand(to_number(s.xmldata.flags, 'xxxxxxxx'), 128) = 128
 19                 then 'NONE'
 20                 else case when
 21                      bitand(to_number(s.xmldata.flags, 'xxxxxxxx'), 64) = 64
 22                      then  'RESMETADATA'
 23                      else  'CONTENTS'
 24                      end
 25            end,
 26            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 16384) = 16384
 27                then 'YES' else 'NO' end,
 28            s.sys_nc_oid$,
 29            case when bitand(to_number(s.xmldata.flags,'xxxxxxxx'), 32768) = 32768
 30                then 'YES' else 'NO' end
 31      from user$ u, xdb.xdb$schema s
 32      where u.name = s.xmldata.schema_owner
 33      and u.user# = userenv('SCHEMAID')
 34  /

View created.

SQL> grant select on user_xml_schemas to public with grant option;

Grant succeeded.

SQL> 
SQL> create or replace public synonym user_xml_schemas for user_xml_schemas;

Synonym created.

SQL> 
SQL> comment on table USER_XML_SCHEMAS is
  2  'Description of XML Schemas registered by the user'
  3  /

Comment created.

SQL> comment on column USER_XML_SCHEMAS.SCHEMA_URL is
  2  'Schema URL of the XML Schema'
  3  /

Comment created.

SQL> comment on column USER_XML_SCHEMAS.LOCAL is
  2  'Is this XML Schema local or global'
  3  /

Comment created.

SQL> comment on column USER_XML_SCHEMAS.SCHEMA is
  2  'The XML Schema document'
  3  /

Comment created.

SQL> comment on column USER_XML_SCHEMAS.INT_OBJNAME is
  2  'The internal database object name for the schema'
  3  /

Comment created.

SQL> comment on column USER_XML_SCHEMAS.QUAL_SCHEMA_URL is
  2  'The fully qualified schema URL'
  3  /

Comment created.

SQL> comment on column USER_XML_SCHEMAS.HIER_TYPE is
  2  'The type of hierarchy for which the schema is enabled'
  3  /

Comment created.

SQL> comment on column USER_XML_SCHEMAS.BINARY is
  2  'Is this XML Schema registered for binary encoding usage?'
  3  /

Comment created.

SQL> comment on column USER_XML_SCHEMAS.SCHEMA_ID is
  2  '16 byte opaque schema identifier'
  3  /

Comment created.

SQL> comment on column USER_XML_SCHEMAS.HIDDEN is
  2  'Has this XML Schema been deleted in hidden mode?'
  3  /

Comment created.

SQL> 
SQL> create or replace force view DBA_XML_INDEXES
  2   (INDEX_OWNER, INDEX_NAME, TABLE_OWNER, TABLE_NAME, TYPE, INDEX_TYPE, PATH_TABLE_NAME,
  3    PARAMETERS, ASYNC, STALE, PEND_TABLE_NAME,EX_or_INCLUDE)
  4   as select
  5     u.name         INDEX_OWNER,
  6     oi.name        INDEX_NAME,
  7     bu.name        TABLE_OWNER,
  8     bo.name        TABLE_NAME,
  9     case when bitand(p.flags, 536870912)=536870912 then 'REPOSITORY'
 10          when bitand(p.flags, 4096)=4096 then 'BINARY'
 11          when bitand(p.flags, 8192)=8192 then 'CLOB in OR'
 12          when bitand(p.flags, 16384)=16384 then 'CLOB'
 13          else '????' end TYPE,
 14     case when bitand(p.flags , 268435456 ) != 268435456 then 'STRUCTURED'
 15          when bitand(p.flags, 268435456 ) = 268435456 and exists (select xt.idxobj# from xdb.xdb$xtab xt where xt.idxobj# = p.idxobj#) then 'STRUCTURED and UNSTRUCTURED'
 16          else 'UNSTRUCTURED' end INDEX_TYPE,
 17     case when bitand(p.flags,  268435456 ) != 268435456 then ''
 18          else     ot.name  end PATH_TABLE_NAME,
 19     p.parameters   PARAMETERS,
 20     case when bitand(p.flags, 65011712)=6291456 then 'ON-COMMIT'
 21          when bitand(p.flags, 65011712)=10485760 then 'MANUAL'
 22          when bitand(p.flags, 65011712)=18874368 then 'EVERY'
 23          else 'ALWAYS' end ASYNC,
 24     case when bitand(p.flags, 2097152)=2097152 then 'TRUE'
 25          else 'FALSE' end STALE,
 26     case when bitand(p.flags, 2097152)=2097152 then
 27          (select op.name from sys.obj$ op
 28           where  op.obj# = p.pendtabobj#)
 29          else '' end PEND_TABLE_NAME,
 30     case when bitand(p.flags, 32)=32 then 'INCLUDE'
 31          when bitand(p.flags, 128)=128 then 'EXCLUDE'
 32          else 'FULLY IX' end EX_or_INCLUDE
 33    from xdb.xdb$dxptab p, sys.obj$ ot, sys.obj$ oi, sys.user$ u,
 34       sys.obj$ bo, sys.user$ bu, sys.ind$ i
 35  where oi.owner# = u.user# and
 36         oi.obj# = p.idxobj# and p.pathtabobj# = ot.obj# and
 37         i.obj# = oi.obj# and i.bo# = bo.obj# and bo.owner# = bu.user#
 38  /

View created.

SQL> show errors;
No errors.
SQL> grant select on dba_xml_indexes to select_catalog_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym dba_xml_indexes for dba_xml_indexes;

Synonym created.

SQL> 
SQL> comment on table DBA_XML_INDEXES is
  2  'Description of all XML indexes in the database'
  3  /

Comment created.

SQL> comment on column DBA_XML_INDEXES.INDEX_OWNER is
  2  'Username of the owner of the XML index'
  3  /

Comment created.

SQL> comment on column DBA_XML_INDEXES.INDEX_NAME is
  2  'Name of the XML index'
  3  /

Comment created.

SQL> comment on column DBA_XML_INDEXES.TABLE_OWNER is
  2  'Username of the owner of the indexed object'
  3  /

Comment created.

SQL> comment on column DBA_XML_INDEXES.TABLE_NAME is
  2  'Name of the indexed object'
  3  /

Comment created.

SQL> comment on column DBA_XML_INDEXES.PATH_TABLE_NAME is
  2  'Name of the PATH TABLE'
  3  /

Comment created.

SQL> comment on column DBA_XML_INDEXES.PARAMETERS is
  2  'Structured index groups, path subsetting xpaths and scheduler job information'
  3  /

Comment created.

SQL> comment on column DBA_XML_INDEXES.ASYNC is
  2  'Asynchronous index type'
  3  /

Comment created.

SQL> comment on column DBA_XML_INDEXES.STALE is
  2  'Stale index type'
  3  /

Comment created.

SQL> comment on column DBA_XML_INDEXES.PEND_TABLE_NAME is
  2  'Name of the PENDING TABLE'
  3  /

Comment created.

SQL> comment on column DBA_XML_INDEXES.TYPE is
  2  'Type of indexed column (CLOB, CSX, CLOB_IN_OR, REPOSITORY)'
  3  /

Comment created.

SQL> comment on column DBA_XML_INDEXES.EX_or_INCLUDE is
  2  'Path Subsetting (Include or Exclude)'
  3  /

Comment created.

SQL> comment on column DBA_XML_INDEXES.INDEX_TYPE is
  2  'Index Type (Structured, Unstructured or both)'
  3  /

Comment created.

SQL> create or replace force view ALL_XML_INDEXES
  2   (INDEX_OWNER, INDEX_NAME, TABLE_OWNER, TABLE_NAME, TYPE, INDEX_TYPE,
  3    PATH_TABLE_NAME,PARAMETERS, ASYNC, STALE, PEND_TABLE_NAME, EX_or_INCLUDE)
  4   as select
  5     u.name         INDEX_OWNER,
  6     oi.name        INDEX_NAME,
  7     bu.name        TABLE_OWNER,
  8     bo.name        TABLE_NAME,
  9     case when bitand(p.flags, 536870912)=536870912 then 'REPOSITORY'
 10          when bitand(p.flags, 4096)=4096 then 'BINARY'
 11          when bitand(p.flags, 8192)=8192 then 'CLOB in OR'
 12          when bitand(p.flags, 16384)=16384 then 'CLOB'
 13          else '????' end TYPE,
 14     case when bitand(p.flags , 268435456 ) != 268435456 then 'STRUCTURED'
 15          when bitand(p.flags, 268435456 ) = 268435456 and exists (select xt.idxobj# from xdb.xdb$xtab xt where xt.idxobj# = p.idxobj#) then 'STRUCTURED and UNSTRUCTURED'
 16          else 'UNSTRUCTURED' end INDEX_TYPE,
 17     case when bitand(p.flags,  268435456 ) != 268435456 then ''
 18          else     ot.name  end PATH_TABLE_NAME,
 19     p.parameters   PARAMETERS,
 20     case when bitand(p.flags, 65011712)=6291456 then 'ON-COMMIT'
 21          when bitand(p.flags, 65011712)=10485760 then 'MANUAL'
 22          when bitand(p.flags, 65011712)=18874368 then 'EVERY'
 23          else 'ALWAYS' end ASYNC,
 24     case when bitand(p.flags, 2097152)=2097152 then 'TRUE'
 25          else 'FALSE' end STALE,
 26     case when bitand(p.flags, 2097152)=2097152 then
 27          (select op.name from sys.obj$ op
 28           where  op.obj# = p.pendtabobj#)
 29          else '' end PEND_TABLE_NAME,
 30     case when bitand(p.flags, 32)=32 then 'INCLUDE'
 31          when bitand(p.flags, 128)=128 then 'EXCLUDE'
 32          else 'FULLY IX' end EX_or_INCLUDE
 33   from xdb.xdb$dxptab p, sys.obj$ ot, sys.obj$ oi, sys.user$ u,
 34        sys.user$ bu, sys.obj$ bo, sys.ind$ i
 35   where oi.owner# = u.user# and
 36         oi.obj# = p.idxobj# and p.pathtabobj# = ot.obj# and
 37         i.obj# = oi.obj# and i.bo# = bo.obj# and bo.owner# = bu.user# and
 38         (u.user# = userenv('SCHEMAID')
 39          or oi.obj# in
 40              (select oa.obj#
 41               from sys.objauth$ oa
 42               where grantee# in ( select kzsrorol
 43                                   from x$kzsro
 44                                 )
 45              )
 46         or /* user has system privileges */
 47           exists (select null from v$enabledprivs
 48                   where priv_number in (-45 /* LOCK ANY TABLE */,
 49                                         -47 /* SELECT ANY TABLE */,
 50                                         -48 /* INSERT ANY TABLE */,
 51                                         -49 /* UPDATE ANY TABLE */,
 52                                         -50 /* DELETE ANY TABLE */)))
 53  /

View created.

SQL> show errors;
No errors.
SQL> grant select on all_xml_indexes to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym all_xml_indexes for all_xml_indexes;

Synonym created.

SQL> 
SQL> comment on table ALL_XML_INDEXES is
  2  'Description of the all XMLType indexes that the user has privileges on'
  3  /

Comment created.

SQL> comment on column ALL_XML_INDEXES.INDEX_OWNER is
  2  'Username of the owner of the XML index'
  3  /

Comment created.

SQL> comment on column ALL_XML_INDEXES.INDEX_NAME is
  2  'Name of the XML index'
  3  /

Comment created.

SQL> comment on column ALL_XML_INDEXES.TABLE_OWNER is
  2  'Username of the owner of the indexed object'
  3  /

Comment created.

SQL> comment on column ALL_XML_INDEXES.TABLE_NAME is
  2  'Name of the indexed object'
  3  /

Comment created.

SQL> comment on column ALL_XML_INDEXES.PATH_TABLE_NAME is
  2  'Name of the PATH TABLE'
  3  /

Comment created.

SQL> comment on column ALL_XML_INDEXES.PARAMETERS is
  2  'Structured index groups, path subsetting xpaths and scheduler job information'
  3  /

Comment created.

SQL> comment on column ALL_XML_INDEXES.ASYNC is
  2  'Asynchronous index type'
  3  /

Comment created.

SQL> comment on column ALL_XML_INDEXES.STALE is
  2  'Stale index type'
  3  /

Comment created.

SQL> comment on column ALL_XML_INDEXES.PEND_TABLE_NAME is
  2  'Name of the PENDING TABLE'
  3  /

Comment created.

SQL> comment on column ALL_XML_INDEXES.TYPE is
  2  'Type of indexed column (CLOB, CSX, CLOB_IN_OR, REPOSITORY)'
  3  /

Comment created.

SQL> comment on column ALL_XML_INDEXES.EX_or_INCLUDE is
  2  'Path Subsetting (Include or Exclude)'
  3  /

Comment created.

SQL> comment on column ALL_XML_INDEXES.INDEX_TYPE is
  2  'Index Type (Structured, Unstructured or both)'
  3  /

Comment created.

SQL> create or replace force view USER_XML_INDEXES
  2   (INDEX_NAME, TABLE_OWNER, TABLE_NAME, TYPE, INDEX_TYPE, PATH_TABLE_NAME, PARAMETERS,
  3    ASYNC, STALE, PEND_TABLE_NAME, EX_or_INCLUDE)
  4   as select
  5     oi.name        INDEX_NAME,
  6     bu.name        TABLE_OWNER,
  7     bo.name        TABLE_NAME,
  8     case when bitand(p.flags, 536870912)=536870912 then 'REPOSITORY'
  9          when bitand(p.flags, 4096)=4096 then 'BINARY'
 10          when bitand(p.flags, 8192)=8192 then 'CLOB in OR'
 11          when bitand(p.flags, 16384)=16384 then 'CLOB'
 12          else 'OR' end TYPE,
 13     case when bitand(p.flags , 268435456 ) != 268435456 then 'STRUCTURED'
 14          when bitand(p.flags, 268435456 ) = 268435456 and exists (select xt.idxobj# from xdb.xdb$xtab xt where xt.idxobj# = p.idxobj#) then 'STRUCTURED and UNSTRUCTURED'
 15          else 'UNSTRUCTURED' end INDEX_TYPE,
 16     case when bitand(p.flags,  268435456 ) != 268435456 then ''
 17          else     ot.name  end PATH_TABLE_NAME,
 18     p.parameters   PARAMETERS,
 19     case when bitand(p.flags, 65011712)=6291456 then 'ON-COMMIT'
 20          when bitand(p.flags, 65011712)=10485760 then 'MANUAL'
 21          when bitand(p.flags, 65011712)=18874368 then 'EVERY'
 22          else 'ALWAYS' end ASYNC,
 23     case when bitand(p.flags, 2097152)=2097152 then 'TRUE'
 24          else 'FALSE' end STALE,
 25     case when bitand(p.flags, 2097152)=2097152 then
 26          (select op.name from sys.obj$ op
 27           where  op.obj# = p.pendtabobj#)
 28          else '' end PEND_TABLE_NAME,
 29     case when bitand(p.flags, 32)=32 then 'INCLUDE'
 30          when bitand(p.flags, 128)=128 then 'EXCLUDE'
 31          else 'FULLY IX' end EX_or_INCLUDE
 32    from xdb.xdb$dxptab p, sys.obj$ ot, sys.obj$ oi, sys.user$ u,
 33        sys.user$ bu, sys.obj$ bo, sys.ind$ i
 34   where oi.owner# = u.user# and
 35         oi.obj# = p.idxobj# and p.pathtabobj# = ot.obj# and
 36         i.obj# = oi.obj# and i.bo# = bo.obj# and bo.owner# = bu.user# and
 37         u.user# = userenv('SCHEMAID')
 38  /

View created.

SQL> show errors;
No errors.
SQL> grant select on user_xml_indexes to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym user_xml_indexes for user_xml_indexes;

Synonym created.

SQL> 
SQL> comment on table USER_XML_INDEXES is
  2  'Description of the user''s own XMLType indexes'
  3  /

Comment created.

SQL> comment on column USER_XML_INDEXES.INDEX_NAME is
  2  'Name of the XML index'
  3  /

Comment created.

SQL> comment on column USER_XML_INDEXES.TABLE_OWNER is
  2  'Username of the owner of the indexed object'
  3  /

Comment created.

SQL> comment on column USER_XML_INDEXES.TABLE_NAME is
  2  'Name of the indexed object'
  3  /

Comment created.

SQL> comment on column USER_XML_INDEXES.PATH_TABLE_NAME is
  2  'Name of the PATH TABLE'
  3  /

Comment created.

SQL> comment on column USER_XML_INDEXES.PARAMETERS is
  2  'Structured index groups, path subsetting xpaths and scheduler job information'
  3  /

Comment created.

SQL> comment on column USER_XML_INDEXES.ASYNC is
  2  'Asynchronous index type'
  3  /

Comment created.

SQL> comment on column USER_XML_INDEXES.STALE is
  2  'Stale index type'
  3  /

Comment created.

SQL> comment on column USER_XML_INDEXES.PEND_TABLE_NAME is
  2  'Name of the PENDING TABLE'
  3  /

Comment created.

SQL> comment on column USER_XML_INDEXES.TYPE is
  2  'Type of indexed column (CLOB, CSX, CLOB_IN_OR, REPOSITORY)'
  3  /

Comment created.

SQL> comment on column USER_XML_INDEXES.EX_or_INCLUDE is
  2  'Path Subsetting (Include or Exclude)'
  3  /

Comment created.

SQL> comment on column USER_XML_INDEXES.INDEX_TYPE is
  2  'Index Type (Structured, Unstructured or both)'
  3  /

Comment created.

SQL> Rem Bug fix 4376605, create a view owned by SYS which queries the
SQL> Rem dictionary tables, and exposes only necessary columns to
SQL> Rem qmxdpGetColName in qmxdp.c.
SQL> create or replace force view USER_XML_COLUMN_NAMES
  2   (SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, OBJECT_COLUMN_NAME, EXTERNAL_COLUMN_NAME)
  3   as
  4   select
  5     u.name, o.name, c.name,
  6     (select name from sys.col$ c where c.obj# = o.obj# and c.intcol# = p.objcol),
  7     (select name from sys.col$ c where c.obj# = o.obj# and c.intcol# = p.extracol)
  8   from
  9     sys.opqtype$ p, sys.col$ c, sys.obj$ o, sys.user$ u
 10   where
 11     u.user# = o.owner# and
 12     o.type# = 2 and
 13     c.obj# = o.obj# and
 14     p.intcol# = c.intcol# and
 15     p.obj# = o.obj# and
 16     (u.user# = userenv('SCHEMAID')
 17       or o.obj# in
 18          (select oa.obj#
 19           from sys.objauth$ oa
 20           where grantee# in ( select kzsrorol
 21                               from x$kzsro
 22                             )
 23          )
 24       or /* user has system privileges */
 25         exists (select null from v$enabledprivs
 26                 where priv_number in (-45 /* LOCK ANY TABLE */,
 27                                       -47 /* SELECT ANY TABLE */,
 28                                       -48 /* INSERT ANY TABLE */,
 29                                       -49 /* UPDATE ANY TABLE */,
 30                                       -50 /* DELETE ANY TABLE */)))
 31  
SQL> /

View created.

SQL> 
SQL> grant select on USER_XML_COLUMN_NAMES to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym USER_XML_COLUMN_NAMES for USER_XML_COLUMN_NAMES;

Synonym created.

SQL> 
SQL> Rem XMLSchema dependencies on included or imported schemas; needed for Data Pump
SQL> create or replace force view DBA_XML_SCHEMA_IMPORTS
  2   (SCHEMA_URL, SCHEMA_OWNER, SCHEMA_OID, DEP_SCHEMA_URL, DEP_SCHEMA_OWNER, DEP_SCHEMA_OID)
  3   as
  4    select distinct x.xmldata.schema_url,
  5           x.xmldata.schema_owner,
  6           x.sys_nc_oid$,
  7           xt.schema_location,
  8           xd.owner,
  9           xd.schema_id
 10    from xdb.xdb$schema x,
 11         table(x.xmldata.imports) xt,
 12         dba_xml_schemas xd,
 13         dba_xml_schemas xd2
 14    where (not (x.xmldata.schema_owner ='SYS')) and
 15          (x.xmldata.imports is not null) and
 16          (xd2.schema_id = x.sys_nc_oid$) and (xd2.hidden = xd.hidden) and
 17          ( /* included schema owned by same user as schema */
 18            ((xd.schema_url = xt.schema_location) and
 19             (xd.owner = x.xmldata.schema_owner))
 20            or
 21            /* included schema is not owned by same user as schema */
 22            /*  so must be  global */
 23            (not exists (select * from dba_xml_schemas
 24                         where owner = x.xmldata.schema_owner and
 25                               schema_url = xt.schema_location)
 26             and
 27             (xd.schema_url = xt.schema_location)
 28             and
 29             (xd.local = 'NO'))
 30          );

View created.

SQL> show errors;
No errors.
SQL> grant select on DBA_XML_SCHEMA_IMPORTS to select_catalog_role;

Grant succeeded.

SQL> create or replace public synonym DBA_XML_SCHEMA_IMPORTS for DBA_XML_SCHEMA_IMPORTS;

Synonym created.

SQL> comment on table DBA_XML_SCHEMA_IMPORTS is
  2  'Description of all XML schema first level dependencies on imported XML schemas'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_IMPORTS.SCHEMA_URL is
  2  'Schema URL of the XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_IMPORTS.SCHEMA_OWNER is
  2  'Owner of the XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_IMPORTS.SCHEMA_OID is
  2  'Oid of the XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_IMPORTS.DEP_SCHEMA_URL is
  2  'Schema URL of the imported XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_IMPORTS.DEP_SCHEMA_OWNER is
  2  'Owner of the imported XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_IMPORTS.DEP_SCHEMA_OID is
  2  'Oid of the imported XML Schema'
  3  /

Comment created.

SQL> 
SQL> create or replace force view DBA_XML_SCHEMA_INCLUDES
  2   (SCHEMA_URL, SCHEMA_OWNER, SCHEMA_OID, DEP_SCHEMA_URL, DEP_SCHEMA_OWNER, DEP_SCHEMA_OID)
  3   as
  4    select distinct x.xmldata.schema_url,
  5           x.xmldata.schema_owner,
  6           x.sys_nc_oid$,
  7           xt.schema_location,
  8           xd.owner,
  9           xd.schema_id
 10    from xdb.xdb$schema x,
 11         table(x.xmldata.includes) xt,
 12         dba_xml_schemas xd,
 13         dba_xml_schemas xd2
 14    where (not (x.xmldata.schema_owner ='SYS')) and
 15          (x.xmldata.includes is not null) and
 16          (xd2.schema_id = x.sys_nc_oid$) and (xd2.hidden = xd.hidden) and
 17          ( /* included schema owned by same user as schema */
 18            ((xd.schema_url = xt.schema_location) and
 19             (xd.owner = x.xmldata.schema_owner))
 20            or
 21            /* included schema is not owned by same user as schema */
 22            /*  so must be  global */
 23            (not exists (select * from dba_xml_schemas
 24                         where owner = x.xmldata.schema_owner and
 25                               schema_url = xt.schema_location)
 26             and
 27             (xd.schema_url = xt.schema_location)
 28             and
 29             (xd.local = 'NO'))
 30          );

View created.

SQL> show errors;
No errors.
SQL> grant select on DBA_XML_SCHEMA_INCLUDES to select_catalog_role;

Grant succeeded.

SQL> create or replace public synonym DBA_XML_SCHEMA_INCLUDES for DBA_XML_SCHEMA_INCLUDES;

Synonym created.

SQL> comment on table DBA_XML_SCHEMA_INCLUDES is
  2  'Description of all XML schema first level dependencies on included XML schemas'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_INCLUDES.SCHEMA_URL is
  2  'Schema URL of the XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_INCLUDES.SCHEMA_OID is
  2  'Oid of the XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_INCLUDES.SCHEMA_OWNER is
  2  'Owner of the XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_INCLUDES.DEP_SCHEMA_URL is
  2  'Schema URL of the included XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_INCLUDES.DEP_SCHEMA_OWNER is
  2  'Owner of the included XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_INCLUDES.DEP_SCHEMA_OID is
  2  'Oid of the included XML Schema'
  3  /

Comment created.

SQL> 
SQL> create or replace force view DBA_XML_SCHEMA_DEPENDENCY(SCHEMA_URL, SCHEMA_OWNER, SCHEMA_OID,
  2                                                         DEP_SCHEMA_URL, DEP_SCHEMA_OWNER, DEP_SCHEMA_OID)
  3  as select distinct SCHEMA_URL, SCHEMA_OWNER, SCHEMA_OID,
  4                     DEP_SCHEMA_URL, DEP_SCHEMA_OWNER, DEP_SCHEMA_OID
  5               from DBA_XML_SCHEMA_IMPORTS
  6     union
  7     select distinct SCHEMA_URL, SCHEMA_OWNER, SCHEMA_OID,
  8                     DEP_SCHEMA_URL, DEP_SCHEMA_OWNER, DEP_SCHEMA_OID
  9               from DBA_XML_SCHEMA_INCLUDES;

View created.

SQL> show errors;
No errors.
SQL> 
SQL> grant select on DBA_XML_SCHEMA_DEPENDENCY to select_catalog_role;

Grant succeeded.

SQL> create or replace public synonym DBA_XML_SCHEMA_DEPENDENCY for DBA_XML_SCHEMA_DEPENDENCY;

Synonym created.

SQL> comment on table DBA_XML_SCHEMA_DEPENDENCY is
  2  'Description of all XML schema first level dependencies on imported and included XML schemas'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_DEPENDENCY.SCHEMA_URL is
  2  'Schema URL of the XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_DEPENDENCY.SCHEMA_OWNER is
  2  'Owner of the XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_DEPENDENCY.SCHEMA_OID is
  2  'Oid of the XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_DEPENDENCY.DEP_SCHEMA_URL is
  2  'Schema URL of the dependent (include or imported) XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_DEPENDENCY.DEP_SCHEMA_OWNER is
  2  'Owner of the dependent (include or imported) XML Schema'
  3  /

Comment created.

SQL> comment on column DBA_XML_SCHEMA_DEPENDENCY.DEP_SCHEMA_OID is
  2  'Oid of the dependent XML Schema'
  3  /

Comment created.

SQL> 
SQL> -- view for xmlschemas dependencies
SQL> create or replace view DBA_XMLSCHEMA_LEVEL_VIEW_DUP
  2          (schema_url, schema_owner, schema_oid, lvl, IN_CYCLE ) as
  3  select schema_url, schema_owner, schema_oid, max(level)+1, CONNECT_BY_ISCYCLE
  4  from DBA_XML_SCHEMA_DEPENDENCY
  5   connect by NOCYCLE prior schema_url   = dep_schema_url   and
  6              prior schema_owner = dep_schema_owner and
  7              prior schema_oid = dep_schema_oid
  8   group by  schema_url, schema_owner, schema_oid, CONNECT_BY_ISCYCLE
  9  union
 10  select x.xmldata.schema_url, x.xmldata.schema_owner, x.sys_nc_oid$, 1, 0
 11  from xdb.xdb$schema x
 12    where x.xmldata.includes is NULL and x.xmldata.imports is NULL
 13  /

View created.

SQL> 
SQL> show errors;
No errors.
SQL> grant select on DBA_XMLSCHEMA_LEVEL_VIEW_DUP to select_catalog_role;

Grant succeeded.

SQL> 
SQL> -- we need this view as the view above returns actually two rows for cyclic schemas,
SQL> -- one for the level at which the cycle was detected and with connect_by_iscycle set to 0,
SQL> -- and one with the level incremented by 1 and connect_by_iscycle set to 1
SQL> create or replace view DBA_XMLSCHEMA_LEVEL_VIEW
  2           (schema_url, schema_owner, schema_oid, lvl) as
  3  select l.schema_url, l.schema_owner, l.schema_oid, l.lvl from DBA_XMLSCHEMA_LEVEL_VIEW_DUP l
  4    where not exists (select 1 from DBA_XMLSCHEMA_LEVEL_VIEW_DUP
  5                      where schema_url = l.schema_url and schema_owner = l.schema_owner and
  6                            schema_oid = l.schema_oid and in_cycle=1)
  7  union
  8  select l.schema_url, l.schema_owner, l.schema_oid, 0 from DBA_XMLSCHEMA_LEVEL_VIEW_DUP l
  9    where exists (select 1 from  DBA_XMLSCHEMA_LEVEL_VIEW_DUP
 10                  where schema_url = l.schema_url and schema_owner = l.schema_owner and
 11                         schema_oid = l.schema_oid and in_cycle=1)
 12  /

View created.

SQL> 
SQL> show errors;
No errors.
SQL> -- the xmlschema_level_view is required for sys.ku$_xmlschema_view, which
SQL> -- allows select to PUBLIC; follow the same model and grant select to PUBLIC
SQL> grant select on DBA_XMLSCHEMA_LEVEL_VIEW to public
  2  /

Grant succeeded.

SQL> create or replace public synonym DBA_XMLSCHEMA_LEVEL_VIEW for DBA_XMLSCHEMA_LEVEL_VIEW;

Synonym created.

SQL> 
SQL> Rem Upgrade Might disbale xdbhi_idx, rebuild it
SQL> alter package xdb.xdb_funcimpl compile;

Package altered.

SQL> alter index xdb.xdbhi_idx rebuild;

Index altered.

SQL> 
SQL> rem
SQL> rem create metadata API views
SQL> rem
SQL> @@catmetx.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catmetx.sql /main/29 2010/05/24 12:28:56 spetride Exp $
SQL> Rem
SQL> Rem catmetx.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2010, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catmetx.sql - Metadata API: Real definitions for XDB object views.
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Metadata API object views for XDB objects
SQL> Rem
SQL> Rem    NOTES
SQL> Rem     For reasons having to do with compatibility, the XDB objects
SQL> Rem     cannot be created by catproc.sql; they must instead be created
SQL> Rem     by a separate script catqm.sql.  Since catmeta.sql is run
SQL> Rem     by catproc.sql, it contains fake object views for XDB objects.
SQL> Rem     The real object views are defined in this file which is
SQL> Rem     invoked by catxdbv.sql (which is invoked by catqm.sql).
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    spetride    05/20/10 - lrg 4430944
SQL> Rem    sdavidso    03/26/10 - bug9480755: export dependant xmlschemas
SQL> Rem    sdavidso    01/27/10 - Bug 8847153: reduce resources for xmlschema
SQL> Rem                           export
SQL> Rem    spetride    02/22/10 - XMLSchemaStripUsername signature change
SQL> Rem    spetride    01/20/10 - add XMLSCHEMA_LEVEL_VIEW
SQL> Rem    htseng      01/21/09 - fix lrg 3756606 for recompile view
SQL> Rem    lbarton     12/05/08 - bug 5976472: sql inj
SQL> Rem    lbarton     07/01/08 - lrg 3465660
SQL> Rem    lbarton     06/09/08 - move xmlschema registration to catmetx2.sql
SQL> Rem    lbarton     04/07/08 - add kuscomp.xsd
SQL> Rem    rapayne     02/08/08 - bug 6088114 - xmlschema for TYPE_SPECs
SQL> Rem    spetride    05/07/07 - bug 5950173 - xmlschema dependencies
SQL> Rem    sdavidso    04/17/07 - bug 5950173 - xmlschema dependencies
SQL> Rem    bmccarth    04/06/07 - validate args to ku$ view check procedure
SQL> Rem                           before executing (bug 597642)
SQL> Rem    sdavidso    03/22/07 - 5903231 - maintain binary storage for xmlschemas
SQL> Rem    lbarton     01/04/07 - conditional compilation of differ code
SQL> Rem    lbarton     03/09/06 - bug 4918185: base xmlschema_view on catalog view
SQL> Rem    abagrawa    03/11/06 - Move dbms_metadata_hack to catxdbh
SQL> Rem    htseng      10/20/05 - register schemas
SQL> Rem    lbarton     09/06/05 - register schemas
SQL> Rem    vkapoor     05/18/05 - LRG 1798757. Freeing some memory
SQL> Rem    ataracha    10/21/04 - ku$_xmlschema_elmt_view - use the base element
SQL> Rem                         - name for ref elements
SQL> Rem    spannala    05/20/04 - workaround for disabled xdbhi_idx
SQL> Rem    bmccarth    01/17/03 - add procedure to revalidate ku$ views if needed
SQL> Rem    bmccarth    11/15/02 - enable stripusername for url
SQL> Rem    amanikut    10/25/02 - specify namespace correctly in extractvalue()
SQL> Rem    bmccarth    08/22/02 - XDB 92->main merge - disable (for now)
SQL> Rem                           call to stripschema in xdb utility package (not
SQL> Rem                           available yet)
SQL> Rem    bmccarth    03/01/02 - add schemaoid to xmlschema
SQL> Rem    lbarton     01/16/02 - Merged lbarton_mdapi_xdb
SQL> Rem    lbarton     01/15/02 - fix comment
SQL> Rem    lbarton     12/03/01 - debug
SQL> Rem    lbarton     11/21/01 - Created
SQL> Rem
SQL> 
SQL> -- indexes get disabled on compilation of function. Workaround.
SQL> alter package xdb.xdb_funcimpl compile;

Package altered.

SQL> alter index xdb.xdbhi_idx rebuild;

Index altered.

SQL> 
SQL> -- view for xmlschemas
SQL> --  this view is used for direct use of MDAPI; not for datapump
SQL> create or replace force view sys.ku$_xmlschema_view of sys.ku$_xmlschema_t
  2    with object identifier (schemaoid) as
  3    select '1','0',
  4          u.user#, u.name, x.schema_url, x.schema_id,
  5          (case when x.local='YES' then 1 else 0 end
  6           + case when x.binary='YES' then 2 else 0 end),
  7          xlvl.lvl,
  8          value(s).getClobVal(),
  9          xdb.dbms_xdbutil_int.XMLSchemaStripUsername(XMLTYPE(
 10                                                      value(s).getClobVal()),
 11                                                      u.name)    -- stripped
 12      from sys.user$ u, sys.dba_xml_schemas x, xdb.xdb$schema s,
 13           sys.dba_xmlschema_level_view xlvl
 14      where x.owner=u.name and xlvl.schema_oid = x.schema_id and
 15            s.sys_nc_oid$ = x.schema_id and
 16            (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0) OR
 17                  EXISTS ( SELECT * FROM session_roles
 18                          WHERE role='SELECT_CATALOG_ROLE' ))
 19  /

View created.

SQL> grant select on sys.ku$_xmlschema_view to public
  2  /

Grant succeeded.

SQL> -- ku$_table_xmlschema_view is used to find the xmlschemas directly referenced
SQL> -- for xmltype columns/tables and dependent schemas referenced.
SQL> -- elclude hidden xmlschemas (32768 set in xdb$schema flags)
SQL> create or replace  view ku$_table_xmlschema_view as
  2    select opq.obj# tabobj_num, opq.schemaoid schemaoid, opq.schemaoid par_oid
  3    from sys.opqtype$ opq
  4   UNION
  5    select opq.obj# tabobj_num, sd.dep_schema_oid schemaoid, opq.schemaoid par_oid
  6    from sys.opqtype$ opq, dba_xml_schema_dependency sd
  7    start with
  8      sd.schema_oid=opq.schemaoid and opq.type=1 and opq.schemaoid is not null
  9    connect by nocycle
 10      prior sd.dep_schema_oid=sd.schema_oid and
 11      prior opq.schemaoid=opq.schemaoid and opq.type=1
 12  /

View created.

SQL> grant select on ku$_table_xmlschema_view  to select_catalog_role
  2  /

Grant succeeded.

SQL> -- view for xmlschemas
SQL> --  this view is used for datapump where xmlschemas need to be ordered.
SQL> --  also, fetch of the (potentially large) schema definition is defered,
SQL> --  to avoid excessive resource consumption during the sort.
SQL> create or replace force view sys.ku$_exp_xmlschema_view of sys.ku$_xmlschema_t
  2    with object identifier (schemaoid) as
  3    select '1','0',
  4          u.user#, u.name, x.schema_url, x.schema_id,
  5          (case when x.local='YES' then 1 else 0 end
  6           + case when x.binary='YES' then 2 else 0 end),
  7          xlvl.lvl,
  8          null, null
  9      from sys.user$ u, sys.dba_xml_schemas x, sys.dba_xmlschema_level_view xlvl
 10      where x.owner=u.name and
 11            xlvl.schema_oid = x.schema_id and
 12            (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u.user#, 0) OR
 13                  EXISTS ( SELECT * FROM session_roles
 14                          WHERE role='SELECT_CATALOG_ROLE' ))
 15  /

View created.

SQL> grant select on sys.ku$_exp_xmlschema_view to public
  2  /

Grant succeeded.

SQL> create or replace force view sys.ku$_xmlschema_elmt_view
  2    of sys.ku$_xmlschema_elmt_t with object identifier(schemaoid, elemnum) as
  3    select schm.sys_nc_oid$, extractValue(value(schm), '/schema/@x:schemaURL',
  4  'xmlns="http://www.w3.org/2001/XMLSchema" xmlns:x="http://xmlns.oracle.com/xdb"'),
  5              extractValue(value(xel), '/element/@x:propNumber',
  6  'xmlns="http://www.w3.org/2001/XMLSchema" xmlns:x="http://xmlns.oracle.com/xdb"'),
  7              case WHEN (extractValue(value(xel) , '/element/@name') is NULL)then
  8                     xel.xmldata.property.propref_name.name
  9              else extractValue(value(xel) , '/element/@name')
 10              end
 11    from xdb.xdb$element xel, xdb.xdb$schema schm
 12    where ref(schm) = extractValue(value(xel), '/element/@x:parentSchema',
 13  'xmlns="http://www.w3.org/2001/XMLSchema" xmlns:x="http://xmlns.oracle.com/xdb"')
 14  /

View created.

SQL> grant select on sys.ku$_xmlschema_elmt_view to select_catalog_role
  2  /

Grant succeeded.

SQL> 
SQL> -----------------------------------------------------------------------------
SQL> -- view of xmlschema generated types by table
SQL> --  This finds xmlschemas (including dependent xmlsschemas) by table,
SQL> --  and types for those xmlschemas.
SQL> -----------------------------------------------------------------------------
SQL> 
SQL> create or replace force view sys.ku$_xmlschema_types_view as
  2    select t.tabobj_num tabobjno, typo.obj_num typeobjno,
  3           st.typname typename, st.typowner typeowner
  4    from (
  5        select c.xmldata.sqltype typname,
  6               c.xmldata.sqlschema typowner,
  7               (select s.sys_nc_oid$ from xdb.xdb$schema s
  8                where ref(s)=c.xmldata.parent_schema) tschemaoid
  9        from xdb.xdb$complex_type c
 10        union
 11        select e.xmldata.property.sqlcolltype typname,
 12               e.xmldata.property.sqlcollschema typowner,
 13               (select s.sys_nc_oid$ from xdb.xdb$schema s
 14                where ref(s)=e.xmldata.property.parent_schema) tschemaoid
 15        from xdb.xdb$element e
 16        where
 17          not exists (select 1
 18            from xdb.xdb$element e2
 19            where e2.xmldata.property.sqlcolltype = e.xmldata.property.sqlcolltype
 20                  and e2.xmldata.property.sqlcollschema =
 21                       e.xmldata.property.sqlcollschema
 22                  and e2.xmldata.property.parent_schema <>
 23                       e.xmldata.property.parent_schema) ) st,
 24      ku$_schemaobj_view typo, ku$_table_xmlschema_view t
 25    where st.typname is not null and
 26          st.typowner is not null and
 27          ((st.typowner <> 'XDB') or
 28           ((st.typname not like 'XDB$%%') and (st.typname <> 'XMLTYPE'))) and
 29          typo.name=st.typname and typo.owner_name=st.typowner and
 30          t.schemaoid=tschemaoid
 31  /

View created.

SQL> grant select on sys.ku$_xmlschema_types_view to select_catalog_role
  2  /

Grant succeeded.

SQL> 
SQL> -----------------------------------------------------------------------------
SQL> -----------------------------------------------------------------------------
SQL> -----------------------------------------------------------------------------
SQL> 
SQL> 
SQL> 
SQL> -- recompile dbms_metadata_int to enable the diffing code
SQL> alter package dbms_metadata_int compile plsql_ccflags = 'ku$xml_enabled:true';

Package altered.

SQL> 
SQL> -- recompile dbms_metadata_util to enable the xmlschema load code
SQL> alter package dbms_metadata_util compile plsql_ccflags = 'ku$xml_enabled:true';

Package altered.

SQL> 
SQL> Rem
SQL> Rem During the XDB setup, several KU$_ views go invalid, recompile
SQL> Rem them as needed.
SQL> Rem (In particular, recompiling dbms_metadata_util causes views that
SQL> Rem  reference it to go invalid. - lrg 3465660)
SQL> Rem
SQL> 
SQL> CREATE OR REPLACE PROCEDURE recomp_catmeta_views AS
  2    TYPE cur_type is REF CURSOR;
  3    data_cursor  cur_type;
  4    invalid_view VARCHAR2(100);
  5    sql_stmt_1   VARCHAR2(1000);
  6    sql_stmt_2   VARCHAR2(1000);
  7    my_status    number;
  8  
  9  BEGIN
 10  --
 11  -- Only get SYS-owned KU$_ views with invalid states
 12  --
 13    OPEN data_cursor FOR 'SELECT name FROM SYS.OBJ$ WHERE STATUS > 1 ' ||
 14                         'AND TYPE# = 4 AND owner#=0 AND name like ''KU$_%''';
 15  
 16    sql_stmt_2 := 'select status from sys.obj$ where name = :1 and owner# = 0';
 17  
 18    LOOP
 19  
 20      FETCH data_cursor INTO invalid_view;
 21      EXIT WHEN data_cursor%NOTFOUND;
 22  
 23      -- The compile of a view will automatically compile any other view which it
 24      -- references. If we compile a view that already has a success status it
 25      -- will invalidate any calling view. Therefore, check if the current view
 26      -- still needs to be compiled.
 27      execute immediate sql_stmt_2 into my_status using invalid_view;
 28      --
 29      -- the 2 dbms_assert functions are to prevent sql injection
 30      --
 31      if my_status > 1 THEN
 32        sql_stmt_1 := 'ALTER VIEW ' ||
 33          dbms_assert.enquote_name(dbms_assert.qualified_sql_name(invalid_view))
 34                     || ' COMPILE';
 35        EXECUTE IMMEDIATE sql_stmt_1;
 36  
 37  --      BEGIN
 38  --        EXECUTE IMMEDIATE sql_stmt_1;
 39  --        kupf$file.trace('GOOD', 'View complilation succeeded on ' ||
 40  --                            invalid_view);
 41  --      EXCEPTION
 42  --        WHEN OTHERS THEN
 43  --          IF SQLCODE = -24344 THEN
 44  --            NULL;
 45  --            kupf$file.trace('WARN', 'View complilation warning on ' ||
 46  --                            invalid_view);
 47  --          ELSE
 48  --            kupf$file.trace('FAIL', 'View failed to compile ' ||
 49  --                            invalid_view || ' ' || sqlerrm);
 50  --            RAISE;
 51  --          END IF;
 52  --      END;
 53  --    else
 54  --      kupf$file.trace('SKIP', 'skipping View ' ||
 55  --                            invalid_view);
 56      end if;
 57    END LOOP;
 58    CLOSE data_cursor;
 59  end recomp_catmeta_views;
 60  /

Procedure created.

SQL> 
SQL> alter system flush shared_pool;

System altered.

SQL> alter system flush shared_pool;

System altered.

SQL> alter system flush shared_pool;

System altered.

SQL> 
SQL> Rem
SQL> Rem Execute then drop the procedure.
SQL> Rem
SQL> 
SQL> BEGIN
  2    recomp_catmeta_views;
  3  end;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> drop procedure recomp_catmeta_views;

Procedure dropped.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> Rem Create the DBMS_RESCONFIG package
SQL> @@dbmsxrc
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmsxrc.sql /main/3 2009/04/06 20:28:14 badeoti Exp $
SQL> Rem
SQL> Rem dbmsxrc.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2009, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxrc.sql -  Package DBMS_ResConfig
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    badeoti     03/21/09 - dbms_resconfig.patchRepRCList moved to
SQL> Rem                           dbms_xdbutil_int
SQL> Rem    thbaby      09/21/07 - add API to patch repository resconfig list
SQL> Rem    thoang      02/25/04 - Created
SQL> Rem
SQL> 
SQL> 
SQL> CREATE OR REPLACE PACKAGE xdb.dbms_resconfig AUTHID CURRENT_USER IS
  2  
  3  ------------
  4  -- CONSTANTS
  5  --
  6  ------------
  7  DELETE_RESOURCE        CONSTANT NUMBER := 1;
  8  DELETE_RECURSIVE       CONSTANT NUMBER := 2;
  9  APPEND_RESOURCE        CONSTANT NUMBER := 1;
 10  APPEND_RECURSIVE       CONSTANT NUMBER := 2;
 11  
 12  ---------------------------------------------
 13  -- FUNCTION - getResConfig
 14  --     Returns the resource configuration at the specified position of the
 15  --     target resource's configuration list.
 16  -- PARAMETERS -
 17  --  respath
 18  --     Absolute path in the Hierarchy of the resource
 19  --  pos
 20  --     position of element to return. Position must be >= 0 and < the length of
 21  --     the resource's configuration list.
 22  -- RETURNS -
 23  --     Returns contents of resource configuration.
 24  ---------------------------------------------
 25  FUNCTION getResConfig(respath IN VARCHAR2, pos IN PLS_INTEGER)
 26    RETURN sys.XMLType;
 27  
 28  ---------------------------------------------
 29  -- PROCEDURE - addResConfig
 30  --      Inserts the resource configuration specified by rcpath at the given position in the target resource's configuration list.
 31  --
 32  -- PARAMETERS:
 33  --     respath  - absolute path of the target resource.
 34  --     rcpath   - absolute path of the resource configuration to be inserted. An exception is raised if rcpath already exists in the target's configuration list.
 35  --     pos      - index at which the new configuration is to be inserted. If this parameter is not specified then the new configuration is appended to the end of the list. An exception is raised if the index is out of range (i.e., pos < 0 or pos > the size of the target resource's configuration list).
 36  
 37  ---------------------------------------------
 38  
 39  PROCEDURE addResConfig(respath IN VARCHAR2, rcpath IN VARCHAR2,
 40                         pos IN PLS_INTEGER := NULL);
 41  
 42  ---------------------------------------------
 43  -- FUNCTION getResConfigPaths
 44  --    Returns a list of resource configuration paths defined in the target resource's configuration list.
 45  --
 46  
 47  -- PARAMETERS:
 48  --    respath   - absolute path of the target resource.
 49  ---------------------------------------------
 50  Function getResConfigPaths(respath IN VARCHAR2) return XDB$STRING_LIST_T;
 51  
 52  ---------------------------------------------
 53  -- PROCEDURE appendResConfig
 54  -- Appends the resource configuration specified by rcpath to the target resource's configuration list if it is not already included in the list.
 55  
 56  -- PARAMETERS
 57  --   respath    - absolute path of the target resource.
 58  --   rcpath     - absolute path of the resource configuration to be appended at the end of the target's configuration list. If rcpath already exists in the list then nothing is appended.
 59  --   appendOption - either APPEND_RESOURCE or APPEND_RECURSIVE. If APPEND_RESOURCE is specified then only the target resource is affected. If APPEND_RECURSIVE is specified then the target resource and all its descendents will be affected.
 60  ---------------------------------------------
 61  Procedure appendResConfig(respath IN VARCHAR2, rcpath IN VARCHAR2, appendOption IN PLS_INTEGER);
 62  
 63  ---------------------------------------------
 64  -- PROCEDURE deleteResConfig
 65  -- Removes the configuration at the given position in the target resource's configuration list.
 66  -- PARAMETERS
 67  --   respath    - absolute path of the target resource.
 68  --   pos        - the index of the configuration to be removed. An exception is raised if the index is out of range (i.e., pos < 0 or pos >= the size of the target resource's configuration list.
 69  ---------------------------------------------
 70  Procedure deleteResConfig(respath IN VARCHAR2, pos IN PLS_INTEGER);
 71  
 72  ---------------------------------------------
 73  -- PROCEDURE deleteResConfig
 74  -- Removes the configuration specified by rcpath from the target resource's configuration list. Shifts any subsequent elements to the left. Users must have write-config privilege on all affected resources to execute this.
 75  
 76  -- PARAMETERS
 77  --   respath    - absolute path of the target resource.
 78  --   rcpath     - absolute path of the resource configuration to be deleted if found in list.
 79  --   deleteOption - either DELETE_RESOURCE or DELETE_RECURSIVE. If DELETE_RESOURCE is specified then only the configuration list of the target resource is affected. If DELETE_RECURSIVE is specified then the configuration list of the target resource and all its descendents will be affected.
 80  
 81  ---------------------------------------------
 82  Procedure deleteResConfig(respath IN VARCHAR2, rcpath IN VARCHAR2,
 83  deleteOption IN PLS_INTEGER);
 84  
 85  ---------------------------------------------
 86  -- FUNCTION getListeners
 87  -- Returns the list of listeners applicable for a given resource. The value returned by this function is an XML document containing the <event-listeners> element of the XDBResconfig.xsd schema. It contains all the listeners applicable to the target resource, including repository-level listeners. From the returned XML document users can use the EXTRACT operator to retrieve the listeners defined for a specific event. Users must have the required access privilege on all resource configurations referenced by the repository and the target resource; otherwise, an error is returned.
 88  
 89  -- PARAMETERS
 90  -- path - absolute path of the target resource.
 91  ---------------------------------------------
 92  function getListeners(path IN VARCHAR2) return SYS.XMLType;
 93  
 94  ---------------------------------------------
 95  -- FUNCTION getRepositoryResConfig
 96  
 97  -- Description:
 98  -- Returns the resource configuration at the specified position of the repository's configuration list.  Users must have the required read privilege on the requested resource configuration; otherwise, an error is returned.
 99  -- Parameters:
100  --     pos      - index of element to return. An exception is raised if the index is out of range (i.e., pos < 0 or pos >= the size of the repository's configuration list).
101  ---------------------------------------------
102          Function getRepositoryResConfig(pos IN PLS_INTEGER) return SYS.XMLType;
103  
104  ---------------------------------------------
105  -- FUNCTION getRepositoryResConfigPaths
106  
107  --      Description:
108  --         Returns a list of resource configuration paths defined for the repository. Users must be able to access all the referenced resource configurations; otherwise, an error is returned.
109  ---------------------------------------------
110          Function getRepositoryResConfigPaths return XDB$STRING_LIST_T;
111  
112  ---------------------------------------------
113  -- PROCEDURE addRepositoryResConfig
114  
115  -- Description:
116  -- Inserts the resource configuration specified by rcpath at the given position of the repository's configuration list.  Shifts the element currently at that position (if any) and any subsequent elements to the right. An error is raised if the document referenced by rcpath is not based on XDBResConfig.xsd schema. Users must have XDBADMIN role and read privilege on the resource configuration to be inserted; otherwise, an error is returned.
117  -- Parameters:
118  --     rcpath   - absolute path of the resource configuration to be inserted. An exception is raised if rcpath already exists in the repository's configuration list.
119  --     pos      - index at which the new configuration is to be inserted. If this parameter is not specified then the new configuration is appended to the end of the list. An exception is raised if the index is out of range (i.e., pos < 0 or pos > the size of the repository's configuration list).
120  ---------------------------------------------
121  Procedure addRepositoryResConfig(rcpath IN VARCHAR2, pos IN PLS_INTEGER := NULL);
122  
123  ---------------------------------------------
124  -- PROCEDURE deleteRepositoryResConfig
125  
126  --      Description:
127  --        Removes the configuration at the given position in the repository's configuration list. Shifts any subsequent elements to the left.  Users must have XDBADMIN role to execute this.
128  --       This statement is treated as if it is a DDL statement. This means the system will implicitly commit before and after this statement.
129  -- Parameters:
130  --      pos     - the index of the configuration to be removed. An exception is raised if the index is out of range (i.e., pos < 0 or pos >= the size of the repository's configuration list).
131  ---------------------------------------------
132          Procedure deleteRepositoryResConfig(pos IN PLS_INTEGER);
133  
134  end dbms_resconfig;
135  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_resconfig FOR xdb.dbms_resconfig
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_resconfig TO PUBLIC
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> @@prvtxrc.plb
SQL> CREATE OR REPLACE LIBRARY xdb.DBMS_RC_LIB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  26 59
 21  tQYfVSBHaTmguqS5xwqR9RSslfgwg04I9Z7AdBjDuFKbskoowEr+CPUJ572esstSMsy4dCvn
 22  y1J0CPXJpqYl5Z55
 23  
 24  /

Library created.

SQL> CREATE OR REPLACE PACKAGE BODY xdb.DBMS_ResConfig wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  1743 597
 21  rLwHsnvMZCzk1338kD4vZXDgNgswg81UmsfrVy+LraqVy2pZedEuJaA0yCnWZtX0i3b6Wp/r
 22  ekJ7L/IXU7gdAu5ynY2RY2ELBkaLddbvli1jc2NzvI2g3Odzt1mIXwGgRhF6sb6jEFEsPCC7
 23  SDd93BfxvezAPnCXCZUhjeAVsPsibBSQ+x+46Y6Q8yqK5mYNiFrgkMf3wj5eqPWmjgyCbGeW
 24  MrsjHLDZRvuxV//iXug29AjMyK3WsNT4DVFCMetebvD0dckbYCeHzlTzQ4Rjrbz9SZlKsw7y
 25  GCsIKqieLlEQsjV/g5Xum3KWr3P15VN1uafuZgaJGgk3HA+Kb/BYdQYM1m6hJWpks8gusT8i
 26  2VHM6OPp8gm5T5hQTQn9dICQ3FEUAU3UqaLMmVAYSPA9ViunusHbSNLZuf41tRfhnVpoSMSU
 27  WFVI1VHQj3FcDgYDN8Wm15isvWB4fxvSWe1K1HJo5fOtkIsmhqxd90IC8Oa4fwR0UJTA7xOG
 28  2GEoC+hg3IOVwvciLKMxLmVh131T46rVrMwXR+how0Zzv4FRk0cRJ1fl5y4dPGrpMu4a0LqG
 29  B3IsD2SSGNS/T7n4BPK1P4GBIueuFRzoFZO8ZlIve4SFQr6TQaRYFq14z/dYUVadBn77R9dW
 30  yXQK0O2X529tkwxw7W86dJZyYNFhBIeHSGTv51UhT2ePpMDw3m2GUNwagoseGbuFLV44ZuYq
 31  mdgmDJfTHXmobcy9L2XQWvKb9EdpYZG9efPik9zxFN9uNe1uPmxcuHvbaCh83s9zQ4tzVf3O
 32  +Iv5VZKLZD30so4QowciOv0OUnlKhT+UOLXPEYZuyqi+az2mIwCWqiM5LYn0KMa4HWJ9fl/6
 33  CG9F3U9PKLVXHqxsGJxiZxvgWB9G6dhHtx8RrJdyrUvhenfAWF0nFtasVuc/1KsE1oBPo+0A
 34  vWov0fYqlEdp6sXCfPsHQ+eGQTEb6Y5ulH2Dr6bGPmb3QMk7G+Da3nAhvkuWXOP2DmFwg57e
 35  9QO8EKrEvOmWtka2ekHLdyWh8RRX9c44CRby/ZtrxoA9wbu2XRZJWkQvhYM2g9zIWxiiVEZ1
 36  wWqWp5iTaYL4Ci2PhVuSN7ghXH7G3j/q+jxu0VCFu8IA8jErZ97FBeVn/a6XxCLHS2U3Jsu8
 37  QgXaTYYFtPixDiCVEA9Q/oTka3gFxAcScR3qmLeGy92zQ5trpxOfs9b3wkAouVCdKGSAfsC1
 38  9+hFRNMFfHOO7fedVguaC/1twLoLZPpNBYKS3MqdwrH/3PaYmztIlXGAbVaxSMLpZAlUljKy
 39  NTt5qV5T52sogPwch45VarXYQha/y5iDQIQSQM2Hr88zMRmg7LmrBf1YkxhD/4eYsdA6FdLV
 40  z/wxvAS5v9iK1hXQRVEseO/o3HGiIqWzt6qm6BZ4pA==
 41  
 42  /

Package body created.

SQL> show errors;
No errors.
SQL> GRANT EXECUTE ON xdb.DBMS_ResConfig TO PUBLIC
  2  /

Grant succeeded.

SQL> show errors
No errors.
SQL> 
SQL> Rem Create the DBMS_XEVENT package
SQL> @@dbmsxev
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmsxev.sql /main/3 2008/12/08 14:56:56 llsun Exp $
SQL> Rem
SQL> Rem dbmsxev.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2008, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxev.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    llsun       08/01/08 - size of event handlers -> 32
SQL> Rem    petam       05/02/06 - fix for bug 5197943
SQL> Rem    thoang      04/26/04 - Created
SQL> Rem
SQL> 
SQL> Grant execute on xdb.xdb_privileges to public with grant option;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE PACKAGE xdb.dbms_XEvent AUTHID CURRENT_USER IS
  2  
  3  ------------
  4  -- CONSTANTS
  5  ------------
  6  
  7  --
  8  -- Event ID
  9  --
 10  RENDER_EVENT                        CONSTANT PLS_INTEGER := 1;
 11  PRE_CREATE_EVENT                    CONSTANT PLS_INTEGER := 2;
 12  POST_CREATE_EVENT                   CONSTANT PLS_INTEGER := 3;
 13  PRE_DELETE_EVENT                    CONSTANT PLS_INTEGER := 4;
 14  POST_DELETE_EVENT                   CONSTANT PLS_INTEGER := 5;
 15  PRE_UPDATE_EVENT                    CONSTANT PLS_INTEGER := 6;
 16  POST_UPDATE_EVENT                   CONSTANT PLS_INTEGER := 7;
 17  PRE_LOCK_EVENT                      CONSTANT PLS_INTEGER := 8;
 18  POST_LOCK_EVENT                     CONSTANT PLS_INTEGER := 9;
 19  PRE_UNLOCK_EVENT                    CONSTANT PLS_INTEGER := 10;
 20  POST_UNLOCK_EVENT                   CONSTANT PLS_INTEGER := 11;
 21  PRE_LINKIN_EVENT                    CONSTANT PLS_INTEGER := 12;
 22  POST_LINKIN_EVENT                   CONSTANT PLS_INTEGER := 13;
 23  PRE_LINKTO_EVENT                    CONSTANT PLS_INTEGER := 14;
 24  POST_LINKTO_EVENT                   CONSTANT PLS_INTEGER := 15;
 25  PRE_UNLINKIN_EVENT                  CONSTANT PLS_INTEGER := 16;
 26  POST_UNLINKIN_EVENT                 CONSTANT PLS_INTEGER := 17;
 27  PRE_UNLINKFROM_EVENT                CONSTANT PLS_INTEGER := 18;
 28  POST_UNLINKFROM_EVENT               CONSTANT PLS_INTEGER := 19;
 29  PRE_CHECKIN_EVENT                   CONSTANT PLS_INTEGER := 20;
 30  POST_CHECKIN_EVENT                  CONSTANT PLS_INTEGER := 21;
 31  PRE_CHECKOUT_EVENT                  CONSTANT PLS_INTEGER := 22;
 32  POST_CHECKOUT_EVENT                 CONSTANT PLS_INTEGER := 23;
 33  PRE_UNCHECKOUT_EVENT                CONSTANT PLS_INTEGER := 24;
 34  POST_UNCHECKOUT_EVENT               CONSTANT PLS_INTEGER := 25;
 35  PRE_VERSIONCONTROL_EVENT            CONSTANT PLS_INTEGER := 26;
 36  POST_VERSIONCONTROL_EVENT           CONSTANT PLS_INTEGER := 27;
 37  PRE_OPEN_EVENT                      CONSTANT PLS_INTEGER := 28;
 38  POST_OPEN_EVENT                     CONSTANT PLS_INTEGER := 29;
 39  PRE_INCONSISTENTUPDATE_EVENT        CONSTANT PLS_INTEGER := 30;
 40  POST_INCONSISTENTUPDATE_EVENT       CONSTANT PLS_INTEGER := 31;
 41  
 42  SUBTYPE XDBEventID IS PLS_INTEGER RANGE 1 .. 31;
 43  
 44  --
 45  -- NFS related constants
 46  --
 47  OPEN_ACCESS_READ           CONSTANT PLS_INTEGER := 1;
 48  OPEN_ACCESS_WRITE          CONSTANT PLS_INTEGER := 2;
 49  OPEN_ACCESS_READ_WRITE     CONSTANT PLS_INTEGER := 3;
 50  
 51  OPEN_DENY_NONE             CONSTANT PLS_INTEGER := 0;
 52  OPEN_DENY_READ             CONSTANT PLS_INTEGER := 1;
 53  OPEN_DENY_READ_WRITE       CONSTANT PLS_INTEGER := 2;
 54  
 55  --
 56  -- Event interface types
 57  --
 58  SUBTYPE EventType IS RAW(32);
 59  SUBTYPE XDBRepositoryEvent is RAW(32);
 60  
 61  TYPE XDBEvent is RECORD (id RAW(32));
 62  TYPE XDBHandlerList is RECORD (id RAW(32));
 63  TYPE XDBHandler is RECORD (id RAW(32));
 64  TYPE XDBPath is RECORD (id RAW(32));
 65  TYPE XDBLink is RECORD (id RAW(32));
 66  TYPE XDBLock is RECORD (id RAW(32));
 67  
 68  ---------------------------------------------
 69  --        XDBEvent Methods
 70  ---------------------------------------------
 71  
 72  ---------------------------------------------
 73  -- FUNCTION - getCurrentUser
 74  -- PARAMETERS -
 75  --  ev  - XDB Event object
 76  -- RETURNS -
 77  --  Name of the user executing the operation that triggers the event.
 78  ---------------------------------------------
 79  FUNCTION getCurrentUser(ev IN XDBEvent) RETURN VARCHAR2;
 80  
 81  ---------------------------------------------
 82  -- FUNCTION - getEvent
 83  -- PARAMETERS -
 84  --  ev  - XDB Event object
 85  -- RETURNS -
 86  --   The ID identifying the triggering event.
 87  ---------------------------------------------
 88  FUNCTION getEvent(ev IN XDBEvent) RETURN XDBEventID;
 89  
 90  ---------------------------------------------
 91  -- FUNCTION - isNull
 92  -- PARAMETERS -
 93  --  ev  - XDB Event object
 94  -- RETURNS - TRUE if input argument is null.
 95  ---------------------------------------------
 96  FUNCTION isNull(ev IN XDBEvent) RETURN BOOLEAN;
 97  
 98  ---------------------------------------------
 99  --        XDBRepositoryEvent Methods
100  ---------------------------------------------
101  
102  ---------------------------------------------
103  -- FUNCTION - getXDBEvent
104  --   Converts an XDBRepositoryEvent object to an  XDBEvent type.
105  -- PARAMETERS -
106  --  ev  - XDB Repository Event object
107  -- RETURNS -
108  --  The XDBEvent object
109  ---------------------------------------------
110  FUNCTION getXDBEvent(ev IN XDBRepositoryEvent) RETURN XDBEvent;
111  
112  ---------------------------------------------
113  -- FUNCTION - getInterface
114  -- PARAMETERS -
115  --  ev  - XDB Repository Event object
116  -- RETURNS -
117  --  The top-level interface used to initiate the operation that
118  --  triggered the event. This could be "HTTP", "FTP" or "SQL".
119  ---------------------------------------------
120  FUNCTION getInterface(ev IN XDBRepositoryEvent) RETURN VARCHAR2;
121  
122  ---------------------------------------------
123  -- FUNCTION - getApplicationData
124  -- PARAMETERS -
125  --  ev  - XDB Repository Event object
126  -- RETURNS -
127  --  The <applicationData> element extracted from the resource
128  --  configuration that defines the invoking handler.
129  ---------------------------------------------
130  FUNCTION getApplicationData(ev IN XDBRepositoryEvent) RETURN SYS.XMLType;
131  
132  ---------------------------------------------
133  -- FUNCTION - getPath
134  -- PARAMETERS -
135  --  ev  - XDB Repository Event object
136  -- RETURNS -
137  --  The XDBPath object representing the path of the resource for which
138  --  the event was fired. From this object, functions are provided to get
139  --  the different path segments.
140  ---------------------------------------------
141  FUNCTION getPath(ev IN XDBRepositoryEvent) RETURN XDBPath;
142  
143  ---------------------------------------------
144  -- FUNCTION - getResource
145  -- PARAMETERS -
146  --  ev  - XDB Repository Event object
147  -- RETURNS -
148  --  The target resource for the operation that fire the current event.
149  --  For a link* or unlink* event, this method returns the resource that
150  --  the link is pointing to.
151  --  For a create event, this method  returns the resource that is being created.
152  ---------------------------------------------
153  FUNCTION getResource(ev IN XDBRepositoryEvent)
154                  RETURN DBMS_XDBResource.XDBResource;
155  
156  ---------------------------------------------
157  -- FUNCTION - getParent
158  -- PARAMETERS -
159  --  ev  - XDB Repository Event object
160  -- RETURNS -
161  --  The parent of the target resource.
162  ---------------------------------------------
163  FUNCTION getParent(ev IN XDBRepositoryEvent)
164                  RETURN DBMS_XDBResource.XDBResource;
165  
166  ---------------------------------------------
167  -- FUNCTION - getHandlerList
168  -- PARAMETERS -
169  --  ev  - XDB Repository Event object
170  -- RETURNS -
171  --  The list of handlers that will be executed after the currently
172  --  executing handler.
173  ---------------------------------------------
174  FUNCTION getHandlerList(ev IN XDBRepositoryEvent) RETURN XDBHandlerList;
175  
176  ---------------------------------------------
177  -- FUNCTION - getLink
178  -- PARAMETERS -
179  --  ev  - XDB Repository Event object
180  -- RETURNS -
181  --  an XDBLink object for the target resource.
182  ---------------------------------------------
183  FUNCTION getLink(ev IN XDBRepositoryEvent) RETURN XDBLink;
184  
185  ---------------------------------------------
186  -- FUNCTION - getLock
187  -- PARAMETERS -
188  --  ev  - XDB Repository Event object
189  -- RETURNS -
190  --  This method is only valid for the lock and unlock events. It returns
191  --  the lock object corresponding to the current operation.
192  ---------------------------------------------
193  FUNCTION getLock(ev IN XDBRepositoryEvent) RETURN XDBLock;
194  
195  ---------------------------------------------
196  -- FUNCTION - getParameter
197  -- PARAMETERS -
198  --  ev  - XDB Repository Event object
199  -- RETURNS -
200  --  The value of a request or session-specific parameter. Currently, the
201  --  only parameters supported are "Accept", "Accept-Language", "Accept-Charset"
202  --  and "Accept-Encoding".
203  --  The definition of these parameters can be found in RFC 2616 (HTTP/1.1).
204  ---------------------------------------------
205  FUNCTION getParameter(ev IN XDBRepositoryEvent, key IN VARCHAR2)
206                                RETURN VARCHAR2;
207  
208  ---------------------------------------------
209  -- FUNCTION - getOldResource
210  -- PARAMETERS -
211  --  ev  - XDB Repository Event object
212  -- RETURNS -
213  --  Returns the original XDBResource object before the current operation
214  --  started. This method applies only to Update event. For other events,
215  --   an error is returned.
216  ---------------------------------------------
217  FUNCTION getOldResource(ev IN XDBRepositoryEvent)
218                  RETURN DBMS_XDBResource.XDBResource;
219  
220  ---------------------------------------------
221  -- FUNCTION - getOutputStream
222  -- PARAMETERS -
223  --  ev  - XDB Repository Event object
224  -- RETURNS -
225  --  This is only valid for the Render event. It returns the output BLOB in
226  --  which the handler can write the rendered data.
227  ---------------------------------------------
228  FUNCTION getOutputStream(ev IN XDBRepositoryEvent) RETURN BLOB;
229  
230  ---------------------------------------------
231  -- PROCEDURE - setRenderStream
232  --  This is only valid for the Render event. Sets the BLOB from which the
233  --  rendered contents can be read. This should not be called after the
234  --  stream returned by getOutputStream() is written to or after
235  --  setRenderPath() is called; doing so will result in an error.
236  -- PARAMETERS -
237  --  ev  - XDB Repository Event object
238  --  istr - input stream to get the rendered contents from
239  ---------------------------------------------
240  PROCEDURE setRenderStream(ev IN XDBRepositoryEvent, istr IN BLOB);
241  
242  ---------------------------------------------
243  -- PROCEDURE - setRenderPath
244  --  This is only valid for the Render event. Specifies the path of the
245  --  resource that contains the rendered contents. This should not be called
246  --  after the stream returned by getOutputStream() is written to or
247  --  after setRenderStream() is called; doing so will result in an error.
248  -- PARAMETERS -
249  --  ev  - XDB Repository Event object
250  --  path - path of the resource containing the rendered contents
251  ---------------------------------------------
252  PROCEDURE setRenderPath(ev IN XDBRepositoryEvent, path IN VARCHAR2);
253  
254  ---------------------------------------------
255  -- FUNCTION - getUpdateByteOffset
256  -- PARAMETERS -
257  --  ev  - XDB Repository Event object
258  -- RETURNS -
259  -- This method is only valid for the inconsistent-update event. If the
260  -- current operation is a byte-range write, it returns the byte offset at
261  -- which the range begins
262  ---------------------------------------------
263  FUNCTION getUpdateByteOffset(ev IN XDBRepositoryEvent) RETURN NUMBER;
264  
265  ---------------------------------------------
266  -- FUNCTION - getUpdateByteCount
267  -- PARAMETERS -
268  --  ev  - XDB Repository Event object
269  -- RETURNS -
270  --  This method is only valid for the inconsistent-update event. If the
271  --  current operation is a byte-range write, it returns the byte count.
272  ---------------------------------------------
273  FUNCTION getUpdateByteCount(ev IN XDBRepositoryEvent) RETURN NUMBER;
274  
275  ---------------------------------------------
276  -- FUNCTION - getOpenAccessMode
277  -- PARAMETERS -
278  --  ev  - XDB Repository Event object
279  -- RETURNS -
280  --  This method is only valid for the open event. It returns the access mode
281  --  for the open operation, which could be one of:
282  --      OPEN_ACCESS_READ
283  --      OPEN_ACCESS_WRITE
284  --      OPEN_ACCESS_READ_WRITE
285  ---------------------------------------------
286  FUNCTION getOpenAccessMode(ev IN XDBRepositoryEvent) RETURN PLS_INTEGER;
287  
288  ---------------------------------------------
289  -- FUNCTION - getOpenDenyMode
290  -- PARAMETERS -
291  --  ev  - XDB Repository Event object
292  -- RETURNS -
293  --  This method is only valid for the open event. It returns the deny mode
294  --  for the open operation, which could be one of:
295  --      OPEN_DENY_NONE
296  --      OPEN_DENY_READ
297  --      OPEN_DENY_READ_WRITE
298  ---------------------------------------------
299  FUNCTION getOpenDenyMode(ev IN XDBRepositoryEvent) RETURN PLS_INTEGER;
300  
301  ---------------------------------------------
302  -- FUNCTION - isNull
303  -- PARAMETERS -
304  --  repev - XDB Repository event object
305  -- RETURNS - TRUE if input argument is null.
306  ---------------------------------------------
307  FUNCTION isNull(repev IN XDBRepositoryEvent) RETURN BOOLEAN;
308  
309  ---------------------------------------------
310  --        XDBHandlerList Methods
311  ---------------------------------------------
312  
313  ---------------------------------------------
314  -- FUNCTION - getFirst
315  -- PARAMETERS -
316  --  hl - XDB handler list.
317  -- RETURNS -
318  --  The first handler in the list.
319  ---------------------------------------------
320  FUNCTION getFirst(hl IN XDBHandlerList) RETURN XDBHandler;
321  
322  ---------------------------------------------
323  -- FUNCTION - getNext
324  -- PARAMETERS -
325  --  hl - XDB handler list.
326  -- RETURNS -
327  --  Next handler in the list.
328  ---------------------------------------------
329  FUNCTION getNext(hl IN XDBHandlerList) RETURN XDBHandler;
330  
331  ---------------------------------------------
332  -- FUNCTION - remove
333  -- Removes the given handler from the list.
334  -- PARAMETERS -
335  --  hl - XDB handler list.
336  --  handler - handler to be removed
337  ---------------------------------------------
338  PROCEDURE remove(hl IN XDBHandlerList, handler IN XDBHandler);
339  
340  ---------------------------------------------
341  -- PROCEDURE - clear
342  -- Clears the handler list.
343  -- PARAMETERS -
344  --  hl - XDB handler list.
345  ---------------------------------------------
346  PROCEDURE clear(hl IN XDBHandlerList);
347  
348  ---------------------------------------------
349  -- FUNCTION - isNull
350  -- PARAMETERS -
351  --  hl - XDB handler list.
352  -- RETURNS - TRUE if input argument is null.
353  ---------------------------------------------
354  FUNCTION isNull(hl IN XDBHandlerList) RETURN BOOLEAN;
355  
356  ---------------------------------------------
357  --        XDBHandler Methods
358  ---------------------------------------------
359  
360  ---------------------------------------------
361  -- FUNCTION - getSource
362  -- PARAMETERS -
363  --  handler - an XDBHandler object
364  -- RETURNS -
365  --  The name of the Java class, PL/SQL package or object type implementing
366  --  the handler.
367  ---------------------------------------------
368  FUNCTION getSource (handler IN XDBHandler) RETURN VARCHAR2;
369  
370  ---------------------------------------------
371  -- FUNCTION - getSchema
372  -- PARAMETERS -
373  --  handler - an XDBHandler object
374  -- RETURNS -
375  --  the schema of the handler's source
376  ---------------------------------------------
377  FUNCTION getSchema (handler IN XDBHandler) RETURN VARCHAR2;
378  
379  ---------------------------------------------
380  -- FUNCTION - getLanguage
381  -- PARAMETERS -
382  --  handler - an XDBHandler object
383  -- RETURNS -
384  --  The implementation language of the handler
385  ---------------------------------------------
386  FUNCTION getLanguage (handler IN XDBHandler) RETURN VARCHAR2;
387  
388  ---------------------------------------------
389  -- FUNCTION - isNull
390  -- PARAMETERS -
391  --  handler - the handler
392  -- RETURNS - TRUE if input argument is null.
393  ---------------------------------------------
394  FUNCTION isNull(handler IN XDBHandler) RETURN BOOLEAN;
395  
396  ---------------------------------------------
397  --        XDBPath Methods
398  ---------------------------------------------
399  
400  ---------------------------------------------
401  -- FUNCTION - getName
402  -- PARAMETERS -
403  --  path - a XDBPath object
404  -- RETURNS -
405  --  the string representation of the path.
406  ---------------------------------------------
407  FUNCTION getName (path IN XDBPath) RETURN VARCHAR2;
408  
409  ---------------------------------------------
410  -- FUNCTION - getName
411  -- PARAMETERS -
412  --  path - a XDBPath object
413  --  level - indicates the number of levels up the hierarchy. This value
414  --          must be greater than zero. Level 1 means the immediate parent.
415  --          If level exceeds the height of the tree then a null is returned.
416  -- RETURNS -
417  --  The parent's path.
418  ---------------------------------------------
419  FUNCTION getParentPath (path IN XDBPath, level IN PLS_INTEGER) RETURN XDBPath;
420  
421  ---------------------------------------------
422  -- FUNCTION - isNull
423  -- PARAMETERS -
424  --  path - a XDBPath object
425  -- RETURNS - TRUE if input argument is null.
426  ---------------------------------------------
427  FUNCTION isNull(path IN XDBPath) RETURN BOOLEAN;
428  
429  ---------------------------------------------
430  --        XDBLink Methods
431  ---------------------------------------------
432  
433  ---------------------------------------------
434  -- FUNCTION - getParentName
435  -- PARAMETERS -
436  --  link - an XDBLink object
437  -- RETURNS -
438  --  the link's parent folder's name.
439  ---------------------------------------------
440  FUNCTION getParentName (link IN XDBLink) RETURN VARCHAR2;
441  
442  ---------------------------------------------
443  -- FUNCTION - getParentOID
444  -- PARAMETERS -
445  --  link - an XDBLink object
446  -- RETURNS -
447  --  the link's parent folder's OID
448  ---------------------------------------------
449  FUNCTION getParentOID (link IN XDBLink) RETURN RAW;
450  
451  ---------------------------------------------
452  -- FUNCTION - getChildOID
453  -- PARAMETERS -
454  --  link - an XDBLink object
455  -- RETURNS -
456  --  the OID of the resource that the link is pointing to.
457  ---------------------------------------------
458  FUNCTION getChildOID (link IN XDBLink) RETURN RAW;
459  
460  ---------------------------------------------
461  -- FUNCTION - getLinkName
462  -- PARAMETERS -
463  --  link - an XDBLink object
464  -- RETURNS -
465  --  the name of the link
466  ---------------------------------------------
467  FUNCTION getLinkName (link IN XDBLink) RETURN VARCHAR2;
468  
469  ---------------------------------------------
470  -- FUNCTION - isNull
471  -- PARAMETERS -
472  --  link - an XDBLink object
473  -- RETURNS - TRUE if input argument is null.
474  ---------------------------------------------
475  FUNCTION isNull(link IN XDBLink) RETURN BOOLEAN;
476  
477  ---------------------------------------------
478  --        XDBLock Methods
479  ---------------------------------------------
480  SCOPE_EXCLUSIVE CONSTANT PLS_INTEGER      := 0;
481  SCOPE_SHARED CONSTANT PLS_INTEGER         := 1;
482  TYPE_WRITE CONSTANT PLS_INTEGER           := 0;
483  TYPE_READ_WRITE CONSTANT PLS_INTEGER      := 1;
484  
485  ---------------------------------------------
486  -- FUNCTION - getLockMode
487  -- PARAMETERS -
488  --  lk - a XDBLock object
489  -- RETURNS -
490  --  the lock's mode (shared or exlusive).
491  ---------------------------------------------
492  FUNCTION getLockMode (lk in XDBLock) RETURN PLS_INTEGER;
493  
494  ---------------------------------------------
495  -- FUNCTION - getLockType
496  -- PARAMETERS -
497  --  lk - a XDBLock object
498  -- RETURNS -
499  --  the lock's type (write or read-write)
500  ---------------------------------------------
501  FUNCTION getLockType (lk in XDBLock) RETURN PLS_INTEGER;
502  
503  ---------------------------------------------
504  -- FUNCTION - getDAVToken
505  -- PARAMETERS -
506  --  lk - a XDBLock object
507  -- RETURNS -
508  --  the token id if this is a DAV lock. Otherwise null
509  ---------------------------------------------
510  FUNCTION getDAVToken (lk in XDBLock) RETURN VARCHAR2;
511  
512  ---------------------------------------------
513  -- FUNCTION - getDAVOwner
514  -- PARAMETERS -
515  --  lk - a XDBLock object
516  -- RETURNS -
517  --  the DAV:owner if this is a DAV lock. Otherwise null
518  ---------------------------------------------
519  FUNCTION getDAVOwner (lk in XDBLock) RETURN VARCHAR2;
520  
521  ---------------------------------------------
522  -- FUNCTION - getNFSNodeId
523  -- PARAMETERS -
524  --  lk - a XDBLock object
525  -- RETURNS -
526  --  the RAC node id if this is an NFSv4 lock. Otherwise null
527  ---------------------------------------------
528  FUNCTION getNFSNodeId (lk in XDBLock) RETURN RAW;
529  
530  ---------------------------------------------
531  -- FUNCTION - getDepth
532  -- PARAMETERS -
533  --  lk - a XDBLock object
534  -- RETURNS -
535  --  the depth of the lock (either 0 or INFINITY_DEPTH)
536  ---------------------------------------------
537  FUNCTION getDepth (lk in XDBLock) RETURN PLS_INTEGER;
538  
539  ---------------------------------------------
540  -- FUNCTION - getExpiry
541  -- PARAMETERS -
542  --  lk - a XDBLock object
543  -- RETURNS -
544  --  If DAV lock returns the date and time at which the lock will expire;
545  --  otherwise returns null.
546  ---------------------------------------------
547  FUNCTION getExpiry (lk in XDBLock) RETURN TIMESTAMP;
548  
549  ---------------------------------------------
550  -- FUNCTION - isNull
551  -- PARAMETERS -
552  --  lk - a XDBLock object
553  -- RETURNS - TRUE if input argument is null.
554  ---------------------------------------------
555  FUNCTION isNull(lk IN XDBLock) RETURN BOOLEAN;
556  
557  end dbms_XEvent;
558  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM DBMS_XEvent FOR xdb.dbms_XEvent
  2  /

Synonym created.

SQL> GRANT EXECUTE ON xdb.dbms_XEvent TO PUBLIC
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> @@prvtxev.plb
SQL> CREATE OR REPLACE LIBRARY xdb.DBMS_XDBEVENT_LIB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  2c 61
 21  fZkOcNUlC2+SuzWpw1ji7DHdpYwwg04I9Z7AdBjDuFKbskrQuFLAsseBmfT+CPUJ572esstS
 22  Msy4dCvny1J0CPXJpqZ2vXRX
 23  
 24  /

Library created.

SQL> CREATE OR REPLACE PACKAGE BODY xdb.DBMS_XEvent wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  4fc1 bd9
 21  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
 62  Q/JvU+ED64o3S4qyl4oH5FkstaKzeLX7JX1sbQ==
 63  
 64  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> Rem Create the dbms_xmltranslations package
SQL> @@dbmsxtr
SQL> Rem
SQL> Rem $Header: dbmsxtr.sql 14-mar-2006.17:25:56 smalde Exp $
SQL> Rem
SQL> Rem dbmsxtr.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxtr.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    smalde      03/03/06 - Add enableTranslations
SQL> Rem    smalde      02/21/06 - Created
SQL> Rem
SQL> 
SQL> set echo on
SQL> set feedback 1
SQL> set numwidth 10
SQL> set linesize 80
SQL> set trimspool on
SQL> set tab off
SQL> set pagesize 100
SQL> 
SQL> grant execute on xdb.xdb_privileges to public with grant option;

Grant succeeded.

SQL> 
SQL> create or replace package xdb.dbms_xmltranslations
  2  authid current_user is
  3  
  4  function translatexml (
  5      doc  in xmltype,
  6      lang in varchar2
  7  ) return xmltype;
  8  
  9  function getbasedocument (
 10      doc  in xmltype
 11  ) return xmltype;
 12  
 13  function updatetranslation (
 14      doc   in xmltype,
 15      xpath in varchar2,
 16      lang  in varchar2,
 17      value in varchar2,
 18      namespace in varchar2 := null
 19  ) return xmltype;
 20  
 21  function setsourcelang (
 22      doc   in xmltype,
 23      xpath in varchar2,
 24      lang  in varchar2,
 25      namespace in varchar2 := null
 26  ) return xmltype;
 27  
 28  function extractxliff (
 29      doc   in xmltype,
 30      xpath in varchar2,
 31      namespace in varchar2 := null
 32  ) return xmltype;
 33  
 34  function extractxliff (
 35      abspath in varchar2,
 36      xpath   in varchar2,
 37      namespace in varchar2 := null
 38  ) return xmltype;
 39  
 40  function mergexliff (
 41      doc   in xmltype,
 42      xliff in xmltype
 43  ) return xmltype;
 44  
 45  procedure mergexliff (
 46      xliff in xmltype
 47  );
 48  
 49  procedure enableTranslation;
 50  procedure disableTranslation;
 51  
 52  end dbms_xmltranslations;
 53  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace public synonym dbms_xmltranslations for xdb.dbms_xmltranslations
  2  /

Synonym created.

SQL> grant execute on xdb.dbms_xmltranslations to public
  2  /

Grant succeeded.

SQL> show errors;
No errors.
SQL> @@prvtxtr.plb
SQL> set echo on
SQL> set feedback 1
SQL> set numwidth 10
SQL> set linesize 80
SQL> set trimspool on
SQL> set tab off
SQL> set pagesize 100
SQL> create or replace library xdb.dbms_xdbtrans_lib wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  2c 61
 21  r83z6PPiCuc0bDnZmi6sV5DXpiQwg04I9Z7AdBjDWqGXYkpkWqHFPvJH1Upy+lkJ572esstS
 22  Msy4dCvny1J0CPXJpqbMOMsc
 23  
 24  /

Library created.

SQL> create or replace package body xdb.dbms_xmltranslations wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  f2a 2f6
 21  ZVQo4/v+UkPOiYEgB8Ckc4ko5sUwg0MrLiBufC/NMZ3giV5mzSb8Jswo1lhsK181YaEx68Vc
 22  lo2bqAHHfXJkOqN0Od62NeygEuaCak4T/sk0XYVkf6jjwjBbJKpoLDOdu7tBT0gsy7/Ecp0c
 23  LMupQC15a1OUWOEKzIj0p5fDFa18uJ1XhqbmN5kxTNwTexbMbFylOSqd5nNYTKkbun0LiOdq
 24  TaAalPLofGxXbYx3iSu7c4T/VALDw46tt2YlTb9plLnZV+WZ/tGXvJkSRHpeuaTZwHfLcjUT
 25  SuATMfXP0ChK4FZXg1nW9Lwwd/A95mz9pRMI1e1GFI1T69C7xBDcysRYU1BUClhSswDEqS5E
 26  mFPSIa6FYBGFLWIJCZ9gM5zneubkmauWO8z3xkiHRa8mZsHtWq+4p61FKzQp0s1u45oOVhEv
 27  ZGqNTRuAIlqvsSAOnj4PBoDdP3mAcPI6YI2vj7/m13dKSZ2zlnGQOlW9yqsmWy+Qkqiit4iE
 28  0mF0cM/ErD+SXYMFfoXs2FBu/PmcWCUBsFLdpbWQ27+tYL7/V74h+z5fXY/UE78hTUx3PfMt
 29  VHXrWAKV2V7a4kGZEV1hieCYkAV6dZPtAepHFwYWz1BsEpofzUYFBFjeCxP5j/B2sZEruDT2
 30  SI/pmlIOJ5yr+KVkcunye2teualFXTIstHOIIMJVtzzDsBLQSwYXMKo6WwbcTTAYfh7YWg76
 31  DghFlAlSEuOGBbXVWNmuqqaQc8Jj
 32  
 33  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> -- XDB$REPOS table
SQL> CREATE TABLE XDB.XDB$REPOS
  2  (
  3     obj#         NUMBER NOT NULL,
  4     flags        NUMBER,
  5     rootinfo#    NUMBER,
  6     hindex#      NUMBER,
  7     hlink#       NUMBER,
  8     resource#    NUMBER,
  9     acl#         NUMBER,
 10     config#      NUMBER,
 11     dlink#       NUMBER,
 12     nlocks#      NUMBER,
 13     stats#       NUMBER,
 14     checkouts#   NUMBER,
 15     resconfig#   NUMBER,
 16     wkspc#       NUMBER,
 17     vershist#    NUMBER,
 18     params       XMLType
 19  );

Table created.

SQL> 
SQL> -- XDB$MOUNTS table
SQL> CREATE TABLE XDB.XDB$MOUNTS
  2  (
  3     dobj#        NUMBER,
  4     dpath        VARCHAR2(4000),
  5     sobj#        NUMBER,
  6     spath        VARCHAR2(4000),
  7     flags        NUMBER
  8  );

Table created.

SQL> 
SQL> Rem Create the DBMS_XDBREPOS package
SQL> @@dbmsxdbrepos
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmsxdbrepos.sql /main/2 2009/04/06 20:28:12 badeoti Exp $
SQL> Rem
SQL> Rem dbmsxdbrepos.sql
SQL> Rem
SQL> Rem Copyright (c) 2008, 2009, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxdbrepos.sql - XDB Modular Repository
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem
SQL> Rem      This file contains functions for creating new
SQL> Rem      repositories. A repository is a self-contained
SQL> Rem      unit that manages path based acccess to content.
SQL> Rem      Repositories can be customized to support
SQL> Rem      ACLs, versioning, event handlers etc.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    badeoti     03/20/09 - clean up 11.2 packages: remove public synonym for
SQL> Rem                           dbms_xdbrepos
SQL> Rem    sichandr    08/11/08 - Repository level operations
SQL> Rem    sichandr    08/11/08 - Created
SQL> Rem
SQL> 
SQL> CREATE OR REPLACE PACKAGE xdb.dbms_xdbrepos AUTHID CURRENT_USER IS
  2  
  3    ---------------------------------------------
  4    --  OVERVIEW
  5    --
  6    --  This package provides procedures to
  7    --  (*) create a self-contained repository
  8    --  (*) delete a previously registered repository
  9    --  (*) alter a previously created repository
 10    --
 11    ---------------------------------------------
 12  
 13  ------------
 14  -- CONSTANTS
 15  --
 16  ------------
 17  ACL_SECURITY        CONSTANT NUMBER := 1;
 18  EVENTS              CONSTANT NUMBER := 2;
 19  VERSIONING          CONSTANT NUMBER := 4;
 20  CONFIG_FILE         CONSTANT NUMBER := 8;
 21  DOCUMENT_LINKS      CONSTANT NUMBER := 16;
 22  NFS_LOCKS           CONSTANT NUMBER := 32;
 23  
 24  FULL_FEATURED       CONSTANT NUMBER := 63;
 25  
 26  -------------
 27  -- DEBUG MODE
 28  --
 29  -------------
 30  DEBUG_MODE          NUMBER := 0;
 31  
 32  ---------------------------------------------
 33  -- FUNCTION - CreateRepository
 34  --     Creates a self-contained repository
 35  -- PARAMETERS -
 36  --  reposOwner
 37  --     Owner of repository (database user)
 38  --  reposName
 39  --     Name of repository (same restrictions as table names)
 40  --  reposOptions
 41  --     Repository configuration options
 42  ---------------------------------------------
 43  PROCEDURE CreateRepository(reposOwner IN VARCHAR2,
 44                    reposName IN VARCHAR2,
 45                    reposOptions IN PLS_INTEGER);
 46  
 47  ---------------------------------------------
 48  -- FUNCTION - DropRepository
 49  --     Drops repository and contents
 50  -- PARAMETERS -
 51  --  reposOwner
 52  --     Owner of repository (database user)
 53  --  reposName
 54  --     Name of repository (same restrictions as table names)
 55  ---------------------------------------------
 56  PROCEDURE DropRepository(reposOwner IN VARCHAR2,
 57                    reposName IN VARCHAR2);
 58  
 59  ---------------------------------------------
 60  -- FUNCTION - SetCurrentRepository
 61  --     Sets current repository for all subsequent resource
 62  --     operations
 63  -- PARAMETERS -
 64  --  reposOwner
 65  --     Owner of repository (database user)
 66  --  reposName
 67  --     Name of repository (same restrictions as table names)
 68  ---------------------------------------------
 69  PROCEDURE SetCurrentRepository(reposOwner IN VARCHAR2,
 70                    reposName IN VARCHAR2);
 71  
 72  ---------------------------------------------
 73  -- FUNCTION - MountRepository
 74  --     Mounts specified repository at a given path in
 75  --     source repository
 76  -- PARAMETERS -
 77  --  parentReposOwner
 78  --     Owner of destination repository (database user)
 79  --  parentReposName
 80  --     Name of destination repository (same restrictions as table names)
 81  --  parentMntPath
 82  --     Path in the destination repository where mounting should occur
 83  --  mountedReposOwner
 84  --     Owner of source repository (database user)
 85  --  mountedReposName
 86  --     Name of source repository (same restrictions as table names)
 87  --  mountedPath
 88  --     Path in the source repository to mount
 89  ---------------------------------------------
 90  PROCEDURE MountRepository(parentReposOwner IN VARCHAR2,
 91                    parentReposName IN VARCHAR2,
 92                    parentMntPath IN VARCHAR2,
 93                    mountedReposOwner IN VARCHAR2,
 94                    mountedReposName IN VARCHAR2,
 95                    mountedPath IN VARCHAR2  );
 96  
 97  ---------------------------------------------
 98  -- FUNCTION - UnMountRepository
 99  --     Unmounts repository from specified path
100  -- PARAMETERS -
101  --  parentReposOwner
102  --     Owner of destination repository (database user)
103  --  parentReposName
104  --     Name of destination repository (same restrictions as table names)
105  --  mountPath
106  --     Mount path in the destination repository to be removed
107  ---------------------------------------------
108  PROCEDURE UnMountRepository(parentReposOwner IN VARCHAR2,
109                    parentReposName IN VARCHAR2,
110                    mountPath IN VARCHAR2  );
111  
112  PROCEDURE Install_Repos(schema IN VARCHAR2, tables IN
113                          XDB$STRING_LIST_T);
114  PROCEDURE Drop_Repos(schema IN VARCHAR2, tables IN
115                       XDB$STRING_LIST_T);
116  end dbms_xdbrepos;
117  /

Package created.

SQL> 
SQL> GRANT EXECUTE ON xdb.dbms_xdbrepos TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> @@prvtxdbrepos.plb
SQL> SET ECHO ON
SQL> SET FEEDBACK 1
SQL> SET NUMWIDTH 10
SQL> SET LINESIZE 80
SQL> SET TRIMSPOOL ON
SQL> SET TAB OFF
SQL> SET PAGESIZE 100
SQL> create or replace package body xdb.dbms_xdbrepos wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  223e 85d
 21  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
 50  egaWVq0M4euBD7UdemADOg==
 51  
 52  /

Package body created.

SQL> 
SQL> Rem Create helper package for text index on xdb resource data
SQL> COLUMN xdb_name NEW_VALUE xdb_file NOPRINT;
SQL> SELECT dbms_registry.script('CONTEXT','@dbmsxdbt.sql') AS xdb_name FROM DUAL;




1 row selected.

SQL> @&xdb_file
SQL> Rem $Header: nothing.sql 18-oct-2001.09:57:38 Exp $
SQL> 
SQL> 
SQL> 
SQL> Rem Add XML schema definitions for LCRs
SQL> @@catxlcr
SQL> Rem
SQL> Rem $Header: catxlcr.sql 21-aug-2003.12:59:56 spannala Exp $
SQL> Rem
SQL> Rem catxlcr.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2003, Oracle Corporation.  All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxlcr.sql - XML schema definition for LCRs
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script registers the LCR schema
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    spannala    08/21/03 - using package variables to register the lcr
SQL> Rem    htran       06/26/03 - add long_information
SQL> Rem    alakshmi    01/21/03 - remove lines for testing
SQL> Rem    liwong      09/09/02 - extra attributes
SQL> Rem    alakshmi    08/22/02 - lrg 102518
SQL> Rem    rvenkate    02/14/02 - varchar is not supported
SQL> Rem    alakshmi    02/04/02 - Lob support
SQL> Rem    alakshmi    01/30/02 - minOccurs=0 for object_type
SQL> Rem    alakshmi    01/23/02 - SQLType:CHAR=>VARCHAR2
SQL> Rem    alakshmi    01/15/02 - Merged alakshmi_xml_supp
SQL> Rem    alakshmi    01/15/02 - targetNamespace changes
SQL> Rem    alakshmi    01/07/02 - DDL LCR
SQL> Rem    alakshmi    12/10/01 - Created
SQL> Rem
SQL> 
SQL> @@catxlcr1.sql
SQL> Rem
SQL> Rem $Header: catxlcr1.sql 20-nov-2003.09:08:16 alakshmi Exp $
SQL> Rem
SQL> Rem catxlcr1.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2003, Oracle Corporation.  All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxlcr1.sql - XML schema definition for LCRs
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script declares the LCR schema
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    alakshmi    10/16/03 - Bug 3197273
SQL> Rem    bpwang      11/07/03 - Bug 3240955: Store rowid extra attr as urowid
SQL> Rem    spannala    08/29/03 - spannala_upglrg_2
SQL> Rem    sichandr    07/28/03 - add LCR Schema
SQL> Rem    sichandr    07/28/03 - Created
SQL> Rem
SQL> 
SQL> create or replace package lcr$_xml_schema as
  2  
  3    CONFIGURL VARCHAR2(2000) :=
  4               'http://xmlns.oracle.com/streams/schemas/lcr/streamslcr.xsd';
  5    CONFIGXSD_10101 VARCHAR2(20000) :=
  6  '<schema xmlns="http://www.w3.org/2001/XMLSchema"
  7          targetNamespace="http://xmlns.oracle.com/streams/schemas/lcr"
  8          xmlns:lcr="http://xmlns.oracle.com/streams/schemas/lcr"
  9          xmlns:xdb="http://xmlns.oracle.com/xdb"
 10            version="1.0"
 11          elementFormDefault="qualified">
 12  
 13    <simpleType name = "short_name">
 14      <restriction base = "string">
 15        <maxLength value="30"/>
 16      </restriction>
 17    </simpleType>
 18  
 19    <simpleType name = "long_name">
 20      <restriction base = "string">
 21        <maxLength value="4000"/>
 22      </restriction>
 23    </simpleType>
 24  
 25    <simpleType name = "db_name">
 26      <restriction base = "string">
 27        <maxLength value="128"/>
 28      </restriction>
 29    </simpleType>
 30  
 31    <!-- Default session parameter is used if format is not specified -->
 32    <complexType name="datetime_format">
 33      <sequence>
 34        <element name = "value" type = "string" nillable="true"/>
 35        <element name = "format" type = "string" minOccurs="0" nillable="true"/>
 36      </sequence>
 37    </complexType>
 38  
 39    <complexType name="anydata">
 40      <choice>
 41        <element name="varchar2" type = "string" xdb:SQLType="CLOB"
 42                                                          nillable="true"/>
 43  
 44        <!-- Represent char as varchar2. xdb:CHAR blank pads upto 2000 bytes! -->
 45        <element name="char" type = "string" xdb:SQLType="CLOB"
 46                                                          nillable="true"/>
 47        <element name="nchar" type = "string" xdb:SQLType="NCLOB"
 48                                                          nillable="true"/>
 49  
 50        <element name="nvarchar2" type = "string" xdb:SQLType="NCLOB"
 51                                                          nillable="true"/>
 52        <element name="number" type = "double" xdb:SQLType="NUMBER"
 53                                                          nillable="true"/>
 54        <element name="raw" type = "hexBinary" xdb:SQLType="BLOB"
 55                                                          nillable="true"/>
 56        <element name="date" type = "lcr:datetime_format"/>
 57        <element name="timestamp" type = "lcr:datetime_format"/>
 58        <element name="timestamp_tz" type = "lcr:datetime_format"/>
 59        <element name="timestamp_ltz" type = "lcr:datetime_format"/>
 60  
 61        <!-- Interval YM should be as per format allowed by SQL -->
 62        <element name="interval_ym" type = "string" nillable="true"/>
 63  
 64        <!-- Interval DS should be as per format allowed by SQL -->
 65        <element name="interval_ds" type = "string" nillable="true"/>
 66  
 67        <element name="urowid" type = "string" xdb:SQLType="VARCHAR2"
 68                                                          nillable="true"/>
 69      </choice>
 70    </complexType>
 71  
 72    <complexType name="column_value">
 73      <sequence>
 74        <element name = "column_name" type = "lcr:long_name" nillable="false"/>
 75        <element name = "data" type = "lcr:anydata" nillable="false"/>
 76        <element name = "lob_information" type = "string" minOccurs="0"
 77                                                             nillable="true"/>
 78        <element name = "lob_offset" type = "nonNegativeInteger" minOccurs="0"
 79                                                             nillable="true"/>
 80        <element name = "lob_operation_size" type = "nonNegativeInteger"
 81                                               minOccurs="0" nillable="true"/>
 82        <element name = "long_information" type = "string" minOccurs="0"
 83                                                             nillable="true"/>
 84      </sequence>
 85    </complexType>
 86  
 87    <complexType name="extra_attribute">
 88      <sequence>
 89        <element name = "attribute_name" type = "lcr:short_name"/>
 90        <element name = "attribute_value" type = "lcr:anydata"/>
 91      </sequence>
 92    </complexType>
 93  
 94    <element name = "ROW_LCR" xdb:defaultTable="">
 95      <complexType>
 96        <sequence>
 97          <element name = "source_database_name" type = "lcr:db_name"
 98                                                              nillable="false"/>
 99          <element name = "command_type" type = "string" nillable="false"/>
100          <element name = "object_owner" type = "lcr:short_name"
101                                                              nillable="false"/>
102          <element name = "object_name" type = "lcr:short_name"
103                                                              nillable="false"/>
104          <element name = "tag" type = "hexBinary" xdb:SQLType="RAW"
105                                                 minOccurs="0" nillable="true"/>
106          <element name = "transaction_id" type = "string" minOccurs="0"
107                                                               nillable="true"/>
108          <element name = "scn" type = "double" xdb:SQLType="NUMBER"
109                                                 minOccurs="0" nillable="true"/>
110          <element name = "old_values" minOccurs = "0">
111            <complexType>
112              <sequence>
113                <element name = "old_value" type="lcr:column_value"
114                                                      maxOccurs = "unbounded"/>
115              </sequence>
116            </complexType>
117          </element>
118          <element name = "new_values" minOccurs = "0">
119            <complexType>
120              <sequence>
121                <element name = "new_value" type="lcr:column_value"
122                                                      maxOccurs = "unbounded"/>
123              </sequence>
124            </complexType>
125          </element>
126          <element name = "extra_attribute_values" minOccurs = "0">
127            <complexType>
128              <sequence>
129                <element name = "extra_attribute_value"
130                         type="lcr:extra_attribute"
131                         maxOccurs = "unbounded"/>
132              </sequence>
133            </complexType>
134          </element>
135        </sequence>
136      </complexType>
137    </element>
138  
139    <element name = "DDL_LCR" xdb:defaultTable="">
140      <complexType>
141        <sequence>
142          <element name = "source_database_name" type = "lcr:db_name"
143                                                          nillable="false"/>
144          <element name = "command_type" type = "string" nillable="false"/>
145          <element name = "current_schema" type = "lcr:short_name"
146                                                          nillable="false"/>
147          <element name = "ddl_text" type = "string" xdb:SQLType="CLOB"
148                                                          nillable="false"/>
149          <element name = "object_type" type = "string"
150                                          minOccurs = "0" nillable="true"/>
151          <element name = "object_owner" type = "lcr:short_name"
152                                          minOccurs = "0" nillable="true"/>
153          <element name = "object_name" type = "lcr:short_name"
154                                          minOccurs = "0" nillable="true"/>
155          <element name = "logon_user" type = "lcr:short_name"
156                                          minOccurs = "0" nillable="true"/>
157          <element name = "base_table_owner" type = "lcr:short_name"
158                                          minOccurs = "0" nillable="true"/>
159          <element name = "base_table_name" type = "lcr:short_name"
160                                          minOccurs = "0" nillable="true"/>
161          <element name = "tag" type = "hexBinary" xdb:SQLType="RAW"
162                                          minOccurs = "0" nillable="true"/>
163          <element name = "transaction_id" type = "string"
164                                          minOccurs = "0" nillable="true"/>
165          <element name = "scn" type = "double" xdb:SQLType="NUMBER"
166                                          minOccurs = "0" nillable="true"/>
167          <element name = "extra_attribute_values" minOccurs = "0">
168            <complexType>
169              <sequence>
170                <element name = "extra_attribute_value"
171                         type="lcr:extra_attribute"
172                         maxOccurs = "unbounded"/>
173              </sequence>
174            </complexType>
175          </element>
176        </sequence>
177      </complexType>
178    </element>
179  </schema>';
180  
181    CONFIGXSD_9204 VARCHAR2(20000) :=
182  '<schema xmlns="http://www.w3.org/2001/XMLSchema"
183          targetNamespace="http://xmlns.oracle.com/streams/schemas/lcr"
184          xmlns:lcr="http://xmlns.oracle.com/streams/schemas/lcr"
185          xmlns:xdb="http://xmlns.oracle.com/xdb"
186            version="1.0"
187          elementFormDefault="qualified">
188  
189    <simpleType name = "short_name">
190      <restriction base = "string">
191        <maxLength value="30"/>
192      </restriction>
193    </simpleType>
194  
195    <simpleType name = "long_name">
196      <restriction base = "string">
197        <maxLength value="4000"/>
198      </restriction>
199    </simpleType>
200  
201    <simpleType name = "db_name">
202      <restriction base = "string">
203        <maxLength value="128"/>
204      </restriction>
205    </simpleType>
206  
207    <!-- Default session parameter is used if format is not specified -->
208    <complexType name="datetime_format">
209      <sequence>
210        <element name = "value" type = "string" nillable="true"/>
211        <element name = "format" type = "string" minOccurs="0" nillable="true"/>
212      </sequence>
213    </complexType>
214  
215    <complexType name="anydata">
216      <choice>
217        <element name="varchar2" type = "string" xdb:SQLType="VARCHAR2"
218                                                          nillable="true"/>
219  
220        <!-- Represent char as varchar2. xdb:CHAR blank pads upto 2000 bytes! -->
221        <element name="char" type = "string" xdb:SQLType="VARCHAR2"
222                                                          nillable="true"/>
223        <element name="nchar" type = "string" xdb:SQLType="NVARCHAR2"
224                                                          nillable="true"/>
225  
226        <element name="nvarchar2" type = "string" xdb:SQLType="NVARCHAR2"
227                                                          nillable="true"/>
228        <element name="number" type = "double" xdb:SQLType="NUMBER"
229                                                          nillable="true"/>
230        <element name="raw" type = "hexBinary" xdb:SQLType="RAW"
231                                                          nillable="true"/>
232        <element name="date" type = "lcr:datetime_format"/>
233        <element name="timestamp" type = "lcr:datetime_format"/>
234        <element name="timestamp_tz" type = "lcr:datetime_format"/>
235        <element name="timestamp_ltz" type = "lcr:datetime_format"/>
236  
237        <!-- Interval YM should be as per format allowed by SQL -->
238        <element name="interval_ym" type = "string" nillable="true"/>
239  
240        <!-- Interval DS should be as per format allowed by SQL -->
241        <element name="interval_ds" type = "string" nillable="true"/>
242  
243      </choice>
244    </complexType>
245  
246    <complexType name="column_value">
247      <sequence>
248        <element name = "column_name" type = "lcr:long_name" nillable="false"/>
249        <element name = "data" type = "lcr:anydata" nillable="false"/>
250        <element name = "lob_information" type = "string" minOccurs="0"
251                                                             nillable="true"/>
252        <element name = "lob_offset" type = "nonNegativeInteger" minOccurs="0"
253                                                             nillable="true"/>
254        <element name = "lob_operation_size" type = "nonNegativeInteger"
255                                               minOccurs="0" nillable="true"/>
256      </sequence>
257    </complexType>
258  
259    <element name = "ROW_LCR">
260      <complexType>
261        <sequence>
262          <element name = "source_database_name" type = "lcr:db_name"
263                                                              nillable="false"/>
264          <element name = "command_type" type = "string" nillable="false"/>
265          <element name = "object_owner" type = "lcr:short_name"
266                                                              nillable="false"/>
267          <element name = "object_name" type = "lcr:short_name"
268                                                              nillable="false"/>
269          <element name = "tag" type = "hexBinary" xdb:SQLType="RAW"
270                                                 minOccurs="0" nillable="true"/>
271          <element name = "transaction_id" type = "string" minOccurs="0"
272                                                               nillable="true"/>
273          <element name = "scn" type = "double" xdb:SQLType="NUMBER"
274                                                 minOccurs="0" nillable="true"/>
275          <element name = "old_values" minOccurs = "0">
276            <complexType>
277              <sequence>
278                <element name = "old_value" type="lcr:column_value"
279                                                      maxOccurs = "unbounded"/>
280              </sequence>
281            </complexType>
282          </element>
283          <element name = "new_values" minOccurs = "0">
284            <complexType>
285              <sequence>
286                <element name = "new_value" type="lcr:column_value"
287                                                      maxOccurs = "unbounded"/>
288              </sequence>
289            </complexType>
290          </element>
291        </sequence>
292      </complexType>
293    </element>
294  
295    <element name = "DDL_LCR">
296      <complexType>
297        <sequence>
298          <element name = "source_database_name" type = "lcr:db_name"
299                                                          nillable="false"/>
300          <element name = "command_type" type = "string" nillable="false"/>
301          <element name = "current_schema" type = "lcr:short_name"
302                                                          nillable="false"/>
303          <element name = "ddl_text" type = "string" nillable="false"/>
304          <element name = "object_type" type = "string"
305                                          minOccurs = "0" nillable="true"/>
306          <element name = "object_owner" type = "lcr:short_name"
307                                          minOccurs = "0" nillable="true"/>
308          <element name = "object_name" type = "lcr:short_name"
309                                          minOccurs = "0" nillable="true"/>
310          <element name = "logon_user" type = "lcr:short_name"
311                                          minOccurs = "0" nillable="true"/>
312          <element name = "base_table_owner" type = "lcr:short_name"
313                                          minOccurs = "0" nillable="true"/>
314          <element name = "base_table_name" type = "lcr:short_name"
315                                          minOccurs = "0" nillable="true"/>
316          <element name = "tag" type = "hexBinary" xdb:SQLType="RAW"
317                                          minOccurs = "0" nillable="true"/>
318          <element name = "transaction_id" type = "string"
319                                          minOccurs = "0" nillable="true"/>
320          <element name = "scn" type = "double" xdb:SQLType="NUMBER"
321                                          minOccurs = "0" nillable="true"/>
322        </sequence>
323      </complexType>
324    </element>
325  </schema>';
326  end;
327  /

Package created.

SQL> 
SQL> 
SQL> begin
  2    dbms_xmlschema.registerSchema(schemaURL => lcr$_xml_schema.CONFIGURL,
  3                                  schemaDoc => lcr$_xml_schema.CONFIGXSD_10101,
  4                                  local => FALSE,
  5                                  genTypes => TRUE,
  6                                  genBean => FALSE,
  7                                  genTables => FALSE,
  8                                  force => FALSE);
  9  end;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> Rem Indicate that xdb has been Loaded
SQL> begin
  2  dbms_registry.loaded('XDB', dbms_registry.release_version,
  3             'Oracle XML Database Version ' || dbms_registry.release_version ||
  4             ' - ' || dbms_registry.release_status);
  5  end;
  6  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Create a schedule for cleanup of expired nfs clients job
SQL> Rem Disabling the job for 11gR1. It needs to be reenabled
SQL> Rem explicitly by customers, or enabled automatically by NFS
SQL> Rem server in 11gR2.
SQL> Rem dbms_scheduler.enable('nfsclient_cleanup_job');
SQL> 
SQL> DECLARE
  2    c number;
  3  BEGIN
  4    select count(*) into c
  5    from ALL_SCHEDULER_JOB_CLASSES
  6    where JOB_CLASS_NAME = 'XMLDB_NFS_JOBCLASS';
  7  
  8    if c = 0 then
  9      dbms_scheduler.create_job_class(
 10        job_class_name  => 'SYS.XMLDB_NFS_JOBCLASS',
 11        logging_level   => DBMS_SCHEDULER.LOGGING_FAILED_RUNS);
 12    end if;
 13  
 14    select count(*) into c
 15    from ALL_SCHEDULER_JOBS
 16    where JOB_NAME = 'XMLDB_NFS_CLEANUP_JOB';
 17  
 18    if c = 0 then
 19      dbms_scheduler.create_job(
 20          job_name => 'SYS.XMLDB_NFS_CLEANUP_JOB' ,
 21          job_type=>'STORED_PROCEDURE',
 22          job_action=>'xdb.dbms_xdbutil_int.cleanup_expired_nfsclients',
 23          job_class=>'SYS.XMLDB_NFS_JOBCLASS',
 24          repeat_interval=>'Freq=minutely;interval=5');
 25    end if;
 26    execute immediate 'delete from noexp$ where name = :1' using 'XMLDB_NFS_JOBCLASS';
 27    execute immediate 'insert into noexp$ (owner, name, obj_type) values(:1, :2, :3)' using 'SYS', 'XMLDB_NFS_JOBCLASS', '68';
 28  end;
 29  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Create the registry package and the validation procedure
SQL> @@dbmsxreg
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmsxreg.sql /main/3 2008/10/16 13:07:48 badeoti Exp $
SQL> Rem
SQL> Rem dbmsxreg.sql
SQL> Rem
SQL> Rem Copyright (c) 2002, 2008, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsxreg.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Package definiton of the registry package.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    badeoti     04/08/08 - add object validation
SQL> Rem    pnath       10/25/04 - Make SYS the owner of DBMS_REGXDB package
SQL> Rem    spannala    01/09/02 - Merged spannala_upg
SQL> Rem    spannala    01/03/02 - Created
SQL> Rem
SQL> 
SQL> create or replace package sys.DBMS_REGXDB authid current_user as
  2    procedure validatexdb;
  3    procedure validatexdb_objs;
  4  end dbms_regxdb;
  5  /

Package created.

SQL> 
SQL> 
SQL> 
SQL> grant execute on dbms_registry to xdb;

Grant succeeded.

SQL> 
SQL> @@prvtxreg.plb
SQL> CREATE OR REPLACE package body sys.dbms_regxdb wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  61f 374
 21  G2oG5WuM0gdmQbygorER61uzUnEwg43DDMeDfC+5WA8tAIjJFrLNXdOXNWHpUTxhevFxFaGE
 22  3RT13dxCXX+3LJoNFKxO4H10VDwinVVzPD69P/fHniIogHzto+KBxZ0/dYf79/A5Z+W3VhjK
 23  U8pRMXmBxfdzY6xbIUc2ApoU4KjM0mXSKv6q8nDTgSIAF71B1LQAXVqfZZTeNR0csKQSEaFE
 24  78zrhKpyyWcMq7NnN/rX05Wky4z95xyEfbfFiKuh73aHaUYVB72UUFu22YX7WtOsR8/22LbT
 25  XjbncrNuN2bFt41JDFkAMiA3OAMEP9KY2vVUgH3G05mtFwn0zMZC7VYVel+kcsPsJsv5MtvT
 26  g9JAhlx/luJyps1rFrs4h2jwH07eEv7hQz1Pz8KTathob+sDxYsHs6LyfAMyUJUwWBLNu7Bi
 27  MCOsTeIxehlRiwWhHmlWHgiV9k9BYQhnukuVdFOmiqhTa+br8E08sTO5UWAp+RXmGtOiWi+T
 28  THEPmqQGa38cf4XQYDFlkuNOjm5DxnnbfZAjoYFgPPXo5uvy/fHgBsU1PZMjiFDDf0GK41hn
 29  FSpI57MdQWtr5aLL+rrF7RTxvXnO0rkVMUzWGGDJTOAs/b88B7cZBZTP7bBKY36mZFNWMqQd
 30  n8L2ytrbuQ6cIYWOSspK3oV8Vnqur7rBmRR2RdcrQ9MrOkVo4hu+vBPB/hLVU5366q1dqsSG
 31  laOaSnh4LjUB/Xq71T8/GwF/Ew+/HKeZcvaBmEFznnVlEtE24cQBqj8CLzOh+b/4QYKMMAu/
 32  IMQjxmK89svcWLIj8Jy7uy/W736oYu/L8U6mi6G+TFliGUJ/VZxLB8d0fgwDnor/01ztrrWm
 33  +EttTA==
 34  
 35  /

Package body created.

SQL> show errors
No errors.
SQL> 
SQL> Rem Part 2 of ACL setup
SQL> @@prvtxdz2.plb
SQL> create or replace package xdb.xdb$acl_pkg_int wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  d3 fb
 21  59oBLkvGtJDKlRQZlFcOp+ca3P8wgy5KAJkVZy+iO7vqfjjzmMqfJjzZ1FaHPAsgrqCeP6nj
 22  Zm9v+c+35i11yY/tWOM/8NWs/jpXAG65c06fKWTQnGp+YrGPA8X0ga334Um4YdA2+iG4wi18
 23  cTmsLh26w5pR/23pk6cDlyqTNAhgPxhNVkHvQDbyp1w/7IX34Zk9qsMYXYiE0CKOhHCxAlIj
 24  MwFsv9nuCS5ggy10qzON7yYK+lvU6Xt+
 25  
 26  /

Package created.

SQL> create or replace package body xdb.xdb$acl_pkg_int wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  2a1 21b
 21  eEG83VPR26q23S26Ms9tN/BUfJswg2PMTK4VfI6BWA9ShFlhbFNrCL1qhCnRg7QNLgW9emLn
 22  XvThOW9qcsTNqREGEyj4fQDBaBJyJmbS92jvX5Ei1mqbOsC8zk0img8KPegpfB2kqVI+TQEJ
 23  pmINYDjVY1gOWfNIZ4xiDaYLKhfUrOCerbZ1hNVEUPGMykQVtrPSN30TzmGau0m/y3buALZi
 24  2R52MtOA5XZSYIxnzsyWsvxXrSvGCR0DVKm3xjmtCf2L3VTZ4UdHGjnwUv3qvCfTjwnlDuSz
 25  s3haAD9+GGYoNJjcmL98i6hbRoOtOYzIZRXV5kKKHHVvaP+OG7B8opNfaYRKbzKvRtkCzJzG
 26  Js29LHRVLMHBFOE/9cfN2JOItDsLIFaWvSDQt1t351cyO/DIrZIqIy8BubnCklB3E0P5/AHE
 27  TIAAV4M548se0Nc/tBD27HI1pwJeRVWtoZDRYR5HVe2xsAdzwv1sfPXaU3UFEfl2IQ93MSdO
 28  XLvstfA6lFO1boT+ZG0geXs7sw==
 29  
 30  /

Package body created.

SQL> grant execute on xdb.xdb$acl_pkg_int to public;

Grant succeeded.

SQL> declare
  2    lev     BINARY_INTEGER;
  3    newlvls varchar2(20);
  4    lvls    varchar2(20);
  5  BEGIN
  6    dbms_system.read_ev(31150, lev);
  7    lvls := '0x' ||
  8             ltrim(to_char(rawtohex(utl_raw.cast_from_binary_integer(lev))),'0');
  9  
 10  
 11    newlvls := '0x' ||
 12        ltrim(to_char(rawtohex(utl_raw.bit_or(
 13                                 utl_raw.cast_from_binary_integer(lev),
 14                                 utl_raw.cast_from_binary_integer(4)))), '0');
 15  
 16    execute immediate
 17      'alter session set events ''31150 trace name context forever, level ' ||
 18      newlvls || ''' ';
 19  
 20    dbms_output.put_line('event 31150: old level = ' || lvls || ', new = ' || newlvls);
 21  end;
 22  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2   lev BINARY_INTEGER;
  3  BEGIN
  4    dbms_system.read_ev(31150, lev);
  5    dbms_output.put_line('0x' ||
  6        ltrim(to_char(rawtohex(utl_raw.cast_from_binary_integer(lev))),'0'));
  7  END;
  8  /

PL/SQL procedure successfully completed.

SQL> declare
  2    cur integer;
  3    rc  integer;
  4  begin
  5    cur := dbms_sql.open_cursor;
  6    dbms_sql.parse(cur,
  7       'create index xdb.xdb$acl_xidx on xdb.xdb$acl(object_value) '||
  8       'indextype is xdb.xmlindex '||
  9       'parameters(''PATH TABLE XDBACL_PATH_TAB VALUE INDEX XDBACL_PATH_TAB_VALUE_IDX'') ',
 10      dbms_sql.native);
 11    rc := dbms_sql.execute(cur);
 12    dbms_sql.close_cursor(cur);
 13  end;
 14  /

PL/SQL procedure successfully completed.

SQL> declare
  2    cur integer;
  3    rc  integer;
  4  begin
  5    cur := dbms_sql.open_cursor;
  6    dbms_sql.parse(cur,
  7       'create index xdb.xdb$acl_spidx on xdb.xdb$acl(xdb.xdb$acl_pkg_int.special_acl(object_value), object_id)',
  8      dbms_sql.native);
  9    rc := dbms_sql.execute(cur);
 10    dbms_sql.close_cursor(cur);
 11  end;
 12  /

PL/SQL procedure successfully completed.

SQL> 
SQL> revoke administer database trigger from xdb;

Revoke succeeded.

SQL> 
SQL> set serveroutput on
SQL> set long 10000
SQL> 
SQL> Rem at catqm.sql, Invoke Validation for registry.
SQL> execute sys.dbms_regxdb.validatexdb;

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Show that no upgrade is needed to bring XDB to a valid 10.1 state.
SQL> BEGIN
  2    IF dbms_registry.status('XDB') = 'VALID' THEN
  3      execute immediate 'create table xdb.migr9202status (n integer)';
  4      execute immediate 'insert into xdb.migr9202status values (1000)';
  5    END IF;
  6  END;
  7  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem drop objects created to track object creation during XDB
SQL> Rem installation
SQL> drop trigger sys.xdb_installation_trigger;

Trigger dropped.

SQL> drop trigger sys.dropped_xdb_instll_trigger;

Trigger dropped.

SQL> drop table dropped_xdb_instll_tab;

Table dropped.

SQL> drop package xdb.xdb$bootstrap;

Package dropped.

SQL> drop package xdb.xdb$bootstrapres;

Package dropped.

SQL> drop function xdb.xdb$getPickledNS;

Function dropped.

SQL> 
SQL> commit;

Commit complete.

SQL> 
SQL> prompt XML DB Installation completed
XML DB Installation completed
SQL> prompt ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SQL> prompt

SQL> prompt

SQL> prompt Triggering Extensible Security (XS) Installation ...
Triggering Extensible Security (XS) Installation ...
SQL> prompt ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SQL> 
SQL> -- Always keep this at the end. XS
SQL> Rem Initialize bootstrap extensible security
SQL> @@catzxs.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catzxs.sql /st_rdbms_11.2.0/1 2013/04/24 13:57:42 yanlili Exp $
SQL> Rem
SQL> Rem catzxs.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2013, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catzxs.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    yanlili     04/19/13 - Backport minx_bug-16369584 from main
SQL> Rem    snadhika    04/14/10 - Remove PREDICATE xmlindex
SQL> Rem    yiru        03/06/09 - lock XS$NULL
SQL> Rem    yiru        02/20/09 - Fix bug 7331368: change timestamp literal when
SQL> Rem                           inserting values into xs$cache_actions
SQL> Rem    samane      04/22/08 - fixed bug 6820989: undo changes of srtata 02/13/08
SQL> Rem    srtata      03/03/08 - cleanup cache_actions grants
SQL> Rem    srtata      02/13/08 - create xspublic, xsguest after seed roles
SQL> Rem    jsamuel     12/27/07 - xml index on xsprincipals
SQL> Rem    chliang     11/15/07 - make xs tables hierarchy_enabled
SQL> Rem    taahmed     10/11/07 - remove dav::all from DAV::dav sec class
SQL> Rem    asurpur     10/04/07 - use fixed time for retension in xs$cache_actions
SQL> Rem    asurpur     09/27/07 - Extend mid-tier cache to support role
SQL> Rem                           invalidation
SQL> Rem    jsamuel     09/19/07 - add xsCallback privilege
SQL> Rem    pknaggs     08/24/07 - DSD schema: aclids to aclFiles or aclDirectory.
SQL> Rem    taahmed     06/28/07 - bug 6061975
SQL> Rem    jnarasin    03/29/07 - Add dbms_auth, dbms_passwd, midtier_auth dynamic
SQL> Rem                           roles
SQL> Rem    jnarasin    05/03/07 - Fix Bug 6020435
SQL> Rem    asurpur     03/20/07 - Fix bug 5885811 - change xspublic uid
SQL> Rem    asurpur     03/20/07 - Fix bug 5885813 - add xsauthenticated to xspublic
SQL> Rem    taahmed     03/12/07 - version 11.1 for xsseccls.xsd xsdatasec.xsd
SQL> Rem    jsamuel     01/25/07 - new version of xsprin.xsd
SQL> Rem    jnarasin    11/21/06 - Fix SC path
SQL> Rem    jsamuel     11/19/06 - added system security class
SQL> Rem    pknaggs     11/07/06 - Remove principal targetNamespace (bug 5632273)
SQL> Rem    taahmed     10/30/06 - mutable security class
SQL> Rem    pthornto    09/18/06 - move *.xsd definitions to flat files
SQL> Rem    pknaggs     09/14/06 - Register securityClass as CSX (bug 5404947)
SQL> Rem    taahmed     09/13/06 -
> Rem    pknaggs     09/05/06 - Remove DSD attribute_mask element
SQL> Rem    pknaggs     08/02/06 - Make DSD baseSecurityClass optional
SQL> Rem    pknaggs     07/21/06 - Change DBA_XDS_ATTRIBUTE_SECS for privilege
SQL> Rem    pknaggs     07/19/06 - Change DSD to use CSX
SQL> Rem    mhho        08/31/06 - create XS$NULL
SQL> Rem    jnarasin    08/31/06 - Proxy user maxoccurs to be unbounded
SQL> Rem    jnarasin    08/22/06 - Session Privilege changes
SQL> Rem    srirasub    08/23/06 - principal document - convert to binary xml
SQL> Rem    taahmed     08/14/06 - xsguest user and xsauthenticated role seed
SQL> Rem                           document
SQL> Rem    mhho        08/18/06 - add apps_feature to global_var namespace
SQL> Rem    mxu         07/24/06 - Remove grant_type
SQL> Rem    taahmed     06/15/06 - added title, description, and any for datasec doc
SQL> Rem    rpang       06/27/06 - add PL/SQL network ACL security objects
SQL> Rem    clei        06/15/06 - add column level data security dic views
SQL> Rem    srtata      06/09/06 - add default schema, duration to principal.xsd
SQL> Rem    mhho        06/08/06 - ade views for lightweight user session
SQL> Rem    rmurthy     05/25/06 - remove xlink schema
SQL> Rem    pthornto    03/22/06 - add tables for Mid-Tier cache
SQL> Rem    mhho        03/27/06 - add lws privileges
SQL> Rem    pknaggs     03/26/06 - XSC catalog views
SQL> Rem    cchui       03/22/06 - fix principal security class
SQL> Rem    petam       03/11/06 - make DAV:dav the bottom sec class
SQL> Rem    thbaby      03/09/06 - handle dav-xdb security class cyclic dependency
SQL> Rem    taahmed     02/26/06 - system and dav privileges
SQL> Rem    taahmed     02/11/06 - security class xml doc
SQL> Rem    cchui       02/22/06 - add folder for xs repository event
SQL> Rem                           configurations
SQL> Rem    taahmed     02/26/06 - system and dav privileges
SQL> Rem    taahmed     02/11/06 - security class xml doc
SQL> Rem    cchui       02/14/06 - update principal schema
SQL> Rem    taahmed     01/25/06 - add XML schemas for extensible security
SQL> Rem    taahmed     01/18/06 - Initialize Extensible Security
SQL> Rem    taahmed     01/18/06 - Initialize Extensible Security
SQL> Rem    taahmed     01/18/06 - Created
SQL> Rem
SQL> 
SQL> DECLARE
  2    result BOOLEAN;
  3  BEGIN
  4    result := dbms_xdb.createFolder('/sys/xs');
  5    result := dbms_xdb.createFolder('/sys/xs/securityclasses');
  6    result := dbms_xdb.createFolder('/sys/xs/roles');
  7    result := dbms_xdb.createFolder('/sys/xs/users');
  8  END;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- need this package to load the schema inforamtion from flat files.
SQL> -- First create a directory (db) to load the docs. Load Schemas then
SQL> -- drop the package after
SQL> @@catxdbh
SQL> Rem
SQL> Rem $Header: catxdbh.sql 06-oct-2006.09:59:54 lbarton Exp $
SQL> Rem
SQL> Rem catxdbh.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbh.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    lbarton     10/06/06 - bug 5371722: restore _kolfuseslf to prior value
SQL> Rem    spetride    08/28/06 - support access xdbconfig.xml.11.0
SQL> Rem    mrafiq      04/07/06 - cleaning up
SQL> Rem    abagrawa    03/20/06 - Remove set echo on
SQL> Rem    abagrawa    03/11/06 - Contains dbms_metadata_hack
SQL> Rem    abagrawa    03/11/06 - Contains dbms_metadata_hack
SQL> Rem    abagrawa    03/11/06 - Created
SQL> Rem
SQL> 
SQL> --
SQL> -- Register XML schemas for SXML docs
SQL> -- When XDK is created by catproc.sql, this code can go into
SQL> --  dbms_metadata_util.  For now we keep it here.
SQL> --
SQL> create or replace package dbms_metadata_hack authid definer as
  2    procedure cre_dir;
  3    procedure drop_dir;
  4    function  get_bfile(filename varchar2) return BFILE;
  5    procedure load_xsd(filename varchar2,
  6                       gentypes1 boolean := FALSE);
  7    procedure deleteSchema(name varchar2);
  8  
  9    -- above procedures assume directory is rdbms/xml/schema
 10    -- following procedures are needed for rdbms/xml access
 11    procedure cre_xml_dir;
 12    procedure drop_xml_dir;
 13    function  get_xml_bfile(filename varchar2) return BFILE;
 14    function  get_xml_dirname return VARCHAR2;
 15  
 16  end dbms_metadata_hack;
 17  /

Package created.

SQL> show errors
No errors.
SQL> 
SQL> create or replace type dirnamesmh as varray(2) of varchar2(2000);
  2  /

Type created.

SQL> 
SQL> create or replace package body dbms_metadata_hack as
  2  --------------------------------------------------------------------
  3  -- PACKAGE STATE
  4  --
  5  kolfuseslf           VARCHAR2(4000) := 'FALSE';
  6  XML_DIR              CONSTANT BINARY_INTEGER := 1;
  7  SCHEMA_DIR           CONSTANT BINARY_INTEGER := 2;
  8  
  9  RDBMS_DIR  CONSTANT DIRNAMESMH := DIRNAMESMH(NULL, 'schema');
 10  LOGIC_DIR  CONSTANT DIRNAMESMH := DIRNAMESMH('XMLDIR', 'XSDDIR');
 11  -- XSDDIR: schema directory name
 12  -- XMLDIR: xml doc directory name
 13  
 14  -- Constants defined in rdbms/include/splatform3.h
 15  PLATFORM_WINDOWS32    CONSTANT BINARY_INTEGER := 7;
 16  PLATFORM_WINDOWS64    CONSTANT BINARY_INTEGER := 8;
 17  PLATFORM_OPENVMS      CONSTANT BINARY_INTEGER := 15;
 18  
 19  ---------------------------------------------------------------------
 20  -- GET_DIR_INT: Helper function. Return the platform-
 21  --  specific pathname for the rdbms/xml/`subdir` directory.
 22  -- RETURNS:
 23  --                      - directory containing XML data/schemas
 24  
 25    FUNCTION get_dir_int(subdir BINARY_INTEGER) RETURN VARCHAR2 IS
 26      -- local variables
 27      pfid        NUMBER;
 28      root        VARCHAR2(2000);
 29      oraroot     VARCHAR2(2000);
 30  BEGIN
 31    -- get the platform id
 32    SELECT platform_id INTO pfid FROM v$database;
 33  
 34    IF pfid = PLATFORM_OPENVMS THEN
 35      -- ORA_ROOT is a VMS logical name
 36      IF (subdir = XML_DIR) THEN
 37        oraroot := 'ORA_ROOT:[RDBMS.XML]';
 38      ELSE
 39         oraroot := 'ORA_ROOT:[RDBMS.XML.' || RDBMS_DIR(subdir) || ']';
 40      END IF;
 41      RETURN oraroot;
 42    ELSE
 43      -- Get ORACLE_HOME
 44      DBMS_SYSTEM.GET_ENV('ORACLE_HOME', root);
 45      -- Return platform-specific string
 46      IF pfid = PLATFORM_WINDOWS32 OR pfid = PLATFORM_WINDOWS64
 47      THEN
 48        IF (subdir = XML_DIR) THEN
 49          oraroot := root || '\rdbms\xml';
 50        ELSE
 51          oraroot := root || '\rdbms\xml\' || RDBMS_DIR(subdir);
 52        END IF;
 53        RETURN oraroot;
 54      ELSE
 55        IF (subdir = XML_DIR) THEN
 56          oraroot := root || '/rdbms/xml';
 57        ELSE
 58          oraroot := root || '/rdbms/xml/' || RDBMS_DIR(subdir);
 59        END IF;
 60        RETURN oraroot;
 61      END IF;
 62    END IF;
 63  END;
 64  
 65  
 66    FUNCTION get_schema_dir RETURN VARCHAR2 IS
 67      oraroot VARCHAR2(2000);
 68  BEGIN
 69    oraroot := get_dir_int(SCHEMA_DIR);
 70    RETURN oraroot;
 71  END;
 72  
 73  
 74    procedure drop_dir_int(subdir BINARY_INTEGER) is
 75      stmt                VARCHAR2(2000);
 76  BEGIN
 77    stmt := 'DROP DIRECTORY ' || LOGIC_DIR(subdir);
 78    EXECUTE IMMEDIATE stmt;
 79  
 80    -- alter session: disable use of symbolic links
 81    -- (restore the variable to its prior value)
 82    stmt := 'ALTER SESSION SET "_kolfuseslf" = ' || kolfuseslf;
 83    EXECUTE IMMEDIATE stmt;
 84  
 85  END;
 86  
 87    procedure cre_dir_int(subdir BINARY_INTEGER) is
 88      -- local variables
 89      kolfuseslf_cnt      NUMBER := 0;
 90      dirpath             VARCHAR2(2000);
 91      stmt                VARCHAR2(2000);
 92  BEGIN
 93    -- alter session: enable use of symbolic links
 94    -- first get the current value of _kolfuseslf (default FALSE)
 95    stmt := 'SELECT COUNT(*) FROM V$PARAMETER WHERE NAME=''_kolfuseslf''';
 96    EXECUTE IMMEDIATE stmt INTO kolfuseslf_cnt;
 97    IF kolfuseslf_cnt != 0 THEN
 98      stmt := 'SELECT VALUE FROM V$PARAMETER WHERE NAME=''_kolfuseslf''';
 99      EXECUTE IMMEDIATE stmt INTO kolfuseslf;
100    END IF;
101    stmt := 'ALTER SESSION SET "_kolfuseslf" = TRUE';
102    EXECUTE IMMEDIATE stmt;
103  
104    -- get directory path
105    dirpath := get_dir_int(subdir);
106  
107    -- create a directory object
108    stmt := 'CREATE OR REPLACE DIRECTORY ' || LOGIC_DIR(subdir) ||
109            ' AS ''' || dirpath || '''';
110    EXECUTE IMMEDIATE stmt;
111  
112    EXCEPTION WHEN OTHERS THEN
113      BEGIN
114      drop_dir_int(subdir);
115      RAISE;
116      END;
117  END;
118  
119  
120  
121    procedure cre_dir is
122  BEGIN
123     cre_dir_int(SCHEMA_DIR);
124  END;
125  
126  
127    procedure drop_dir is
128  BEGIN
129     drop_dir_int(SCHEMA_DIR);
130  END;
131  
132  
133    function get_bfile(filename varchar2) return BFILE is
134    begin
135      return BFILENAME(LOGIC_DIR(SCHEMA_DIR), filename);
136    end;
137  
138  
139    procedure load_xsd(filename varchar2,
140           gentypes1 boolean := FALSE) is
141    ssfile              BFILE;
142  begin
143    ssfile := BFILENAME(LOGIC_DIR(SCHEMA_DIR), filename);
144    dbms_xmlschema.registerSchema(filename, ssfile,TRUE,gentypes1,FALSE, FALSE);
145    EXCEPTION WHEN OTHERS THEN
146      BEGIN
147      ROLLBACK;
148      drop_dir;
149      RAISE;
150      END;
151  end;
152    procedure deleteSchema(name varchar2) is
153    err_num NUMBER;
154  begin
155    dbms_xmlschema.deleteSchema(name, dbms_xmlschema.DELETE_CASCADE_FORCE);
156    EXCEPTION WHEN OTHERS THEN
157      BEGIN
158      -- suppress expected exception
159      -- ORA-31000: Resource '<name>' is not an XDB schema document
160      err_num := SQLCODE;
161      IF err_num != -31000 THEN
162        RAISE;
163      END IF;
164      END;
165  end;
166  
167  
168  ---------------------------------------------------------------------
169  -- GET_XML_DIR: Helper function. Return the platform-
170  --  specific pathname for the rdbms/xml directory.
171  -- RETURNS:
172  --                      - directory containing XML docs
173  
174    FUNCTION get_xml_dir RETURN VARCHAR2 IS
175      oraroot VARCHAR2(2000);
176  BEGIN
177    oraroot := get_dir_int(XML_DIR);
178    RETURN oraroot;
179  END;
180  
181  
182    procedure drop_xml_dir is
183  BEGIN
184    drop_dir_int(XML_DIR);
185  END;
186  
187  
188    procedure cre_xml_dir is
189  BEGIN
190     cre_dir_int(XML_DIR);
191  END;
192  
193    function get_xml_bfile(filename varchar2) return BFILE is
194    begin
195      return BFILENAME(LOGIC_DIR(XML_DIR), filename);
196    end;
197  
198    function  get_xml_dirname return VARCHAR2 is
199    begin
200      return LOGIC_DIR(XML_DIR);
201    end;
202  
203  end dbms_metadata_hack;
204  /

Package body created.

SQL> show errors
No errors.
SQL> 
SQL> exec dbms_metadata_hack.cre_dir;

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Register Data Security Documents schema
SQL> declare
  2    DSDXSD BFILE := dbms_metadata_hack.get_bfile('xsdatasec.xsd.11.1');
  3    DSDURL  varchar2(100) := 'http://xmlns.oracle.com/xs/dataSecurity.xsd';
  4  
  5  begin
  6    dbms_xmlschema.registerSchema(
  7      schemaurl => DSDURL,
  8      schemadoc => DSDXSD,
  9      local     => FALSE,
 10      GENTYPES  => FALSE,
 11      GENTABLES => TRUE,
 12      owner     => 'XDB',
 13      options   => DBMS_XMLSCHEMA.REGISTER_BINARYXML);
 14  end;
 15  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Register sys_acloid column schema
SQL> declare
  2    AIDXSD  BFILE := dbms_metadata_hack.get_bfile('xsaclids.xsd');
  3    AIDURL  varchar2(100) := 'http://xmlns.oracle.com/xs/aclids.xsd';
  4  
  5  begin
  6    xdb.dbms_xmlschema.registerSchema(AIDURL, AIDXSD, FALSE, FALSE, FALSE, FALSE,
  7                                      FALSE, 'XDB');
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Register principal schema
SQL> declare
  2    PRINCIPALXSD BFILE := dbms_metadata_hack.get_bfile('xsprin.xsd.11.1');
  3    DSDURL  varchar2(100) := 'http://xmlns.oracle.com/xs/principal.xsd';
  4  
  5  begin
  6  dbms_xmlschema.registerSchema(DSDURL, PRINCIPALXSD,
  7                                owner=>'XDB',
  8                                local=>FALSE,
  9                                GENTYPES=>FALSE,
 10                                GENTABLES=>FALSE,
 11                                OPTIONS=>DBMS_XMLSCHEMA.REGISTER_BINARYXML);
 12  end;
 13  /

PL/SQL procedure successfully completed.

SQL> 
SQL> create table XDB.XS$PRINCIPALS of XMLType XMLType xmlschema "http://xmlns.oracle.com/xs/principal.xsd" element "principal";

Table created.

SQL> 
SQL> declare
  2    ROLESETXSD BFILE := dbms_metadata_hack.get_bfile('xsroleset.xsd');
  3    ROLESETURL  varchar2(100) := 'http://xmlns.oracle.com/xs/roleset.xsd';
  4  
  5  begin
  6  dbms_xmlschema.registerSchema(ROLESETURL, ROLESETXSD,owner=>'XDB',
  7                                local=>FALSE,GENTYPES=>TRUE,GENTABLES=>TRUE);
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2    SECLASSXSD BFILE := dbms_metadata_hack.get_bfile('xsseccls.xsd.11.1');
  3    SECLASSURL  varchar2(100) := 'http://xmlns.oracle.com/xs/securityclass.xsd';
  4  
  5  BEGIN
  6    DBMS_XMLSCHEMA.registerSchema(
  7      schemaurl => SECLASSURL,
  8      schemadoc =>  SECLASSXSD,
  9      owner =>'XDB',
 10      local => FALSE,
 11      options => DBMS_XMLSCHEMA.REGISTER_BINARYXML,
 12      GENTYPES => FALSE,
 13      GENTABLES => TRUE);
 14  END;
 15  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create xml directory
SQL> exec dbms_metadata_hack.cre_xml_dir;

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    b BOOLEAN;
  3  BEGIN
  4    b := DBMS_XDB.createResource(
  5           '/sys/xs/securityclasses/securityclass.xml',
  6           '<securityClass xmlns="http://xmlns.oracle.com/xs"
  7                 xmlns:dav="DAV:"
  8                 xmlns:xdb="http://xmlns.oracle.com/xdb"
  9                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.oracle.com/xs http://xmlns.oracle.com/xs/securityclass.xsd"
 10  targetNamespace="http://xmlns.oracle.com/xs"
 11                 name="securityclass">
 12      <title>
 13          SecurityClass
 14      </title>
 15      <inherits-from>dav:dav</inherits-from>
 16      <privilege name="extend">
 17          <title>
 18              extend
 19          </title>
 20      </privilege>
 21  </securityClass>');
 22  END;
 23  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Base privileges in XDB namespace
SQL> DECLARE
  2    b BOOLEAN;
  3  BEGIN
  4    b := DBMS_XDB.createResource(
  5           '/sys/xs/securityclasses/baseSystemPrivileges.xml',
  6           '<securityClass xmlns="http://xmlns.oracle.com/xs"
  7                 xmlns:xdb="http://xmlns.oracle.com/xdb/acl.xsd"
  8                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.oracle.com/xs http://xmlns.oracle.com/xs/securityclass.xsd"
  9  targetNamespace="http://xmlns.oracle.com/xdb/acl.xsd"
 10                 name="baseSystemPrivileges">
 11    <title>
 12       Base System Privileges
 13    </title>
 14  
 15    <privilege name = "read-properties"/>
 16    <privilege name = "read-contents"/>
 17    <privilege name = "write-config"/>
 18    <privilege name = "link"/>
 19    <privilege name = "unlink"/>
 20    <privilege name = "read-acl"/>
 21    <privilege name = "write-acl-ref"/>
 22    <privilege name = "update-acl"/>
 23    <privilege name = "resolve"/>
 24    <privilege name = "link-to"/>
 25    <privilege name = "unlink-from"/>
 26  </securityClass>');
 27  END;
 28  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Base privileges in DAV namespace
SQL> DECLARE
  2    b BOOLEAN;
  3  BEGIN
  4    b := DBMS_XDB.createResource(
  5           '/sys/xs/securityclasses/baseDavPrivileges.xml',
  6           '<securityClass xmlns="http://xmlns.oracle.com/xs"
  7                 xmlns:dav="DAV:"
  8                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.oracle.com/xs http://xmlns.oracle.com/xs/securityclass.xsd"
  9  targetNamespace="DAV:"
 10                 name="baseDav">
 11      <title>
 12         Base DAV Privileges
 13      </title>
 14  
 15      <privilege name = "lock"/>
 16      <privilege name = "unlock"/>
 17      <privilege name = "write-properties"/>
 18      <privilege name = "write-content"/>
 19      <privilege name = "execute"/>
 20      <privilege name = "take-ownership"/>
 21      <privilege name = "read-current-user-privilege-set"/>
 22  </securityClass>');
 23  END;
 24  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    b BOOLEAN;
  3  BEGIN
  4    b := DBMS_XDB.createResource(
  5           '/sys/xs/securityclasses/systemPrivileges.xml',
  6           '<securityClass xmlns="http://xmlns.oracle.com/xs"
  7                 xmlns:dav="DAV:"
  8                 xmlns:xdb="http://xmlns.oracle.com/xdb/acl.xsd"
  9                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.oracle.com/xs http://xmlns.oracle.com/xs/securityclass.xsd"
 10  targetNamespace="http://xmlns.oracle.com/xdb/acl.xsd"
 11                 name="systemPrivileges"
 12                 mutable="false">
 13  
 14    <title>
 15       System Privileges
 16    </title>
 17  
 18    <inherits-from>xdb:baseSystemPrivileges</inherits-from>
 19    <inherits-from>dav:baseDav</inherits-from>
 20  
 21    <aggregatePrivilege name="update">
 22       <privilegeRef name="dav:write-properties"/>
 23       <privilegeRef name="dav:write-content"/>
 24    </aggregatePrivilege>
 25  
 26    <aggregatePrivilege name="all">
 27      <privilegeRef name = "xdb:read-properties"/>
 28      <privilegeRef name = "xdb:read-contents"/>
 29      <privilegeRef name = "xdb:write-config"/>
 30      <privilegeRef name = "xdb:link"/>
 31      <privilegeRef name = "xdb:unlink"/>
 32      <privilegeRef name = "xdb:read-acl"/>
 33      <privilegeRef name = "xdb:write-acl-ref"/>
 34      <privilegeRef name = "xdb:update-acl"/>
 35      <privilegeRef name = "xdb:resolve"/>
 36      <privilegeRef name = "xdb:link-to"/>
 37      <privilegeRef name = "xdb:unlink-from"/>
 38      <privilegeRef name = "dav:lock"/>
 39      <privilegeRef name = "dav:unlock"/>
 40      <privilegeRef name = "dav:write-properties"/>
 41      <privilegeRef name = "dav:write-content"/>
 42      <privilegeRef name = "dav:execute"/>
 43      <privilegeRef name = "dav:take-ownership"/>
 44      <privilegeRef name = "dav:read-current-user-privilege-set"/>
 45    </aggregatePrivilege>
 46  </securityClass>');
 47  END;
 48  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> Rem DAV::dav security class
SQL> declare
  2  tmp boolean := false;
  3  DAVXML BFILE := dbms_metadata_hack.get_xml_bfile('dav.xml.11.1');
  4  DAVXSD XMLTYPE := XMLTYPE(DAVXML, 0);
  5  begin
  6    tmp := DBMS_XDB.CreateResource('/sys/xs/securityclasses/dav.xml',DAVXSD);
  7  end;
  8  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Add the xspublic role - uid set to KUSRMAX+999
SQL> declare
  2  tmp boolean := false;
  3  XSPUBLICXML BFILE := dbms_metadata_hack.get_xml_bfile('xspublic.xml.11.1');
  4  XSPUBLICXSD XMLTYPE := XMLTYPE(XSPUBLICXML, 0);
  5  begin
  6    tmp := DBMS_XDB.CreateResource('/sys/xs/roles/xspublic.xml',XSPUBLICXSD);
  7  end;
  8  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Add the xsguest user - uid set to KUSRMAX+998
SQL> declare
  2  tmp boolean := false;
  3  XSGUESTXML BFILE := dbms_metadata_hack.get_xml_bfile('xsguest.xml.11.1');
  4  XSGUESTXSD XMLTYPE := XMLTYPE(XSGUESTXML, 0);
  5  begin
  6    tmp := DBMS_XDB.CreateResource('/sys/xs/users/xsguest.xml',XSGUESTXSD);
  7  end;
  8  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Add the xsauthenticated role - uid set to KUSRMAX+997
SQL> declare
  2  tmp boolean := false;
  3  XSAUTHXML BFILE := dbms_metadata_hack.get_xml_bfile('xsauthenticated.xml.11.1');
  4  XSAUTHXSD XMLTYPE := XMLTYPE(XSAUTHXML, 0);
  5  begin
  6    tmp := DBMS_XDB.CreateResource('/sys/xs/roles/xsauthenticated.xml',XSAUTHXSD);
  7  end;
  8  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Add the dbms_auth role - uid set to KUSRMAX+996
SQL> declare
  2  tmp boolean := false;
  3  XSAUTHXML BFILE := dbms_metadata_hack.get_xml_bfile('dbms_auth.xml.11.1');
  4  XSAUTHXSD XMLTYPE := XMLTYPE(XSAUTHXML, 0);
  5  begin
  6    tmp := DBMS_XDB.CreateResource('/sys/xs/roles/dbms_auth.xml',XSAUTHXSD);
  7  end;
  8  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Add the dbms_passwd role - uid set to KUSRMAX+995
SQL> declare
  2  tmp boolean := false;
  3  XSAUTHXML BFILE := dbms_metadata_hack.get_xml_bfile('dbms_passwd.xml.11.1');
  4  XSAUTHXSD XMLTYPE := XMLTYPE(XSAUTHXML, 0);
  5  begin
  6    tmp := DBMS_XDB.CreateResource('/sys/xs/roles/dbms_passwd.xml',XSAUTHXSD);
  7  end;
  8  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Add the midtier_auth role - uid set to KUSRMAX+994
SQL> declare
  2  tmp boolean := false;
  3  XSAUTHXML BFILE := dbms_metadata_hack.get_xml_bfile('midtier_auth.xml.11.1');
  4  XSAUTHXSD XMLTYPE := XMLTYPE(XSAUTHXML, 0);
  5  begin
  6    tmp := DBMS_XDB.CreateResource('/sys/xs/roles/midtier_auth.xml',XSAUTHXSD);
  7  end;
  8  /

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2    tmp boolean;
  3  begin
  4    tmp := DBMS_XDB.CreateResource('/sys/xs/securityclasses/principalsc.xml',
  5  '<securityClass xmlns="http://xmlns.oracle.com/xs"
  6     xmlns:dav="DAV:"
  7     xmlns:xdb="http://xmlns.oracle.com/xdb/acl.xsd"
  8     xmlns:sxs="http://xmlns.oracle.com/xs"
  9     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 10     xsi:schemaLocation="http://xmlns.oracle.com/xs http://xmlns.oracle.com/xs/securityclass.xsd"
 11    targetNamespace="http://xmlns.oracle.com/xs"
 12    name="PrincipalSecurityClass"
 13    mutable="false">
 14    <title>PrincipalSecurityClass</title>
 15    <inherits-from>dav:dav</inherits-from>
 16    <privilege name="createUser" />
 17    <privilege name="proxyTo" />
 18    <privilege name="createRole" />
 19    <privilege name="enable" />
 20    <privilege name="addtoSet" />
 21    <privilege name="createRoleSet"/>
 22    <aggregatePrivilege name="viewUser">
 23      <privilegeRef name="xdb:read-contents" />
 24      <privilegeRef name="xdb:resolve" />
 25    </aggregatePrivilege>
 26    <aggregatePrivilege name="grant">
 27      <privilegeRef name="xdb:link-to" />
 28      <privilegeRef name="xdb:unlink-from" />
 29      <privilegeRef name="xdb:read-contents" />
 30      <privilegeRef name="xdb:resolve" />
 31    </aggregatePrivilege>
 32    <aggregatePrivilege name="grantTo">
 33      <privilegeRef name="xdb:link" />
 34      <privilegeRef name="xdb:unlink" />
 35      <privilegeRef name="xdb:update" />
 36      <privilegeRef name="xdb:read-contents" />
 37    </aggregatePrivilege>
 38    <aggregatePrivilege name="viewRole">
 39      <privilegeRef name="xdb:read-contents" />
 40      <privilegeRef name="xdb:resolve" />
 41    </aggregatePrivilege>
 42    <aggregatePrivilege name="viewRoleset">
 43      <privilegeRef name="xdb:read-contents" />
 44    </aggregatePrivilege>
 45    <aggregatePrivilege name="admin">
 46      <privilegeRef name="xdb:read-properties" />
 47      <privilegeRef name="xdb:read-contents" />
 48      <privilegeRef name="xdb:update" />
 49      <privilegeRef name="xdb:link" />
 50      <privilegeRef name="xdb:unlink" />
 51      <privilegeRef name="xdb:link-to" />
 52      <privilegeRef name="xdb:unlink-from" />
 53      <privilegeRef name="xdb:read-acl" />
 54      <privilegeRef name="xdb:write-acl-ref" />
 55      <privilegeRef name="xdb:update-acl" />
 56      <privilegeRef name="xdb:resolve" />
 57    </aggregatePrivilege>
 58  
 59    <privilege name = "createSession">
 60      <title>
 61        Create a Light Weight User Session
 62      </title>
 63    </privilege>
 64    <privilege name="termSession">
 65      <title>
 66        Terminate a Light Weight User Session
 67      </title>
 68    </privilege>
 69  
 70    <aggregatePrivilege name="createTermSession">
 71      <privilegeRef name="sxs:createSession" />
 72      <privilegeRef name="sxs:termSession" />
 73    </aggregatePrivilege>
 74  
 75    <privilege name="attachToSession">
 76      <title>
 77        Attach to a Light Weight User Session
 78      </title>
 79    </privilege>
 80    <privilege name="modifySession">
 81      <title>
 82        Modify contents of a Light Weight User Session
 83      </title>
 84    </privilege>
 85    <privilege name="switchUser">
 86      <title>
 87        Switch User of a Light Weight User Session
 88      </title>
 89    </privilege>
 90    <privilege name="assignUser">
 91      <title>
 92        Assign User to an anonymous Light Weight User Session
 93      </title>
 94    </privilege>
 95  
 96    <privilege name = "changeUserPassword">
 97      <title>
 98          Change Password for users in Fusion Database.
 99      </title>
100    </privilege>
101  
102    <privilege name="administerNamespace">
103      <title>
104        Create/Delete/Change properties of Namespaces.
105      </title>
106    </privilege>
107  
108    <aggregatePrivilege name="administerSession">
109      <privilegeRef name="sxs:createTermSession" />
110      <privilegeRef name="sxs:attachToSession" />
111      <privilegeRef name="sxs:modifySession" />
112      <privilegeRef name="sxs:switchUser" />
113      <privilegeRef name="sxs:assignUser" />
114      <privilegeRef name="sxs:administerNamespace" />
115    </aggregatePrivilege>
116  
117    <privilege name="setAttribute">
118      <title>
119        Set a Light Weight User Session Attribute
120      </title>
121    </privilege>
122    <privilege name="readAttribute">
123      <title>
124        Read value of a Light Weight User Session Attribute
125      </title>
126    </privilege>
127  
128    <aggregatePrivilege name="administerAttributes">
129      <privilegeRef name="sxs:setAttribute" />
130      <privilegeRef name="sxs:readAttribute" />
131    </aggregatePrivilege>
132  
133    </securityClass>');
134  end;
135  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Add System Security Class
SQL> declare
  2  tmp boolean := false;
  3  SSCXML BFILE := dbms_metadata_hack.get_xml_bfile('xssystemsc.xml.11.1');
  4  SSCXSD XMLTYPE := XMLTYPE(SSCXML, 0);
  5  begin
  6    tmp := DBMS_XDB.CreateResource('/sys/xs/securityclasses/xssystemsc.xml',SSCXSD);
  7  end;
  8  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> -- end of dbms_metadata_hack use drop the package
SQL> exec dbms_metadata_hack.drop_dir;

PL/SQL procedure successfully completed.

SQL> 
SQL> drop package dbms_metadata_hack;

Package dropped.

SQL> 
SQL> -- XS$CACHE_ACTIONS used by Mid-Tier Cache
SQL> create table XDB.XS$CACHE_ACTIONS
  2    (
  3     ROW_KEY NUMBER(1) UNIQUE,
  4     TIME_VAL TIMESTAMP(9) NOT NULL
  5    );

Table created.

SQL> comment on table XDB.XS$CACHE_ACTIONS is
  2  'Timestamps used for Mid-Tier-Cache object invalidation'
  3  /

Comment created.

SQL> comment on column XDB.XS$CACHE_ACTIONS.ROW_KEY is
  2  'Type of the TimeStamp value.'
  3  /

Comment created.

SQL> comment on column XDB.XS$CACHE_ACTIONS.TIME_VAL is
  2  'Timestamp associated with this key'
  3  /

Comment created.

SQL> create or replace public synonym XS$CACHE_ACTIONS for XDB.XS$CACHE_ACTIONS;

Synonym created.

SQL> 
SQL> Rem add seed values for this table
SQL> insert into XDB.XS$CACHE_ACTIONS(ROW_KEY, TIME_VAL) values (1, systimestamp);

1 row created.

SQL> insert into XDB.XS$CACHE_ACTIONS(ROW_KEY, TIME_VAL) values (2, systimestamp);

1 row created.

SQL> insert into XDB.XS$CACHE_ACTIONS(ROW_KEY, TIME_VAL) values (3, systimestamp);

1 row created.

SQL> insert into XDB.XS$CACHE_ACTIONS(ROW_KEY, TIME_VAL) values (4, systimestamp);

1 row created.

SQL> insert into XDB.XS$CACHE_ACTIONS(ROW_KEY, TIME_VAL) values (5, systimestamp);

1 row created.

SQL> insert into XDB.XS$CACHE_ACTIONS(ROW_KEY, TIME_VAL) values (6, systimestamp);

1 row created.

SQL> -- The frasec field is used as retension  time. Set to 1 week
SQL> -- Fix bug 7331368
SQL> insert into XDB.XS$CACHE_ACTIONS(ROW_KEY, TIME_VAL)
  2                           values (9, TIMESTAMP '2007-10-04 13:02:43.000010080');

1 row created.

SQL> 
SQL> Rem now create the Delete table
SQL> Rem OBJ_TYPE  will reflect one of the above values
SQL> Rem check kzxh.h, KZXHACLMOD, etc for ObJ_TYPE values
SQL> create table XDB.XS$CACHE_DELETE
  2    (
  3     OBJ_TYPE   NUMBER(2),
  4     NAME VARCHAR2(4000),
  5     DEL_DATE TIMESTAMP NOT NULL
  6    );

Table created.

SQL> comment on table XDB.XS$CACHE_DELETE is
  2  'Table to retain deleted ACLOIDs, SecurityClasses, roles etc'
  3  /

Comment created.

SQL> comment on column XDB.XS$CACHE_DELETE.OBJ_TYPE is
  2  'Column to store type of the object deleted'
  3  /

Comment created.

SQL> comment on column XDB.XS$CACHE_DELETE.NAME is
  2  'Column to store deleted QName or ID'
  3  /

Comment created.

SQL> comment on column XDB.XS$CACHE_DELETE.DEL_DATE is
  2  'Column to store the dates of the deleted objects'
  3  /

Comment created.

SQL> create or replace public synonym XS$CACHE_DELETE for XDB.XS$CACHE_DELETE;

Synonym created.

SQL> /

Synonym created.

SQL> 
SQL> Rem Create network ACL security tables, views
SQL> -- moved dbmsnacl.sql and prvtnacl.plb to xsrelod.sql(all package stuff)
SQL> @@catnacl
SQL> Rem
SQL> Rem $Header: rdbms/admin/catnacl.sql /st_rdbms_11.2.0/3 2012/01/11 10:48:13 rpang Exp $
SQL> Rem
SQL> Rem catnacl.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2012, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catnacl.sql - Network ACL
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script creates the tables and views required to define the
SQL> Rem      access control list (ACL) for PL/SQL network-related utility packages.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script should be run as "SYS".
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    rpang       01/06/12 - Backport rpang_bug-11877463 from main
SQL> Rem    rpang       06/14/11 - Show privilege fullname
SQL> Rem    rpang       03/16/11 - 11878452: same CMNT in impcalloutreg$ for same TAG
SQL> Rem    rpang       02/08/11 - Add export support
SQL> Rem    rpang       03/04/09 - Use standard XML operators
SQL> Rem    rpang       02/15/08 - Add wallet ACL
SQL> Rem    rpang       06/27/07 - Commit netaclsc.xml changes
SQL> Rem    rpang       05/03/07 - Relocate resource config creation
SQL> Rem    rpang       04/06/07 - DBA_NETWORK_ACL_PRIVILEGES query against XDS_ACE
SQL> Rem    rpang       03/13/07 - Use ACLID
SQL> Rem    rpang       01/04/07 - Remove timestamp cast
SQL> Rem    rpang       09/21/06 - Handle ACE start_date and end_date
SQL> Rem    rpang       08/16/06 - Updated
SQL> Rem    rpang       06/13/06 - Created
SQL> Rem
SQL> 
SQL> Rem
SQL> Rem ACL host assignments storage
SQL> Rem
SQL> 
SQL> create table NET$_ACL
  2  (
  3    HOST               varchar2(1000) not null,                /* network host */
  4    LOWER_PORT         number(5),                 /* lower bound of port range */
  5    UPPER_PORT         number(5),                 /* upper bound of port range */
  6    ACLID              raw(16) not null                       /* ACL object ID */
  7  )
  8  /

Table created.

SQL> 
SQL> Rem
SQL> Rem ACL wallet assignments storage
SQL> Rem
SQL> 
SQL> create table WALLET$_ACL
  2  (
  3    WALLET_PATH        varchar2(1000) not null,                 /* wallet path */
  4    ACLID              raw(16) not null                       /* ACL object ID */
  5  )
  6  /

Table created.

SQL> 
SQL> Rem
SQL> Rem DBA network ACL assignments view
SQL> Rem
SQL> 
SQL> create or replace view DBA_NETWORK_ACLS
  2  (HOST, LOWER_PORT, UPPER_PORT, ACL, ACLID)
  3  as
  4  select a.host, a.lower_port, a.upper_port, r.any_path, a.aclid
  5    from net$_acl a, resource_view r
  6   where sys_op_r2o(XMLCast(XMLQuery(
  7           'declare default element namespace "http://xmlns.oracle.com/xdb/XDBResource.xsd"; fn:data(/Resource/XMLRef)'
  8           passing r.res returning content) as ref XMLType)) = a.aclid
  9  /

View created.

SQL> create or replace public synonym DBA_NETWORK_ACLS for DBA_NETWORK_ACLS
  2  /

Synonym created.

SQL> grant select on DBA_NETWORK_ACLS to select_catalog_role
  2  /

Grant succeeded.

SQL> comment on table DBA_NETWORK_ACLS is
  2  'Access control lists assigned to restrict access to network hosts through PL/SQL network utility packages'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACLS.HOST is
  2  'Network host'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACLS.LOWER_PORT is
  2  'Lower bound of the port range'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACLS.UPPER_PORT is
  2  'Upper bound of the port range'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACLS.ACL is
  2  'The path of the access control list'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACLS.ACLID is
  2  'The object ID of the access control list'
  3  /

Comment created.

SQL> 
SQL> Rem
SQL> Rem DBA network ACL privileges view
SQL> Rem
SQL> 
SQL> create or replace view DBA_NETWORK_ACL_PRIVILEGES
  2  (ACL, ACLID, PRINCIPAL, PRIVILEGE, IS_GRANT, INVERT, START_DATE, END_DATE)
  3  as
  4  select r.any_path, x.aclid, x.principal, p.privilege, x.is_grant,
  5         x.invert, x.start_date, x.end_date
  6    from resource_view r, xds_ace x,
  7         xmltable(xmlnamespaces('http://xmlns.oracle.com/xdb/acl.xsd' as "a"),
  8                  '/a:privilege/*' passing x.privilege
  9                  columns privilege varchar2(23) path 'fn:local-name(.)') p
 10   where x.aclid = sys_op_r2o(XMLCast(XMLQuery(
 11                     'declare default element namespace "http://xmlns.oracle.com/xdb/XDBResource.xsd"; fn:data(/Resource/XMLRef)'
 12                     passing r.res returning content) as ref XMLType)) and
 13         x.aclid in (select aclid from net$_acl)
 14  /

View created.

SQL> create or replace public synonym DBA_NETWORK_ACL_PRIVILEGES
  2  for DBA_NETWORK_ACL_PRIVILEGES
  3  /

Synonym created.

SQL> grant select on DBA_NETWORK_ACL_PRIVILEGES to select_catalog_role
  2  /

Grant succeeded.

SQL> comment on table DBA_NETWORK_ACL_PRIVILEGES is
  2  'Privileges defined in network access control lists'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.ACL is
  2  'The path of the access control list'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.ACLID is
  2  'The object ID of the access control list'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.PRINCIPAL is
  2  'Principal the privilege is applied to'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.PRIVILEGE is
  2  'Privilege'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.IS_GRANT is
  2  'Is the privilege granted or denied'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.INVERT is
  2  'true if the access control entry contains invert principal, false otherwise'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.START_DATE is
  2  'Start-date of the access control entry'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.END_DATE is
  2  'End-date of the access control entry'
  3  /

Comment created.

SQL> 
SQL> 
SQL> Rem
SQL> Rem DBA wallet ACL assignments view
SQL> Rem
SQL> 
SQL> create or replace view DBA_WALLET_ACLS
  2  (WALLET_PATH, ACL, ACLID)
  3  as
  4  select a.wallet_path, r.any_path, a.aclid
  5    from wallet$_acl a, resource_view r
  6   where sys_op_r2o(extractValue(r.res, '/Resource/XMLRef')) = a.aclid
  7  /

View created.

SQL> create or replace public synonym DBA_WALLET_ACLS for DBA_WALLET_ACLS
  2  /

Synonym created.

SQL> grant select on DBA_WALLET_ACLS to select_catalog_role
  2  /

Grant succeeded.

SQL> comment on table DBA_WALLET_ACLS is
  2  'Access control lists assigned to restrict access to wallets through PL/SQL network utility packages'
  3  /

Comment created.

SQL> comment on column DBA_WALLET_ACLS.WALLET_PATH is
  2  'Wallet path'
  3  /

Comment created.

SQL> comment on column DBA_WALLET_ACLS.ACL is
  2  'The path of the access control list'
  3  /

Comment created.

SQL> comment on column DBA_WALLET_ACLS.ACLID is
  2  'The object ID of the access control list'
  3  /

Comment created.

SQL> 
SQL> Rem Create network ACL security class
SQL> 
SQL> DECLARE
  2    b BOOLEAN;
  3  
  4    procedure add_privilege(priv in varchar2, title in varchar2) is
  5      XDBRES_NS   constant varchar2(80) :=
  6                         'xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"';
  7      XS_NS       constant varchar2(80) :=
  8                         'xmlns:xs="http://xmlns.oracle.com/xs"';
  9    begin
 10      update resource_view r
 11         set r.res =
 12               appendChildXML(r.res, '/r:Resource/r:Contents/xs:securityClass',
 13                 XMLType('<xs:privilege name="'||priv||'" '||XS_NS||'>
 14                            <xs:title>'||title||'</xs:title>
 15                          </xs:privilege>'),
 16                 XDBRES_NS||' '||XS_NS)
 17       where equals_path(r.res, '/sys/apps/plsql/xs/netaclsc.xml') = 1 and
 18             not XMLExists(
 19           'declare namespace r  = "http://xmlns.oracle.com/xdb/XDBResource.xsd";
 20            declare namespace xs = "http://xmlns.oracle.com/xs";
 21            /r:Resource/r:Contents/xs:securityClass/xs:privilege[@name=$priv]'
 22           passing res, priv as "priv");
 23    end;
 24  
 25  BEGIN
 26  
 27    if (NOT DBMS_XDB.existsResource('/sys/apps/plsql')) then
 28      b := dbms_xdb.createFolder('/sys/apps/plsql');
 29    end if;
 30    if (NOT DBMS_XDB.existsResource('/sys/apps/plsql/xs')) then
 31      b := dbms_xdb.createFolder('/sys/apps/plsql/xs');
 32    end if;
 33  
 34    if (NOT DBMS_XDB.existsResource('/sys/apps/plsql/xs/netaclsc.xml')) then
 35      b := DBMS_XDB.createResource(
 36        '/sys/apps/plsql/xs/netaclsc.xml',
 37        '<securityClass xmlns="http://xmlns.oracle.com/xs"
 38                        xmlns:dav="DAV:"
 39                        xmlns:plsql="http://xmlns.oracle.com/plsql"
 40                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 41           xsi:schemaLocation="http://xmlns.oracle.com/xs
 42                               http://xmlns.oracle.com/xs/securityclass.xsd"
 43           targetNamespace="http://xmlns.oracle.com/plsql" name="network">
 44           <title>
 45             PL/SQL Network ACL Privileges
 46           </title>
 47           <inherits-from>dav:dav</inherits-from>
 48           <privilege name="connect">
 49             <title>
 50               Connect host privilege
 51             </title>
 52           </privilege>
 53           <privilege name="resolve">
 54             <title>
 55               Resolve host name and IP address privilege
 56             </title>
 57           </privilege>
 58           <privilege name="use-client-certificates">
 59             <title>
 60               Use client certificates in wallets
 61             </title>
 62           </privilege>
 63           <privilege name="use-passwords">
 64             <title>
 65               Use password credentials in wallets
 66             </title>
 67           </privilege>
 68         </securityClass>');
 69    else
 70      add_privilege('use-client-certificates',
 71                    'Use client certificates in wallets');
 72      add_privilege('use-passwords',
 73                    'Use password credentials in wallets');
 74    end if;
 75  
 76  END;
 77  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Register ACL registration tables for export
SQL> 
SQL> delete from sys.impcalloutreg$ where tgt_schema = 'SYS' and
  2                                       tgt_object = 'NET$_ACL' and
  3                                       tgt_type   = 2
  4  /

0 rows deleted.

SQL> insert into sys.impcalloutreg$ (package, schema, tag, class, level#, flags,
  2                                  tgt_schema, tgt_object, tgt_type, cmnt)
  3    values ('DBMS_NETWORK_ACL_ADMIN', 'SYS', 'NETWORK_ACL', 3, 1000, 0,
  4            'SYS', 'NET$_ACL', 2, 'Network ACL registrations')
  5  /

1 row created.

SQL> 
SQL> delete from sys.impcalloutreg$ where tgt_schema = 'SYS' and
  2                                       tgt_object = 'WALLET$_ACL' and
  3                                       tgt_type   = 2
  4  /

0 rows deleted.

SQL> insert into sys.impcalloutreg$ (package, schema, tag, class, level#, flags,
  2                                  tgt_schema, tgt_object, tgt_type, cmnt)
  3    values ('DBMS_NETWORK_ACL_ADMIN', 'SYS', 'NETWORK_ACL', 3, 1000, 0,
  4            'SYS', 'WALLET$_ACL', 2, 'Network ACL registrations')
  5  /

1 row created.

SQL> 
SQL> commit;

Commit complete.

SQL> 
SQL> Rem
SQL> Rem Create the XS$NULL user. This user represents the state where DB UID
SQL> Rem is invalid but the schema ID is valid. Currently used by Fusion since 11gR1
SQL> Rem
SQL> create user XS$NULL identified by values
  2  'S:000000000000000000000000000000000000000000000000000000000000'
  3  account lock password expire
  4  /

User created.

SQL> 
SQL> 
SQL> --Index creation for XS tables
SQL> --@@xsindex
SQL> 
SQL> -- Always keep this at the end. Runs all packages and creates all views
SQL> @@xsrelod
SQL> Rem
SQL> Rem $Header: rdbms/admin/xsrelod.sql /main/6 2010/06/06 21:49:30 snadhika Exp $
SQL> Rem
SQL> Rem xsrelod.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2010, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      xsrelod.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Replaces all XS - related packages with the current versions
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    snadhika    04/14/10 - remove PREDICATE xmlindex
SQL> Rem    atabar      03/09/09 - modified QName regexp
SQL> Rem    srtata      03/03/08 - remove grant on document_links2 view
SQL> Rem    rbhatti     02/01/08 - bug 6782472- move prvtkzxv
SQL> Rem    jsamuel     12/27/07 - xml index on xsprincipals
SQL> Rem    sichandr    12/18/07 - fix security_class catalog view
SQL> Rem    clei        12/11/07 - fix xds dictionary views
SQL> Rem    rburns      11/05/07 - add catnacl
SQL> Rem    snadhika    09/25/07 - Added new column in ALL_XSC_SECURITY_CLASS view
SQL> Rem                           Added new view ALL_XSC_SECURITY_CLASS_STATUS
SQL> Rem                           Added new package xs$catview_util
SQL> Rem    ningzhan    09/11/07 - fix the ALL_XSC_AGGREGATE_PRIVILEGE view
SQL> Rem                           defintion to remove namespace prefix.
SQL> Rem    pknaggs     08/27/07 - DSD schema: aclids to aclFiles or aclDirectory.
SQL> Rem    srtata      07/25/07 - move prvtkzxv.pkb before events packages
SQL> Rem    sgul        01/31/07 - Add prvtkzxv.plb
SQL> Rem    pthornto    10/09/06 - adding View creations
SQL> Rem    pthornto    10/04/06 - cleanup
SQL> Rem    pthornto    09/21/06 - file to load XS related packages
SQL> Rem    pthornto    09/21/06 - Created
SQL> Rem
SQL> 
SQL> Rem Create network ACL security views
SQL> @@catnacl
SQL> Rem
SQL> Rem $Header: rdbms/admin/catnacl.sql /st_rdbms_11.2.0/3 2012/01/11 10:48:13 rpang Exp $
SQL> Rem
SQL> Rem catnacl.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2012, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catnacl.sql - Network ACL
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script creates the tables and views required to define the
SQL> Rem      access control list (ACL) for PL/SQL network-related utility packages.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script should be run as "SYS".
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    rpang       01/06/12 - Backport rpang_bug-11877463 from main
SQL> Rem    rpang       06/14/11 - Show privilege fullname
SQL> Rem    rpang       03/16/11 - 11878452: same CMNT in impcalloutreg$ for same TAG
SQL> Rem    rpang       02/08/11 - Add export support
SQL> Rem    rpang       03/04/09 - Use standard XML operators
SQL> Rem    rpang       02/15/08 - Add wallet ACL
SQL> Rem    rpang       06/27/07 - Commit netaclsc.xml changes
SQL> Rem    rpang       05/03/07 - Relocate resource config creation
SQL> Rem    rpang       04/06/07 - DBA_NETWORK_ACL_PRIVILEGES query against XDS_ACE
SQL> Rem    rpang       03/13/07 - Use ACLID
SQL> Rem    rpang       01/04/07 - Remove timestamp cast
SQL> Rem    rpang       09/21/06 - Handle ACE start_date and end_date
SQL> Rem    rpang       08/16/06 - Updated
SQL> Rem    rpang       06/13/06 - Created
SQL> Rem
SQL> 
SQL> Rem
SQL> Rem ACL host assignments storage
SQL> Rem
SQL> 
SQL> create table NET$_ACL
  2  (
  3    HOST               varchar2(1000) not null,                /* network host */
  4    LOWER_PORT         number(5),                 /* lower bound of port range */
  5    UPPER_PORT         number(5),                 /* upper bound of port range */
  6    ACLID              raw(16) not null                       /* ACL object ID */
  7  )
  8  /
create table NET$_ACL
             *
ERROR at line 1:
ORA-00955: name is already used by an existing object


SQL> 
SQL> Rem
SQL> Rem ACL wallet assignments storage
SQL> Rem
SQL> 
SQL> create table WALLET$_ACL
  2  (
  3    WALLET_PATH        varchar2(1000) not null,                 /* wallet path */
  4    ACLID              raw(16) not null                       /* ACL object ID */
  5  )
  6  /
create table WALLET$_ACL
             *
ERROR at line 1:
ORA-00955: name is already used by an existing object


SQL> 
SQL> Rem
SQL> Rem DBA network ACL assignments view
SQL> Rem
SQL> 
SQL> create or replace view DBA_NETWORK_ACLS
  2  (HOST, LOWER_PORT, UPPER_PORT, ACL, ACLID)
  3  as
  4  select a.host, a.lower_port, a.upper_port, r.any_path, a.aclid
  5    from net$_acl a, resource_view r
  6   where sys_op_r2o(XMLCast(XMLQuery(
  7           'declare default element namespace "http://xmlns.oracle.com/xdb/XDBResource.xsd"; fn:data(/Resource/XMLRef)'
  8           passing r.res returning content) as ref XMLType)) = a.aclid
  9  /

View created.

SQL> create or replace public synonym DBA_NETWORK_ACLS for DBA_NETWORK_ACLS
  2  /

Synonym created.

SQL> grant select on DBA_NETWORK_ACLS to select_catalog_role
  2  /

Grant succeeded.

SQL> comment on table DBA_NETWORK_ACLS is
  2  'Access control lists assigned to restrict access to network hosts through PL/SQL network utility packages'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACLS.HOST is
  2  'Network host'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACLS.LOWER_PORT is
  2  'Lower bound of the port range'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACLS.UPPER_PORT is
  2  'Upper bound of the port range'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACLS.ACL is
  2  'The path of the access control list'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACLS.ACLID is
  2  'The object ID of the access control list'
  3  /

Comment created.

SQL> 
SQL> Rem
SQL> Rem DBA network ACL privileges view
SQL> Rem
SQL> 
SQL> create or replace view DBA_NETWORK_ACL_PRIVILEGES
  2  (ACL, ACLID, PRINCIPAL, PRIVILEGE, IS_GRANT, INVERT, START_DATE, END_DATE)
  3  as
  4  select r.any_path, x.aclid, x.principal, p.privilege, x.is_grant,
  5         x.invert, x.start_date, x.end_date
  6    from resource_view r, xds_ace x,
  7         xmltable(xmlnamespaces('http://xmlns.oracle.com/xdb/acl.xsd' as "a"),
  8                  '/a:privilege/*' passing x.privilege
  9                  columns privilege varchar2(23) path 'fn:local-name(.)') p
 10   where x.aclid = sys_op_r2o(XMLCast(XMLQuery(
 11                     'declare default element namespace "http://xmlns.oracle.com/xdb/XDBResource.xsd"; fn:data(/Resource/XMLRef)'
 12                     passing r.res returning content) as ref XMLType)) and
 13         x.aclid in (select aclid from net$_acl)
 14  /

View created.

SQL> create or replace public synonym DBA_NETWORK_ACL_PRIVILEGES
  2  for DBA_NETWORK_ACL_PRIVILEGES
  3  /

Synonym created.

SQL> grant select on DBA_NETWORK_ACL_PRIVILEGES to select_catalog_role
  2  /

Grant succeeded.

SQL> comment on table DBA_NETWORK_ACL_PRIVILEGES is
  2  'Privileges defined in network access control lists'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.ACL is
  2  'The path of the access control list'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.ACLID is
  2  'The object ID of the access control list'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.PRINCIPAL is
  2  'Principal the privilege is applied to'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.PRIVILEGE is
  2  'Privilege'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.IS_GRANT is
  2  'Is the privilege granted or denied'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.INVERT is
  2  'true if the access control entry contains invert principal, false otherwise'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.START_DATE is
  2  'Start-date of the access control entry'
  3  /

Comment created.

SQL> comment on column DBA_NETWORK_ACL_PRIVILEGES.END_DATE is
  2  'End-date of the access control entry'
  3  /

Comment created.

SQL> 
SQL> 
SQL> Rem
SQL> Rem DBA wallet ACL assignments view
SQL> Rem
SQL> 
SQL> create or replace view DBA_WALLET_ACLS
  2  (WALLET_PATH, ACL, ACLID)
  3  as
  4  select a.wallet_path, r.any_path, a.aclid
  5    from wallet$_acl a, resource_view r
  6   where sys_op_r2o(extractValue(r.res, '/Resource/XMLRef')) = a.aclid
  7  /

View created.

SQL> create or replace public synonym DBA_WALLET_ACLS for DBA_WALLET_ACLS
  2  /

Synonym created.

SQL> grant select on DBA_WALLET_ACLS to select_catalog_role
  2  /

Grant succeeded.

SQL> comment on table DBA_WALLET_ACLS is
  2  'Access control lists assigned to restrict access to wallets through PL/SQL network utility packages'
  3  /

Comment created.

SQL> comment on column DBA_WALLET_ACLS.WALLET_PATH is
  2  'Wallet path'
  3  /

Comment created.

SQL> comment on column DBA_WALLET_ACLS.ACL is
  2  'The path of the access control list'
  3  /

Comment created.

SQL> comment on column DBA_WALLET_ACLS.ACLID is
  2  'The object ID of the access control list'
  3  /

Comment created.

SQL> 
SQL> Rem Create network ACL security class
SQL> 
SQL> DECLARE
  2    b BOOLEAN;
  3  
  4    procedure add_privilege(priv in varchar2, title in varchar2) is
  5      XDBRES_NS   constant varchar2(80) :=
  6                         'xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"';
  7      XS_NS       constant varchar2(80) :=
  8                         'xmlns:xs="http://xmlns.oracle.com/xs"';
  9    begin
 10      update resource_view r
 11         set r.res =
 12               appendChildXML(r.res, '/r:Resource/r:Contents/xs:securityClass',
 13                 XMLType('<xs:privilege name="'||priv||'" '||XS_NS||'>
 14                            <xs:title>'||title||'</xs:title>
 15                          </xs:privilege>'),
 16                 XDBRES_NS||' '||XS_NS)
 17       where equals_path(r.res, '/sys/apps/plsql/xs/netaclsc.xml') = 1 and
 18             not XMLExists(
 19           'declare namespace r  = "http://xmlns.oracle.com/xdb/XDBResource.xsd";
 20            declare namespace xs = "http://xmlns.oracle.com/xs";
 21            /r:Resource/r:Contents/xs:securityClass/xs:privilege[@name=$priv]'
 22           passing res, priv as "priv");
 23    end;
 24  
 25  BEGIN
 26  
 27    if (NOT DBMS_XDB.existsResource('/sys/apps/plsql')) then
 28      b := dbms_xdb.createFolder('/sys/apps/plsql');
 29    end if;
 30    if (NOT DBMS_XDB.existsResource('/sys/apps/plsql/xs')) then
 31      b := dbms_xdb.createFolder('/sys/apps/plsql/xs');
 32    end if;
 33  
 34    if (NOT DBMS_XDB.existsResource('/sys/apps/plsql/xs/netaclsc.xml')) then
 35      b := DBMS_XDB.createResource(
 36        '/sys/apps/plsql/xs/netaclsc.xml',
 37        '<securityClass xmlns="http://xmlns.oracle.com/xs"
 38                        xmlns:dav="DAV:"
 39                        xmlns:plsql="http://xmlns.oracle.com/plsql"
 40                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 41           xsi:schemaLocation="http://xmlns.oracle.com/xs
 42                               http://xmlns.oracle.com/xs/securityclass.xsd"
 43           targetNamespace="http://xmlns.oracle.com/plsql" name="network">
 44           <title>
 45             PL/SQL Network ACL Privileges
 46           </title>
 47           <inherits-from>dav:dav</inherits-from>
 48           <privilege name="connect">
 49             <title>
 50               Connect host privilege
 51             </title>
 52           </privilege>
 53           <privilege name="resolve">
 54             <title>
 55               Resolve host name and IP address privilege
 56             </title>
 57           </privilege>
 58           <privilege name="use-client-certificates">
 59             <title>
 60               Use client certificates in wallets
 61             </title>
 62           </privilege>
 63           <privilege name="use-passwords">
 64             <title>
 65               Use password credentials in wallets
 66             </title>
 67           </privilege>
 68         </securityClass>');
 69    else
 70      add_privilege('use-client-certificates',
 71                    'Use client certificates in wallets');
 72      add_privilege('use-passwords',
 73                    'Use password credentials in wallets');
 74    end if;
 75  
 76  END;
 77  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Register ACL registration tables for export
SQL> 
SQL> delete from sys.impcalloutreg$ where tgt_schema = 'SYS' and
  2                                       tgt_object = 'NET$_ACL' and
  3                                       tgt_type   = 2
  4  /

1 row deleted.

SQL> insert into sys.impcalloutreg$ (package, schema, tag, class, level#, flags,
  2                                  tgt_schema, tgt_object, tgt_type, cmnt)
  3    values ('DBMS_NETWORK_ACL_ADMIN', 'SYS', 'NETWORK_ACL', 3, 1000, 0,
  4            'SYS', 'NET$_ACL', 2, 'Network ACL registrations')
  5  /

1 row created.

SQL> 
SQL> delete from sys.impcalloutreg$ where tgt_schema = 'SYS' and
  2                                       tgt_object = 'WALLET$_ACL' and
  3                                       tgt_type   = 2
  4  /

1 row deleted.

SQL> insert into sys.impcalloutreg$ (package, schema, tag, class, level#, flags,
  2                                  tgt_schema, tgt_object, tgt_type, cmnt)
  3    values ('DBMS_NETWORK_ACL_ADMIN', 'SYS', 'NETWORK_ACL', 3, 1000, 0,
  4            'SYS', 'WALLET$_ACL', 2, 'Network ACL registrations')
  5  /

1 row created.

SQL> 
SQL> commit;

Commit complete.

SQL> 
SQL> Rem Create event handlers for eXtensible Security events
SQL> CREATE OR REPLACE LIBRARY DBMS_XSU_LIB TRUSTED AS STATIC;
  2  /

Library created.

SQL> CREATE OR REPLACE LIBRARY DBMS_XSH_LIB TRUSTED AS STATIC;
  2  /

Library created.

SQL> 
SQL> Rem Create or replace VIEWs
SQL> create or replace view DBA_XDS_OBJECTS
  2    (SCHEMA_NAME, OBJECT_NAME, ENABLE_OPTION, STATUS)
  3  as
  4  select u.name, o.name,
  5         case bitand(r.stmt_type,8192)+
  6              bitand(r.stmt_type,16384)+
  7              bitand(r.stmt_type,32768)
  8           when 8192 then 'ENABLE_DYNAMIC_IS'
  9           when 16384 then 'ENABLE_ACLOID_COLUNM'
 10           when 32768 then 'ENABLE_STATIC_IS'
 11        end,
 12        decode(r.enable_flag, 0, 'DISABLE', 'ENABLE')
 13  from user$ u, obj$ o, rls$ r
 14  where u.user# = o.owner#
 15  and r.obj# = o.obj# and
 16  r.pname = 'SYS_XDS$POLICY'
 17  /

View created.

SQL> 
SQL> comment on table DBA_XDS_OBJECTS is
  2  'All XDS enabled objects in the database'
  3  /

Comment created.

SQL> comment on column DBA_XDS_OBJECTS.SCHEMA_NAME is
  2  'Owner of the object'
  3  /

Comment created.

SQL> comment on column DBA_XDS_OBJECTS.OBJECT_NAME is
  2  'Name of the object'
  3  /

Comment created.

SQL> comment on column DBA_XDS_OBJECTS.ENABLE_OPTION is
  2  'XDS enable option of the object'
  3  /

Comment created.

SQL> comment on column DBA_XDS_OBJECTS.STATUS is
  2  'Policy is enabled or disabled'
  3  /

Comment created.

SQL> 
SQL> create or replace public synonym DBA_XDS_OBJECTS for DBA_XDS_OBJECTS
  2  /

Synonym created.

SQL> grant select on DBA_XDS_OBJECTS to select_catalog_role
  2  /

Grant succeeded.

SQL> 
SQL> create or replace view ALL_XDS_OBJECTS
  2    (SCHEMA_NAME, OBJECT_NAME, ENABLE_OPTION, STATUS)
  3  as
  4  select SCHEMA_NAME, o.OBJECT_NAME, ENABLE_OPTION, o.STATUS
  5  from DBA_XDS_OBJECTS o, ALL_OBJECTS t
  6  where
  7  o.SCHEMA_NAME = t.OWNER and o.OBJECT_NAME = t.OBJECT_NAME
  8  /

View created.

SQL> 
SQL> comment on table ALL_XDS_OBJECTS is
  2  'All XDS enabled objects accessible to the user'
  3  /

Comment created.

SQL> comment on column ALL_XDS_OBJECTS.SCHEMA_NAME is
  2  'Owner of the object'
  3  /

Comment created.

SQL> comment on column ALL_XDS_OBJECTS.OBJECT_NAME is
  2  'Name of the object'
  3  /

Comment created.

SQL> comment on column ALL_XDS_OBJECTS.ENABLE_OPTION is
  2  'XDS enable option of the object'
  3  /

Comment created.

SQL> comment on column ALL_XDS_OBJECTS.STATUS is
  2  'Policy is enabled or disabled'
  3  /

Comment created.

SQL> create or replace public synonym ALL_XDS_OBJECTS for ALL_XDS_OBJECTS
  2  /

Synonym created.

SQL> grant select on ALL_XDS_OBJECTS to PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> create or replace view USER_XDS_OBJECTS
  2    (OBJECT_NAME, ENABLE_OPTION, STATUS)
  3  as
  4  select OBJECT_NAME, ENABLE_OPTION, STATUS
  5  from DBA_XDS_OBJECTS
  6  where
  7  SCHEMA_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')
  8  /

View created.

SQL> comment on table USER_XDS_OBJECTS is
  2  'All XDS enabled objects owned by the user'
  3  /

Comment created.

SQL> comment on column USER_XDS_OBJECTS.OBJECT_NAME is
  2  'Name of the object'
  3  /

Comment created.

SQL> comment on column USER_XDS_OBJECTS.ENABLE_OPTION is
  2  'XDS enable option of the object'
  3  /

Comment created.

SQL> comment on column USER_XDS_OBJECTS.STATUS is
  2  'Policy is enabled or disabled'
  3  /

Comment created.

SQL> create or replace public synonym USER_XDS_OBJECTS for USER_XDS_OBJECTS
  2  /

Synonym created.

SQL> grant select on USER_XDS_OBJECTS to PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> create or replace view DBA_XDS_INSTANCE_SETS
  2    (SCHEMA_NAME, OBJECT_NAME, INSTANCE_SET, DESCRIPTION,
  3     STATIC, EVAL_RULE, ACL_FILE, ACL_LOCATION)
  4  as
  5  select
  6    substr(regexp_replace(r_xds.path,
  7                          '/xds/dsd/([^/]+)/([^.]+).xml', '\1'), 1, 30),
  8    substr(regexp_replace(r_xds.path,
  9                          '/xds/dsd/([^/]+)/([^.]+).xml', '\2'), 1, 30),
 10    substr(extractValue(value(ins),
 11                        '/instanceSet/name',
 12                        'xmlns="http://xmlns.oracle.com/xs"'), 1, 30),
 13    extractValue(value(ins),
 14                 '/instanceSet/description',
 15                 'xmlns="http://xmlns.oracle.com/xs"'),
 16    substr(extractValue(value(ins),
 17                        '/instanceSet/@static',
 18                        'xmlns="http://xmlns.oracle.com/xs"'), 1, 5),
 19    extractValue(value(ins),
 20                 '/instanceSet/memberEvaluationRule',
 21                 'xmlns="http://xmlns.oracle.com/xs"'),
 22    decode(existsNode(value(ins), '/instanceSet/acls/aclDirectory'),
 23           0, 'true', 'false'),
 24    extractvalue(value(acldirectory),
 25                 '/aclDirectory',
 26                 'xmlns="http://xmlns.oracle.com/xs"')
 27    from
 28       xdb.xs$data_security     xds,
 29       path_view            r_xds,
 30       table(XMLSequence(
 31         extract(xds.OBJECT_VALUE,
 32                 '/DataSecurity/instanceSets/instanceSet',
 33                 'xmlns="http://xmlns.oracle.com/xs"')))       ins,
 34       table(XMLSequence(
 35         extract(value(ins),
 36                 '/instanceSet/acls/aclDirectory',
 37                 'xmlns="http://xmlns.oracle.com/xs"')))       acldirectory
 38   where r_xds.path like '/xds/dsd/%.xml'
 39     and sys_op_r2o(extractvalue(r_xds.RES, '/Resource/XMLRef'))=xds.object_id
 40  union all
 41  select
 42    substr(regexp_replace(r_xds.path,
 43                          '/xds/dsd/([^/]+)/([^.]+).xml', '\1'), 1, 30),
 44    substr(regexp_replace(r_xds.path,
 45                          '/xds/dsd/([^/]+)/([^.]+).xml', '\2'), 1, 30),
 46    substr(extractValue(value(ins),
 47                        '/instanceSet/name',
 48                        'xmlns="http://xmlns.oracle.com/xs"'), 1, 30),
 49    extractValue(value(ins),
 50                 '/instanceSet/description',
 51                 'xmlns="http://xmlns.oracle.com/xs"'),
 52    substr(extractValue(value(ins),
 53                        '/instanceSet/@static',
 54                        'xmlns="http://xmlns.oracle.com/xs"'), 1, 5),
 55    extractValue(value(ins),
 56                 '/instanceSet/memberEvaluationRule',
 57                 'xmlns="http://xmlns.oracle.com/xs"'),
 58    decode(existsNode(value(ins), '/instanceSet/acls/aclDirectory'),
 59           0, 'true', 'false'),
 60    extractvalue(value(aclfile),
 61                 '/aclFile',
 62                 'xmlns="http://xmlns.oracle.com/xs"')
 63    from
 64       xdb.xs$data_security     xds,
 65       path_view            r_xds,
 66       table(XMLSequence(
 67         extract(xds.OBJECT_VALUE,
 68                 '/DataSecurity/instanceSets/instanceSet',
 69                 'xmlns="http://xmlns.oracle.com/xs"')))       ins,
 70       table(XMLSequence(
 71         extract(value(ins),
 72                 '/instanceSet/acls/aclFiles/aclFile',
 73                 'xmlns="http://xmlns.oracle.com/xs"')))       aclfile
 74   where r_xds.path like '/xds/dsd/%.xml'
 75     and sys_op_r2o(extractvalue(r_xds.RES, '/Resource/XMLRef'))=xds.object_id;

View created.

SQL> 
SQL> comment on table DBA_XDS_INSTANCE_SETS is
  2  'All instance sets in the database'
  3  /

Comment created.

SQL> comment on column DBA_XDS_INSTANCE_SETS.SCHEMA_NAME is
  2  'Owner of the object'
  3  /

Comment created.

SQL> comment on column DBA_XDS_INSTANCE_SETS.OBJECT_NAME is
  2  'Name of the object'
  3  /

Comment created.

SQL> comment on column DBA_XDS_INSTANCE_SETS.INSTANCE_SET is
  2  'Name of the instance set'
  3  /

Comment created.

SQL> comment on column DBA_XDS_INSTANCE_SETS.DESCRIPTION is
  2  'Description of the instance set'
  3  /

Comment created.

SQL> comment on column DBA_XDS_INSTANCE_SETS.STATIC is
  2  'true for static instance sets, false for dynamic instance sets'
  3  /

Comment created.

SQL> comment on column DBA_XDS_INSTANCE_SETS.EVAL_RULE is
  2  'Membership evaluation rule of the instance set'
  3  /

Comment created.

SQL> comment on column DBA_XDS_INSTANCE_SETS.ACL_FILE is
  2  'true if ACL_LOCATION is a file, false if ACL_LOCATION is a directory'
  3  /

Comment created.

SQL> comment on column DBA_XDS_INSTANCE_SETS.ACL_LOCATION is
  2  'ACL file or directory associated with rule'
  3  /

Comment created.

SQL> create or replace public synonym DBA_XDS_INSTANCE_SETS for DBA_XDS_INSTANCE_SETS
  2  /

Synonym created.

SQL> grant select on DBA_XDS_INSTANCE_SETS to select_catalog_role
  2  /

Grant succeeded.

SQL> create or replace view ALL_XDS_INSTANCE_SETS
  2   (SCHEMA_NAME, OBJECT_NAME, INSTANCE_SET,
  3    DESCRIPTION, STATIC, EVAL_RULE, ACL_FILE, ACL_LOCATION)
  4  as
  5  select SCHEMA_NAME, OBJECT_NAME, INSTANCE_SET, DESCRIPTION,
  6         STATIC, EVAL_RULE, ACL_FILE, ACL_LOCATION
  7  from dba_xds_instance_sets, all_tables t
  8  where
  9  SCHEMA_NAME = t.OWNER and OBJECT_NAME = t.TABLE_NAME
 10  /

View created.

SQL> comment on table ALL_XDS_INSTANCE_SETS is
  2  'All instance sets for objects accessible to the user in the database'
  3  /

Comment created.

SQL> comment on column ALL_XDS_INSTANCE_SETS.SCHEMA_NAME is
  2  'Owner of the object'
  3  /

Comment created.

SQL> comment on column ALL_XDS_INSTANCE_SETS.OBJECT_NAME is
  2  'Name of the object'
  3  /

Comment created.

SQL> comment on column ALL_XDS_INSTANCE_SETS.INSTANCE_SET is
  2  'Name of the instance set'
  3  /

Comment created.

SQL> comment on column ALL_XDS_INSTANCE_SETS.DESCRIPTION is
  2  'Description of the instance set'
  3  /

Comment created.

SQL> comment on column ALL_XDS_INSTANCE_SETS.STATIC is
  2  'true for static instance sets, false for dynamic instance sets'
  3  /

Comment created.

SQL> comment on column ALL_XDS_INSTANCE_SETS.EVAL_RULE is
  2  'Membership evaluation rule of the instance set'
  3  /

Comment created.

SQL> comment on column ALL_XDS_INSTANCE_SETS.ACL_FILE is
  2  'true if ACL_LOCATION is a file, false if ACL_LOCATION is a directory'
  3  /

Comment created.

SQL> comment on column ALL_XDS_INSTANCE_SETS.ACL_LOCATION is
  2  'ACL file or directory associated with rule'
  3  /

Comment created.

SQL> create or replace public synonym ALL_XDS_INSTANCE_SETS for ALL_XDS_INSTANCE_SETS
  2  /

Synonym created.

SQL> grant select on ALL_XDS_INSTANCE_SETS to PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> create or replace view USER_XDS_INSTANCE_SETS
  2    (OBJECT_NAME, INSTANCE_SET, DESCRIPTION, STATIC,
  3     EVAL_RULE, ACL_FILE, ACL_LOCATION)
  4  as
  5    select OBJECT_NAME, INSTANCE_SET, DESCRIPTION, STATIC,
  6           EVAL_RULE, ACL_FILE, ACL_LOCATION
  7  from dba_xds_instance_sets
  8  where
  9    SCHEMA_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')
 10  /

View created.

SQL> comment on table USER_XDS_INSTANCE_SETS is
  2  'All instance sets for objects owned by the user'
  3  /

Comment created.

SQL> comment on column USER_XDS_INSTANCE_SETS.OBJECT_NAME is
  2  'Name of the object'
  3  /

Comment created.

SQL> comment on column USER_XDS_INSTANCE_SETS.INSTANCE_SET is
  2  'Name of the instance set'
  3  /

Comment created.

SQL> comment on column USER_XDS_INSTANCE_SETS.DESCRIPTION is
  2  'Description of the instance set'
  3  /

Comment created.

SQL> comment on column USER_XDS_INSTANCE_SETS.STATIC is
  2  'true for static instance sets, false for dynamic instance sets'
  3  /

Comment created.

SQL> comment on column USER_XDS_INSTANCE_SETS.EVAL_RULE is
  2  'Membership evaluation rule of the instance set'
  3  /

Comment created.

SQL> comment on column USER_XDS_INSTANCE_SETS.ACL_FILE is
  2  'true if ACL_LOCATION is a file, false if ACL_LOCATION is a directory'
  3  /

Comment created.

SQL> comment on column USER_XDS_INSTANCE_SETS.ACL_LOCATION is
  2  'ACL file or directory associated with rule'
  3  /

Comment created.

SQL> create or replace public synonym USER_XDS_INSTANCE_SETS for USER_XDS_INSTANCE_SETS
  2  /

Synonym created.

SQL> grant select on USER_XDS_INSTANCE_SETS to PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW DBA_XDS_ATTRIBUTE_SECS
  2    (SCHEMA_NAME, OBJECT_NAME,
  3     COLUMN_NAME, DESCRIPTION, PRIVILEGE) as
  4    SELECT
  5      substr(regexp_replace(r_xds.path,
  6                            '/xds/dsd/([^/]+)/([^.]+).xml', '\1'), 1, 30),
  7      substr(regexp_replace(r_xds.path,
  8                            '/xds/dsd/([^/]+)/([^.]+).xml', '\2'), 1, 30),
  9      substr(extractValue(value(ll),
 10             '/attributeSec/attribute/colName',
 11             'xmlns="http://xmlns.oracle.com/xs"'), 1, 30),
 12      extractValue(value(ll),
 13                   '/attributeSec/description',
 14                   'xmlns="http://xmlns.oracle.com/xs"'),
 15      SYS_XMLEXNSURI(value(ll),
 16                     '/attributeSec/privilege',
 17                     'xmlns="http://xmlns.oracle.com/xs"')||':'||
 18      REGEXP_REPLACE(extractValue(value(ll),
 19                                  '/attributeSec/privilege',
 20                                  'xmlns="http://xmlns.oracle.com/xs"'),
 21                     '(.+):(.+)', '\2')
 22      FROM XDB.XS$DATA_SECURITY p,
 23           path_view        r_xds,
 24           table(XMLSequence(
 25             extract(OBJECT_VALUE,
 26                     '/DataSecurity/attributeSecs/attributeSec',
 27                     'xmlns="http://xmlns.oracle.com/xs"')))       ll
 28     WHERE
 29       r_xds.path like '/xds/dsd/%.xml'
 30       and sys_op_r2o(extractvalue(r_xds.RES, '/Resource/XMLRef'))=p.object_id
 31       and SYS_XMLEXNSURI(value(ll),
 32                          '/attributeSec/privilege',
 33                          'xmlns="http://xmlns.oracle.com/xs"') is not NULL
 34  union all
 35    SELECT
 36      substr(regexp_replace(r_xds.path,
 37                            '/xds/dsd/([^/]+)/([^.]+).xml', '\1'), 1, 30),
 38      substr(regexp_replace(r_xds.path,
 39                            '/xds/dsd/([^/]+)/([^.]+).xml', '\2'), 1, 30),
 40      substr(extractValue(value(ll),
 41                          '/attributeSec/attribute/colName',
 42                          'xmlns="http://xmlns.oracle.com/xs"'), 1, 30),
 43      extractValue(value(ll),
 44                   '/attributeSec/description',
 45                   'xmlns="http://xmlns.oracle.com/xs"'),
 46      extractValue(value(ll),
 47                   '/attributeSec/privilege',
 48                   'xmlns="http://xmlns.oracle.com/xs"')
 49      FROM XDB.XS$DATA_SECURITY p,
 50           path_view        r_xds,
 51           table(XMLSequence(
 52             extract(OBJECT_VALUE,
 53                     '/DataSecurity/attributeSecs/attributeSec',
 54                     'xmlns="http://xmlns.oracle.com/xs"')))       ll
 55     WHERE
 56       r_xds.path like '/xds/dsd/%.xml'
 57       and sys_op_r2o(extractvalue(r_xds.RES, '/Resource/XMLRef'))=p.object_id
 58       and SYS_XMLEXNSURI(value(ll),
 59                          '/attributeSec/privilege',
 60                          'xmlns="http://xmlns.oracle.com/xs"') is NULL
 61  /

View created.

SQL> comment on table DBA_XDS_ATTRIBUTE_SECS is
  2  'All XDS column security defined in the database'
  3  /

Comment created.

SQL> comment on column DBA_XDS_ATTRIBUTE_SECS.SCHEMA_NAME is
  2  'Owner of the object'
  3  /

Comment created.

SQL> comment on column DBA_XDS_ATTRIBUTE_SECS.OBJECT_NAME is
  2  'Name of the object'
  3  /

Comment created.

SQL> comment on column DBA_XDS_ATTRIBUTE_SECS.COLUMN_NAME is
  2  'Name of the column'
  3  /

Comment created.

SQL> comment on column DBA_XDS_ATTRIBUTE_SECS.DESCRIPTION is
  2  'Description'
  3  /

Comment created.

SQL> comment on column DBA_XDS_ATTRIBUTE_SECS.PRIVILEGE is
  2  'Name of the privilege'
  3  /

Comment created.

SQL> create or replace public synonym DBA_XDS_ATTRIBUTE_SECS for
  2   DBA_XDS_ATTRIBUTE_SECS
  3  /

Synonym created.

SQL> grant select on DBA_XDS_ATTRIBUTE_SECS to select_catalog_role
  2  /

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW ALL_XDS_ATTRIBUTE_SECS
  2    (SCHEMA_NAME, OBJECT_NAME, COLUMN_NAME, DESCRIPTION, PRIVILEGE)
  3   as
  4  select SCHEMA_NAME, o.OBJECT_NAME, COLUMN_NAME, DESCRIPTION, PRIVILEGE
  5    from DBA_XDS_ATTRIBUTE_SECS o, all_objects t
  6  where
  7  SCHEMA_NAME = t.OWNER and o.OBJECT_NAME = t.OBJECT_NAME
  8  /

View created.

SQL> 
SQL> comment on table ALL_XDS_ATTRIBUTE_SECS is
  2  'All objects with XDS column security and accessible to the user'
  3  /

Comment created.

SQL> comment on column ALL_XDS_ATTRIBUTE_SECS.SCHEMA_NAME is
  2  'Owner of the object'
  3  /

Comment created.

SQL> comment on column ALL_XDS_ATTRIBUTE_SECS.OBJECT_NAME is
  2  'Name of the object'
  3  /

Comment created.

SQL> comment on column ALL_XDS_ATTRIBUTE_SECS.COLUMN_NAME is
  2  'Name of the column'
  3  /

Comment created.

SQL> comment on column ALL_XDS_ATTRIBUTE_SECS.DESCRIPTION is
  2  'Description'
  3  /

Comment created.

SQL> comment on column ALL_XDS_ATTRIBUTE_SECS.PRIVILEGE is
  2  'Name of the privilege'
  3  /

Comment created.

SQL> create or replace public synonym ALL_XDS_ATTRIBUTE_SECS for
  2   ALL_XDS_ATTRIBUTE_SECS
  3  /

Synonym created.

SQL> grant select on ALL_XDS_ATTRIBUTE_SECS to PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW USER_XDS_ATTRIBUTE_SECS
  2    (OBJECT_NAME, COLUMN_NAME, DESCRIPTION, PRIVILEGE)
  3   as
  4  select OBJECT_NAME, COLUMN_NAME, DESCRIPTION, PRIVILEGE
  5    from ALL_XDS_ATTRIBUTE_SECS where
  6    SCHEMA_NAME = SYS_CONTEXT('USERENV','CURRENT_USER')
  7  /

View created.

SQL> 
SQL> comment on table USER_XDS_ATTRIBUTE_SECS is
  2  'All objects with column security and owned by the user'
  3  /

Comment created.

SQL> comment on column USER_XDS_ATTRIBUTE_SECS.OBJECT_NAME is
  2  'Name of the object'
  3  /

Comment created.

SQL> comment on column USER_XDS_ATTRIBUTE_SECS.COLUMN_NAME is
  2  'Name of the column'
  3  /

Comment created.

SQL> comment on column USER_XDS_ATTRIBUTE_SECS.DESCRIPTION is
  2  'Description'
  3  /

Comment created.

SQL> comment on column USER_XDS_ATTRIBUTE_SECS.PRIVILEGE is
  2  'Name of the privilege'
  3  /

Comment created.

SQL> create or replace public synonym USER_XDS_ATTRIBUTE_SECS for
  2   USER_XDS_ATTRIBUTE_SECS
  3  /

Synonym created.

SQL> grant select on USER_XDS_ATTRIBUTE_SECS to PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW XDB.DOCUMENT_LINKS2 AS
  2  SELECT
  3  resid source_id,
  4  any_path source_path,
  5  (select
  6    resid
  7   from resource_view
  8   where equals_path(res, extractvalue(value(xl), '/*/@xlink:href', 'xmlns:xlink="http://www.w3.org/1999/xlink"')) = 1) target_id,
  9  extractvalue(value(xl), '/*/@xlink:href', 'xmlns:xlink="http://www.w3.org/1999/xlink"') target_path
 10  FROM
 11  resource_view r,
 12  table(xmlsequence(extract(res, '//*[@xlink:href]', 'xmlns:xlink="http://www.w3.org/1999/xlink"'))) xl;

View created.

SQL> 
SQL> create or replace public synonym DOCUMENT_LINKS2 for XDB.DOCUMENT_LINKS2;

Synonym created.

SQL> 
SQL> create or replace view ALL_XSC_SECURITY_CLASS
  2    (OWNER, CLASS_NAME, TARGET_NAMESPACE, TITLE, DESCRIPTION,
  3     SECURITY_CLASS, ENABLE, PATH)
  4  as
  5  select
  6     extractValue(r.RES,
  7       'Resource/Owner'),
  8     substr(extractValue(OBJECT_VALUE,
  9      '/securityClass/@name'),
 10      1, 1024),
 11     substr(extractValue(OBJECT_VALUE,
 12      '/securityClass/@targetNamespace'),
 13      1, 4000),
 14     extractValue(OBJECT_VALUE,
 15      '/securityClass/title'),
 16     extractValue(OBJECT_VALUE,
 17      '/securityClass/description'),
 18     extract(OBJECT_VALUE, '/securityClass'),
 19     substr(extractValue(OBJECT_VALUE,
 20      '/securityClass/@enable'),1,5),
 21     ANY_PATH
 22  from XDB.XS$SECURITYCLASS p,
 23       RESOURCE_VIEW r
 24  where
 25     sys_op_r2o(extractValue(r.RES, '/Resource/XMLRef')) = p.object_id;

View created.

SQL> 
SQL> comment on table ALL_XSC_SECURITY_CLASS is
  2  'All security class definitions in the database'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS.OWNER is
  2  'The owner of the security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS.CLASS_NAME is
  2  'Name of the security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS.TARGET_NAMESPACE is
  2  'The target namespace for the security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS.TITLE is
  2  'Title of the security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS.DESCRIPTION is
  2  'Description of the security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS.SECURITY_CLASS is
  2  'XMLType for the security class document'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS.ENABLE is
  2  'Enable attribute of the security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS.PATH is
  2  'The path where the security class is stored in the XML DB repository'
  3  /

Comment created.

SQL> create or replace public synonym ALL_XSC_SECURITY_CLASS
  2     for ALL_XSC_SECURITY_CLASS
  3  /

Synonym created.

SQL> grant select on ALL_XSC_SECURITY_CLASS to select_catalog_role
  2  /

Grant succeeded.

SQL> create or replace package xs$catview_util as
  2  function disablebyancestor (sc_name IN VARCHAR2, target_ns IN VARCHAR2,
  3  sc_xml IN XMLType) return XMLType;
  4  end xs$catview_util;
  5  /

Package created.

SQL> create or replace package body xs$catview_util as
  2  /* the hash table used for keeping track of visited ancestors */
  3  /* used as part of cycle detection in security class */
  4  type xs$hash is table of boolean index by varchar2(5024);
  5  
  6  /* Given a security class xml this function finds whether the security class
  7   * is disabled by its ancestor. If yes, it returns the ancestor by which
  8   * the security class is disabled and the ancestors target_namespace*/
  9  function disablebyancestor_int (visited_list IN OUT xs$hash, sc_xml IN XMLType)
 10  return XMLType is
 11  enable VARCHAR2(5);
 12  parent VARCHAR2(1024);
 13  parent_target_ns VARCHAR2(4000);
 14  parent_sc_name VARCHAR2(5024);
 15  parent_sc XMLType;
 16  nodelist XMLSequenceType;
 17  result XMLType;
 18  begin
 19  /* select the parents of the security class in a XMLSequenceType*/
 20  select XMLSequence(extract(sc_xml,'/securityClass/inherits-from'))
 21         into nodelist from dual;
 22  
 23  /* loop through the parents */
 24  for x in 1..nodelist.count() loop
 25      /* get parent name */
 26      select substr(REGEXP_REPLACE(extractValue(nodelist(x),
 27      '/inherits-from','xmlns="http://xmlns.oracle.com/xs"'),
 28      '(.+):(.+)', '\2'),1,1024) into parent from dual;
 29  
 30      /* get parent target namespace */
 31      select substr(SYS_XMLEXNSURI(nodelist(x),'/inherits-from',
 32      'xmlns="http://xmlns.oracle.com/xs"'),1,4000)
 33      into parent_target_ns from dual;
 34  
 35      parent_sc_name := parent_target_ns ||':'|| parent;
 36      /* check if there is cycle in security classes */
 37      /* i.e there is an entry for parent in hash table */
 38        if visited_list.exists(parent_sc_name) then
 39            return xmltype ('<disablebyancestor></disablebyancestor>');
 40        end if;
 41         /* put parent in visited list */
 42          visited_list(parent_sc_name) := TRUE;
 43         /* beginnig of the exception block */
 44          begin
 45         /* get parent securty class xml */
 46         /* will throw no data found exception if parent doesn't exist */
 47         select OBJECT_VALUE into parent_sc from XDB.XS$SECURITYCLASS
 48            where
 49         (substr(extractValue(OBJECT_VALUE,'/securityClass/@name'),1,1024)=parent)
 50            and
 51         (substr(extractValue(OBJECT_VALUE,'/securityClass/@targetNamespace'),
 52            1,4000)=parent_target_ns);
 53         /* get enable attribute of parent */
 54          select substr(extractValue(parent_sc,'/securityClass/@enable'),1,5)
 55          into enable from dual;
 56  
 57         /* if parent is disabled */
 58          if enable = 'false' then
 59             /* return the result as xmltype */
 60             return xmltype('<disablebyancestor enable="false">
 61                    <parent>'||parent||'</parent>
 62                    <parent_target_ns>'||parent_target_ns||'
 63                    </parent_target_ns>
 64                    </disablebyancestor>');
 65         /* if parent is not directly disabled */
 66           else
 67             /* check whether it is disabled by its ancestor */
 68             result := disablebyancestor_int(visited_list,parent_sc) ;
 69  
 70             /* delete entry from hash table once the recursive call returns */
 71             visited_list.delete(parent_sc_name) ;
 72  
 73             /* check the enable attribute in retuirned result */
 74             select substr(extractValue(result,'/disablebyancestor/@enable'),1,5)
 75             into enable from dual;
 76  
 77             /* if parent is disabled by its ancestor */
 78             /* or there was a cycle in security class */
 79             if (enable = 'false') or (enable is null) then
 80                return result;
 81             end if;
 82           end if;
 83  
 84          /* exception is thrown when parent security class is not found */
 85           exception
 86             when no_data_found then
 87           return xmltype ('<disablebyancestor></disablebyancestor>');
 88           end;
 89   end loop;
 90  
 91   /* If security class is not disabled by any of its parent */
 92   return xmltype('<disablebyancestor enable="true"></disablebyancestor>');
 93  end disablebyancestor_int;
 94  
 95  /* Given a security class name and target namespace this function
 96   * finds whether the security class is disabled by its ancestor
 97   * If security class is disabled by ancestor it returns the ancestor
 98   * and the target namespace of the ancestor. The result is returned
 99   * as xmltype */
100  
101  function disablebyancestor(sc_name IN VARCHAR2,target_ns IN VARCHAR2,
102  sc_xml IN XMLType) return XMLType is
103  visited_list xs$hash;
104  result XMLType;
105  begin
106   visited_list(target_ns ||':'|| sc_name) := TRUE;
107   result := disablebyancestor_int(visited_list,sc_xml);
108   return result;
109  end disablebyancestor;
110  end xs$catview_util;
111  /

Package body created.

SQL> 
SQL> grant execute on xs$catview_util to select_catalog_role;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE view ALL_XSC_SECURITY_CLASS_STATUS
  2    (CLASS_NAME,TARGET_NAMESPACE, ENABLE,
  3     DISABLED_BY_CLASS_NAME,DISABLED_BY_CLASS_TARGET_NS,
  4     MUTABLE)
  5  as
  6  select
  7     substr(extractValue(OBJECT_VALUE,
  8     '/securityClass/@name'),1,1024),
  9     substr(extractValue(OBJECT_VALUE,
 10     '/securityClass/@targetNamespace'),1,4000),
 11     substr(extractValue(OBJECT_VALUE,
 12     '/securityClass/@enable'),1,5),
 13     null,
 14     null,
 15     substr(extractValue(OBJECT_VALUE,
 16     '/securityClass/@mutable'),1,5)
 17  from XDB.XS$SECURITYCLASS
 18  where substr(extractValue(OBJECT_VALUE,
 19        '/securityClass/@enable'),1,5)='false'
 20        or
 21        extract(OBJECT_VALUE,
 22        '/securityClass/inherits-from') is NULL
 23  union all
 24  select
 25      substr(extractValue(securityclass,
 26      '/securityClass/@name'),1,1024),
 27      substr(extractValue(securityclass,
 28      '/securityClass/@targetNamespace'),1,4000),
 29      substr(extractValue(disablebyxml,'/disablebyancestor/@enable'),1,5),
 30      substr(extractValue(disablebyxml,'/disablebyancestor/parent'),1,1024),
 31      substr(extractValue(disablebyxml,'/disablebyancestor/parent_target_ns'),1,4000),
 32      substr(extractValue(securityclass,'/securityClass/@mutable'),1,5)
 33  from (select OBJECT_VALUE securityclass,
 34            xs$catview_util.disablebyancestor(substr(extractValue(OBJECT_VALUE,
 35            '/securityClass/@name'),1,1024),substr(extractValue(OBJECT_VALUE,
 36            '/securityClass/@targetNamespace'),1,4000),OBJECT_VALUE) disablebyxml
 37            from XDB.XS$SECURITYCLASS) tab
 38  where substr(extractValue(securityclass,
 39        '/securityClass/@enable'),1,4)='true'
 40       and
 41       extract(securityclass,
 42       '/securityClass/inherits-from') is not NULL;

View created.

SQL> 
SQL> comment on table ALL_XSC_SECURITY_CLASS_STATUS is
  2  'Security class "enable" and "mutable" status'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS_STATUS.CLASS_NAME is
  2  'The name of the security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS_STATUS.TARGET_NAMESPACE is
  2  'The target namespace for the security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS_STATUS.ENABLE is
  2  'enable status of security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS_STATUS.DISABLED_BY_CLASS_NAME is
  2  'The target name of the ancestor by which security class is disabled'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS_STATUS.DISABLED_BY_CLASS_TARGET_NS is
  2  'The target namespace for the ancestor by which security class is disabled'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS_STATUS.MUTABLE is
  2  'True if security class is mutable,else false'
  3  /

Comment created.

SQL> create or replace public synonym ALL_XSC_SECURITY_CLASS_STATUS
  2   for ALL_XSC_SECURITY_CLASS_STATUS
  3  /

Synonym created.

SQL> grant select on ALL_XSC_SECURITY_CLASS_STATUS to select_catalog_role
  2  /

Grant succeeded.

SQL> create or replace view ALL_XSC_SECURITY_CLASS_DEP
  2    (CLASS_NAME, CLASS_TARGET_NAMESPACE,
  3     PARENT_CLASS_NAME, PARENT_CLASS_TARGET_NAMESPACE)
  4  as
  5  select
  6     substr(extractValue(OBJECT_VALUE,
  7      '/securityClass/@name'),
  8      1, 1024),
  9     substr(extractValue(OBJECT_VALUE,
 10      '/securityClass/@targetNamespace'),
 11      1, 4000),
 12     substr(REGEXP_REPLACE(extractValue(value(ancestors),
 13          '/inherits-from', 'xmlns="http://xmlns.oracle.com/xs"'),
 14        '(.+):(.+)', '\2'),
 15      1, 4000),
 16     substr(SYS_XMLEXNSURI(value(ancestors),
 17        '/inherits-from', 'xmlns="http://xmlns.oracle.com/xs"'),
 18      1, 4000)
 19  from XDB.XS$SECURITYCLASS p,
 20         table(XMLSequence(
 21           extract(p.OBJECT_VALUE, '/securityClass/inherits-from'))
 22         ) ancestors;

View created.

SQL> 
SQL> comment on table ALL_XSC_SECURITY_CLASS_DEP is
  2  'All security class dependencies in the database'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS_DEP.CLASS_NAME is
  2  'The name of the security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS_DEP.CLASS_TARGET_NAMESPACE is
  2  'The target namespace for the security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS_DEP.PARENT_CLASS_NAME is
  2  'The name of a parent security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_SECURITY_CLASS_DEP.PARENT_CLASS_TARGET_NAMESPACE is
  2  'The target namespace for the parent security class'
  3  /

Comment created.

SQL> create or replace public synonym ALL_XSC_SECURITY_CLASS_DEP
  2     for ALL_XSC_SECURITY_CLASS_DEP
  3  /

Synonym created.

SQL> grant select on ALL_XSC_SECURITY_CLASS_DEP to select_catalog_role
  2  /

Grant succeeded.

SQL> 
SQL> create or replace view ALL_XSC_PRIVILEGE
  2    (CLASS_NAME, TARGET_NAMESPACE, PRIVILEGE_NAME, TITLE, DESCRIPTION)
  3  as
  4  select
  5     substr(extractValue(value(s),
  6      '/s:securityClass/@name', 'xmlns:s="http://xmlns.oracle.com/xs"'),
  7      1, 1024),
  8     substr(extractValue(value(s),
  9    '/s:securityClass/@targetNamespace', 'xmlns:s="http://xmlns.oracle.com/xs"'),
 10      1, 4000),
 11     substr(extractValue(value(privs),
 12      '/privilege/@name', 'xmlns="http://xmlns.oracle.com/xs"'),
 13      1, 1024),
 14     extractValue(value(titles),
 15      '/title', 'xmlns="http://xmlns.oracle.com/xs"'),
 16     extractValue(value(descriptions),
 17      '/description', 'xmlns="http://xmlns.oracle.com/xs"')
 18  from XDB.XS$SECURITYCLASS p,
 19       table(XMLSequence(
 20         extract(p.OBJECT_VALUE, '/securityClass', 'xmlns="http://xmlns.oracle.com/xs"'))
 21       ) s,
 22       table(XMLSequence(
 23         extract(value(s), '/securityClass/privilege', 'xmlns="http://xmlns.oracle.com/xs"'))
 24       ) privs,
 25       table(XMLSequence(
 26         extract(value(privs), '/privilege/title',
 27                 'xmlns="http://xmlns.oracle.com/xs"'))
 28       ) (+) titles,
 29       table(XMLSequence(
 30         extract(value(privs), '/privilege/description',
 31                 'xmlns="http://xmlns.oracle.com/xs"'))
 32       ) (+) descriptions;

View created.

SQL> 
SQL> 
SQL> comment on table ALL_XSC_PRIVILEGE is
  2  'All mappings of privileges to security classes in the database'
  3  /

Comment created.

SQL> comment on column ALL_XSC_PRIVILEGE.CLASS_NAME is
  2  'The name of the security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_PRIVILEGE.TARGET_NAMESPACE is
  2  'The target namespace for the security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_PRIVILEGE.PRIVILEGE_NAME is
  2  'The name of a privilege defined in the specified security class'
  3  /

Comment created.

SQL> comment on column ALL_XSC_PRIVILEGE.TITLE is
  2  'Title of the privilege'
  3  /

Comment created.

SQL> comment on column ALL_XSC_PRIVILEGE.DESCRIPTION is
  2  'Description of the privilege'
  3  /

Comment created.

SQL> create or replace public synonym ALL_XSC_PRIVILEGE
  2     for ALL_XSC_PRIVILEGE
  3  /

Synonym created.

SQL> grant select on ALL_XSC_PRIVILEGE to select_catalog_role
  2  /

Grant succeeded.

SQL> 
SQL> create or replace view ALL_XSC_AGGREGATE_PRIVILEGE
  2    (AGGREGATE_PRIVILEGE_NAME, AGGREGATE_PRIVILEGE_TARGET_NS,
  3     TITLE, DESCRIPTION, PRIVILEGE_NAME, PRIVILEGE_TARGET_NAMESPACE)
  4  as
  5  select
  6     substr(extractValue(value(aggregates),
  7      '/aggregatePrivilege/@name', 'xmlns="http://xmlns.oracle.com/xs"'),
  8      1, 1024),
  9     substr(extractValue(OBJECT_VALUE,
 10      '/securityClass/@targetNamespace'),
 11      1, 4000),
 12     extractValue(value(titles),
 13      '/title', 'xmlns="http://xmlns.oracle.com/xs"'),
 14     extractValue(value(descriptions),
 15      '/description', 'xmlns="http://xmlns.oracle.com/xs"'),
 16     REGEXP_REPLACE(substr(extractValue(value(privrefs),
 17                                        '/privilegeRef/@name',
 18                                        'xmlns="http://xmlns.oracle.com/xs"'),
 19                           1, 1024),
 20                    '(.+):(.+)', '\2'),
 21     substr(
 22       SYS_XMLEXNSURI(value(privrefs),
 23         '/privilegeRef/@name', 'xmlns="http://xmlns.oracle.com/xs"'),
 24      1, 4000)
 25  from XDB.XS$SECURITYCLASS p,
 26       table(XMLSequence(
 27         extract(p.OBJECT_VALUE, '/securityClass/aggregatePrivilege'))
 28       ) aggregates,
 29       table(XMLSequence(
 30         extract(value(aggregates), '/aggregatePrivilege/privilegeRef',
 31                 'xmlns="http://xmlns.oracle.com/xs"'))
 32       ) privrefs,
 33       table(XMLSequence(
 34         extract(value(aggregates), '/aggregatePrivilege/title',
 35                 'xmlns="http://xmlns.oracle.com/xs"'))
 36       ) titles,
 37       table(XMLSequence(
 38         extract(value(aggregates), '/aggregatePrivilege/description',
 39                 'xmlns="http://xmlns.oracle.com/xs"'))
 40       ) descriptions
 41  union all
 42  select
 43     substr(extractValue(value(aggregates),
 44      '/aggregatePrivilege/@name', 'xmlns="http://xmlns.oracle.com/xs"'),
 45      1, 1024),
 46     substr(extractValue(OBJECT_VALUE,
 47      '/securityClass/@targetNamespace'),
 48      1, 4000),
 49     NULL,
 50     NULL,
 51     REGEXP_REPLACE(substr(extractValue(value(privrefs),
 52                                        '/privilegeRef/@name',
 53                                        'xmlns="http://xmlns.oracle.com/xs"'),
 54                           1, 1024),
 55                    '(.+):(.+)', '\2'),
 56     substr(
 57       SYS_XMLEXNSURI(value(privrefs),
 58         '/privilegeRef/@name', 'xmlns="http://xmlns.oracle.com/xs"'),
 59      1, 4000)
 60  from XDB.XS$SECURITYCLASS p,
 61       table(XMLSequence(
 62         extract(p.OBJECT_VALUE, '/securityClass/aggregatePrivilege'))
 63       ) aggregates,
 64       table(XMLSequence(
 65         extract(value(aggregates), '/aggregatePrivilege/privilegeRef',
 66                 'xmlns="http://xmlns.oracle.com/xs"'))
 67       ) privrefs
 68  union all
 69  select
 70     substr(extractValue(value(aggregates),
 71      '/aggregatePrivilege/@name', 'xmlns="http://xmlns.oracle.com/xs"'),
 72      1, 1024),
 73     substr(extractValue(OBJECT_VALUE,
 74      '/securityClass/@targetNamespace'),
 75      1, 4000),
 76     NULL,
 77     extractValue(value(descriptions),
 78      '/description', 'xmlns="http://xmlns.oracle.com/xs"'),
 79     REGEXP_REPLACE(substr(extractValue(value(privrefs),
 80                                        '/privilegeRef/@name',
 81                                        'xmlns="http://xmlns.oracle.com/xs"'),
 82                           1, 1024),
 83                    '(.+):(.+)', '\2'),
 84     substr(
 85       SYS_XMLEXNSURI(value(privrefs),
 86         '/privilegeRef/@name', 'xmlns="http://xmlns.oracle.com/xs"'),
 87      1, 4000)
 88  from XDB.XS$SECURITYCLASS p,
 89       table(XMLSequence(
 90         extract(p.OBJECT_VALUE, '/securityClass/aggregatePrivilege'))
 91       ) aggregates,
 92       table(XMLSequence(
 93         extract(value(aggregates), '/aggregatePrivilege/privilegeRef',
 94                 'xmlns="http://xmlns.oracle.com/xs"'))
 95       ) privrefs,
 96       table(XMLSequence(
 97         extract(value(aggregates), '/aggregatePrivilege/description',
 98                 'xmlns="http://xmlns.oracle.com/xs"'))
 99       ) descriptions
100  union all
101  select
102     substr(extractValue(value(aggregates),
103      '/aggregatePrivilege/@name', 'xmlns="http://xmlns.oracle.com/xs"'),
104      1, 1024),
105     substr(extractValue(OBJECT_VALUE,
106      '/securityClass/@targetNamespace'),
107      1, 4000),
108     extractValue(value(titles),
109      '/title', 'xmlns="http://xmlns.oracle.com/xs"'),
110     NULL,
111     REGEXP_REPLACE(substr(extractValue(value(privrefs),
112                                        '/privilegeRef/@name',
113                                        'xmlns="http://xmlns.oracle.com/xs"'),
114                           1, 1024),
115                    '(.+):(.+)', '\2'),
116     substr(
117       SYS_XMLEXNSURI(value(privrefs),
118         '/privilegeRef/@name', 'xmlns="http://xmlns.oracle.com/xs"'),
119      1, 4000)
120  from XDB.XS$SECURITYCLASS p,
121       table(XMLSequence(
122         extract(p.OBJECT_VALUE, '/securityClass/aggregatePrivilege'))
123       ) aggregates,
124       table(XMLSequence(
125         extract(value(aggregates), '/aggregatePrivilege/privilegeRef',
126                 'xmlns="http://xmlns.oracle.com/xs"'))
127       ) privrefs,
128       table(XMLSequence(
129         extract(value(aggregates), '/aggregatePrivilege/title',
130                 'xmlns="http://xmlns.oracle.com/xs"'))
131       ) titles;

View created.

SQL> 
SQL> comment on table ALL_XSC_AGGREGATE_PRIVILEGE is
  2  'All privileges that make up an aggregate privilege in the database'
  3  /

Comment created.

SQL> comment on column ALL_XSC_AGGREGATE_PRIVILEGE.AGGREGATE_PRIVILEGE_NAME is
  2  'The name of the aggregate privilege'
  3  /

Comment created.

SQL> comment on column ALL_XSC_AGGREGATE_PRIVILEGE.AGGREGATE_PRIVILEGE_TARGET_NS is
  2  'The target namespace for the aggregate privilege'
  3  /

Comment created.

SQL> comment on column ALL_XSC_AGGREGATE_PRIVILEGE.TITLE is
  2  'Title of the aggregate privilege'
  3  /

Comment created.

SQL> comment on column ALL_XSC_AGGREGATE_PRIVILEGE.DESCRIPTION is
  2  'Description of the aggregate privilege'
  3  /

Comment created.

SQL> comment on column ALL_XSC_AGGREGATE_PRIVILEGE.PRIVILEGE_NAME is
  2  'Name of a privilege defined in the specified aggregate privilege'
  3  /

Comment created.

SQL> comment on column ALL_XSC_AGGREGATE_PRIVILEGE.PRIVILEGE_TARGET_NAMESPACE is
  2  'The target namespace for this privilege'
  3  /

Comment created.

SQL> create or replace public synonym ALL_XSC_AGGREGATE_PRIVILEGE
  2     for ALL_XSC_AGGREGATE_PRIVILEGE
  3  /

Synonym created.

SQL> grant select on ALL_XSC_AGGREGATE_PRIVILEGE to select_catalog_role
  2  /

Grant succeeded.

SQL> 
SQL> Rem Fixed view for enabled lightweigh session roles
SQL> create or replace view XS_SESSION_ROLES (ROLE, UUID, DBID, FLAGS)
  2  as
  3  select u.role_name, u.uuid, u.dbid, u.flags
  4  from x$xs_session_roles u;

View created.

SQL> /

View created.

SQL> comment on table XS_SESSION_ROLES is
  2  'Roles enabled in the current lightweight session'
  3  /

Comment created.

SQL> comment on column XS_SESSION_ROLES.ROLE is
  2  'Role name'
  3  /

Comment created.

SQL> comment on column XS_SESSION_ROLES.UUID is
  2  'UUID of role'
  3  /

Comment created.

SQL> comment on column XS_SESSION_ROLES.DBID is
  2  'Database internal ID of role'
  3  /

Comment created.

SQL> comment on column XS_SESSION_ROLES.FLAGS is
  2  'Status flags'
  3  /

Comment created.

SQL> 
SQL> create or replace public synonym XS_SESSION_ROLES for XS_SESSION_ROLES;

Synonym created.

SQL> grant select on XS_SESSION_ROLES to PUBLIC;

Grant succeeded.

SQL> 
SQL> Rem Fixed view for xs$session namespace
SQL> create or replace view v$xs_session as
  2  select *
  3  from xs$sessions with read only;

View created.

SQL> create or replace public synonym V$XS_SESSION for v$xs_session ;

Synonym created.

SQL> grant select on V$XS_SESSION to DBA;

Grant succeeded.

SQL> 
SQL> Rem Fixed view for all lightweight session roles
SQL> create or replace view v$xs_session_role (name, roleid, uuid, lwsid) as
  2    select rolename, roleintid, roleid, sid
  3      from xs$session_roles where roleflags = 1 with read only;

View created.

SQL> create or replace public synonym V$XS_SESSION_ROLE for v$xs_session_role;

Synonym created.

SQL> grant select on V$XS_SESSION_ROLE to DBA;

Grant succeeded.

SQL> 
SQL> Rem Fixed view for all lightweight session namespaces and attributes
SQL> create or replace view v$xs_session_attribute (lwsid, namespace, name, value,
  2                                                 acloid, event_handler) as
  3    select sid, nsname, attrname, attrvalue, nsacloid, nshandler
  4      from xs$session_appns with read only;

View created.

SQL> create or replace public synonym V$XS_SESSION_ATTRIBUTE for v$xs_session_attribute;

Synonym created.

SQL> grant select on V$XS_SESSION_ATTRIBUTE to DBA;

Grant succeeded.

SQL> 
SQL> Rem Event handlers for eXtensible Security events
SQL> @@prvtkzxu.plb
SQL> CREATE OR REPLACE PACKAGE DBMS_XS_PRINCIPALS wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  497 164
 21  68WDEimeQXYOnuYvTu4RTJQJDnswgzuJctzbyi8H7UhP4Er2wpxzsPTwB/PJumZEZR0KQTC1
 22  xEsqJgUqJ4VArfNAILzkyqgOI5VKZ5108ZpsW9/cWKkrpl6K8DmNdfqVbkYEaezo+wQonoNa
 23  ewzQulSnm9xmReev8t/RCXjgrnJLAjOedtJSXDa5vK+hXNSKlmUtt+XI2kdxrcA0ygfmXThg
 24  5BmS/5jmilLb6NkoipQp2zYYve9DqWYgQYEjI2YHHTdSuGArAJtIHccSvhKaK6ugNzn5Js7z
 25  ffZ/Zm1XJNI+fXutSCzDbAdp2C8G1D4902701/ovte5BBVxoXdKWD64S/r07Im/R
 26  
 27  /

Package created.

SQL> CREATE OR REPLACE PACKAGE DBMS_XS_PRINCIPALS_INT wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  5d5 1ee
 21  YcKSHaX6TOMSWo/NeIVJT0aIudswgzuJckoVyi/U/opeRy0TMJNkQS/Up7TLkTl3QTC1xC+D
 22  PT3l9uSE5hU3mniaxsgI8iDD8HArkBrtFHKnoIHljZE+qRhrLTn1kWCePp5lFljXyaZBkGC2
 23  iGtg5iv7XqDol/1xdGfc2podlUgC5O00HXTbNjgN/bkPby2gXDsqAntC2NywouXVv3AKVHgY
 24  H050JFSHAsldQIF2cXpPO3RP8RkD1+Lpr8o9u6gB9Jm54VYfNNMxrd9jlIWJHZw5NC+USvJy
 25  wGv+MHR9xiQ3gTKX4J9tfrFvOhADgGMo7NfSe/HLPPN9OYEbvYuueYRPIQu53AFu0Wi89m1H
 26  z44T5wGU1C9YcEPAKJRitbZKvKDtxZqK/JTKnPitZP5XhxtvLJ9XYK5Wt9KWRGJlT5cjpP6h
 27  DDm6bjTtRnpW/K/XmEXrTbtahhnyyLqCza46p9PxvoKgnA9bfT84Hg==
 28  
 29  /

Package created.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_xs_principals_int wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  1515 442
 21  kyiBgV7fqMi/BdJKW9HUTuhxOjswg1VUTCATfI5Vxz8CPUkbgQE9GZJdqRNUbDkx6C5B2FY4
 22  /SenYMj1VT9zfryoddBszJiTGKyKC7ntwUELL9Ehu+42Ny0LYt2S2dBaNGDgHzkFXEu6SGbz
 23  fv6mwrPnppx7G8J6GN0286KogBVqp6iq3QhXykopU5lnNDEEs9DTKKbJptetUTaDqd2I4equ
 24  nQ8oBhOdgWpDGR8HcBCUHUPXqI2m9AFAKS/RxEyw1WPzB2VS0+YDSvQCLoWknrTOx/FA8MaO
 25  JURL1IIbi0e2wGaHMNvPniW4xEXThqv26QnOtAMVr2zoKpfnRT3yAntQdP95oqmwgIVD9Faa
 26  2gJsWRwO8GKVtwx/fy2Zee+d03/vdalbWtc+GniyJncHmTohMR/QOBNck2OoeP5pC0sQk0is
 27  Dfwr0fg1Ygo9mQSctrcc3eJgPAjpxuzdXAajwk372gNN7roDTTIO6zs9n5CVvmwuCcZgdFLJ
 28  Gh9mn3JnzEZy/SSb/rPKLonhYcBp1JBpqgKmMiQfZTN9aQxw8Y4XMFlzseTnZWhnjPqvH9GX
 29  cYuDVsshKXBcJRaf2RaSOnbLepQDXYHC0cqQwQtKinzD8i4TjWVaxPRlkT4bBCmTPRRc2Opm
 30  HPsHg7DiT1uiCKRgoAwk7RrxSopBag2fUV2H5HzOq87umJxx/8giyfspGJPKugtBDFLWbL/B
 31  87cLB6bHGEcSr8gpzEcfFRpaQVVAQ3Xlck5YO2VT3JtXSHrpaIyivO2X1o7x9ytbCrv5/KHl
 32  ODLn1nOWLZ4QQmHVNfUYNRvAeuuXP27lsXpVYZY76Suwxet8MROAclxyZ4QAvNAQ1QzOw+jE
 33  BUDAxtdE/cC0O/jfFGRNsxRjI4FZwco7Ko41sl47v1yOKllzHaOhekkUQ1wFkIp882AfZTFs
 34  R1HnV5wPSmLHwtqS8ToPiF00EGHI8CcH4PLTVxObsfnUqheAMRMj1e40uTuZs/kZeptvR4yt
 35  yW4qEPc+4yzcoLWrovhNkvAaE4t6wIJyY9uj4//Mo+i1rHii2HRpaZSdl2g/zh1riLF2
 36  
 37  /

Package body created.

SQL> show errors;
No errors.
SQL> grant execute on dbms_xs_principals_int to dba;

Grant succeeded.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_xs_principals wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  5b3 181
 21  Vl3Pyd6Z/RWJ9/sTAbeLjJ5bdvkwg9e319xqfC9GrcE+M1pj5yZxx4O0DCf3ezziXoO36e4J
 22  vWnp0Xoi3MySHfBNop7OL4CHQski8IppVeA1yOoj+9DZwRs0KjhzRSNCVDu7T6tnodOmxo1m
 23  TII34Oaur2uFTJWSwm/gbV7hCzhA2BuFsT71hnPrzHd/0yStlNTUpGfBXr3HvUrwXNQ4Pq9U
 24  qmxdxDnNNR5pSJCf/N40xVQjJTUbV0DMb1z6/H5NhSkbAZqbmYATTzBqEKKwrM50bjteKHHN
 25  0ij4V/akhDn5ZHmKtDNs+TMB3Tgf1tTNu+7+e6mubHbm1+PX8Ki5N/zUSTUQavXTCRcwdCYT
 26  EDXyBp+iIZgwW6Gsx+U=
 27  
 28  /

Package body created.

SQL> show errors;
No errors.
SQL> grant execute on dbms_xs_principals to dba;

Grant succeeded.

SQL> 
SQL> Rem Mid-Tier Cache related packages
SQL> @@prvtkzxh.plb
SQL> CREATE OR REPLACE PACKAGE DBMS_XS_MTCACHE wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  128 f3
 21  K2ZVABE5V5p4xwoadbXGr9i72h0wgzLILcsVfHSiWE6UHDXg4M1de+jwEWiXLTditbUfGo3I
 22  aTcTflUAT11EKUAdhIrHJnIJA/MlhalICxhn4pfgPZnVcL37cLNYV0Vljhvs8oFsUVL+2Rh6
 23  LX92Y+fJQOgUuIBj84HAy6UP61lXeVBbUoOcVD2fD1bXCWJDDfQsBVAWCGgDSEc9Ajwv3aXX
 24  oD2BpLvmcPT4v/UHH1Z88uw=
 25  
 26  /

Package created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PACKAGE DBMS_XS_MTCACHE_FFI wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  14b f7
 21  BHYUMbExKCoR60/UFeo4uo2J+Qwwg/BQf8sVfHREaYtuFQv3dVTavkoM76tJwrZw2XMgNaP0
 22  O8o0MAi3nZD3uTALpV6gM8JvmahiaIutpjzCNijDXJPyCtSeEf/7kS7bvMXWf7MnO8nQAjjj
 23  +pwviKzdPDtwR8EIWjCHQrbgrKTS/Is38pn8gQaPEjv0uFWznVG7g16vu3Fj3tAUbBTeBXfK
 24  5ORx7yrc2JBXb6rSOwjSOcIrrr4=
 25  
 26  /

Package created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PACKAGE BODY dbms_xs_mtcache_ffi wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  4d9 203
 21  yGxwrf4RD4KH0/llGoC+xWJhSZAwg2NeNSAVygRVMQ8IlV6ciqAwTqL7YpOZslAmSQajX8n8
 22  pw0MRz9zEXkXhuzoE7vm4bsI7bsI8+/kRouOzzUryO12wMeX12tasSk87NfJW1rwYKYtjnXx
 23  oglpjoZpWBQbWl6W06ID4+GGaeLyjBa8v8+m6KnRKo12At33jF8Pndy6TjpBO5n2wBPo+M9x
 24  f1XNWntA79UomeKQuWsi3ms+PUDd2KDMuf4+BEl072IUqZtJF6qoTmzx1co/GkcJRNR5w1uZ
 25  6B1NeVnaEkkh9ckA4uW8l4eteu/0HRQs2n7kyo4EAo3JDt2U5bocbiDJ/jOqOoeDvkAl8QhC
 26  nRqUUmwISXPkyJu+2b41JfqdNt+0CQxlhQltJIUlQ6HisyRtYlUgD8RZGt8l7VaxWbheK6VX
 27  TCEP8Un3rgG7NF1hfCxI4EqVuc0RGFWv+XkR/OCQUm7Z/gpIstbAJbhZGn8V+yoDiBMZEB35
 28  ubZb
 29  
 30  /

Package body created.

SQL> show errors;
No errors.
SQL> grant execute on dbms_xs_mtcache_ffi to xdb;

Grant succeeded.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_xs_mtcache wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  338 1e2
 21  VwaQFIaKgLpy04rVVl/RqaNBDhEwg43M2iDWfC+5bg9ShGzjRlHlCQfnMnwzNWlL8M8bFLc9
 22  6I1FkfIH+eSrtpvcdyOmr1X+9dfObpTnWG/VzjCaflVyPHm8sSAeZK5wIav7d2DHjvA1yl00
 23  ZklL5m0v1QlZZs5exVR8ahdHeknvUxDF15OUZ4DjLYCJXSyIb2OeuPehwAzAJcDUF32bNG5u
 24  47ugtx0L4aBmuvIU2ZEA3AAoxVInre2rsCZEA86WtgAUvLC0ZHEWoxc08wEMO3EH8JRhVZjV
 25  oiplhE7Be0jMpK2tD72fm2AIuSiOH8elT/CIbnRgZyfz6PhLCCHjRjcU9kCYXw9BFY9wkM8I
 26  aDkaukuXxqAjcpz9Yjg+wvrxHPiRVlfvERd9HmVFMsdxr9Wi6xYA7uvRfbJZoYnB6xHPDiji
 27  4Z0RVD0Lv+56YXIfKG341Bj28DLWA/1aLD/7+4IlQA==
 28  
 29  /

Package body created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PUBLIC SYNONYM DBMS_XS_MTCACHE FOR sys.DBMS_XS_MTCACHE;

Synonym created.

SQL> GRANT EXECUTE on DBMS_XS_MTCACHE to XDB;

Grant succeeded.

SQL> commit;

Commit complete.

SQL> execute dbms_xs_mtcache.set_retention_time('0');

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> 
SQL> @@prvtkzxevents.plb
SQL> CREATE OR REPLACE PACKAGE DBMS_XS_ROLESET_EVENTS_INT wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  25b 160
 21  GohWZ3O/aidaQIID6wF8ZopB8PAwgzvx1ycdf3RGEs0iAkq6Wpl5wNmh9q7fSDRh9w04Epv4
 22  nemkIKoWoAJnZ7D30vCIrS2tCOfCaonZ8W2i0HRiV+8R0dEWUrl7URSz3f/he8BLHKFwNth9
 23  BRF2hzjSHeuJsJXLrI4D6xYgLiO0tTkYkyCi00f6GTmR7lJiTYy5vCU/pgJMYDdaiaxDgrE/
 24  lBV6si/AN/EgkwtGfvz5vVps9u3XY63bI47LkVKPMdWktBchnZ1fK7c+0JWibZkLDaOcJzoE
 25  1PFU0EaVyiZtOLKsxvSdDZIbsHOxpUAcD58FzceZO4RLtc8Tc1XaC/BRmw==
 26  
 27  /

Package created.

SQL> CREATE OR replace library UTL_XS_LIB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  26 59
 21  FErKh/8QsILw7QXgtUj+/1LjfY0wg04I9Z7AdBjD57II9NDnSv4I9QnnvZ6yy1IyzLh0K+fL
 22  UnQI9WHJpqax457w
 23  
 24  /

Library created.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_xs_roleset_events_int wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  1715 5e8
 21  BHFYi8G7cI3VdLDgC375CAuewpswg81ULiCG3y/NPZKU24cr4XRq/0gSTQXhiSGnvveiNxrT
 22  +BQOTSjpBWLINpVRnbyE9/EWDMCK2C2YZ4xeR0JOr+5H/WVE8Eje4RRdCEHkMx4P0D2wxvzu
 23  uyQo0Aew/KVy7obrC4H4xknmY8FCGi96rFOOZzYB08UvrG2en+Ws2oWN0tfmh8mo5xXACRrC
 24  4L6sNtto711vDk0a5k+jBMBB4dehdP2j6Bh+EcWopclZ0yG9ZrA++t45XdcstT97eno0CMlE
 25  lFOpZaHPIG9SIe1exyA8TtVq/lNdzsVqjXiEaj6ZRJQSCeWgg/qeqiMDEuhh26ujriCzfpa3
 26  oZQIBPXS1JNnddJa573Z7SYaUEvrdIufE/bQZxzQV7M1V8x+3hywaefjNmlEP7IG7lvjjvRq
 27  WSuYIwEtbYT7RJxZUi1knOGgjNZqZG/yhxjnaVxkBD1IQu7k7Uj1nuVhb5opoLmgd2cLQZV6
 28  Zv8XDpMY8QL3p4jliFPhJrhssfR2Avb0N2C6p9TLpTbDzYlKTdEETlXM83kmUwjq2RP+NzW9
 29  /3KBVRqMatyELchspwGeMVNcYt7+D+r9QdKIQP0W1/5vEMt31FLFOeRrXF4bPfUcoKDWtxkX
 30  l5paDDwkjLbMGx2KFCEHEjauOqLeJR/ExnO51BwzQL0pHJdOMYTMHZUkPbx9LKWtAYzCUU8m
 31  QMFfzv8v45iN2lW1kx+1KOhUYiZ0Bf7GTxI7daknGtHaNtbfHPze+uPcwb6aK4QdIzG7cVQQ
 32  tOlpFtT9/f662EGJwaFjUqLuriDf5mS7K9lD/hELydhdCI9+g+d2ixV8e0aaco2yTQB1Kw8r
 33  AnBC254nG3dmg+b1uqHj8q93vGV+ur0pv2HWHAUN6FmycAB7onh3wPTBWiqMxDKCktRnfFa+
 34  70RoUkyDKtqSSkNwWoDvvFbzzkoHDkF738zReHQAsdxEXe6HsxoiqsZVbjSV6M/9V9h/oKkK
 35  9OKY//CVA/DMOikfwmVc4PyAqcUCzSwAITGLU53QbnxEWPaqvHRKWPyR8rpqKy65Q+BRSNOF
 36  NX0JNeu8a9jo3HZO39e/IWKvxDVH9AaNuc5gYlS2IMKPBXxiloFtlZV+Nme6B+8WsDKRBXuA
 37  EIJJ7eEzWRnQuWaGeJRKoeRfChi5CQd82sV7UjlWxtvCU0hUXm0leEmHx4XOEOVWBpYQT8D1
 38  MKsP/sufGYHBWH+x9DLPHQj6s58NUjKJY2t7seTHPTf+8aj+Ol4mT80M8A7cS7zPS1jCsdbX
 39  MdJo75a1IwVT8WPBQr9FwVVCswtiA4E+It2h+2S7CiDSEAFrVUz58rsKmbmBnO0I+R+71Ymx
 40  eOzzRydCgXh14nqTUOdko6ykEro5ckpNZJIaknu2i1H6cOeld5EwEJ7tIgJFQSzlskFXlv2G
 41  zlZlWV14/6yLaf8SwVlHql6PEaFk3whUZDMPL3vogb+1+xeymOQ=
 42  
 43  /

Package body created.

SQL> show errors;
No errors.
SQL> GRANT EXECUTE ON dbms_xs_roleset_events_int TO XDB;

Grant succeeded.

SQL> CREATE OR REPLACE PACKAGE DBMS_XS_PRINCIPAL_EVENTS_INT wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  205 ce
 21  CYTKD9quiyJRQIimFFabKpuWJN4wgzuzf57mfy82aR5uZmPfh4/qE4oOsyDCirmcII34mubn
 22  p+Co3gfuf3zmOtwfotwoHpgyswnH86PaQU1I7cPQkajbFoNlMF7b1VyHqBjYysZSw7pFqPhb
 23  q/pCwRrIyZUTvGD1o7w118/xGrRGSS7sFD4E1YtZkoCeTeROGUOlOcF6yLg=
 24  
 25  /

Package created.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_xs_principal_events_int wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  5bcc e6e
 21  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
 72  
 73  /

Package body created.

SQL> show errors;
No errors.
SQL> GRANT EXECUTE ON dbms_xs_principal_events_int TO XDB;

Grant succeeded.

SQL> declare
  2  isCreatedBln boolean := false;
  3  user_ResConfig VARCHAR2(2048) :=
  4  '<ResConfig
  5                  xmlns="http://xmlns.oracle.com/xdb/XDBResConfig.xsd"
  6              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  7     xsi:schemaLocation="http://xmlns.oracle.com/xdb/XDBResConfig.xsd
  8                         http://xmlns.oracle.com/xdb/XDBResConfig.xsd">
  9    <event-listeners>
 10      <listener>
 11        <description>Register event handlers for users.</description>
 12        <schema>SYS</schema>
 13        <source>DBMS_XS_PRINCIPAL_EVENTS_INT</source>
 14        <language>PL/SQL</language>
 15        <events>
 16          <Pre-Create/>
 17          <Post-Create/>
 18          <Pre-Update/>
 19          <Pre-Delete/>
 20        </events>
 21        <pre-condition>
 22          <existsNode>
 23            <XPath>/r:Resource[r:SchemaElement="http://xmlns.oracle.com/xs/principal.xsd#user"]</XPath>
 24            <namespace>xmlns:p="http://xmlns.oracle.com/xs"
 25                       xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 26            </namespace>
 27          </existsNode>
 28        </pre-condition>
 29      </listener>
 30    </event-listeners>
 31  </ResConfig>';
 32  begin
 33    if (NOT DBMS_XDB.existsResource('/sys/xs/userrc.xml')) then
 34      isCreatedBln := DBMS_XDB.CreateResource('/sys/xs/userrc.xml',
 35                                              user_ResConfig);
 36      DBMS_ResConfig.AddRepositoryResConfig('/sys/xs/userrc.xml');
 37    else
 38  
 39  
 40  
 41      update resource_view r
 42         set r.res =
 43           updateXML(r.res,
 44                     '/r:Resource/r:Contents/rc:ResConfig',
 45                     XMLType(user_ResConfig),
 46                     'xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 47                      xmlns:rc=http://xmlns.oracle.com/xdb/XDBResConfig.xsd"')
 48       where equals_path(r.res, '/sys/xs/userrc.xml') = 1;
 49    end if;
 50  end;
 51  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> declare
  2  isCreatedBln boolean := false;
  3  roleset_ResConfig VARCHAR2(2048) :=
  4  '<ResConfig
  5                  xmlns="http://xmlns.oracle.com/xdb/XDBResConfig.xsd"
  6              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  7     xsi:schemaLocation="http://xmlns.oracle.com/xdb/XDBResConfig.xsd
  8                         http://xmlns.oracle.com/xdb/XDBResConfig.xsd">
  9    <event-listeners>
 10      <listener>
 11        <description>Register event handlers for role sets.</description>
 12        <schema>SYS</schema>
 13        <source>DBMS_XS_ROLESET_EVENTS_INT</source>
 14        <language>PL/SQL</language>
 15        <events>
 16          <Pre-Create/>
 17          <Post-Create/>
 18          <Pre-Update/>
 19          <Pre-Delete/>
 20        </events>
 21        <pre-condition>
 22          <existsNode>
 23            <XPath>/r:Resource[r:SchemaElement="http://xmlns.oracle.com/xs/roleset.xsd#roleSet"]</XPath>
 24            <namespace>xmlns:p="http://xmlns.oracle.com/xs"
 25                       xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 26            </namespace>
 27          </existsNode>
 28        </pre-condition>
 29      </listener>
 30    </event-listeners>
 31  </ResConfig>';
 32  begin
 33    if (NOT DBMS_XDB.existsResource('/sys/xs/rolesetrc.xml')) then
 34      isCreatedBln := DBMS_XDB.CreateResource('/sys/xs/rolesetrc.xml',
 35                                              roleset_ResConfig);
 36      DBMS_ResConfig.AddRepositoryResConfig('/sys/xs/rolesetrc.xml');
 37    else
 38  
 39  
 40  
 41      update resource_view r
 42         set r.res =
 43           updateXML(r.res,
 44                     '/r:Resource/r:Contents/rc:ResConfig',
 45                     XMLType(roleset_ResConfig),
 46                     'xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 47                      xmlns:rc=http://xmlns.oracle.com/xdb/XDBResConfig.xsd"')
 48       where equals_path(r.res, '/sys/xs/rolesetrc.xml') = 1;
 49    end if;
 50  end;
 51  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> declare
  2  isCreatedBln boolean := false;
  3  roles_ResConfig VARCHAR2(2048) :=
  4  '<ResConfig
  5                  xmlns="http://xmlns.oracle.com/xdb/XDBResConfig.xsd"
  6              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  7     xsi:schemaLocation="http://xmlns.oracle.com/xdb/XDBResConfig.xsd
  8                         http://xmlns.oracle.com/xdb/XDBResConfig.xsd">
  9    <event-listeners>
 10      <listener>
 11        <description>Register event handlers for roles.</description>
 12        <schema>SYS</schema>
 13        <source>DBMS_XS_PRINCIPAL_EVENTS_INT</source>
 14        <language>PL/SQL</language>
 15        <events>
 16          <Pre-Create/>
 17          <Post-Create/>
 18          <Pre-Update/>
 19          <Pre-Delete/>
 20        </events>
 21        <pre-condition>
 22          <existsNode>
 23            <XPath>/r:Resource[r:SchemaElement="http://xmlns.oracle.com/xs/principal.xsd#dynamicRole"]</XPath>
 24            <namespace>xmlns:p="http://xmlns.oracle.com/xs"
 25                       xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 26            </namespace>
 27          </existsNode>
 28        </pre-condition>
 29      </listener>
 30    </event-listeners>
 31  </ResConfig>';
 32  begin
 33    if (NOT DBMS_XDB.existsResource('/sys/xs/drolerc.xml')) then
 34      isCreatedBln := DBMS_XDB.CreateResource('/sys/xs/drolerc.xml',
 35                                              roles_ResConfig);
 36      DBMS_ResConfig.AddRepositoryResConfig('/sys/xs/drolerc.xml');
 37    else
 38  
 39  
 40  
 41      update resource_view r
 42         set r.res =
 43           updateXML(r.res,
 44                     '/r:Resource/r:Contents/rc:ResConfig',
 45                     XMLType(roles_ResConfig),
 46                     'xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 47                      xmlns:rc=http://xmlns.oracle.com/xdb/XDBResConfig.xsd"')
 48       where equals_path(r.res, '/sys/xs/drolerc.xml') = 1;
 49    end if;
 50  end;
 51  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> declare
  2  isCreatedBln boolean := false;
  3  dynamic_role_ResConfig VARCHAR2(2048) :=
  4  '<ResConfig
  5                  xmlns="http://xmlns.oracle.com/xdb/XDBResConfig.xsd"
  6              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  7     xsi:schemaLocation="http://xmlns.oracle.com/xdb/XDBResConfig.xsd
  8                         http://xmlns.oracle.com/xdb/XDBResConfig.xsd">
  9    <event-listeners>
 10      <listener>
 11        <description>Register event handlers for dynamic roles.</description>
 12        <schema>SYS</schema>
 13        <source>DBMS_XS_PRINCIPAL_EVENTS_INT</source>
 14        <language>PL/SQL</language>
 15        <events>
 16          <Pre-Create/>
 17          <Post-Create/>
 18          <Pre-Update/>
 19          <Pre-Delete/>
 20        </events>
 21        <pre-condition>
 22          <existsNode>
 23            <XPath>/r:Resource[r:SchemaElement="http://xmlns.oracle.com/xs/principal.xsd#role"]</XPath>
 24            <namespace>xmlns:p="http://xmlns.oracle.com/xs"
 25                       xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 26            </namespace>
 27          </existsNode>
 28        </pre-condition>
 29      </listener>
 30    </event-listeners>
 31  </ResConfig>';
 32  begin
 33    if (NOT DBMS_XDB.existsResource('/sys/xs/rolerc.xml')) then
 34      isCreatedBln := DBMS_XDB.CreateResource('/sys/xs/rolerc.xml',
 35                                              dynamic_role_ResConfig);
 36      DBMS_ResConfig.AddRepositoryResConfig('/sys/xs/rolerc.xml');
 37    else
 38  
 39  
 40  
 41      update resource_view r
 42         set r.res =
 43           updateXML(r.res,
 44                     '/r:Resource/r:Contents/rc:ResConfig',
 45                     XMLType(dynamic_role_ResConfig),
 46                     'xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 47                      xmlns:rc=http://xmlns.oracle.com/xdb/XDBResConfig.xsd"')
 48       where equals_path(r.res, '/sys/xs/rolerc.xml') = 1;
 49    end if;
 50  end;
 51  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> declare
  2  isCreatedBln boolean := false;
  3  function_role_ResConfig VARCHAR2(2048) :=
  4  '<ResConfig
  5                  xmlns="http://xmlns.oracle.com/xdb/XDBResConfig.xsd"
  6              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  7     xsi:schemaLocation="http://xmlns.oracle.com/xdb/XDBResConfig.xsd
  8                         http://xmlns.oracle.com/xdb/XDBResConfig.xsd">
  9    <event-listeners>
 10      <listener>
 11        <description>Register event handlers for function roles.</description>
 12        <schema>SYS</schema>
 13        <source>DBMS_XS_PRINCIPAL_EVENTS_INT</source>
 14        <language>PL/SQL</language>
 15        <events>
 16          <Pre-Create/>
 17          <Post-Create/>
 18          <Pre-Update/>
 19          <Pre-Delete/>
 20        </events>
 21        <pre-condition>
 22          <existsNode>
 23            <XPath>/r:Resource[r:SchemaElement="http://xmlns.oracle.com/xs/principal.xsd#functionRole"]</XPath>
 24            <namespace>xmlns:p="http://xmlns.oracle.com/xs"
 25                       xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 26            </namespace>
 27          </existsNode>
 28        </pre-condition>
 29      </listener>
 30    </event-listeners>
 31  </ResConfig>';
 32  begin
 33    if (NOT DBMS_XDB.existsResource('/sys/xs/frolerc.xml')) then
 34      isCreatedBln := DBMS_XDB.CreateResource('/sys/xs/frolerc.xml',
 35                                              function_role_ResConfig);
 36      DBMS_ResConfig.AddRepositoryResConfig('/sys/xs/frolerc.xml');
 37    else
 38  
 39  
 40  
 41      update resource_view r
 42         set r.res =
 43           updateXML(r.res,
 44                     '/r:Resource/r:Contents/rc:ResConfig',
 45                     XMLType(function_role_ResConfig),
 46                     'xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 47                      xmlns:rc=http://xmlns.oracle.com/xdb/XDBResConfig.xsd"')
 48       where equals_path(r.res, '/sys/xs/frolerc.xml') = 1;
 49  end if;
 50  end;
 51  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> GRANT EXECUTE ON sys.dbms_xdsutl TO XDB
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PACKAGE DBMS_XS_DATA_SECURITY_EVENTS wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  e0 ba
 21  aUYNGOjMQDzXkqqBd86rAAvS5kwwg41Kf8vhf3Q2Jk6enFClNwpuMERbgNMxy0UKm7UPuKKg
 22  yrNKyYC6rVU64fHOS7yjH5+5QHf1MzuG9IpgfqgvXGK9JY71Q1aZJ38gMiyPVzTTIFr5PrLA
 23  h2z8BRPtfd9Q3pIJ01bOxI7IQ8FOKaXht1oiVQ==
 24  
 25  /

Package created.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_xs_data_security_events wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  375 203
 21  dZlBeYBvMGUxF8q/7KhctMNYUW8wg+0JAK5qfC8BuWRTOynT9MIN4LiK9idaBoWf5ZHC8v0U
 22  GqdRG+mlu1JuPxSUfHyPqBhBc7ntmL8+a9AUouc21XBzoDtHgAE82SPe5cAytJ13T+jPlg8e
 23  nuOrdKYJPhbCWWalkTVm/+Ngt4KVenFwUemlqcMdmeABwAfOrZkU6OZSYpHuDvc7ao1zplMM
 24  bGWhswn9GmOHcJ1OJDJuK2q4ObADyvH/9HYSv4bM+GD/j/xabjfFiU/G99EJ6sXdyEmaMXVo
 25  /nvnzE9ImEyjPoAivUGTpE6n8ulRYsb8EhBYHCzHGlhhXvALkWjLlEBcvj7qKsNPjTHtWHMw
 26  wS5IgKU0mnk4EFRIQNYLF2irRXRD48kYSWsyPT1XRV5YSuTcI996hL2QjL/RBujjvZjLQoMP
 27  N62hVHeRCgOgQk6cpFNGpdnmkHNx1fkR4zhGtfZNXKBAq1M9CdTx9Mzfo/oyOHH7Ku064Zpg
 28  i58=
 29  
 30  /

Package body created.

SQL> show errors;
No errors.
SQL> GRANT EXECUTE ON dbms_xs_data_security_events TO XDB;

Grant succeeded.

SQL> declare
  2  isCreatedBln boolean := false;
  3  data_security_ResConfig VARCHAR2(2048) :=
  4  '<ResConfig
  5                  xmlns="http://xmlns.oracle.com/xdb/XDBResConfig.xsd"
  6              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  7     xsi:schemaLocation="http://xmlns.oracle.com/xdb/XDBResConfig.xsd
  8                         http://xmlns.oracle.com/xdb/XDBResConfig.xsd">
  9    <event-listeners>
 10      <listener>
 11        <description>Register event handlers for Data Security.</description>
 12        <schema>SYS</schema>
 13        <source>DBMS_XS_DATA_SECURITY_EVENTS</source>
 14        <language>PL/SQL</language>
 15        <events>
 16          <Post-Update/>
 17          <Post-Delete/>
 18        </events>
 19        <pre-condition>
 20          <existsNode>
 21            <XPath>/r:Resource[r:SchemaElement="http://xmlns.oracle.com/xs/dataSecurity.xsd#DataSecurity"]</XPath>
 22            <namespace>xmlns:p="http://xmlns.oracle.com/xs"
 23                       xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 24            </namespace>
 25          </existsNode>
 26        </pre-condition>
 27      </listener>
 28    </event-listeners>
 29  </ResConfig>';
 30  begin
 31    if (NOT DBMS_XDB.existsResource('/sys/xs/xdserc.xml')) then
 32      isCreatedBln := DBMS_XDB.CreateResource('/sys/xs/xdserc.xml',
 33                                              data_security_ResConfig);
 34      DBMS_ResConfig.AddRepositoryResConfig('/sys/xs/xdserc.xml');
 35    else
 36  
 37  
 38  
 39      update resource_view r
 40         set r.res =
 41           updateXML(r.res,
 42                     '/r:Resource/r:Contents/rc:ResConfig',
 43                     XMLType(data_security_ResConfig),
 44                     'xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 45                      xmlns:rc=http://xmlns.oracle.com/xdb/XDBResConfig.xsd"')
 46       where equals_path(r.res, '/sys/xs/xdserc.xml') = 1;
 47    end if;
 48  end;
 49  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> CREATE OR REPLACE PACKAGE dbms_xs_secclass_events wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  d4 ce
 21  cCo2uoGIoYrsGeNclydR/frCANcwg41f7cvhqC85O0Ke8nnPNwpvM22q50ZDR5Pzuxpe/V8I
 22  CC7Rp99hgrf0kSigN7xK/isZO6B7LsQM9mO8/IYxIfQJo8aOVlOuULqbii+2koWJLdu9IlsD
 23  B9fs18yXfLeB3RuoOTFDyP+CozKdgHQHqoCeQZ2NjjcNSqKXfmO6z6YJQgAP
 24  
 25  /

Package created.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_xs_secclass_events wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  8de 280
 21  /65ktIVfM+3R81of+3Igq3e5XL8wg83DLdxqfC8Bueow9mZczAJ1TQR2+INA1J+R2mOQUQlm
 22  b6OoCagiLMbLoezo3d1G/KjCuRkSvwgDlq+RNxep5jWxfSlS6pEs6StdBc3Z6BbC5ACaLJ5G
 23  PXCpaWZE++zyZ8dH3nT0RiFrVNZbDI+jRv5nIVGoXjGXYKyUsmwU5umjhQ2yOmBJCYvWyC7F
 24  9/LhQKNgdg29Wztz28Djj4NN2FRf5QFhI5DD3sUElDYNp7eRLfo20RNl74+PCed5ZnFpfQec
 25  iFtceXetFpIV5nSK/X5Y4hOPnjI80wxlxpuDmIjQxj9sl3/WLDioR2YZv1PEv4C8R2eqAQUZ
 26  Ou0Hcce61AQ3OUOkH04S7U1caD64MBEx7irgP2QqpN9qmRZeQeulEgD8uFnZ61rFLovMWe2n
 27  vJoeo66Vl9+uDd6k+Nxt4DsBjuiLjVOe7yF6fhlBTh2aipsGMgPXBxd6+Y08GU1UNzXHs8Po
 28  qcgE1Y3p1HknDquXVMnWHOrvuh5G1CGvkcs3YwpH7bnvX/YBxfsnuycoblIOXvrZtfvcmNbg
 29  wMlfU8uWC11lYNELXbXw9/wysaUkiBbcd3CXfaGdM9/l+j1JsatW7A==
 30  
 31  /

Package body created.

SQL> GRANT EXECUTE ON dbms_xs_secclass_events TO XDB;

Grant succeeded.

SQL> declare
  2  isCreatedBln boolean := false;
  3  security_class_ResConfig VARCHAR2(2048) :=
  4  '<ResConfig
  5                  xmlns="http://xmlns.oracle.com/xdb/XDBResConfig.xsd"
  6              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  7     xsi:schemaLocation="http://xmlns.oracle.com/xdb/XDBResConfig.xsd
  8                         http://xmlns.oracle.com/xdb/XDBResConfig.xsd">
  9    <event-listeners>
 10      <listener>
 11        <description>Register event handlers for Security Classes.</description>
 12        <schema>SYS</schema>
 13        <source>DBMS_XS_SECCLASS_EVENTS</source>
 14        <language>PL/SQL</language>
 15        <events>
 16          <Pre-Update/>
 17          <Pre-Delete/>
 18        </events>
 19        <pre-condition>
 20          <existsNode>
 21            <XPath>/r:Resource[r:SchemaElement="http://xmlns.oracle.com/xs/securityclass.xsd#securityClass"]</XPath>
 22            <namespace>xmlns:p="http://xmlns.oracle.com/xs"
 23                       xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 24            </namespace>
 25          </existsNode>
 26        </pre-condition>
 27      </listener>
 28    </event-listeners>
 29  </ResConfig>';
 30  begin
 31    if (NOT DBMS_XDB.existsResource('/sys/xs/scrc.xml')) then
 32      isCreatedBln := DBMS_XDB.CreateResource('/sys/xs/scrc.xml',
 33                                              security_class_ResConfig);
 34      DBMS_ResConfig.AddRepositoryResConfig('/sys/xs/scrc.xml');
 35    else
 36  
 37  
 38  
 39      update resource_view r
 40         set r.res =
 41           updateXML(r.res,
 42                     '/r:Resource/r:Contents/rc:ResConfig',
 43                     XMLType(security_class_ResConfig),
 44                     'xmlns:r="http://xmlns.oracle.com/xdb/XDBResource.xsd"
 45                      xmlns:rc=http://xmlns.oracle.com/xdb/XDBResConfig.xsd"')
 46       where equals_path(r.res, '/sys/xs/scrc.xml') = 1;
 47    end if;
 48  end;
 49  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> 
SQL> Rem Create network ACL security packages
SQL> @@dbmsnacl
SQL> Rem
SQL> Rem $Header: plsql/admin/dbmsnacl.sql /st_rdbms_11.2.0/1 2012/04/26 11:51:02 rpang Exp $
SQL> Rem
SQL> Rem dbmsnacl.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2012, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsnacl.sql - DBMS Network ACL
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This package provides the PL/SQL interface to administer the
SQL> Rem      access control list of network access from the database through
SQL> Rem      the PL/SQL network-related utility packages.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This package must be created under SYS.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    apfwkr      04/23/12 - Backport rpang_bug-13932413 from main
SQL> Rem    rpang       03/17/08 - Add API to assign ACL to wallets
SQL> Rem    rpang       01/02/08 - IPv6 support
SQL> Rem    rpang       03/09/07 - Use ACLID
SQL> Rem    rpang       12/13/06 - Move check_privilege_aclid impl to body
SQL> Rem    rpang       09/21/06 - Handle ACE start_date and end_date
SQL> Rem    rpang       08/24/06 - Add ACE start_date/end_date
SQL> Rem    rpang       06/08/06 - Created
SQL> Rem
SQL> 
SQL> create or replace package dbms_network_acl_admin is
  2  
  3    /*
  4     * DBMS_NETWORK_ACL_ADMIN is the PL/SQL package that provides the interface
  5     * to administer the network ACL. The EXECUTE privilege on the package will
  6     * be granted only to the DBA role by default.
  7     */
  8  
  9    ----------------
 10    -- Exceptions --
 11    ----------------
 12    ace_already_exists          EXCEPTION;
 13    empty_acl                   EXCEPTION;
 14    acl_not_found               EXCEPTION;
 15    invalid_acl_path            EXCEPTION;
 16    invalid_host                EXCEPTION;
 17    invalid_privilege           EXCEPTION;
 18    invalid_wallet_path         EXCEPTION;
 19    bad_argument                EXCEPTION;
 20    unresolved_principal        EXCEPTION;
 21    PRAGMA EXCEPTION_INIT(ace_already_exists,          -24243);
 22    PRAGMA EXCEPTION_INIT(empty_acl,                   -24246);
 23    PRAGMA EXCEPTION_INIT(acl_not_found,               -31001);
 24    PRAGMA EXCEPTION_INIT(invalid_acl_path,            -46059);
 25    PRAGMA EXCEPTION_INIT(invalid_host,                -24244);
 26    PRAGMA EXCEPTION_INIT(invalid_privilege,           -24245);
 27    PRAGMA EXCEPTION_INIT(invalid_wallet_path,         -29248);
 28    PRAGMA EXCEPTION_INIT(bad_argument,                -29261);
 29    PRAGMA EXCEPTION_INIT(unresolved_principal,        -44416);
 30    ace_already_exists_num      constant PLS_INTEGER := -24243;
 31    empty_acl_num               constant PLS_INTEGER := -24246;
 32    acl_not_found_num           constant PLS_INTEGER := -31001;
 33    invalid_acl_path_num        constant PLS_INTEGER := -46059;
 34    invalid_host_num            constant PLS_INTEGER := -24244;
 35    invalid_privilege_num       constant PLS_INTEGER := -24245;
 36    invalid_wallet_path_num     constant PLS_INTEGER := -29248;
 37    bad_argument_num            constant PLS_INTEGER := -29261;
 38    unresolved_principal_num    constant PLS_INTEGER := -44416;
 39  
 40    -- IP address mask: xxx.xxx.xxx.xxx
 41    IP_ADDR_MASK    constant VARCHAR2(80) := '([[:digit:]]+\.){3}[[:digit:]]+';
 42    -- IP submet mask:  xxx.xxx...*
 43    IP_SUBNET_MASK  constant VARCHAR2(80) := '([[:digit:]]+\.){0,3}\*';
 44    -- Hostname mask:   ???.???.???...???
 45    HOSTNAME_MASK   constant VARCHAR2(80) := '[^\.\:\/\*]+(\.[^\.\:\/\*]+)*';
 46    -- Hostname mask:   *.???.???...???
 47    DOMAIN_MASK     constant VARCHAR2(80) := '\*(\.[^\.\:\/\*]+)*';
 48  
 49    /*--------------- API for ACL and privilege administration ---------------*/
 50  
 51    /*
 52     * Creates an access control list (ACL) with an initial privilege setting.
 53     * An ACL must have at least one privilege setting. The ACL has no access
 54     * control effect unless it is assigned to a network host.
 55     *
 56     * PARAMETERS
 57     *   acl          the name of the ACL. Relative path will be relative to
 58     *                "/sys/acls".
 59     *   description  the description attribute in the ACL
 60     *   principal    the principal (database user or role) whom the privilege
 61     *                is granted to or denied from
 62     *   is_grant     is the privilege is granted or denied
 63     *   privilege    the network privilege to be granted or denied
 64     *   start_date   the start date of the access control entry (ACE). When
 65     *                specified, the ACE will be valid only on and after the
 66     *                specified date.
 67     *   end_date     the end date of the access control entry (ACE). When
 68     *                specified, the ACE will expire after the specified date.
 69     *                The end_date must be greater than or equal to the
 70     *                start_date.
 71     * RETURN
 72     *   None
 73     * EXCEPTIONS
 74     *
 75     * NOTES
 76     *   To remove the ACL, use DROP_ACL. To assign the ACL to a network host,
 77     *   use ASSIGN_ACL.
 78     */
 79    procedure create_acl(acl          in varchar2,
 80                         description  in varchar2,
 81                         principal    in varchar2,
 82                         is_grant     in boolean,
 83                         privilege    in varchar2,
 84                         start_date   in timestamp with time zone default null,
 85                         end_date     in timestamp with time zone default null);
 86  
 87    /*
 88     * Adds a privilege to grant or deny the network access to the user. The
 89     * access control entry (ACE) will be created if it does not exist.
 90     *
 91     * PARAMETERS
 92     *   acl          the name of the ACL. Relative path will be relative to
 93     *                "/sys/acls".
 94     *   principal    the principal (database user or role) whom the privilege
 95     *                is granted to or denied from
 96     *   is_grant     is the privilege is granted or denied
 97     *   privilege    the network privilege to be granted or denied
 98     *   position     the position of the ACE. If a non-null value is given,
 99     *                the privilege will be added in a new ACE at the given
100     *                position and there should not be another ACE for the
101     *                principal with the same is_grant (grant or deny). If a null
102     *                value is given, the privilege will be added to the ACE
103     *                matching the principal and the is_grant if one exists, or
104     *                to the end of the ACL if the matching ACE does not exist.
105     *   start_date   the start date of the access control entry (ACE). When
106     *                specified, the ACE will be valid only on and after the
107     *                specified date. The start_date will be ignored if the
108     *                privilege is added to an existing ACE.
109     *   end_date     the end date of the access control entry (ACE). When
110     *                specified, the ACE will expire after the specified date.
111     *                The end_date must be greater than or equal to the
112     *                start_date. The end_date will be ignored if the
113     *                privilege is added to an existing ACE.
114     * RETURN
115     *   None
116     * EXCEPTIONS
117     *
118     * NOTES
119     *   To remove the privilege, use DELETE_privilege.
120     */
121    procedure add_privilege(acl        in varchar2,
122                            principal  in varchar2,
123                            is_grant   in boolean,
124                            privilege  in varchar2,
125                            position   in pls_integer default null,
126                            start_date in timestamp with time zone default null,
127                            end_date   in timestamp with time zone default null);
128  
129    /*
130     * Delete a privilege.
131     *
132     * PARAMETERS
133     *   acl          the name of the ACL. Relative path will be relative to
134     *                "/sys/acls".
135     *   principal    the principal (database user or role) for whom the
136     *                privileges will be deleted
137     *   is_grant     is the privilege is granted or denied. If a null
138     *                value is given, the deletion is applicable to both
139     *                granted or denied privileges.
140     *   privilege    the privilege to be deleted. If a null value is given,
141     *                the deletion is applicable to all privileges.
142     * RETURN
143     *   None
144     * EXCEPTIONS
145     *
146     * NOTES
147     *   Any ACE that does not contain any privilege after the deletion will
148     *   be removed also.
149     */
150    procedure delete_privilege(acl          in varchar2,
151                               principal    in varchar2,
152                               is_grant     in boolean  default null,
153                               privilege    in varchar2 default null);
154  
155    /*
156     * Drops an access control list (ACL).
157     *
158     * PARAMETERS
159     *   acl          the name of the ACL. Relative path will be relative to
160     *                "/sys/acls".
161     * RETURN
162     *   None
163     * EXCEPTIONS
164     *
165     */
166    procedure drop_acl(acl in varchar2);
167  
168    /*--------- API for ACL assignment to network hosts and wallets ---------*/
169  
170    /*
171     * Assigns an access control list (ACL) to a network host, and optionally
172     * specific to a TCP port range.
173     *
174     * PARAMETERS
175     *   acl        the name of the ACL. Relative path will be relative to
176     *              "/sys/acls".
177     *   host       the host to which the ACL will be assigned. The host can be
178     *              the name or the IP address of the host. A wildcard can be
179     *              used to specify a domain or a IP subnet. The host or
180     *              domain name is case-insensitive.
181     *   lower_port the lower bound of a TCP port range if not NULL.
182     *   upper_port the upper bound of a TCP port range. If NULL,
183     *              lower_port is assumed.
184     * RETURN
185     *   None
186     * EXCEPTIONS
187     *
188     * NOTES
189     * 1. The ACL assigned to a domain takes a lower precedence than the other
190     *    ACLs assigned sub-domains, which take a lower precedence than the ACLs
191     *    assigned to the individual hosts. So for a given host say
192     *    "www.us.mycompany.com", the following domains are listed in decreasing
193     *    precedences:
194     *      - www.us.mycompany.com
195     *      - *.us.mycompany.com
196     *      - *.mycompany.com
197     *      - *.com
198     *      - *
199     *    In the same way, the ACL assigned to an subnet takes a lower
200     *    precedence than the other ACLs assigned smaller subnets, which take a
201     *    lower precedence than the ACLs assigned to the individual IP addresses.
202     *    So for a given IP address say "192.168.0.100", the following subnets
203     *    are listed in decreasing precedences:
204     *      - 192.168.0.100
205     *      - 192.168.0.*
206     *      - 192.168.*
207     *      - 192.*
208     *      - *
209     * 2. The port range is applicable only to the "connect" privilege
210     *    assignments in the ACL. The "resolve" privilege assignments in an ACL
211     *    have effects only when the ACL is assigned to a host without a port
212     *    range.
213     * 3. For the "connect" privilege assignments, an ACL assigned to the host
214     *    without a port range takes a lower precedence than other ACLs assigned
215     *    to the same host with a port range.
216     * 4. When specifying a TCP port range, both lower_port and upper_port must
217     *    not be NULL and upper_port must be greater than or equal to lower_port.
218     *    The port range must not overlap with any other port ranges for the same
219     *    host assigned already.
220     * 5. To remove the assignment, use UNASSIGN_ACL.
221     */
222    procedure assign_acl(acl        in varchar2,
223                         host       in varchar2,
224                         lower_port in pls_integer default null,
225                         upper_port in pls_integer default null);
226  
227    /*
228     * Unassign the access control list (ACL) currently assigned to a network
229     * host.
230     *
231     * PARAMETERS
232     *   acl        the name of the ACL. Relative path will be relative to
233     *              "/sys/acls". If acl is NULL, any ACL assigned to the host
234     *              will be unassigned.
235     *   host       the host remove the ACL assignment from. The host can be
236     *              the name or the IP address of the host. A wildcard can be
237     *              used to specify a domain or a IP subnet. The host or
238     *              domain name is case-insensitive. If host is null, the ACL
239     *              will be unassigned from any host. If both host and acl are
240     *              NULL, all ACLs assigned to any hosts will be unassigned.
241     *   lower_port if not NULL, the lower bound of a TCP port range for the
242     *              host.
243     *   upper_port the upper bound of a TCP port range. If NULL,
244     *              lower_port is assumed.
245     * RETURN
246     *   None
247     * EXCEPTIONS
248     *
249     */
250    procedure unassign_acl(acl        in varchar2 default null,
251                           host       in varchar2 default null,
252                           lower_port in pls_integer default null,
253                           upper_port in pls_integer default null);
254  
255    /*
256     * Assigns an access control list (ACL) to a wallet.
257     *
258     * PARAMETERS
259     *   acl         the name of the ACL. Relative path will be relative to
260     *               "/sys/acls".
261     *   wallet_path the directory path of the wallet to which the ACL will be
262     *               assigned. The path is case-sensitive and of the format
263     *               "file:<directory-path>".
264     * RETURN
265     *   None
266     * EXCEPTIONS
267     *
268     * NOTES
269     *   To remove the assignment, use UNASSIGN_WALLET_ACL.
270     */
271    procedure assign_wallet_acl(acl         in varchar2,
272                                wallet_path in varchar2);
273  
274    /*
275     * Unassign the access control list (ACL) currently assigned to a wallet.
276     *
277     * PARAMETERS
278     *   acl         the name of the ACL. Relative path will be relative to
279     *               "/sys/acls". If acl is NULL, any ACL assigned to the wallet
280     *               will be unassigned.
281     *   wallet_path the directory path of the wallet to which the ACL will be
282     *               assigned. The path is case-sensitive and of the format
283     *               "file:<directory-path>". If wallet_path is null, the ACL
284     *               will be unassigned from any wallet.
285     * RETURN
286     *   None
287     * EXCEPTIONS
288     *
289     */
290    procedure unassign_wallet_acl(acl         in varchar2 default null,
291                                  wallet_path in varchar2 default null);
292  
293    /*
294     * Check if a privilege is granted to or denied from the user in an
295     * access control list.
296     *
297     * PARAMETERS
298     *   acl        the name of the ACL. Relative path will be relative to
299     *              "/sys/acls".
300     *   aclid      the object ID of the ACL.
301     *   user       the user to check against. If the user is NULL, the invoker
302     *              is assumed. The username is case-sensitive as in the
303     *              USERNAME column of the ALL_USERS view.
304     *   privilege  the network privilege to check
305     * RETURN
306     *   1 when the privilege is granted; 0 when the privilege is denied;
307     *   NULL when the privilege is neither granted or denied.
308     * EXCEPTIONS
309     *
310     */
311    function check_privilege(acl       in varchar2,
312                             user      in varchar2,
313                             privilege in varchar2) return number;
314    function check_privilege_aclid(aclid     in raw,
315                                   user      in varchar2,
316                                   privilege in varchar2) return number;
317  
318    /*
319     * This procedure is for internal use. It is the pre-delete XDB event
320     * handler to remove the ACL assignments when the ACL is dropped.
321     */
322    procedure handlePreDelete(event in DBMS_XEvent.XDBRepositoryEvent);
323  
324  end;
325  /

Package created.

SQL> 
SQL> grant execute on sys.dbms_network_acl_admin to dba;

Grant succeeded.

SQL> grant execute on sys.dbms_network_acl_admin to xdb;

Grant succeeded.

SQL> 
SQL> create or replace public synonym dbms_network_acl_admin
  2  for sys.dbms_network_acl_admin;

Synonym created.

SQL> 
SQL> create or replace package dbms_network_acl_utility is
  2  
  3    /*
  4     * DBMS_NETWORK_ACL_UTILITY is the PL/SQL package that provides the utility
  5     * functions to facilitate the evaluation of ACL assignments governing
  6     * TCP connections to network hosts.
  7     */
  8  
  9    -----------
 10    -- Types --
 11    -----------
 12    type domain_table is table of varchar2(1000);
 13  
 14    ----------------
 15    -- Exceptions --
 16    ----------------
 17    access_denied               EXCEPTION;
 18    PRAGMA EXCEPTION_INIT(access_denied,               -24247);
 19    access_denied_num           constant PLS_INTEGER := -24247;
 20  
 21    /*
 22     * For a given host, return the domains whose ACL assigned will be used to
 23     * determine if a user has the privilege to access the given host or not.
 24     * When the IP address of the host is given, return the subnets instead.
 25     *
 26     * PARAMETERS
 27     *   host       the network host.
 28     * RETURN
 29     *   The domains or subnets for the given host.
 30     * EXCEPTIONS
 31     *
 32     * NOTES
 33     *   This function cannot handle IPv6 addresses. Nor can it generate
 34     *   subnets of arbitrary number of prefix bits for an IPv4 address.
 35     */
 36    function domains(host in varchar2) return domain_table pipelined;
 37  
 38    /*
 39     * Return the domain level of the given host name, domain, or subnet.
 40     *
 41     * PARAMETERS
 42     *   host       the network host, domain, or subnet.
 43     * RETURN
 44     *   The domain level of the given host, domain, or subnet.
 45     * EXCEPTIONS
 46     *
 47     * NOTES
 48     *   This function cannot handle IPv6 addresses and subnets, and subnets
 49     *   in Classless Inter-Domain Routing (CIDR) notation.
 50     */
 51    function domain_level(host in varchar2) return number;
 52  
 53    /*
 54     * Determines if the two given hosts, domains, or subnets are equal. For
 55     * IP addresses and subnets, this function can handle different
 56     * representations of the same address or subnet. For example, an IPv6
 57     * representation of an IPv4 address versus its IPv4 representation.
 58     *
 59     * PARAMETERS
 60     *   host1      the network host, domain, or subnet to compare.
 61     *   host2      the network host, domain, or subnet to compare.
 62     * RETURN
 63     *   1 if the two hosts, domains, or subnets are equal. 0 when not equal.
 64     *   NULL when either of the hosts is NULL.
 65     * EXCEPTIONS
 66     *
 67     * NOTES
 68     *   This function does not perform domain name resolution when comparing
 69     * any host or domain for equality.
 70     */
 71    function equals_host(host1 in varchar2, host2 in varchar2) return number;
 72      pragma interface(C, equals_host);
 73  
 74    /*
 75     * Determines if the given host is equal to or contained in the given host,
 76     * domain, or subnet. For IP addresses and subnets, this function can handle
 77     * different representations of the same address or subnet. For example, an
 78     * IPv6 representation of an IPv4 address versus its IPv4 representation.
 79     *
 80     * PARAMETERS
 81     *   host       the network host.
 82     *   domain     the host, domain, or subnet.
 83     * RETURN
 84     *   A non-NULL value will be returned if the given host is equal to or
 85     *   contained in the given host, domain, or subnet:
 86     *     - if domain is a hostname, the level of its domain + 1 will be
 87     *       returned;
 88     *     - if domain is a domain name, the domain level will be returned;
 89     *     - if domain is an IP address or subnet, the number of significant
 90     *       address bits of the IP address or subnet will be returned;
 91     *     - if domain is the wildcard "*", 0 will be returned.
 92     *   The non-NULL value returned indicates the precedence of the domain or
 93     *   subnet for ACL assignment. The higher the value, the higher is the
 94     *   precedence. NULL will be returned if the host is not equal to or
 95     *   contained in the given host, domain or subnet. NULL will also be
 96     *   returned if either the host or domain is NULL.
 97     * EXCEPTIONS
 98     *
 99     * NOTES
100     *   This function does not perform domain name resolution when evaluating
101     * any host or domain.
102     */
103    function contains_host(host in varchar2, domain in varchar2) return number;
104      pragma interface(C, contains_host);
105  
106  end;
107  /

Package created.

SQL> 
SQL> grant execute on sys.dbms_network_acl_utility to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym dbms_network_acl_utility
  2  for sys.dbms_network_acl_utility;

Synonym created.

SQL> 
SQL> create or replace view USER_NETWORK_ACL_PRIVILEGES
  2  (HOST, LOWER_PORT, UPPER_PORT, PRIVILEGE, STATUS)
  3  as
  4  select a.host, a.lower_port, a.upper_port, p.priv,
  5         decode(p.status, 0, 'DENIED', 1, 'GRANTED', null)
  6    from net$_acl a,
  7         (select /*+ no_merge no_push_pred */ aclid, 'connect' priv,
  8                 dbms_network_acl_admin.check_privilege_aclid(aclid, name,
  9                   'connect') status
 10           from (select distinct aclid from net$_acl) ac, user$
 11          where user# = userenv('SCHEMAID')) p
 12   where a.aclid = p.aclid and p.status is not null
 13  union
 14  select a.host, a.lower_port, a.upper_port, p.priv,
 15         decode(p.status, 0, 'DENIED', 1, 'GRANTED', null)
 16    from net$_acl a,
 17         (select /*+ no_merge no_push_pred */ aclid, 'resolve' priv,
 18                 dbms_network_acl_admin.check_privilege_aclid(aclid, name,
 19                   'resolve') status
 20           from (select distinct aclid from net$_acl
 21                  where lower_port is null and upper_port is null), user$
 22          where user# = userenv('SCHEMAID')) p
 23   where a.aclid = p.aclid and
 24         a.lower_port is null and a.upper_port is null and
 25         p.status is not null
 26  /

View created.

SQL> grant select on USER_NETWORK_ACL_PRIVILEGES to PUBLIC
  2  /

Grant succeeded.

SQL> create or replace public synonym USER_NETWORK_ACL_PRIVILEGES
  2  for USER_NETWORK_ACL_PRIVILEGES
  3  /

Synonym created.

SQL> comment on table USER_NETWORK_ACL_PRIVILEGES is
  2  'User privileges to access network hosts through PL/SQL network utility packages'
  3  /

Comment created.

SQL> comment on column USER_NETWORK_ACL_PRIVILEGES.HOST is
  2  'Network host'
  3  /

Comment created.

SQL> comment on column USER_NETWORK_ACL_PRIVILEGES.LOWER_PORT is
  2  'Lower bound of the port range'
  3  /

Comment created.

SQL> comment on column USER_NETWORK_ACL_PRIVILEGES.UPPER_PORT is
  2  'Upper bound of the port range'
  3  /

Comment created.

SQL> comment on column USER_NETWORK_ACL_PRIVILEGES.PRIVILEGE is
  2  'Privilege'
  3  /

Comment created.

SQL> comment on column USER_NETWORK_ACL_PRIVILEGES.STATUS is
  2  'Privilege status'
  3  /

Comment created.

SQL> @@prvtnacl.plb
SQL> create or replace package body dbms_network_acl_admin wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  5266 14bc
 21  3LASrDOEprp4HQplMuGviuVy8+4wg812cyATWjM//w9/wqP7jda3M4NMMS4U4IZGmTmWj8/1
 22  DQc0yzHw/1LA1FWfY+QI/osdBHA5KFIjSYE8+PNwi+14TosQct13q0G6sN97CICxfYux+CGH
 23  bBOWKB6qlU6VZUGaaJo7yLa5zaghLeIGgiRfcQWEhJqZ79ltUHeyC8Ztil7aZ3Pv9TC4uHxn
 24  2E53GP+Oe4Qg9n3U690c2urpwZnVBEGTr7pzVbod/jwjKU/eKDmNM6D71r1A57X8fCQcpXzQ
 25  0N67Ulj5EjH47DNwI6mR7XydGZb783BFq5A2nwQSa3brHNO1IWfC8vgejP+7E9cLnbHv/otq
 26  q1oUiwbuvP6Bi7EcG8gaKE+xbdvk7Bn1mwgL8X0xw8HXw+7oDjnYtfSzEhsqFWet6SVZ3kwC
 27  /0qC+OwZQ4m8zzrgP0JbGj8e7QBXV4pMLmi4CBLAJJqdumMTOif3aeXupUdBVC0eKETDmry1
 28  Zzasss0poQpKplozXqyxEFRHeL8o1Wy5lxsVtY4fvWmzqsaCIAStIhb/WAB6W5W40XYfiRs5
 29  91JgLYy3nTYNhmvdRYrlX+BvrDwBZ4gLicpO+6XIOZ6KEW8whRMu3IqpFnMhS9xJbxXFHF87
 30  azsomMKtBDHPsDckoIADpu+dSw7XGFpJpBOrd0jd4qreWwh3KGZ0FZMTYE0x9cVAZTnxrY2A
 31  8rBmbsZjQ0Wfouhq0S0uVi3MN2A3Y/LFer/ozkLPMDCrKHO9cL/ccdobWbFS1egyBvjieUIJ
 32  CfBUmwKXY/Ff1dTKjPO018jiiVohBDiIVcVRez5AysuM3QjcgZk/34j3X8UzCeeQtLBKgCsF
 33  iO90L6ypReI3UYIFCwkvVNzny3KrlSu4exO0hyHKYmF44U01+0xAUV2g15LHUX+meKDVO8RO
 34  Aex4wc6P5d/EhVi0cGMb6yWKm7B9Jfuhr8R9t7sxurDZ7O8k1NeS6R/esaUFT1kzgIzcd63a
 35  Evj++dspB2utHIBP/5KzsPTJhTkHY697vS2g/Cr3XO56RIM3OjY3wYCFMv95Gu0buaOp9Cm9
 36  9w9066nw4PztPKIel688K42ZrkFByOMYECqgsHXHXTpscMYlAAML2ufkZ3l3wjK4YHu6nu7F
 37  qXOwmWfmnoofj/Q/zjfYeS0Wa82DaueT6KqbKFOm2FSIEJ5q1N/L5L1KQFnOu5QhygoMyf0P
 38  VzNs7CWHfK1Leo8CBysEKaX+sFikcR4BmQpVFG1Dz5AOE12f+UK+Nfplvq4r/aDsmkkphs/3
 39  d1bACucnafudTIEgixO+Gdkj7nyoWkjwGE9PozjnRUDoGwR21DXPKPOENlERypkkpIYp6bFe
 40  UEXvzwq6UI/wMMMzroKZekRcL1/YbbRmOHVqr4eTz273ovJ6JDn9IJULqjkV2/r6fZHT1O4y
 41  WmyFFODWu+8S5iwpFKnS756r1v3RQGnzSf84qSyvLdFHv4puGEMYvV58X0xbdBIbKHfy9xdS
 42  w6c72NU2VJG0ZzfTfK7NFp2vieaQLGZadhYH1vos7Btq4Ms4Ig4zvHI2ShZ89nekR4erkpyg
 43  VwufGwQ0+92xBKTtCl/IkkFlJEWIRD4sF4f93ItVhSM355KEW3b4TS/neyGLFE6wL+NX99FE
 44  u1FzvwcHu8vF7IdYj+eOLG7ifkry8w4vbD+PcqxreVqRuiIgSO5L1sqvjMhyQtJ9spAmQ/w6
 45  jamzRFuite+HDqnoQb04CNZxqBbs3SCf3TV2jNanSApC5CGSPWxroIU3bwC/CFGtb4ryN+ji
 46  O6/m0bVaoOgCsW8oClzCtBFMd3cex+yKlqe/cLH+H/ojx78SW1he8d+M1GfQTiFzm0u8oSqM
 47  r2PB1iCvJ+diqIkopFb0I5/M8B4C5P+SP3oj+mPGLS3KZ290qZ+DODsInh7baG6D6usEgNo2
 48  PlrSJDLNKb0PEjzbSkkrMMuIfOROIZtJp4YBrl/q7MyHe1AoOFMgSz9Q3IVFYb+eQcghOMvA
 49  DVHolNRMg33zXRFFevr2hV02dEmG0TgL3/t6EL1eYRQ/aQYulI5Q+t2+6GUSKH9kV3pvCMM6
 50  YiE/MLX5VRK9yoBj5sPLVNSHqTSPxVJY4iEelD5nJpa6mYfTTvSlpG107jNIWNIP9s+AG41x
 51  qn60viWRahqtyo1+ShT8VvfW5GLjuFQXeAH1Ce+9fT58J1nnQrg45kCbNWvAqH5pCwAkBuaH
 52  DGj6Uu7CJ0VYZHh/omj6zFvYWmKNYqWIcCt77LRwQ7Zca1hMHSKJ2Eir4xcRARqIA2VGwN7L
 53  ithvAsdr5LAJ8Ks12I5XFBwJHRbmtume3ARPOVPU+qZUkxr0pm02jr24ZbMW43yxLSrHKZsm
 54  5w1731aGkyfZBvabhmE5P86lHT6Km0SZoxaGWKJGFgcjIC9WplwmlgFViPVrIk1RNY6j2E5V
 55  z+JuUZRSTSFRAaJj8+87Sn9W1wKdFnWNmBfu+/SGUuaAAdqZj05uqboAp/seg8ZCLAlSWl3r
 56  lZK592/UNc3bmQBtaLSt5LOCNfk7Ptzz1GeVHdNuYC+Vogl29Qs2Hq31+jNitHnMXQdbxuAw
 57  BLjsViJku9+q5vWe94t/MRN9AxA70O2jmFkR+ne2WZwDIi7tqrpy6hMLfXKZHN1w7KA7+85S
 58  EMSjaAD/nMYJPCEDUy9sYMLdtFkzKLiQnWzGwOwsPlsII5EGVA9PQW7yINqIaFt1Yn5jed0f
 59  hI7oqZU5hwPlWjFoH6vIoflJgtUKgpj/jbFfb8XfYWjIKXXKToE4yDWFKI1zzISX19z8kMqr
 60  wdg2wQ6OeAxXB4znr0J2RKpen63l1pfxfMO9jz1uWTH2zYoDiQstnDKjVwINZG58nqFCRori
 61  zQHkR7rOQLtH15TNFX4/H4BURu1C6c8RN7Koo5nR0MDEFsnBMoo0SPA8fX0xDfx7YTrffjE5
 62  fwdjxLnBAbkyqs5LgxQKLvJ5FA1RJMdhtX1cP/SLCv3berOzCpghG+pSRZO1Ub2JytWnWxq8
 63  O8kML+IOv8AYpJTW5kYo1gjv/GkM0MtE56XLsnvd4VPqVADCnPfe3Pluft6RUstVxoVOhEW3
 64  r+qbHZNsnX6GxD25Dw4jD1Rz8kLlQdWNAHTqgsF0vVkao9FJvLa/LXHnOYCx2PYNqYdg2hPT
 65  9hY4Fjwm4xiZBtAwV4cRW/NNsfQAMx26H+eJ6Mp3V2hwfqm4hpzyWC12S/FNO46h+ZQVc8Tm
 66  V9dN2FmfvBjzGtngoMNq4CCfE+PB2/6eLX58gZYBhr8huZoV5U5tPBJOTs3lTyhILNPKVSFK
 67  hzsJrKaDpyhtOsAs/sqyrRpQraD+05hFmemda0bm9nrU6PPYCqDrmzDDf6SXUxssG9LgR9BS
 68  Nxyxd12Xg97MoXjCeVFZ0CIcsc+Vn5iWxHNGPus+R8Awi1PvaXpMZj4Y0WfRXzQj9U1rjMBg
 69  /LLKXbLIwxJ7MpiaPj73cPYKpdonb2EnpJRWkdlw6Y+8Qpj6O3MzAY1i5Zfx39ER8LeW7p2/
 70  0o95z87Ze1IBeLwD7+rHQ8AX4srYzVnMgRrUv4fEOBdJRmMT34DHuiAEIUj9ykMYWmor5r50
 71  8SDmOmrs8SifVtBxAbgNEGKJf3Wf86AMl9V5ngRy0STDG2cZaREfM6EMu2wXsJQTfjqs2d8x
 72  8mr6IEtITlJs6NXV7yp+CI2uLef+zs5DBoCpKCmcHbRF7gqktH43zfAbA62sZvOVujBF06gm
 73  ReNiAZWj/SGLHSo64hhvEgWnHcz7unrPh3nSJRUEgFudS5UmLSy0GtvkwS1BfD822GIpzv66
 74  SdjGJZPfW3r3G5YN2+lxz4Z1Plqx9t45Yloxt9718GLlWa0ThCvRcWKnDS56m5A5pDck1yhl
 75  40pNi+JUs7Lq3BMGYkPkbt7eDJM/Rm+ZgybqAIdr0/qgz4JaI3BZYov3HMW2B9qISbrbgtIB
 76  0Z8nJLDZplf0jHNMZY7DEFjCdUOpKfRLE7/u/JVfRXZ1f3A3KJnLAmvMQ2kLQoIHbv+MEReO
 77  70TsQmijtofvI9HMd63ElOJdkUxD3vpAkeirT8qxmnxOSkmifvcXgGSlBJfiied8IUySr62z
 78  YZNdU9z1eWXW965hukcVGlukr34hQUsSuS1n7fVTLyzzVtxbnkq5XK4bK8tJ8f+VqDX7z0jp
 79  fJp/mOWwT0NJ4f2beKOBsPbILRwttiaVpc5eE0zldCGNFLtyRn4bI43+Ae4pwDzbGle0ytvG
 80  0hPLMyANDOUm8bRZJua7EQ2jBWJup/eoxvdE3DmZFu2lxjr88zyd1ABDkaQgkQ9rt/b1BjAr
 81  uJDzpI6ipcjs446CmliOEDGgN28pS5lYIHnw1Rk34GrZL8Kd9Z9ocObbUnWM0TDcyAfjF7ba
 82  3t0lHgmJAaMZKr1Phx8+z4tWU0KyXUkF6Ru6iswwjGb+0elUKd8axHU3boI7VziEcL4RFu/A
 83  q3cBfTSNDmXbnczmLHZrI2SD9pEBWeTVpiqM4graxY1Mbey+pXdoujHEkeK9yWKtobunKLNt
 84  pVKnxcdcqWQ/Np3TpnDPigBGBukiRP4Jhv/6RwAHda9sLR1S6qKvdW29WDQCdHqR5hWdRWCS
 85  TpbiQ/TMzY0zab9lwemWFzFjfy8gQwpEKlkhgjGMhD2Q4d6LBdAnvJDz58BEF5hpuD3A+L0f
 86  KMrr5xmSkqcfok868X3/lhhhQpOgYZgmpRVNzIsQa0yNZ0aZfdXUsORhZua6m0m5th3PbL6V
 87  eBzsmrPOi4guYpjINCQJ2RtTWOsa5lBY0DXegpmEvrwVTQNgalaEd+w9Uf87OMEzQ35eJpxk
 88  SIQvWhnO+Tw1j8TQR0b3tkJbWHNzLKLmPepuXfv3cb2iATMgiKZSJ+9KN+Xyym1wJzjMLhJd
 89  s/dUKGMt05qAWcjB3mxGTRM5NUZnNiaoZsrN1/P7sPzSPc7BQKY0OPjVns6q4+GRD+MGz0An
 90  plD5A2nFT9YV7JPCPwX/EoJ9QJaHvXnqnF+dbZd957BhEIAerQ+zI7l4oI6TMxV2x2CyiiZg
 91  yhdwEkwSq7R3Mx4zAs33l/Nipbe6t4rl94JTP7guHIhoxBdLObijyKrLRrmV8203JOcViTmq
 92  6gEgHoBJBDiSpPNFA2cpK2GoS82yhVvLdaQS63UcUhsYy3bDp7UGWq0gmVnsKzkbT1Q5G+qE
 93  lD/eomlgtHtKNYb1XeiHEGBumr1ZUn6oQYT9BgJu7rW1zSQktcJw
 94  
 95  /

Package body created.

SQL> create or replace package body dbms_network_acl_utility wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  9a6 299
 21  KzkY75HeIVyF7tSwKhiTJDondVEwg81cVfYFfC+ax/kYEgQw/CUlQADX9coFsaKiIr2hoUWc
 22  GLmGa9ILSwFfN7XO+sJuyaCkurbmPoLUPCm8P5JSRes0bpt/5mvl/qUpaoF4qk5COobZsQyq
 23  +QiXqg+HcUxWqqxL1vtnMK7Jw3tr58VcxzUzPaKTW6xw/y6t7snb3Q4TWBnd2odaNmIh8jVU
 24  DffKejajo5aF7gQuy1KumjHVuFYRL41sxLQ7piUgfzWsdbUEwu10cci3nuBgfCfz+8IvzRwP
 25  ttOQJ5aVjowxL8ID2N7lUWFBUGKJWCOH8nIKo1A3UDjMiA/H2nnsigHUCdgkwc2UNiDQ7hYP
 26  +gk+7dODalsyyndYHJc130ZzjKgv2bGKpcNTywA+HzQZr+5FI40Z/xgFVKgYyftOh2FKFjhm
 27  MO1KmSYYtJuYgPL5BXBl3Zn4/VKtknIBj8INyoeGmgk+PeGYjEvwCk6zRp/K4UQuTv3E7C1J
 28  NSf8TLoO9dI0FumIRbggC1NL5yhVUuzHPsWaUYXa/t8MBdSMBEbk+VgGbP/MInpUESsfEUU1
 29  wq+pWrPLv3irCdR4mH5rPrCiq5ih6oxLmm05DV1sGTwsBQEMkuoRLZG/Mr4scgVhZFr4EAiZ
 30  W4Ab7w==
 31  
 32  /

Package body created.

SQL> declare
  2    b boolean;
  3  begin
  4  
  5    if (not dbms_xdb.existsResource('/sys/apps/plsql')) then
  6      b := dbms_xdb.createFolder('/sys/apps/plsql');
  7    end if;
  8    if (not dbms_xdb.existsResource('/sys/apps/plsql/xs')) then
  9      b := dbms_xdb.createFolder('/sys/apps/plsql/xs');
 10    end if;
 11  
 12    if (not dbms_xdb.existsResource('/sys/apps/plsql/xs/netaclrc.xml')) then
 13      b := dbms_xdb.createResource(
 14        '/sys/apps/plsql/xs/netaclrc.xml',
 15        '<ResConfig xmlns="http://xmlns.oracle.com/xdb/XDBResConfig.xsd"
 16                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 17           xsi:schemaLocation="http://xmlns.oracle.com/xdb/XDBResConfig.xsd
 18                               http://xmlns.oracle.com/xdb/XDBResConfig.xsd">
 19           <event-listeners>
 20             <listener>
 21               <description>
 22                 PL/SQL Network ACL Resource Configuration
 23               </description>
 24               <schema>SYS</schema>
 25               <source>DBMS_NETWORK_ACL_ADMIN</source>
 26               <language>PL/SQL</language>
 27               <events>
 28                 <Pre-Delete/>
 29               </events>
 30             </listener>
 31           </event-listeners>
 32         </ResConfig>');
 33    end if;
 34  
 35  end;
 36  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> 
SQL> --Enable xml index
SQL> --alter index xdb.prin_xidx enable;
SQL> --alter index xdb.sc_xidx enable;
SQL> 
SQL> 
SQL> -- Add XS$NULL to XDB schema list
SQL> BEGIN
  2     dbms_registry.update_schema_list('XDB',
  3       dbms_registry.schema_list_t('ANONYMOUS', 'XS$NULL'));
  4  END;
  5  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Explicit grants to DBA,System; "any" privileges are no more applicable for
SQL> -- XDB tables. Listing these specifically since there are certain tables
SQL> -- for which we dont grant full access by default even to DBA & System.
SQL> -- (eg, purely-dictionary tables like XDB$SCHEMA, XDB$TTSET etc.)
SQL> grant all on XDB.XDB$RESOURCE to dba;

Grant succeeded.

SQL> grant all on XDB.XDB$RESOURCE to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XDB$H_INDEX to dba;

Grant succeeded.

SQL> grant all on XDB.XDB$H_INDEX to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XDB$H_LINK to dba;

Grant succeeded.

SQL> grant all on XDB.XDB$H_LINK to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XDB$D_LINK to dba;

Grant succeeded.

SQL> grant all on XDB.XDB$D_LINK to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XDB$NLOCKS to dba;

Grant succeeded.

SQL> grant all on XDB.XDB$NLOCKS to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XDB$WORKSPACE to dba;

Grant succeeded.

SQL> grant all on XDB.XDB$WORKSPACE to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XDB$CHECKOUTS to dba;

Grant succeeded.

SQL> grant all on XDB.XDB$CHECKOUTS to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XDB$ACL to dba;

Grant succeeded.

SQL> grant all on XDB.XDB$ACL to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XDB$CONFIG to dba;

Grant succeeded.

SQL> grant all on XDB.XDB$CONFIG to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XDB$RESCONFIG to dba;

Grant succeeded.

SQL> grant all on XDB.XDB$RESCONFIG to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XS$DATA_SECURITY to dba;

Grant succeeded.

SQL> grant all on XDB.XS$DATA_SECURITY to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XS$PRINCIPALS to dba;

Grant succeeded.

SQL> grant all on XDB.XS$PRINCIPALS to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XS$ROLESETS to dba;

Grant succeeded.

SQL> grant all on XDB.XS$ROLESETS to system with grant option;

Grant succeeded.

SQL> grant all on XDB.XS$SECURITYCLASS to dba;

Grant succeeded.

SQL> grant all on XDB.XS$SECURITYCLASS to system with grant option;

Grant succeeded.

SQL> declare
  2    suf  varchar2(26);
  3    stmt varchar2(2000);
  4  begin
  5    select toksuf into suf from xdb.xdb$ttset where flags = 0;
  6    stmt := 'grant all on XDB.X$PT' || suf || ' to DBA';
  7    execute immediate stmt;
  8    stmt := 'grant all on XDB.X$PT' || suf || ' to SYSTEM WITH GRANT OPTION';
  9    execute immediate stmt;
 10  end;
 11  /

PL/SQL procedure successfully completed.

SQL> 
SQL> prompt Extensible Security (XS) Installation completed
Extensible Security (XS) Installation completed
SQL> prompt ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SQL> prompt

SQL> 
SQL> 
SQL> prompt Extensible Security (XS) Installation completed
Extensible Security (XS) Installation completed
SQL> prompt ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SQL> prompt

SQL> 
SQL> 
SQL> Rem Data Pump has the new requirement that users granted
SQL> Rem DATAPUMP_FULL_EXP_DATABASE be able to export in FULL mode
SQL> Rem tables in the XDB schema. The advise is actually to grant
SQL> Rem SELECT on XDB tables to the SELECT_CATALOG_ROLE, which in
SQL> Rem turn is granted to DATAPUMP_FULL_EXP_DATABASE, to be in sync
SQL> Rem with other components to be supported by FULL export.
SQL> Rem Some XDB tables are actually allowing PUBLIC access, so this
SQL> Rem grant will be a noop for them, but some do not.
SQL> Rem If other XDB scripts are run beyond this point (outside of catqm.sql),
SQL> Rem it is the responsability of the script developer to allow similar
SQL> Rem grants on any XDB-owned tables that may get created in the script.
SQL> Rem
SQL> prompt Granting SELECT on XDB tables to SELECT_CATALOG_ROLE
Granting SELECT on XDB tables to SELECT_CATALOG_ROLE
SQL> prompt ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SQL> 
SQL> set serveroutput on
SQL> 
SQL> declare
  2    type    cur_type is ref cursor;
  3    cur     cur_type;
  4    tname   varchar2(100);
  5    stmt    varchar2(2000);
  6  begin
  7    open cur for 'select table_name from dba_tables where owner=:1 union ' ||
  8                 'select table_name from dba_xml_tables where owner=:2 union ' ||
  9                 'select table_name from dba_object_tables where owner=:3 '
 10      using 'XDB', 'XDB', 'XDB';
 11    loop
 12      fetch cur into tname;
 13      exit when cur%NOTFOUND;
 14  
 15      tname := 'XDB."' ||    tname || '"';
 16      stmt := 'grant select on ' || tname || ' to SELECT_CATALOG_ROLE';
 17      begin
 18         execute immediate stmt;
 19         exception
 20            when OTHERS then
 21               if ((SQLCODE != -22812) and (SQLCODE != -30967)) then
 22                 dbms_output.put_line(stmt);
 23                 dbms_output.put_line(SQLERRM);
 24               end if;
 25      end;
 26    end loop;
 27  end;
 28  /

PL/SQL procedure successfully completed.

SQL> 
SQL> set serveroutput off
SQL> connect "SYS"/"&&sysPassword" as SYSDBA
Connected.
SQL> @/u01/app/oracle/product/11.2.0.4/db_1/rdbms/admin/catxdbj.sql;
SQL> Rem
SQL> Rem $Header: catxdbj.sql 16-sep-2003.15:01:17 mjaeger Exp $
SQL> Rem
SQL> Rem catxdbj.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2003, Oracle Corporation.  All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catxdbj.sql - Registration of XDB java dom/jndi/bean api jar files
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script install the xdb java api IN the sys schema
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      java api are loaded IN the sys schema WITH PUBLIC ACCESS.
SQL> Rem      Needs to run as SYS.
SQL> Rem
SQL> Rem MODIFIED (MM/DD/YY)
SQL> Rem mjaeger   09/16/03 - bug 3015638: move XSU source from rdbms vob to xdk vob
SQL> Rem sichandr  11/07/02 - remove shiphome workaround
SQL> Rem vnimani   04/24/02 - xsu should be picked up from OH/lib
SQL> Rem vnimani   03/18/02 - dont load xmlgen -- deprecated
SQL> Rem gviswana  01/29/02 - CREATE OR REPLACE SYNONYM
SQL> Rem sichandr  01/26/02 - temporary workaround for shiphome
SQL> Rem bkhaladk  01/14/02 - add xsu loading in catxdbj.
SQL> Rem spannala  12/13/01 - removing connect
SQL> Rem bkhaladk  09/20/01 - Created
SQL> Rem
SQL> 
SQL> -- bug 3015638:
SQL> -- Move source code and support files from rdbms vob to xdk vob.
SQL> -- The xsu12.jar file used to get loaded here,
SQL> -- and has now been moved to initxml.sql in the xdk vob.
SQL> 
SQL> -- As part of bug 3015638, we are also commenting out
SQL> -- the loading of the following XDB bits here.
SQL> -- Because XSU (now part of XDK) depends on the XMLType,
SQL> -- the servlet.jar and xdb.jar files must get loaded
SQL> -- before xsu12.jar, and xsu12.jar is now in initxml.sql.
SQL> -- Hence these loads have been moved there,
SQL> -- and they don't need to be here at all.
SQL> -- You can't have the XDB component without the XML component (aka XDK)
SQL> -- in any case (because XDB depends on XDK's parser),
SQL> -- so there's no harm in loading this bit of XDB along with XDK.
SQL> 
SQL> -- At some point in the future, if we separate out just the XMLType,
SQL> -- then that's the only bit that needs to get loaded with XDK,
SQL> -- and it would probably be more appropriate to load
SQL> -- servlet.jar and xdb.jar here, rather than in initxml.sql.
SQL> 
SQL> -- call sys.dbms_java.loadjava('-s -g public -f -r rdbms/jlib/servlet.jar');
SQL> -- call sys.dbms_java.loadjava('-s -g public -f -r rdbms/jlib/xdb.jar');
SQL> 
SQL> @/u01/app/oracle/product/11.2.0.4/db_1/rdbms/admin/catrul.sql;
SQL> Rem
SQL> Rem $Header: catrul.sql 13-may-2005.09:35:37 ayalaman Exp $
SQL> Rem
SQL> Rem catrul.sql
SQL> Rem
SQL> Rem Copyright (c) 2004, 2005, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catrul.sql - Top level script to load Rules Manager
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      The Rules Manager stores, manages, and enforces Event-Condition-
> Rem      Action rules in the database. This relies on the Expression
SQL> Rem      Filter functionality and the Expression Filter should be
SQL> Rem      installed prior to installing Rules Manager
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      The 'XDB' component ('Oracle XML Database') should be installed
SQL> Rem      proir to the Rules Manager implementation (use catqm.sql to install
SQL> Rem      XDB).
SQL> Rem      See Documentation for additional notes
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    ayalaman    05/13/05 - add new packaged implementation
SQL> Rem    ayalaman    10/13/05 - grant change notification privs
SQL> Rem    ayalaman    09/30/04 - Rule to Rules
SQL> Rem    ayalaman    04/23/04 - ayalaman_rule_manager_support
SQL> Rem    ayalaman    04/16/04 - xdb dependency
SQL> Rem    ayalaman    04/02/04 - Created
SQL> Rem
SQL> 
SQL> 
SQL> REM
SQL> REM Rules Manager depends on XDB functionality for parsing
SQL> REM the rule conditions and rule set properties. Make sure
SQL> REM that XDB is installed
SQL> REM
SQL> WHENEVER SQLERROR EXIT;
SQL> begin
  2    IF (dbms_registry.version('XDB') is null) THEN
  3      raise_application_error(-20000, 'XDB component not found. '||
  4          'XDB should be installed prior to Rules Manager installation.');
  5    END IF;
  6  end;
  7  /

PL/SQL procedure successfully completed.

SQL> WHENEVER SQLERROR CONTINUE;
SQL> 
SQL> REM
SQL> REM Rules Manager depends on the Expression Filter functionality.
SQL> REM Install the expression filter if it is not already installed.
SQL> REM We will not check the status/version of Expression Filter if
SQL> REM it is already installed.
SQL> REM
SQL> 
SQL> COLUMN :script_name NEW_VALUE comp_file NOPRINT
SQL> VARIABLE script_name VARCHAR2(50)
SQL> 
SQL> BEGIN
  2    IF (dbms_registry.version('EXF') is null) THEN
  3      :script_name := '@catexf.sql';
  4    ELSE
  5      :script_name := dbms_registry.nothing_script;
  6    END IF;
  7  END;
  8  /

PL/SQL procedure successfully completed.

SQL> 
SQL> SELECT :script_name FROM DUAL;




1 row selected.

SQL> @&comp_file
SQL> Rem $Header: nothing.sql 18-oct-2001.09:57:38 Exp $
SQL> 
SQL> 
SQL> 
SQL> GRANT execute on dbms_lock to EXFSYS;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM This component uses the Expression Filter schema
SQL> REM Running as sysdba : set current schema to EXFSYS.
SQL> REM
SQL> ALTER SESSION SET CURRENT_SCHEMA = EXFSYS;

Session altered.

SQL> 
SQL> begin
  2    sys.dbms_registry.loading('RUL', 'Oracle Rules Manager',
  3        'validate_rul','EXFSYS');
  4  end;
  5  /

PL/SQL procedure successfully completed.

SQL> REM
SQL> REM Java Implementations required are part of Expression Filter installation.
SQL> REM As long as the Expression Filter and Rules Manager are for the same
SQL> REM DB version, we do not need to reload the Java implementations
SQL> REM @@initexf.sql
SQL> 
SQL> REM
SQL> REM The rules manager APIs need additional privs to be granted for EXFSYS.
SQL> REM
SQL> grant execute on dbms_change_notification to exfsys;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create required schema objects in the EXFSYS Schema
SQL> REM
SQL> --- Create object types required for the Rules Manager
SQL> @@rultyp.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/rultyp.sql /st_rdbms_11.2.0/1 2013/02/08 05:44:54 sdas Exp $
SQL> Rem
SQL> Rem rultyp.sql
SQL> Rem
SQL> Rem Copyright (c) 2004, 2013, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      rultyp.sql - Rule Manager object types
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script defines the object types that are used for the
SQL> Rem      Rule manager implementation/APIs
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See Documentation.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    sdas        01/22/13 - Backport sdas_bug-16038193 from st_rdbms_12.1.0.1
SQL> Rem    ayalaman    03/06/07 - duplicate collection events
SQL> Rem    ayalaman    05/16/05 - new types for aggregate predicates support
SQL> Rem    ayalaman    04/06/05 - collection predicates type
SQL> Rem    ayalaman    03/28/05 - aggregate predicates in rule conditions
SQL> Rem    ayalaman    04/23/04 - ayalaman_rule_manager_support
SQL> Rem    ayalaman    04/15/04 - synonym for rlm_table_alias
SQL> Rem    ayalaman    04/02/04 - Created
SQL> Rem
SQL> 
SQL> REM
SQL> REM Rule Manager Object Types
SQL> REM
SQL> prompt .. creating Rule Manager object types
.. creating Rule Manager object types
SQL> /***************************************************************************/
SQL> /***                      Public Object Types                            ***/
SQL> /***************************************************************************/
SQL> ---- RLM$EVENTIDS : Defined as a synonym for RLM$ROWIDTAB, used to pass
SQL> ---- list of event identifiers to CONSUME_EVENTS API.
SQL> create or replace public synonym rlm$eventids for exfsys.rlm$rowidtab;

Synonym created.

SQL> 
SQL> /***************************************************************************/
SQL> /***     Private Object Types  (Used in the generated packages)          ***/
SQL> /***************************************************************************/
SQL> 
SQL> create or replace type exfsys.rlm$equalattr as VARRAY(32) of VARCHAR2(32);
  2  /

Type created.

SQL> 
SQL> grant execute on rlm$equalattr to public;

Grant succeeded.

SQL> 
SQL> 
SQL> create or replace type exfsys.rlm$keyval is table of VARCHAR2(1000);
  2  /

Type created.

SQL> 
SQL> grant execute on exfsys.rlm$keyval to public;

Grant succeeded.

SQL> 
SQL> 
SQL> create or replace type exfsys.rlm$dateval is table of timestamp;
  2  /

Type created.

SQL> 
SQL> grant execute on exfsys.rlm$dateval to public;

Grant succeeded.

SQL> 
SQL> 
SQL> create or replace type exfsys.rlm$numval is table of number;
  2  /

Type created.

SQL> 
SQL> grant execute on exfsys.rlm$numval to public;

Grant succeeded.

SQL> 
SQL> --- accommodates upto 32 aggregate computations per rule ---
SQL> create or replace type rlm$apnumblst is VARRAY(32) of NUMBER;
  2  /

Type created.

SQL> 
SQL> grant execute on rlm$apnumblst to public;

Grant succeeded.

SQL> 
SQL> create or replace type rlm$apvarclst is VARRAY(32) of VARCHAR2(100);
  2  /

Type created.

SQL> 
SQL> grant execute on rlm$apvarclst to public;

Grant succeeded.

SQL> 
SQL> create or replace type rlm$apmultvcl is table of rlm$apvarclst;
  2  /

Type created.

SQL> 
SQL> grant execute on rlm$apmultvcl to public;

Grant succeeded.

SQL> 
SQL> -- type representing an event in the collection --
SQL> create or replace type exfsys.rlm$collevent is object
  2    (rlm$cetmstp timestamp, rlm$ceref VARCHAR(38), rlm$ceattvals EXFSYS.RLM$APVARCLST);
  3  /

Type created.

SQL> 
SQL> grant execute on exfsys.rlm$collevent to public;

Grant succeeded.

SQL> 
SQL> create or replace type exfsys.rlm$collevents is table of exfsys.rlm$collevent;
  2  /

Type created.

SQL> 
SQL> grant execute on exfsys.rlm$collevents to public;

Grant succeeded.

SQL> 
SQL> --- Type used to capture the aggregate predicates for a collection of events ---
SQL> create or replace type exfsys.rlm$collpreds as object
  2   (rlm$grpbyrep  NUMBER,
  3    rlm$wndiwspc  NUMBER,
  4    rlm$hvgpred   VARCHAR2(4000),
  5    rlm$prdslhs   EXFSYS.RLM$APNUMBLST,
  6    rlm$prdsrhs   EXFSYS.RLM$APVARCLST,
  7    constructor function rlm$collpreds return self as result);
  8  /

Type created.

SQL> 
SQL> create or replace type body  exfsys.rlm$collpreds as
  2    constructor function rlm$collpreds return self as result is
  3    begin
  4      null;
  5      return;
  6    end;
  7  end;
  8  /

Type body created.

SQL> 
SQL> 
SQL> grant execute on exfsys.rlm$collpreds to public;

Grant succeeded.

SQL> 
SQL> 
SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$TABLE_ALIAS : Used to create event structures with table aliases **/
SQL> /***************************************************************************/
SQL> create or replace public synonym rlm$table_alias for exfsys.exf$table_alias;

Synonym created.

SQL> 
SQL> 
SQL> 
SQL> --- Create Rules Manager Dictionary/Static tables
SQL> @@rultab.sql
SQL> Rem
SQL> Rem $Header: rultab.sql 06-mar-2007.07:06:22 ayalaman Exp $
SQL> Rem
SQL> Rem rultab.sql
SQL> Rem
SQL> Rem Copyright (c) 2004, 2007, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      rultab.sql - Rule Manager dictionary
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script creates the dictionary objects to store the metadata
SQL> Rem      pertaining to rules and rule sets.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See Documentation.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    ayalaman    02/18/07 - having attributes
SQL> Rem    ayalaman    03/07/07 - retrict the size of the function based index
SQL> Rem    ayalaman    03/28/05 - aggregate predicates in rule conditions
SQL> Rem    ayalaman    12/05/05 - event struct partial
SQL> Rem    ayalaman    01/26/05 - shared primitive rule conditions
SQL> Rem    ayalaman    07/18/05 - database change notification
SQL> Rem    ayalaman    02/04/05 - expand the equal clause length
SQL> Rem    ayalaman    01/31/05 - rlm4j dictionary for aliases
SQL> Rem    ayalaman    11/23/04 - constraint on rlm4j_evtstructs
SQL> Rem    ayalaman    10/08/04 - revoke create any job
SQL> Rem    ayalaman    07/27/04 - nullable timestamp in scheduled action
SQL> Rem    ayalaman    06/25/04 - negation with deadline dictionary
SQL> Rem    ayalaman    05/11/04 - sub-equal clause
SQL> Rem    ayalaman    05/11/04 - rename rule set to rule class
SQL> Rem    ayalaman    04/23/04 - ayalaman_rule_manager_support
SQL> Rem    ayalaman    04/21/04 - scheduler privileges
SQL> Rem    ayalaman    04/21/04 - event cleanup schedule
SQL> Rem    ayalaman    04/13/04 - transfer error messages to e41001.msg
SQL> Rem    ayalaman    04/02/04 - Created
SQL> Rem
SQL> 
SQL> REM
SQL> REM Create the Rule Manager dictionary tables
SQL> REM
SQL> prompt .. creating Rule Manager dictionary
.. creating Rule Manager dictionary
SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$ERRCODE : Rule Manager error codes (Temporary)                  ***/
SQL> /***************************************************************************/
SQL> 
SQL> create table rlm$errcode
  2  (
  3    errno   number,
  4    errmsg  VARCHAR2(200),
  5    errdsc  VARCHAR2(500),
  6    erract  VARCHAR2(500),
  7    constraint rlm$errcodepk primary key (errno)
  8  ) organization index overflow;

Table created.

SQL> 
SQL> truncate table rlm$errcode;

Table truncated.

SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$RULESETSTCODE : Rule set status while creation                  ***/
SQL> /***************************************************************************/
SQL> create table rlm$rulesetstcode
  2  (
  3    rset_stcode  NUMBER primary key,
  4    rset_stdesc  VARCHAR2(100),
  5    rset_stnext  VARCHAR2(100)
  6  ) organization index;

Table created.

SQL> 
SQL> truncate table rlm$rulesetstcode;

Table truncated.

SQL> 
SQL> insert into rlm$rulesetstcode values (0,
  2   'VALID', NULL);

1 row created.

SQL> insert into rlm$rulesetstcode values (1,
  2   'DICTIONARY SETUP', 'Creating Event Structure Objects');

1 row created.

SQL> insert into rlm$rulesetstcode values (2,
  2   'EVENT STRUCTURE CREATED', 'Creating and Configuring Rule Class Repository');

1 row created.

SQL> insert into rlm$rulesetstcode values (3,
  2   'RULE CLASS TABLE(S) CREATED', 'Configuring Incremental Results tables');

1 row created.

SQL> insert into rlm$rulesetstcode values (4,
  2   'INCREMENTAL RESULTS TABLES CREATED', 'Creating Action Callback Procedure');

1 row created.

SQL> insert into rlm$rulesetstcode values (5,
  2   'ACTION CALLBACK PROCEDURE CREATED',
  3   'Creating Rule Set Access Package(s)');

1 row created.

SQL> insert into rlm$rulesetstcode values (6,
  2   'RULE SET ACCESS PACKAGES CREATED',
  3   'Creating Expression Filter Indexes for Rule Conditions');

1 row created.

SQL> insert into rlm$rulesetstcode values (7,
  2   'EXPRESSION FILTER INDEXE(S) CREATED', NULL);

1 row created.

SQL> 
SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$EVENTSTUCT - Rule Manager's event structures. There are special ***/
SQL> /*** forms of attribute sets which have RLM$CRTTIME attribute defaulted  ***/
SQL> /*** to systdate. Also, all the required methods in the object type are  ***/
SQL> /*** created before the actual assignment (to save time)                 ***/
SQL> /***************************************************************************/
SQL> create table rlm$eventstruct
  2  (
  3    evst_owner    VARCHAR2(32),
  4    evst_name     VARCHAR2(32),
  5    evst_prop     NUMBER,
  6                                   -- 1 : Has creation timestamp attribute --
  7                                   -- 2 : Can only be primitive --
  8                                   -- 128: Event structure incomplete:IMP --
  9    evst_prct     VARCHAR2(32),    -- primitive rule conditions table
 10    evst_prcttls  VARCHAR2(75),    -- table alias for which the ctab is crtd
 11    CONSTRAINT rlm$evst_primkey PRIMARY KEY (evst_owner, evst_name),
 12    CONSTRAINT rlm$evst_refkey FOREIGN KEY (evst_owner, evst_name)
 13      REFERENCES exf$attrset (atsowner, atsname) on delete cascade
 14  ) organization index;

Table created.

SQL> 
SQL> -- to speed up the validation for DROP TABLE command --
SQL> create index rlm$evtstprctab on rlm$eventstruct (evst_owner, evst_prct);

Index created.

SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$RULESET - Dictionary table to store the rule set information.   ***/
SQL> /*** It stores the rule set level properties and names for the database  ***/
SQL> /*** objects created for this rule set                                   ***/
SQL> /***************************************************************************/
SQL> create table rlm$ruleset
  2  (
  3    rset_owner    VARCHAR2(32),
  4    rset_name     VARCHAR2(32),
  5    rset_pack     VARCHAR2(75),   -- quoted name with schema ext --
  6    rset_eventst  VARCHAR2(75),   -- dictionary name: no quotes --
  7    action_cbk    VARCHAR2(75),   -- dictionary name: no quotes --
  8    rset_rsltvw   VARCHAR2(32),   -- system gen or user spec name --
  9    rset_rslttab  VARCHAR2(32),   -- system gen name:no quotes --
 10    rset_prmexpt  VARCHAR2(32),   -- table storing primitive event exprs --
 11    rset_prmobjt  VARCHAR2(32),   -- table storing primitive events
 12    rset_prmrslt  VARCHAR2(32),   -- table storing primitive evt results --
 13    rset_status   NUMBER,
 14    rset_prop     NUMBER,
 15                                                 -- 1 : rule set is indexed --
 16                                                 -- 2 : PRIMITIVE Rule set --
 17                                                 -- 4 : COMPOSITE Rule set --
 18                                                 -- 8 : SEQUENCE enabled --
 19                                                 -- 16 : autocommit - YES --
 20                                                 -- 32 : consumption EXCLUSIVE
 21                                                 -- 64 : consumption RULE
 22                                                 -- 128 : 'I' DML Event
 23                                                 -- 256 : 'IU' DML Event
 24                                                 -- 512 : 'IUD' DML Event
 25                                                 -- 1024 : 'I' DML Event
 26                                                 -- 2048 : 'IU' DML Event
 27                                                 -- 4096 : 'IUD' DML Event
 28    rset_durmin   NUMBER,         --- min/ -1 for tx and -2 for session --
 29    rset_durtcl   VARCHAR2(100),
 30    rset_ordrcl   VARCHAR2(4000), -- ordering clause for conflict resolution --
 31    rset_rewocl   VARCHAR2(4000), -- rewritten ordering clause (tab aliases)
 32    rset_stgcls   VARCHAR2(4000), -- storage clause for the tables --
 33    rset_eqcls    VARCHAR2(1000),
 34    rset_objnm    NUMBER,         -- object number for the rule set --
 35    CONSTRAINT rlm$rset_pkey primary key (rset_owner, rset_name),
 36    CONSTRAINT rlm$rset_status_ref FOREIGN KEY (rset_status)
 37       references rlm$rulesetstcode (rset_stcode)
 38  ) organization index overflow including rset_prop;

Table created.

SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$RULESETPRIVS - Dictionary table to store the privilege infor for **/
SQL> /*** the rule sets.                                                      ***/
SQL> /***************************************************************************/
SQL> /*** RLM$RULESETPRIVS - Rule set privileges ***/
SQL> create table rlm$rulesetprivs
  2  (
  3    rset_owner    VARCHAR2(32),
  4    rset_name     VARCHAR2(32),
  5    prv_grantee   VARCHAR2(32),
  6    prv_prcrule   VARCHAR2(1),
  7    prv_addrule   VARCHAR2(1),
  8    prv_delrule   VARCHAR2(1),
  9    CONSTRAINT rlm$rset_privspkey PRIMARY KEY (rset_owner, rset_name,
 10                                               prv_grantee),
 11    CONSTRAINT rlm$rset_privsrefs FOREIGN KEY (rset_owner, rset_name)
 12      references rlm$ruleset(rset_owner, rset_name)  on delete cascade
 13         initially deferred
 14  ) organization index;

Table created.

SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$RSPRIMEVENTS - Dictionary table to store the properties and dbase**/
SQL> /*** objects created for the primitive event structures within a composite**/
SQL> /*** event structure. For each rule set with composite events, this table **/
SQL> /*** has as many entries as the primitive events in the composite event  ***/
SQL> /*** This is the case even when there are duplicate primitive event types **/
SQL> /*** in the composite event.                                             ***/
SQL> /***************************************************************************/
SQL> create table rlm$rsprimevents
  2  (
  3    rset_owner    VARCHAR2(32),
  4    rset_name     VARCHAR2(32),
  5    prim_attr     VARCHAR2(32),
  6    prim_attrpos  NUMBER,
  7    prim_attrals  VARCHAR2(32),   -- system assigned alias for this attr --
  8    prim_asetnm   VARCHAR2(32),   -- dictionary name --
  9    CONSTRAINT rlm$crspkey PRIMARY KEY (rset_owner, rset_name, prim_attr),
 10    CONSTRAINT rlm$crsprefk FOREIGN KEY (rset_owner, rset_name) references
 11      rlm$ruleset(rset_owner, rset_name)  on delete cascade
 12         initially deferred
 13  ) organization index;

Table created.

SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$PRIMEVTTYPEMAP - Primitive event type map and their properties  ***/
SQL> /*** This table has the entries for unique primitive event types used for **/
SQL> /*** each rule set                                                       ***/
SQL> /***************************************************************************/
SQL> create table rlm$primevttypemap
  2  (
  3    rset_owner    VARCHAR2(32),
  4    rset_name     VARCHAR2(32),
  5    prim_evntst   VARCHAR2(32),   -- dictionary name --
  6    prim_eslias   VARCHAR2(32),   -- system assigned alias for this type --
  7    prim_evttflgs NUMBER,
  8                                --- 1 : has EXF$CRTTIME atttribute for date --
  9                                --- 2 : crspndg aset is a table alias aset --
 10                                --- 4 : crspndg aset is a XML Type aset --
 11                                ---   : autocommit - N/A --
 12                                --- 32 : consumption EXCLUSIVE --
 13                                --- 64 : call duration
 14                                --- 128 : collection type for agg preds
 15    prim_durmin   NUMBER,       --- min/ -1 for tx/-2 for sess/-3 call --
 16    prim_evdurcls VARCHAR2(200),   -- duration clause --
 17    talstabonr    VARCHAR2(32),
 18    talstabnm     VARCHAR2(32),
 19    havngattrs    VARCHAR2(4000),
 20    collcttab     VARCHAR2(32), --- collection table when flag 128 ---
 21    grpbyattrs    VARCHAR2(1000),
 22    CONSTRAINT rlm$primmappkey PRIMARY KEY (rset_owner, rset_name, prim_evntst),
 23    CONSTRAINT rlm$primmaprefk FOREIGN KEY (rset_owner, rset_name) references
 24      rlm$ruleset(rset_owner, rset_name)  on delete cascade
 25         initially deferred
 26  ) organization index overflow;

Table created.

SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$EQUALSPEC - Most common equal specifications in the rule set    ***/
SQL> /***************************************************************************/
SQL> create table rlm$equalspec
  2  (
  3    rset_owner    VARCHAR2(32),
  4    rset_name     VARCHAR2(32),
  5    opcode_id     NUMBER,        --- opcode mapping: 0 equal w/ all events ---
  6    eqlkeytyp     VARCHAR2(100), --- Number or VARCHAR(x) or Date ---
  7    eqspecflg     NUMBER,
  8    equalattrs    RLM$EQUALATTR,
  9    CONSTRAINT rlm$eqspecpk PRIMARY KEY (rset_owner, rset_name, opcode_id),
 10    CONSTRAINT rlm$equalspecfk FOREIGN KEY (rset_owner, rset_name) references
 11      rlm$ruleset(rset_owner, rset_name)  on delete cascade
 12         initially deferred
 13  ) organization index overflow;

Table created.

SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$COLLGRPBYSPEC - Group by specification for the event configured ***/
SQL> /*** for aggregate predicates                                            ***/
SQL> /***************************************************************************/
SQL> create table rlm$collgrpbyspec
  2  (
  3    rset_owner   VARCHAR2(32),
  4    rset_name    VARCHAR2(32),
  5    primevttp    VARCHAR2(32),  -- dictionary name --
  6    grpattidx    NUMBER,
  7    attrname     VARCHAR2(100), -- quoted(if necc) name for the grp exprn
  8    evtattr      VARCHAR2(32),
  9    CONSTRAINT rlm$grpbyspecpk PRIMARY KEY (rset_owner, rset_name,
 10                                               primevttp, attrname),
 11    CONSTRAINT rlm$grpbyspecfk FOREIGN KEY (rset_owner, rset_name) references
 12      rlm$ruleset(rset_owner, rset_name)  on delete cascade
 13         initially deferred
 14  ) organization index overflow;

Table created.

SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$ORDERCLSALS - Aliases for the variables used in the ordering    ***/
SQL> /*** clause. Used only if the composite event consists of primitive      ***/
SQL> /*** events that represent relational table and one or more columns from ***/
SQL> /*** this table are used on the ORDERING clause                          ***/
SQL> /***************************************************************************/
SQL> create table rlm$orderclsals
  2  (
  3    rset_owner    VARCHAR2(32),
  4    rset_name     VARCHAR2(32),
  5    ordrkeyals    VARCHAR2(65),
  6    ordrkeypfx    VARCHAR2(32),
  7    ordrkey       VARCHAR2(300),
  8    datatype      VARCHAR2(100),
  9    CONSTRAINT rlm$orderspcpk PRIMARY KEY (rset_owner, rset_name, ordrkeyals),
 10    CONSTRAINT rlm$orderclsfk FOREIGN KEY (rset_owner, rset_name) references
 11      rlm$ruleset(rset_owner, rset_name)  on delete cascade
 12         initially deferred
 13  ) organization index;

Table created.

SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$DMLEVTTRIGS : Triggers created for DML event tracking           ***/
SQL> /***************************************************************************/
SQL> create table rlm$dmlevttrigs
  2  (
  3    rset_owner    VARCHAR2(32),
  4    rset_name     VARCHAR2(32),
  5    tatab_name    VARCHAR2(32), -- owner is same as the rule set for dml evt --
  6    presttrig     VARCHAR2(32),
  7    dmlrowtrig    VARCHAR2(32),
  8    poststtrig    VARCHAR2(32),
  9    dbcnfregid    NUMBER,
 10    dbcnfcbkprc   VARCHAR2(75),
 11    CONSTRAINT rlm$dmlevtpkey PRIMARY KEY (rset_owner, rset_name, tatab_name),
 12    CONSTRAINT rlm$dmlevtrefk FOREIGN KEY (rset_owner, rset_name) references
 13      rlm$ruleset(rset_owner, rset_name) on delete cascade
 14  ) organization index;

Table created.

SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$VALIDPRIVS - list of valid privileges for the rule mgmt         ***/
SQL> /***************************************************************************/
SQL> create table rlm$validprivs
  2  (
  3    code       number,
  4    privstr    varchar2(25),
  5    constraint rlm$validpriv_pkey primary key (privstr)
  6  ) organization index;

Table created.

SQL> 
SQL> truncate table rlm$validprivs;

Table truncated.

SQL> 
SQL> insert into rlm$validprivs values (2, 'EXECUTE RULE');

1 row created.

SQL> insert into rlm$validprivs values (2, 'EXECUTE RULES');

1 row created.

SQL> insert into rlm$validprivs values (2, 'PROCESS RULE');

1 row created.

SQL> insert into rlm$validprivs values (2, 'PROCESS RULES');

1 row created.

SQL> insert into rlm$validprivs values (2, 'EXECUTE_RULE');

1 row created.

SQL> insert into rlm$validprivs values (2, 'EXECUTE_RULES');

1 row created.

SQL> insert into rlm$validprivs values (2, 'PROCESS_RULE');

1 row created.

SQL> insert into rlm$validprivs values (2, 'PROCESS_RULES');

1 row created.

SQL> insert into rlm$validprivs values (3, 'ADD RULE');

1 row created.

SQL> insert into rlm$validprivs values (3, 'ADD RULES');

1 row created.

SQL> insert into rlm$validprivs values (3, 'ADD_RULE');

1 row created.

SQL> insert into rlm$validprivs values (3, 'ADD_RULES');

1 row created.

SQL> insert into rlm$validprivs values (4, 'DELETE RULE');

1 row created.

SQL> insert into rlm$validprivs values (4, 'DELETE RULES');

1 row created.

SQL> insert into rlm$validprivs values (4, 'DELETE_RULE');

1 row created.

SQL> insert into rlm$validprivs values (4, 'DELETE_RULES');

1 row created.

SQL> 
SQL> insert into rlm$validprivs values (10, 'ALL');

1 row created.

SQL> 
SQL> /***************************************************************************/
SQL> /***     Private tables used by the rule manager implementation          ***/
SQL> /***************************************************************************/
SQL> create global temporary table rlm$parsedcond
  2  (
  3    tagname     VARCHAR2(32),
  4    peseqpos    NUMBER,
  5    tagvalue    VARCHAR2(4000)
  6  );

Table created.

SQL> 
SQL> 
SQL> create or replace function rlm$uniquetag(tag varchar2, pos int) return varchar2
  2    deterministic is
  3  begin
  4    if (instr(tag, 'RLM$RCND_COLL') > 0) then
  5      return tag||pos;
  6    else
  7      return tag;
  8    end if;
  9  end;
 10  /

Function created.

SQL> 
SQL> create unique index rlm$unqcondtag on  rlm$parsedcond(
  2                                substr(rlm$uniquetag(tagname, peseqpos),1,40));

Index created.

SQL> 
SQL> grant select on exfsys.rlm$parsedcond to public;

Grant succeeded.

SQL> 
SQL> /***************************************************************************/
SQL> /*** Scheduled action list : List of actions scheduled for all the rule  ***/
SQL> /*** classes in the instance. This is done to make use of fewer scheduler **/
SQL> /*** processes while performing the actions                              ***/
SQL> /***************************************************************************/
SQL> create table rlm$schactlist
  2  (
  3    actschat     TIMESTAMP,     --- NULL => action running / ran / bef del
  4    rsetproc     VARCHAR2(200), --- schema extended rule set pack and
  5                                --- procedure name with arguments ---
  6    rsetincrrs   RLM$ROWIDTAB,  --- incremental results row idents ---
  7    rset_owner   VARCHAR2(32),
  8    rset_name    VARCHAR2(32),
  9    rset_prior   NUMBER default 3 NOT NULL,
 10    CONSTRAINT rlm$schactfkey  FOREIGN KEY (rset_owner, rset_name) references
 11      rlm$ruleset(rset_owner, rset_name)  on delete cascade
 12         initially deferred
 13  ) nested table rsetincrrs store as rlm$incrrrschact
 14     ((primary key(nested_table_id, column_value)) organization index);

Table created.

SQL> 
SQL> --- scheduled process(es) pick up the action list in the index order ---
SQL> create index rlm$schactionorder on  rlm$schactlist(actschat);

Index created.

SQL> 
SQL> create index rlm$schactrvrslkp on rlm$incrrrschact(column_value);

Index created.

SQL> 
SQL> /***************************************************************************/
SQL> /*** Error during the execution of the action in background process      ***/
SQL> /***************************************************************************/
SQL> create table rlm$schacterrs
  2  (
  3    actschat     TIMESTAMP,
  4    rset_owner   VARCHAR2(32),
  5    rset_name    VARCHAR2(32),
  6    oraerrcde    NUMBER,
  7    CONSTRAINT rlm$scaterrfkey FOREIGN KEY (rset_owner, rset_name) references
  8      rlm$ruleset(rset_owner, rset_name)  on delete cascade
  9         initially deferred,
 10    constraint rlm$scaterrpkey primary key (rset_owner, rset_name,
 11         actschat, oraerrcde)
 12  ) organization index;

Table created.

SQL> 
SQL> /***************************************************************************/
SQL> /***   Event cleanup or any other scheduled operations                   ***/
SQL> /***************************************************************************/
SQL> create table rlm$jobqueue
  2  (
  3    sched_at     TIMESTAMP,
  4    rset_owner   VARCHAR2(32),
  5    rset_name    VARCHAR2(32),
  6    priority     NUMBER,    --- priority of the job
  7                            --- 10: cleanup job ---
  8    reschmin     NUMBER,    --- number of minutes for the next execution ---
  9    dynmcmd      VARCHAR2(1000), --- dynamic commands for execution --
 10    CONSTRAINT rlm$joinqkey primary key (sched_at, rset_owner, rset_name),
 11    CONSTRAINT rlm$joinqref FOREIGN KEY (rset_owner, rset_name) references
 12      rlm$ruleset(rset_owner, rset_name)  on delete cascade
 13         initially deferred
 14  ) organization index overflow;

Table created.

SQL> 
SQL> --- Roles are not inherited in the package ---
SQL> ---grant scheduler_admin to exfsys;
SQL> grant CREATE JOB to exfsys;

Grant succeeded.

SQL> grant MANAGE SCHEDULER to exfsys;

Grant succeeded.

SQL> 
SQL> /***************************************************************************/
SQL> /***             Rule Manager  for Java dictionary tables                ***/
SQL> /***************************************************************************/
SQL> 
SQL> /**************** Event Structures created from JDeveloper *****************/
SQL> create table rlm4j$evtstructs
  2  (
  3     dbowner    VARCHAR2(32),  -- owner of the event struct in the instance --
  4     dbesname   VARCHAR2(32),  -- event struct name in the db --
  5     javapck    VARCHAR2(200), -- full java package name for corr. java file --
  6     javacls    VARCHAR2(100), -- java class corr. to the event struct --
  7     estflags   NUMBER,
  8                               -- 1 : can be used for composite event stuct
  9     constraint rlm4j$unqevtstruct primary key (dbowner, dbesname),
 10     constraint rlm4j$evtstructs foreign key (dbowner, dbesname) references
 11        rlm$eventstruct (evst_owner, evst_name) on delete cascade
 12          initially deferred
 13   ) organization index overflow;

Table created.

SQL> 
SQL> /******************** Rule Sets created from JDeveloper ********************/
SQL> create table rlm4j$ruleset
  2  (
  3    dbowner    VARCHAR2(32),  -- owner of the rule set in the db instance --
  4    dbrsname   VARCHAR2(32),  -- name of the rule set in the db --
  5    dbevsnm    VARCHAR2(32),  -- name of the corr event struct --
  6    javapck    VARCHAR2(200), -- full java package for the rule set --
  7    javacls    VARCHAR2(100), -- java class for the rule set --
  8    CONSTRAINT rlm4j$unqrsnm PRIMARY KEY (dbowner, dbrsname),
  9    CONSTRAINT rlm4jrefsrlm FOREIGN KEY (dbowner, dbrsname)
 10         references rlm$ruleset (rset_owner, rset_name) on delete cascade
 11         initially deferred,
 12    CONSTRAINT rlm4jrefsrlmes FOREIGN KEY (dbowner, dbevsnm)
 13       REFERENCES rlm4j$evtstructs (dbowner, dbesname)
 14  ) organization index overflow;

Table created.

SQL> 
SQL> /********************** Aliases for attributes in UI **********************/
SQL> create table rlm4j$attraliases
  2  (
  3    esowner   VARCHAR2(32),
  4    esname    VARCHAR2(32),
  5    esattals  VARCHAR2(100),    --- alias for attribute or sub-expression --
  6    esattexp  VARCHAR2(4000),   --- expression aliased --
  7    aliastype NUMBER,           --- 1: predicate alias ---
  8    CONSTRAINT rlm4j$aalspkey PRIMARY KEY (esowner, esname, esattals),
  9    CONSTRAINT rlm4j$aalfkey FOREIGN KEY (esowner, esname)
 10      references rlm$eventstruct (evst_owner, evst_name) on delete cascade
 11        initially deferred
 12  ) organization index overflow;

Table created.

SQL> 
SQL> 
SQL> 
SQL> --- Create Rules Manager Public PL/SQL package specification
SQL> @@rulpbs.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/rulpbs.sql /main/11 2009/01/08 11:05:04 ayalaman Exp $
SQL> Rem
SQL> Rem rulpbs.sql
SQL> Rem
SQL> Rem Copyright (c) 2004, 2008, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      rulpbs.sql - Rule Manager public PL/SQL APIs
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script creates the public packages/APIs used for the
SQL> Rem      Rule Manager operations.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See documentation.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    ayalaman    08/08/08 - windowlen for and and any
SQL> Rem    ayalaman    12/06/06 - utilities
SQL> Rem    ayalaman    05/18/06 - get aggregate value function
SQL> Rem    ayalaman    03/28/05 - collection element to support aggregate
SQL> Rem                           predicates
SQL> Rem    ayalaman    09/13/05 - shared rule conditions and table aliases
SQL> Rem    ayalaman    01/26/05 - shared primitive rule conditions
SQL> Rem    ayalaman    07/18/05 - db change notification
SQL> Rem    ayalaman    08/04/05 - text predicates in rule conditions
SQL> Rem    ayalaman    06/11/05 - xml schema excep handling
SQL> Rem    ayalaman    01/31/05 - rlm4j aliases
SQL> Rem    ayalaman    10/19/04 - create scheduler jobs at the time of
SQL> Rem                           installation
SQL> Rem    ayalaman    05/10/04 - rename rule set to rule class
SQL> Rem    ayalaman    04/23/04 - ayalaman_rule_manager_support
SQL> Rem    ayalaman    04/13/04 - add notany element in rule condition
SQL> Rem    ayalaman    04/02/04 - Created
SQL> Rem
SQL> 
SQL> 
SQL> REM
SQL> REM  Rule Manager public PL/SQL APIs
SQL> REM
SQL> prompt .. creating Rule Manager PL/SQL Package Specifications
.. creating Rule Manager PL/SQL Package Specifications
SQL> 
SQL> /***************************************************************************/
SQL> /***                 Rule Manager Package Definitions                    ***/
SQL> /***************************************************************************/
SQL> 
SQL> /***************************************************************************/
SQL> /*** DBMS_RLMGR : Rule Manager - APIs required to manage a rules engine  ***/
SQL> /*** based on Expression Filter feature. For most common rule            ***/
SQL> /*** applications, these APIs can be used to create and manage rules in  ***/
SQL> /*** the RDBMS. The APIs in this package can be used along with          ***/
SQL> /*** Expression Filer APIs to model complex rules applications.          ***/
SQL> /***************************************************************************/
SQL> create or replace package dbms_rlmgr authid current_user as
  2  
  3    procedure create_rule_class (
  4                rule_class     IN   VARCHAR2,   -- rule class name --
  5                event_struct   IN   VARCHAR2,   -- event structure (object) --
  6                action_cbk     IN   VARCHAR2,   -- action cbk procedure --
  7                actprf_spec    IN   VARCHAR2 default null,
  8                rslt_viewnm    IN   VARCHAR2 default null,
  9                rlcls_prop     IN   VARCHAR2 default null);
 10  
 11    procedure process_rules (
 12                rule_class     IN   VARCHAR2,
 13                event_inst     IN   VARCHAR2,
 14                event_type     IN   VARCHAR2 default null);
 15  
 16    procedure process_rules (
 17                rule_class     IN   VARCHAR2,
 18                event_inst     IN   sys.AnyData);
 19  
 20    procedure add_rule (
 21                rule_class     IN   VARCHAR2,
 22                rule_id        IN   VARCHAR2,
 23                rule_cond      IN   VARCHAR2,
 24                actprf_nml     IN   VARCHAR2 default null,
 25                actprf_vall    IN   VARCHAR2 default null);
 26  
 27    procedure delete_rule (
 28                rule_class     IN   VARCHAR2,
 29                rule_id        IN   VARCHAR2);
 30  
 31    procedure drop_rule_class (
 32                rule_class    IN   VARCHAR2);
 33  
 34    procedure grant_privilege (
 35                rule_class     IN   VARCHAR2,
 36                priv_type      IN   VARCHAR2,
 37                to_user        IN   VARCHAR2);
 38  
 39    procedure revoke_privilege (
 40                rule_class     IN   VARCHAR2,
 41                priv_type      IN   VARCHAR2,
 42                from_user      IN   VARCHAR2);
 43  
 44    --- APIs for obtaining results as a set --
 45    procedure add_event (
 46                rule_class     IN   VARCHAR2,
 47                event_inst     IN   VARCHAR2,
 48                event_type     IN   VARCHAR2 default null);
 49  
 50    procedure add_event (
 51                rule_class     IN   VARCHAR2,
 52                event_inst     IN   sys.AnyData);
 53  
 54    function consume_event (
 55                rule_class     IN   VARCHAR2,
 56                event_ident    IN   VARCHAR2) return number;
 57  
 58    function consume_prim_events (
 59                rule_class     IN   VARCHAR2,
 60                event_idents   IN   RLM$EVENTIDS) return number;
 61  
 62  
 63    procedure reset_session (
 64                rule_class     IN   VARCHAR2);
 65  
 66    --- event structure designing APIs ---
 67    procedure create_event_struct (
 68                event_struct   IN   VARCHAR2);
 69  
 70    procedure add_elementary_attribute (
 71                event_struct   IN   VARCHAR2,    --- event structure name
 72                attr_name      IN   VARCHAR2,    --- attr name
 73                attr_type      IN   VARCHAR2,    --- attr type
 74                attr_defvl     IN   VARCHAR2     --- default value for attr
 75                           default NULL);
 76  
 77    procedure add_elementary_attribute (
 78                event_struct   IN   VARCHAR2,    --- attr set name
 79                attr_name      IN   VARCHAR2,    --- table alias (name)
 80                tab_alias      IN   rlm$table_alias);  -- table alias for
 81  
 82    procedure add_elementary_attribute (
 83                event_struct   IN   VARCHAR2,    --- attr set name
 84                attr_name      IN   VARCHAR2,    --- attr name
 85                attr_type      IN   VARCHAR2,    --- attr type
 86                text_pref      IN   exf$text);   --- text data type pref
 87  
 88    procedure add_functions (
 89                event_struct   IN   VARCHAR2,    --- attr set name
 90                funcs_name     IN   VARCHAR2);   --- function/package/type name
 91  
 92    procedure drop_event_struct (
 93                event_struct   IN   VARCHAR2);
 94  
 95    procedure sync_text_indexes (
 96                rule_class     IN   VARCHAR2);
 97  
 98    procedure purge_events (
 99                rule_class     IN   VARCHAR2);
100  
101    procedure create_conditions_table (
102                cond_table     IN   VARCHAR2,
103                pevent_struct  IN   VARCHAR2,
104                stg_clause     IN   VARCHAR2 default null);
105  
106    procedure create_conditions_table (
107                cond_table     IN   VARCHAR2,
108                tab_alias      IN   rlm$table_alias,
109                stg_clause     IN   VARCHAR2 default null);
110  
111    procedure drop_conditions_table (
112                cond_table     IN   VARCHAR2);
113  
114    procedure create_expfil_indexes (
115                rule_class     IN   VARCHAR2,
116                coll_stats     IN   VARCHAR2 default 'NO');
117  
118    procedure drop_expfil_indexes (
119                rule_class     IN   VARCHAR2);
120  
121    procedure create_interface (
122                rule_class     IN   VARCHAR2,
123                interface_nm   IN   VARCHAR2);
124  
125    procedure drop_interface (
126                interface_nm   IN   VARCHAR2);
127  
128    procedure extend_event_struct (
129                event_struct   IN   VARCHAR2,
130                attr_name      IN   VARCHAR2,
131                attr_type      IN   VARCHAR2,
132                attr_defvl     IN   VARCHAR2 default null);
133  
134    function condition_ref (
135                rulecond       IN   VARCHAR2,
136                eventnm        IN   VARCHAR2) return VARCHAR2 deterministic;
137  
138    function get_aggregate_value (
139                rule_class     IN   VARCHAR2,
140                event_ident    IN   VARCHAR2,
141                aggr_func      IN   VARCHAR2) return VARCHAR2;
142  
143  end dbms_rlmgr;
144  /

Package created.

SQL> 
SQL> show errors;
No errors.
SQL> 
SQL> create or replace public synonym dbms_rlmgr for exfsys.dbms_rlmgr;

Synonym created.

SQL> 
SQL> grant execute on dbms_rlmgr to public;

Grant succeeded.

SQL> 
SQL> /***************************************************************************/
SQL> /*** RLM$CREATE_SCHEDULER_JOBS : Create the jobs for timely event clean- ***/
SQL> /*** up and for execution of scheduled actions                           ***/
SQL> /***************************************************************************/
SQL> create or replace procedure rlm$create_scheduler_jobs is
  2  begin
  3    begin
  4      dbms_scheduler.create_job(
  5                   job_name   =>'EXFSYS.RLM$EVTCLEANUP',
  6                   job_action =>
  7                        'begin dbms_rlmgr_dr.cleanup_events; end;',
  8                   job_type   => 'plsql_block',
  9                   number_of_arguments => 0,
 10                   start_date => systimestamp+0.0001,
 11                   repeat_interval => 'FREQ = HOURLY; INTERVAL = 1',
 12                   auto_drop => FALSE,
 13                   enabled    => true);
 14    exception
 15      when others then
 16        if (SQLCODE = -27477) then
 17          dbms_scheduler.set_attribute ('EXFSYS.RLM$EVTCLEANUP',
 18                                        'start_date', systimestamp);
 19          dbms_scheduler.enable('EXFSYS.RLM$EVTCLEANUP');
 20        else
 21          raise;
 22        end if;
 23    end;
 24  
 25    begin
 26      dbms_scheduler.create_job(
 27                   job_name   =>'EXFSYS.RLM$SCHDNEGACTION',
 28                   job_action =>
 29            'begin dbms_rlmgr_dr.execschdactions(''RLM$SCHDNEGACTION''); end;',
 30                   job_type   => 'plsql_block',
 31                   number_of_arguments => 0,
 32                   start_date => systimestamp+0.0001,
 33                   repeat_interval => 'FREQ=MINUTELY;INTERVAL=60',
 34                   auto_drop => FALSE,
 35                   enabled    => true);
 36    exception
 37      when others then
 38        if (SQLCODE = -27477) then
 39          dbms_scheduler.set_attribute ('EXFSYS.RLM$SCHDNEGACTION',
 40                                        'start_date', systimestamp);
 41          dbms_scheduler.enable('EXFSYS.RLM$SCHDNEGACTION');
 42        else
 43          raise;
 44        end if;
 45    end;
 46  end rlm$create_scheduler_jobs;
 47  /

Procedure created.

SQL> 
SQL> show errors;
No errors.
SQL> 
SQL> /***************************************************************************/
SQL> /***  XML Schema defintions for rule class properties file and the rule  ***/
SQL> /***  conditions syntax                                                  ***/
SQL> /***************************************************************************/
SQL> begin
  2    -- rule class properties schema: the properties file could be one of the
  3    -- following forms --
  4    /*
  5       <simple ordering= "rlm$rule.actpref1, rlm$rule.actpref2 ..."
  6               autocommit = "[FALSE|TRUE*]"
  7               dmlevents = "[IUD]"
  8               consumption="[EXCLUSIVE|SHARED*]"
  9               storage= "tablespace TBS_1"/>
 10  
 11       <composite ordering= "Flt.Xyz, rlm$rule.actpref1, rlm$rule.actpref2 "
 12                  autocommit = "[YES|NO*]"
 13                  consumption="[EXCLUSIVE|SHARED*]"
 14                  storage="tablespace TBS_1"
 15                  duration="[transaction*| session | x [min | hours | days]]
 16                  equal="Flt.Xyz, Car.Xyz">
 17          <object type="AddRentalCar"
 18                  consumption="[EXCLUSIVE|SHARED]"
 19                  duration="[transaction | session | x [min | hours | days]]/>
 20          <object type="AddFlight"
 21                  consumption="[EXCLUSIVE|SHARED]"
 22                  duration="[transaction | session | x [min | hours | days]]/>
 23       </composite>
 24    */
 25    -- remove target namespace specification if we like to allow xmlschema
 26    -- instances without schema specification --
 27    dbms_xmlschema.registerschema(
 28     schemaurl =>'http://xmlns.oracle.com/rlmgr/rclsprop.xsd',
 29     local =>  false,
 30     gentypes => false,
 31     genbean => false,
 32     gentables => false,
 33     schemadoc =>
 34     '<xsd:schema
 35              xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 36              xmlns:xdb="http://xmlns.oracle.com/xdb"
 37              xmlns:rlmp="http://xmlns.oracle.com/rlmgr/rclsprop.xsd"
 38              elementFormDefault="qualified"
 39              targetNamespace="http://xmlns.oracle.com/rlmgr/rclsprop.xsd">
 40  
 41        <xsd:element name="simple" type="rlmp:SimpleRuleClsProp"/>
 42        <xsd:element name="composite" type="rlmp:CompositeRuleClsProp">
 43          <xsd:unique name="objtype">
 44            <xsd:selector xpath="./*"/>
 45            <xsd:field xpath="@type"/>
 46          </xsd:unique>
 47        </xsd:element>
 48  
 49        <xsd:complexType name="SimpleRuleClsProp">
 50          <xsd:complexContent>
 51            <xsd:restriction base="xsd:anyType">   <!-- empty element -->
 52              <xsd:attribute name="ordering" type="xsd:string"/>
 53              <xsd:attribute name="storage" type="xsd:string"/>
 54              <xsd:attribute name="autocommit">
 55                <xsd:simpleType>
 56                  <xsd:restriction base="xsd:string">
 57                    <xsd:enumeration value="yes"/>
 58                    <xsd:enumeration value="no"/>
 59                  </xsd:restriction>
 60                </xsd:simpleType>
 61              </xsd:attribute>
 62              <xsd:attribute name="dmlevents">
 63                <xsd:simpleType>
 64                  <xsd:restriction base="xsd:string">
 65                    <xsd:enumeration value="I"/>
 66                    <xsd:enumeration value="IU"/>
 67                    <xsd:enumeration value="IUD"/>
 68                  </xsd:restriction>
 69                </xsd:simpleType>
 70              </xsd:attribute>
 71              <xsd:attribute name="cnfevents">
 72                <xsd:simpleType>
 73                  <xsd:restriction base="xsd:string">
 74                    <xsd:enumeration value="I"/>
 75                    <xsd:enumeration value="IU"/>
 76                    <xsd:enumeration value="IUD"/>
 77                  </xsd:restriction>
 78                </xsd:simpleType>
 79              </xsd:attribute>
 80              <xsd:attribute name="consumption">
 81                <xsd:simpleType>
 82                  <xsd:restriction base="xsd:string">
 83                    <xsd:enumeration value="exclusive"/>
 84                    <xsd:enumeration value="shared"/>
 85                  </xsd:restriction>
 86                </xsd:simpleType>
 87              </xsd:attribute>
 88            </xsd:restriction>
 89          </xsd:complexContent>
 90        </xsd:complexType>
 91  
 92        <xsd:group name="ObjectOrCollectionProp">
 93          <xsd:choice>
 94            <xsd:element name="object" type="rlmp:PrimEventProp"
 95                         minOccurs="0" maxOccurs="1"/>
 96            <xsd:element name="collection" type="rlmp:CollectionProp"
 97                         minOccurs="0" maxOccurs="1"/>
 98          </xsd:choice>
 99        </xsd:group>
100  
101        <xsd:complexType name="CompositeRuleClsProp">
102          <xsd:sequence>
103            <xsd:group ref="rlmp:ObjectOrCollectionProp" minOccurs="0"
104                         maxOccurs="unbounded"/>
105          </xsd:sequence>
106  
107          <xsd:attribute name="ordering" type="xsd:string"/>
108          <xsd:attribute name="storage" type="xsd:string"/>
109          <xsd:attribute name="autocommit">
110            <xsd:simpleType>
111              <xsd:restriction base="xsd:string">
112                <xsd:enumeration value="yes"/>
113                <xsd:enumeration value="no"/>
114              </xsd:restriction>
115            </xsd:simpleType>
116          </xsd:attribute>
117          <xsd:attribute name="dmlevents">
118            <xsd:simpleType>
119              <xsd:restriction base="xsd:string">
120                <xsd:enumeration value="I"/>
121                <xsd:enumeration value="IU"/>
122                <xsd:enumeration value="IUD"/>
123              </xsd:restriction>
124            </xsd:simpleType>
125          </xsd:attribute>
126          <xsd:attribute name="equal" type="xsd:string"/>
127          <xsd:attribute name="consumption">
128            <xsd:simpleType>
129              <xsd:restriction base="xsd:string">
130                <xsd:enumeration value="exclusive"/>
131                <xsd:enumeration value="shared"/>
132                <xsd:enumeration value="rule"/>
133              </xsd:restriction>
134            </xsd:simpleType>
135          </xsd:attribute>
136          <xsd:attribute name="duration">
137            <xsd:simpleType>
138              <xsd:restriction base="xsd:string">
139                <xsd:pattern value="transaction"/>
140                <xsd:pattern value="session"/>
141                <xsd:pattern value="([1-9]|\d{2}|\d{3}|\d{4}) (minutes|hours|days)"/>
142              </xsd:restriction>
143            </xsd:simpleType>
144          </xsd:attribute>
145        </xsd:complexType>
146  
147        <xsd:complexType name="PrimEventProp">
148          <xsd:complexContent>
149            <xsd:restriction base="xsd:anyType">
150              <xsd:attribute name="type" type="xsd:string" use="required"/>
151              <xsd:attribute name="consumption">
152                <xsd:simpleType>
153                  <xsd:restriction base="xsd:string">
154                    <xsd:enumeration value="exclusive"/>
155                    <xsd:enumeration value="shared"/>
156                  </xsd:restriction>
157                </xsd:simpleType>
158              </xsd:attribute>
159              <xsd:attribute name="duration">
160                <xsd:simpleType>
161                  <xsd:restriction base="xsd:string">
162                 <!--  <xsd:pattern value="transaction"/>
163                    <xsd:pattern value="session"/> -->
164                    <xsd:pattern value="call"/>
165                    <xsd:pattern value="([1-9]|\d{2}|\d{3}|\d{4}) (minutes|hours|days)"/>
166                  </xsd:restriction>
167                </xsd:simpleType>
168              </xsd:attribute>
169            </xsd:restriction>
170          </xsd:complexContent>
171        </xsd:complexType>
172  
173        <xsd:complexType name="CollectionProp">
174          <xsd:complexContent>
175            <xsd:restriction base="xsd:anyType">
176              <xsd:attribute name="type" type="xsd:string" use="required"/>
177              <xsd:attribute name="groupby" type="xsd:string"/>
178              <xsd:attribute name="compute" type="xsd:string"/>
179            </xsd:restriction>
180          </xsd:complexContent>
181        </xsd:complexType>
182  
183      </xsd:schema>');
184  
185    dbms_xmlschema.registerschema(
186     schemaurl =>'http://xmlns.oracle.com/rlmgr/rulecond.xsd',
187     local =>  false,
188     gentypes => false,
189     genbean => false,
190     gentables => false,
191     schemadoc =>
192     '<xsd:schema
193              xmlns:xsd="http://www.w3.org/2001/XMLSchema"
194              xmlns:xdb="http://xmlns.oracle.com/xdb"
195              xmlns:rlmc="http://xmlns.oracle.com/rlmgr/rulecond.xsd"
196              elementFormDefault="qualified"
197              targetNamespace="http://xmlns.oracle.com/rlmgr/rulecond.xsd">
198  
199        <xsd:element name="condition">
200          <xsd:complexType mixed="true">
201            <xsd:choice>
202              <xsd:element name="and" type="rlmc:AndType"
203                                      minOccurs="0" maxOccurs="1"/>
204              <xsd:element name="any" type="rlmc:AnyType"
205                                      minOccurs="0" maxOccurs="1"/>
206              <xsd:element name="object" type="rlmc:ObjectCondType"
207                                      minOccurs="0" maxOccurs="1"/>
208            </xsd:choice>
209          </xsd:complexType>
210          <xsd:unique name="objNamesAny">
211            <xsd:selector xpath=".//object"/>
212            <xsd:field xpath="@name"/>
213          </xsd:unique>
214        </xsd:element>
215  
216        <xsd:group name="ObjectOrCollectionCondition">
217          <xsd:choice>
218            <xsd:element name="object" type="rlmc:ObjectCondType"
219                         minOccurs="1" maxOccurs="1"/>
220            <xsd:element name="collection" type="rlmc:CollectionCondType"
221                         minOccurs="1" maxOccurs="1"/>
222          </xsd:choice>
223        </xsd:group>
224  
225        <xsd:complexType name="AndType">
226          <xsd:sequence>
227            <xsd:group ref="rlmc:ObjectOrCollectionCondition"
228                         minOccurs="1" maxOccurs="unbounded"/>
229            <xsd:choice>
230              <xsd:element name="not" type="rlmc:NotCondType"
231                           minOccurs="0" maxOccurs="1"/>
232              <xsd:element name="notany" type="rlmc:NotAnyCondType"
233                           minOccurs="0" maxOccurs="1"/>
234            </xsd:choice>
235          </xsd:sequence>
236          <xsd:attribute name="join"  type="xsd:string"/>
237          <xsd:attribute name="equal" type="xsd:string"/>
238          <xsd:attribute name="having" type="xsd:string"/>
239          <xsd:attribute name="windowlen" type="xsd:string"/>
240          <xsd:attribute name="sequence">
241            <xsd:simpleType>
242              <xsd:restriction base="xsd:string">
243                <xsd:enumeration value="yes"/>
244                <xsd:enumeration value="no"/>
245              </xsd:restriction>
246            </xsd:simpleType>
247          </xsd:attribute>
248        </xsd:complexType>
249  
250        <xsd:complexType name="NotCondType">
251          <xsd:sequence>
252            <xsd:element name="object" type="rlmc:ObjectCondType"
253                                       minOccurs="1" maxOccurs="1"/>
254          </xsd:sequence>
255          <xsd:attribute name="by" type="xsd:string"/>
256          <xsd:attribute name="join" type="xsd:string"/>
257        </xsd:complexType>
258  
259        <xsd:complexType name="NotAnyCondType">
260          <xsd:sequence>
261            <xsd:element name="object" type="rlmc:ObjectCondType"
262                                       minOccurs="2" maxOccurs="unbounded"/>
263          </xsd:sequence>
264          <xsd:attribute name="count" type="xsd:positiveInteger"/>
265          <xsd:attribute name="by" type="xsd:string"/>
266          <xsd:attribute name="join" type="xsd:string"/>
267        </xsd:complexType>
268  
269        <xsd:complexType name="AnyType">
270          <xsd:sequence>
271            <xsd:element name="object" type="rlmc:ObjectCondType" minOccurs="1"
272                         maxOccurs="unbounded"/>
273          </xsd:sequence>
274          <xsd:attribute name="count" type="xsd:positiveInteger"/>
275          <xsd:attribute name="join"  type="xsd:string"/>
276          <xsd:attribute name="equal" type="xsd:string"/>
277          <xsd:attribute name="windowlen" type="xsd:string"/>
278          <xsd:attribute name="sequence">
279            <xsd:simpleType>
280              <xsd:restriction base="xsd:string">
281                <xsd:enumeration value="yes"/>
282                <xsd:enumeration value="no"/>
283              </xsd:restriction>
284            </xsd:simpleType>
285          </xsd:attribute>
286        </xsd:complexType>
287  
288        <xsd:complexType name="ObjectCondType">
289          <xsd:simpleContent>
290            <xsd:extension base="xsd:string">
291              <xsd:attribute name="name" type="xsd:string" use="required"/>
292              <xsd:attribute name="ref" type="xsd:string"/>
293            </xsd:extension>
294          </xsd:simpleContent>
295        </xsd:complexType>
296  
297        <xsd:complexType name="CollectionCondType">
298          <xsd:simpleContent>
299            <xsd:extension base="xsd:string">
300              <xsd:attribute name="name" type="xsd:string" use="required"/>
301              <xsd:attribute name="groupby" type="xsd:string" use="required"/>
302              <xsd:attribute name="having" type="xsd:string"/>
303              <xsd:attribute name="compute" type="xsd:string"/>
304              <xsd:attribute name="windowsize" type="xsd:string"/>
305              <xsd:attribute name="windowlen" type="xsd:string"/>
306            </xsd:extension>
307          </xsd:simpleContent>
308        </xsd:complexType>
309      </xsd:schema>');
310  exception
311    when others then
312     if (SQLCODE = -31085) then null;
313     else raise;
314     end if;
315  end;
316  /

PL/SQL procedure successfully completed.

SQL> 
SQL> show errors;
No errors.
SQL> 
SQL> /***************************************************************************/
SQL> /***      Rule Manager for Java (RLM4J) Package Specification            ***/
SQL> /***************************************************************************/
SQL> 
SQL> /***************************************************************************/
SQL> /*** DBMS_RLM4J_DICTMAINT : Invoker rights package to maintain the RLM4J ***/
SQL> /*** Dictionary                                                          ***/
SQL> /***************************************************************************/
SQL> CREATE OR REPLACE PACKAGE dbms_rlm4j_dictmaint AUTHID current_user AS
  2  
  3    -- Return the case-preserved names ---
  4    FUNCTION dict_name(rawname IN VARCHAR2)
  5      RETURN VARCHAR2;
  6  
  7    -- Record the event-structure and java package/class mapping
  8    PROCEDURE add_event_struct (esowner     VARCHAR2,
  9                                esname      VARCHAR2,
 10                                javapkg     VARCHAR2,
 11                                javacls     VARCHAR2,
 12                                iscomposite NUMBER);
 13  
 14    -- Record the rule class, event-structure and java package/class
 15    -- mapping
 16    PROCEDURE add_rule_class( rleowner VARCHAR2,
 17                              rlename  VARCHAR2,
 18                              evsname  VARCHAR2,
 19                              javapkg  VARCHAR2,
 20                              javacls  VARCHAR2);
 21  
 22    PROCEDURE add_attribute_alias (esname   VARCHAR2,
 23                                   alsname  VARCHAR2,
 24                                   alsexpr  VARCHAR2,
 25                                   alstype  NUMBER default 0);
 26  
 27    PROCEDURE validate_rulecls_properties(propdoc VARCHAR2);
 28  
 29    PROCEDURE validate_rule_condition(conddoc VARCHAR2);
 30  
 31  END dbms_rlm4j_dictmaint;
 32  /

Package created.

SQL> 
SQL> show errors;
No errors.
SQL> 
SQL> GRANT execute ON exfsys.dbms_rlm4j_dictmaint TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> --- Create Rules Manager Catalog views
SQL> @@rulview.sql
SQL> Rem
SQL> Rem $Header: rulview.sql 25-jan-2007.06:15:56 ayalaman Exp $
SQL> Rem
SQL> Rem rulview.sql
SQL> Rem
SQL> Rem Copyright (c) 2004, 2007, Oracle. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      rulview.sql - Rule Manager catalog views
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script defines the catalog views for Rule Manager.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See documentation.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    ayalaman    01/25/07 - table alias fix
SQL> Rem    ayalaman    03/28/05 - aggregate predicates in rule conditions
SQL> Rem    ayalaman    12/05/05 - incomplete event structure
SQL> Rem    ayalaman    09/13/05 - shared conditions for table aliases
SQL> Rem    ayalaman    07/18/05 - db change notification events
SQL> Rem    ayalaman    03/24/05 - duration at the primitive event level
SQL> Rem    ayalaman    01/26/05 - shared primitive rule conditions
SQL> Rem    ayalaman    01/31/05 - rlm4j dictionary for aliases
SQL> Rem    ayalaman    09/03/04 - view for scheduled action errors
SQL> Rem    ayalaman    05/19/04 - fix names from rule set to rule class
SQL> Rem    ayalaman    05/10/04 - rename rule set to rule class
SQL> Rem    ayalaman    04/23/04 - ayalaman_rule_manager_support
SQL> Rem    ayalaman    04/02/04 - Created
SQL> Rem
SQL> 
SQL> REM
SQL> REM Rule Manager catalog views
SQL> REM
SQL> prompt .. creating Rule Manager catalog views
.. creating Rule Manager catalog views
SQL> 
SQL> /****************** [USER/ALL/ADM]_RLMGR_EVENT_STRUCTS *********************/
SQL> ---
SQL> ---                       USER_RLMGR_EVENT_STRUCTS
SQL> ---
SQL> create or replace view user_rlmgr_event_structs
  2   (EVENT_STRUCTURE_NAME, HAS_TIMESTAMP, IS_PRIMITIVE, TABLE_ALIAS_OF,
  3    CONDITIONS_TABLE) as
  4    select es.evst_name, decode(bitand(es.evst_prop, 1), 1, 'YES','NO'),
  5           decode(bitand(es.evst_prop, 2), 2, 'YES','NO'),
  6           es.evst_prcttls, es.evst_prct
  7    from rlm$eventstruct es
  8    where es.evst_owner = sys_context('USERENV', 'CURRENT_USER') and
  9          bitand(es.evst_prop, 128) = 0;

View created.

SQL> 
SQL> create or replace public synonym USER_RLMGR_EVENT_STRUCTS
  2    for exfsys.user_rlmgr_event_structs;

Synonym created.

SQL> 
SQL> grant select on user_rlmgr_event_structs to public;

Grant succeeded.

SQL> 
SQL> COMMENT ON TABLE user_rlmgr_event_structs IS
  2  'List of all the event structures in the current schema';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_event_structs.event_structure_name IS
  2  'Name of the event structure';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_event_structs.has_timestamp IS
  2  'Event structure has the event creation timestamp - YES/NO';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_event_structs.is_primitive IS
  2  'Event structure is strictly for primitive events - YES/NO';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_event_structs.table_alias_of IS
  2  'Table name for a table alias primitive event';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_event_structs.conditions_table IS
  2  'Name of the table that stores the sharable conditions for this event structure';

Comment created.

SQL> 
SQL> ---
SQL> ---                       ALL_RLMGR_EVENT_STRUCTS
SQL> ---
SQL> create or replace view all_rlmgr_event_structs
  2   (EVENT_STRUCTURE_OWNER, EVENT_STRUCTURE_NAME, HAS_TIMESTAMP, IS_PRIMITIVE,
  3    TABLE_ALIAS_OF, CONDITIONS_TABLE)
  4    as select evst_owner, evst_name,
  5           decode(bitand(evst_prop, 1), 1, 'YES','NO'),
  6           decode(bitand(evst_prop, 2), 2, 'YES','NO'),
  7           es.evst_prcttls, es.evst_prct
  8    from rlm$eventstruct es,  all_types ao
  9     where ao.owner = es.evst_owner and ao.type_name = es.evst_name and
 10           bitand(es.evst_prop, 128) = 0;

View created.

SQL> 
SQL> create or replace public synonym ALL_RLMGR_EVENT_STRUCTS
  2    for exfsys.all_rlmgr_event_structs;

Synonym created.

SQL> 
SQL> grant select on all_rlmgr_event_structs to public;

Grant succeeded.

SQL> 
SQL> COMMENT ON TABLE all_rlmgr_event_structs IS
  2  'List of all the event structures in the current schema';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_event_structs.event_structure_owner IS
  2  'Owner of the event structure';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_event_structs.event_structure_name IS
  2  'Name of the event structure';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_event_structs.has_timestamp IS
  2  'Event structure has the event creation timestamp - YES/NO';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_event_structs.is_primitive IS
  2  'Event structure is strictly for primitive events - YES/NO';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_event_structs.table_alias_of IS
  2  'Table name for a table alias primitive event';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_event_structs.conditions_table IS
  2  'Name of the table that stores the sharable conditions for this event structure';

Comment created.

SQL> 
SQL> ---
SQL> ---                       ADM_RLMGR_EVENT_STRUCTS
SQL> ---
SQL> create or replace view adm_rlmgr_event_structs
  2   (EVENT_STRUCTURE_OWNER, EVENT_STRUCTURE_NAME, HAS_TIMESTAMP, IS_PRIMITIVE,
  3     IS_INCOMPLETE, TABLE_ALIAS_OF, CONDITIONS_TABLE)
  4    as select evst_owner, evst_name,
  5           decode(bitand(evst_prop, 1), 1, 'YES','NO'),
  6           decode(bitand(evst_prop, 2), 2, 'YES','NO'),
  7           decode(bitand(evst_prop, 128), 128, 'YES','NO'),
  8           es.evst_prcttls, evst_prct
  9    from rlm$eventstruct es;

View created.

SQL> 
SQL> /******************** [USER/ALL/ADM]_RLMGR_RULE_CLASSES ***********************/
SQL> 
SQL> ---
SQL> ---                        USER_RLMGR_RULE_CLASSES
SQL> ---
SQL> create or replace view user_rlmgr_rule_classes
  2   (RULE_CLASS_NAME, ACTION_CALLBACK, EVENT_STRUCTURE, RULE_CLASS_PACK,
  3     RCLS_RSLT_VIEW, IS_COMPOSITE, SEQUENCE_ENB, AUTOCOMMIT,
  4     CONSUMPTION, DURATION, ORDERING, EQUAL, DML_EVENTS, CNF_EVENTS)
  5     as select rset_name, action_cbk, rset_eventst, rset_pack,
  6        rset_rsltvw,
  7        decode(bitand(rset_prop, 4),4, 'YES', 'NO'),
  8        decode(bitand(rset_prop, 4),4,
  9          decode(bitand(rset_prop, 8),8, 'YES', 'NO'), 'N/A'),
 10        decode(bitand(rset_prop, 16),16, 'YES', 'NO'),
 11        decode(bitand(rset_prop, 32),32, 'EXCLUSIVE',
 12               decode(bitand(rset_prop, 64),64, 'RULE','SHARED')),
 13        rset_durtcl, rset_ordrcl, rset_eqcls,
 14        decode(bitand(rset_prop, 128), 128, 'INS',
 15               decode(bitand(rset_prop, 256), 256, 'INS/UPD',
 16               decode(bitand(rset_prop, 512), 512, 'INS/UPD/DEL', 'N/A'))),
 17        decode(bitand(rset_prop, 1024), 1024, 'INS',
 18               decode(bitand(rset_prop, 2048), 2048, 'INS/UPD',
 19               decode(bitand(rset_prop, 4096), 4096, 'INS/UPD/DEL', 'N/A')))
 20      from rlm$ruleset where
 21      rset_owner = sys_context('USERENV', 'CURRENT_USER');

View created.

SQL> 
SQL> create or replace public synonym USER_RLMGR_RULE_CLASSES
  2    for exfsys.user_rlmgr_rule_classes;

Synonym created.

SQL> 
SQL> grant select on USER_RLMGR_RULE_CLASSES to public;

Grant succeeded.

SQL> 
SQL> COMMENT ON TABLE user_rlmgr_rule_classes IS
  2  'List of all the rule classes in the current schema';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.rule_class_name IS
  2  'Name of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.action_callback IS
  2  'The procedure configured as action callback for the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.event_structure IS
  2  'The event structure used for the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.rule_class_pack IS
  2  'Name of the package implementing the rule class cursors (internal)';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.rcls_rslt_view IS
  2  'View to display the matching events and rules for the current session';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.is_composite IS
  2  'YES if the rules class is configured for composite events';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.sequence_enb IS
  2  'YES if the rules class is enabled for rule conditions with sequencing';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.autocommit IS
  2  'YES if the rules class is configured for auto-commiting events and rules';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.consumption IS
  2  'Default Consumption policy for the events in the rule class: EXCLUSIVE/SHARED';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.duration IS
  2  'Default Duration policy of the primitive events';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.ordering IS
  2  'Ordering clause used for conflict resolution among matching rules and
  3  events';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.dml_events IS
  2  'Types of DML operations enabled for event management';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_classes.cnf_events IS
  2  'Types of Change Notifications enabled for event management';

Comment created.

SQL> 
SQL> ---
SQL> ---                    ALL_RLMGR_RULE_CLASSES
SQL> --- (use the rule class privileges table to list all rule classes)
SQL> ---
SQL> create or replace view all_rlmgr_rule_classes
  2   (RULE_CLASS_OWNER, RULE_CLASS_NAME, EVENT_STRUCTURE, ACTION_CALLBACK,
  3     RULE_CLASS_PACK, RCLS_RSLT_TABLE, RCLS_RSLT_VIEW, IS_COMPOSITE,
  4     SEQUENCE_ENB, AUTOCOMMIT, CONSUMPTION, DURATION, ORDERING, EQUAL,
  5     DML_EVENTS, CNF_EVENTS, PRIM_EXPR_TABLE, PRIM_EVENTS_TABLE, PRIM_RESULTS_TABLE) as
  6    select rset_owner, rset_name, rset_eventst, action_cbk, rset_pack,
  7       rset_rslttab, rset_rsltvw,
  8       decode(bitand(rset_prop, 4),4, 'YES', 'NO'),
  9       decode(bitand(rset_prop, 4),4,
 10          decode(bitand(rset_prop, 8),8, 'YES', 'NO'), 'N/A'),
 11       decode(bitand(rset_prop, 16),16, 'YES', 'NO'),
 12       decode(bitand(rset_prop, 32),32, 'EXCLUSIVE',
 13               decode(bitand(rset_prop, 64),64, 'RULE','SHARED')),
 14       rset_durtcl, rset_ordrcl, rset_eqcls,
 15       decode(bitand(rset_prop, 128), 128, 'INS',
 16               decode(bitand(rset_prop, 256), 256, 'INS/UPD',
 17               decode(bitand(rset_prop, 512), 512, 'INS/UPD/DEL', 'N/A'))),
 18        decode(bitand(rset_prop, 1024), 1024, 'INS',
 19               decode(bitand(rset_prop, 2048), 2048, 'INS/UPD',
 20               decode(bitand(rset_prop, 4096), 4096, 'INS/UPD/DEL', 'N/A'))),
 21       rset_prmexpt, rset_prmobjt, rset_prmrslt
 22    from rlm$ruleset rs where rs.rset_owner =
 23                             sys_context('USERENV', 'CURRENT_USER') or
 24      ((rs.rset_owner, rs.rset_name) IN
 25       (select rsp.rset_owner, rsp.rset_name from rlm$rulesetprivs rsp
 26           where prv_grantee = sys_context('USERENV', 'CURRENT_USER'))) or
 27       exists (select 1 from user_role_privs where granted_role = 'DBA');

View created.

SQL> 
SQL> create or replace public synonym ALL_RLMGR_RULE_CLASSES
  2      for exfsys.all_rlmgr_rule_classes;

Synonym created.

SQL> 
SQL> grant select on ALL_RLMGR_RULE_CLASSES to public;

Grant succeeded.

SQL> 
SQL> COMMENT ON TABLE all_rlmgr_rule_classes IS
  2  'List of all the rule classes accessible to the user';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.rule_class_owner IS
  2  'Owner of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.rule_class_name IS
  2  'Name of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.action_callback IS
  2  'The procedure configured as action callback for the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.event_structure IS
  2  'The event structure used for the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.rule_class_pack IS
  2  'Name of the package implementing the rule class cursors (internal)';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.is_composite IS
  2  'YES if the rules class is configured for composite events';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.rcls_rslt_table IS
  2  'Temporary table storing the results from the current session';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.rcls_rslt_view IS
  2  'View to display the matching events and rules for the current session';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.sequence_enb IS
  2  'YES if the rules class is enabled for rule conditions with sequencing';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.autocommit IS
  2  'YES if the rules class is configured for auto-commiting events and rules';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.consumption IS
  2  'Default Consumption policy for the events in the rule class: EXCLUSIVE/SHARED';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.duration IS
  2  'Default Duration policy of the primitive events';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.ordering IS
  2  'Ordering clause used for conflict resolution among matching rules and
  3  events';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.prim_expr_table IS
  2  'Name of the table storing conditional expressions for primitive events';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.prim_events_table IS
  2  'Name of the table storing primitive events';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.prim_results_table IS
  2  'Name of the table storing incremental results';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.dml_events IS
  2  'Types of DML operations enabled for event management';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_classes.cnf_events IS
  2  'Types of Change Notifications enabled for event management';

Comment created.

SQL> 
SQL> ---
SQL> ---                        ADM_RLMGR_RULE_CLASSES
SQL> ---
SQL> create or replace view adm_rlmgr_rule_classes
  2   (RULE_CLASS_OWNER, RULE_CLASS_NAME, EVENT_STRUCTURE, ACTION_CALLBACK,
  3    RULE_CLASS_PACK, IS_INDEXED, RCLS_RSLT_TABLE, RCLS_RSLT_VIEW, IS_COMPOSITE,
  4    SEQUENCE_ENB, AUTOCOMMIT, CONSUMPTION, DURATION, ORDERING, EQUAL,
  5    DML_EVENTS, CNF_EVENTS, STORAGE,  PRIM_EXPR_TABLE, PRIM_EVENTS_TABLE,
  6    PRIM_RESULTS_TABLE)
  7     as select rset_owner, rset_name, rset_eventst, action_cbk, rset_pack,
  8      decode(bitand(rset_prop, 1),1, 'YES', 'NO'),
  9      rset_rslttab, rset_rsltvw, decode(bitand(rset_prop, 4),4, 'YES', 'NO'),
 10      decode(bitand(rset_prop, 4),4,
 11          decode(bitand(rset_prop, 8),8, 'YES', 'NO'), 'N/A'),
 12      decode(bitand(rset_prop, 16),16, 'YES', 'NO'),
 13      decode(bitand(rset_prop, 32),32, 'EXCLUSIVE',
 14               decode(bitand(rset_prop, 64),64, 'RULE','SHARED')),
 15      rset_durtcl, rset_ordrcl, rset_eqcls,
 16      decode(bitand(rset_prop, 128), 128, 'INS',
 17               decode(bitand(rset_prop, 256), 256, 'INS/UPD',
 18               decode(bitand(rset_prop, 512), 512, 'INS/UPD/DEL', 'N/A'))),
 19        decode(bitand(rset_prop, 1024), 1024, 'INS',
 20               decode(bitand(rset_prop, 2048), 2048, 'INS/UPD',
 21               decode(bitand(rset_prop, 4096), 4096, 'INS/UPD/DEL', 'N/A'))),
 22      rset_stgcls, rset_prmexpt, rset_prmobjt, rset_prmrslt
 23   from  rlm$ruleset;

View created.

SQL> /

View created.

SQL> 
SQL> /****************** [USER/ALL/ADM]_RLMGR_RULE_CLASS_STATUS *******************/
SQL> ---
SQL> ---                      USER_RLMGR_RULE_CLASS_STATUS
SQL> ---
SQL> create or replace view USER_RLMGR_RULE_CLASS_STATUS
  2    (RULE_CLASS_NAME, STATUS, STATUS_CODE, NEXT_OPERATION) as
  3   select rs.rset_name, st.rset_stdesc, st.rset_stcode, st.rset_stnext
  4   from rlm$ruleset rs, rlm$rulesetstcode st where
  5      rs.rset_owner = sys_context('USERENV', 'CURRENT_USER') and
  6      rs.rset_status = st.rset_stcode;

View created.

SQL> 
SQL> create or replace public synonym USER_RLMGR_RULE_CLASS_STATUS
  2      for exfsys.user_rlmgr_rule_class_status;

Synonym created.

SQL> 
SQL> grant select on USER_RLMGR_RULE_CLASS_STATUS to public;

Grant succeeded.

SQL> 
SQL> COMMENT ON TABLE user_rlmgr_rule_class_status IS
  2  'View used to track the progress of rule class creation';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_class_status.rule_class_name IS
  2  'Name of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_class_status.status IS
  2  'Current status of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_class_status.status_code IS
  2  'Internal code for the status';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_rule_class_status.next_operation IS
  2  'Next operation performed on the rule class';

Comment created.

SQL> 
SQL> ---
SQL> ---                      ALL_RLMGR_RULE_CLASS_STATUS
SQL> ---
SQL> create or replace view ALL_RLMGR_RULE_CLASS_STATUS
  2    (RULE_CLASS_OWNER, RULE_CLASS_NAME, STATUS, NEXT_OPERATION) as
  3   select rs.rset_owner, rs.rset_name, st.rset_stdesc, st.rset_stnext
  4   from rlm$ruleset rs, rlm$rulesetstcode st where
  5      rs.rset_status = st.rset_stcode and
  6      (rs.rset_owner = sys_context('USERENV', 'CURRENT_USER') or
  7      ((rs.rset_owner, rs.rset_name) IN
  8       (select rsp.rset_owner, rsp.rset_name from rlm$rulesetprivs rsp
  9           where prv_grantee = sys_context('USERENV', 'CURRENT_USER'))) or
 10       exists (select 1 from user_role_privs where granted_role = 'DBA'));

View created.

SQL> 
SQL> create or replace public synonym ALL_RLMGR_RULE_CLASS_STATUS
  2      for exfsys.all_rlmgr_rule_class_status;

Synonym created.

SQL> 
SQL> grant select on ALL_RLMGR_RULE_CLASS_STATUS to public;

Grant succeeded.

SQL> 
SQL> COMMENT ON TABLE all_rlmgr_rule_class_status IS
  2  'View used to track the progress of rule class creation';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_class_status.rule_class_owner IS
  2  'Owner of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_class_status.rule_class_name IS
  2  'Name of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_class_status.status IS
  2  'Current status of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_rule_class_status.next_operation IS
  2  'Next operation performed on the rule class';

Comment created.

SQL> 
SQL> ---
SQL> ---                      ADM_RLMGR_RULE_CLASS_STATUS
SQL> ---
SQL> create or replace view ADM_RLMGR_RULE_CLASS_STATUS
  2    (RULE_CLASS_NAME, STATUS, STATUS_CODE, NEXT_OPERATION) as
  3   select rs.rset_name, st.rset_stdesc, st.rset_stcode, st.rset_stnext
  4   from rlm$ruleset rs, rlm$rulesetstcode st
  5   where rs.rset_status = st.rset_stcode;

View created.

SQL> 
SQL> create or replace view ALL_RLMGR_RULE_CLASS_OPCODES
  2    (OP_CODE, COMPLETED_OP, NEXT_OPERATION) as
  3  select rset_stcode, rset_stdesc, rset_stnext from rlm$rulesetstcode;

View created.

SQL> 
SQL> grant select on ALL_RLMGR_RULE_CLASS_OPCODES to public;

Grant succeeded.

SQL> 
SQL> /******************** [USER/ALL/ADM]_RLMGR_PRIVILEGES **********************/
SQL> ---
SQL> ---                       USER_RLMGR_PRIVILEGES
SQL> ---
SQL> create or replace view USER_RLMGR_PRIVILEGES
  2    (RULE_CLASS_OWNER, RULE_CLASS_NAME, GRANTEE, PRCS_RULE_PRIV, ADD_RULE_PRIV,
  3     DEL_RULE_PRIV) as
  4    select rset_owner, rset_name, prv_grantee, prv_prcrule, prv_addrule,
  5           prv_delrule
  6    from rlm$rulesetprivs where  prv_grantee = 'PUBLIC' or
  7      prv_grantee = sys_context('USERENV', 'CURRENT_USER') or
  8      rset_owner = sys_context('USERENV', 'CURRENT_USER');

View created.

SQL> 
SQL> create or replace public synonym USER_RLMGR_PRIVILEGES for
  2          exfsys.USER_RLMGR_PRIVILEGES;

Synonym created.

SQL> 
SQL> grant select on USER_RLMGR_PRIVILEGES to public;

Grant succeeded.

SQL> 
SQL> COMMENT ON TABLE user_rlmgr_privileges IS
  2  'Privileges for the Rule classes';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_privileges.rule_class_owner IS
  2  'Owner of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_privileges.rule_class_name IS
  2  'Name of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_privileges.grantee IS
  2  'Grantee of the privilege. Current user of PUBLIC';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_privileges.prcs_rule_priv IS
  2  'Current user''s privilege to execute/process rules';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_privileges.add_rule_priv IS
  2  'Current user''s privilege to add new rules to the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_privileges.del_rule_priv IS
  2  'Current user''s privilege to delete rules';

Comment created.

SQL> 
SQL> ---
SQL> ---                 ADM_RLMGR_PRIVILEGES
SQL> ---
SQL> create or replace view ADM_RLMGR_PRIVILEGES
  2    (RULE_CLASS_OWNER, RULE_CLASS_NAME, GRANTEE, PRCS_RULE_PRIV, ADD_RULE_PRIV,
  3     DEL_RULE_PRIV) as
  4    select rset_owner, rset_name, prv_grantee, prv_prcrule, prv_addrule,
  5           prv_delrule
  6    from rlm$rulesetprivs;

View created.

SQL> 
SQL> create or replace public synonym ADM_RLMGR_PRIVILEGES for
  2          exfsys.ADM_RLMGR_PRIVILEGES;

Synonym created.

SQL> 
SQL> grant select on ADM_RLMGR_PRIVILEGES to public;

Grant succeeded.

SQL> 
SQL> COMMENT ON TABLE adm_rlmgr_privileges IS
  2  'Privileges for the Rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN adm_rlmgr_privileges.rule_class_owner IS
  2  'Owner of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN adm_rlmgr_privileges.rule_class_name IS
  2  'Name of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN adm_rlmgr_privileges.grantee IS
  2  'Grantee of the privilege';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN adm_rlmgr_privileges.prcs_rule_priv IS
  2  'Grantee''s privilege to execute/process rules';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN adm_rlmgr_privileges.add_rule_priv IS
  2  'Grantee''s privilege to add new rules to the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN adm_rlmgr_privileges.del_rule_priv IS
  2  'Grantee''s privilege to delete rules';

Comment created.

SQL> 
SQL> /**************** [USER/ALL/ADM]_RLMGR_COMPRCLS_PROPERTIES *****************/
SQL> ---
SQL> ---            USER_RLMGR_COMPRCLS_PROPERTIES
SQL> ---
SQL> create or replace view USER_RLMGR_COMPRCLS_PROPERTIES
  2    (RULE_CLASS_NAME, PRIM_EVENT,
  3     PRIM_EVENT_STRUCT, HAS_CRTTIME_ATTR, CONSUMPTION, TABLE_ALIAS_OF,
  4     DURATION, COLLECTION_ENB, GROUPBY_ATTRIBUTES)
  5  as select crs.rset_name, crs.prim_attr, crs.prim_asetnm,
  6        decode(bitand(pem.prim_evttflgs, 1), 1, 'YES', 'NO'),
  7        decode(bitand(pem.prim_evttflgs, 32),32, 'EXCLUSIVE','SHARED'),
  8        decode(pem.talstabonr, null, null,
  9                '"'||pem.talstabonr||'"."'||pem.talstabnm||'"'),
 10        pem.prim_evdurcls,
 11        decode(bitand(pem.prim_evttflgs, 128), 128, 'YES','NO'), pem.grpbyattrs
 12   from rlm$rsprimevents crs, rlm$primevttypemap pem
 13   where crs.rset_owner = sys_context('USERENV', 'CURRENT_USER') and
 14         crs.rset_owner = pem.rset_owner and crs.rset_name = pem.rset_name
 15         and crs.prim_asetnm = pem.prim_evntst;

View created.

SQL> 
SQL> create or replace public synonym USER_RLMGR_COMPRCLS_PROPERTIES for
  2         exfsys.USER_RLMGR_COMPRCLS_PROPERTIES;

Synonym created.

SQL> 
SQL> grant select on USER_RLMGR_COMPRCLS_PROPERTIES to public;

Grant succeeded.

SQL> 
SQL> COMMENT ON TABLE user_rlmgr_comprcls_properties IS
  2  'List of primitive events configured for a rule class and their properties';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_comprcls_properties.rule_class_name IS
  2  'Name of the rule class configured for composite rules';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_comprcls_properties.prim_event IS
  2  'Name of the primitive event in the composite event';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_comprcls_properties.prim_event_struct IS
  2  'Name of the primitive event structure (object type)';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_comprcls_properties.has_crttime_attr IS
  2  'YES if the primitive event structure has the RLM$CRTTIME attribute';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_comprcls_properties.consumption IS
  2  'Consumption policy for the primitive event: EXCLUSIVE/SHARED';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_comprcls_properties.table_alias_of IS
  2  'Table name for a table alias primitive event';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_comprcls_properties.duration IS
  2  'Duration policy for the primitive event';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_comprcls_properties.collection_enb IS
  2  'Is the primitive event enabled for collections?';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_comprcls_properties.groupby_attributes IS
  2  'Event attributes that may be used for GROUPBY clauses';

Comment created.

SQL> 
SQL> ---
SQL> ---            ALL_RLMGR_COMPRCLS_PROPERTIES
SQL> ---
SQL> create or replace view ALL_RLMGR_COMPRCLS_PROPERTIES
  2    (RULE_CLASS_OWNER, RULE_CLASS_NAME, PRIM_EVENT,
  3     PRIM_EVENT_STRUCT, HAS_CRTTIME_ATTR, CONSUMPTION, TABLE_ALIAS_OF,
  4     DURATION, COLLECTION_ENB, COLLECTION_TAB_NAME, GROUPBY_ATTRIBUTES)
  5   as select crs.rset_owner, crs.rset_name, crs.prim_attr, crs.prim_asetnm,
  6        decode(bitand(pem.prim_evttflgs, 1), 1, 'YES', 'NO'),
  7        decode(bitand(pem.prim_evttflgs, 32),32, 'EXCLUSIVE','SHARED'),
  8        decode(pem.talstabonr, null, null,
  9             '"'||pem.talstabonr||'"."'||pem.talstabnm||'"'),
 10       pem.prim_evdurcls,
 11       decode(bitand(pem.prim_evttflgs, 128), 128, 'YES','NO'),
 12       pem.collcttab, pem.grpbyattrs
 13   from rlm$rsprimevents crs, rlm$primevttypemap pem
 14     where (crs.rset_owner = sys_context('USERENV', 'CURRENT_USER') or
 15         ((crs.rset_owner, crs.rset_name) IN
 16         (select rsp.rset_owner, rsp.rset_name from rlm$rulesetprivs rsp
 17            where prv_grantee = sys_context('USERENV', 'CURRENT_USER'))) or
 18         exists (select 1 from user_role_privs where granted_role = 'DBA'))
 19         and crs.rset_owner = pem.rset_owner and crs.rset_name = pem.rset_name
 20         and crs.prim_asetnm = pem.prim_evntst;

View created.

SQL> 
SQL> create or replace public synonym ALL_RLMGR_COMPRCLS_PROPERTIES for
  2         exfsys.ALL_RLMGR_COMPRCLS_PROPERTIES;

Synonym created.

SQL> 
SQL> grant select on ALL_RLMGR_COMPRCLS_PROPERTIES to public;

Grant succeeded.

SQL> 
SQL> COMMENT ON TABLE all_rlmgr_comprcls_properties IS
  2  'List of primitive events configured for a rule class and their properties';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_comprcls_properties.rule_class_owner IS
  2  'Owner of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_comprcls_properties.rule_class_name IS
  2  'Name of the rule class configured for composite rules';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_comprcls_properties.prim_event IS
  2  'Name of the primitive event in the composite event';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_comprcls_properties.prim_event_struct IS
  2  'Name of the primitive event structure (object type)';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_comprcls_properties.has_crttime_attr IS
  2  'YES if the primitive event structure has the RLM$CRTTIME attribute';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_comprcls_properties.consumption IS
  2  'Consumption policy for the primitive event: EXCLUSIVE/SHARED';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_comprcls_properties.table_alias_of IS
  2  'Table name for the a table alias primitive event';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_comprcls_properties.duration IS
  2  'Duration policy for the primitive event';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_comprcls_properties.collection_enb IS
  2  'Is the primitive event enabled for collections?';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_comprcls_properties.collection_tab_name IS
  2  'Internal table storing the event collection information';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_comprcls_properties.groupby_attributes IS
  2  'Event attributes that may be used for GROUPBY clauses';

Comment created.

SQL> 
SQL> ---
SQL> ---           ADM_RLMGR_COMPRCLS_PROPERTIES
SQL> ---
SQL> create or replace view ADM_RLMGR_COMPRCLS_PROPERTIES
  2    (RULE_CLASS_OWNER, RULE_CLASS_NAME, PRIM_EVENT,
  3     PRIM_EVENT_STRUCT, HAS_CRTTIME_ATTR, CONSUMPTION, TABLE_ALIAS_OF,
  4     DURATION, COLLECTION_ENB, COLLECTION_TAB_NAME, GROUPBY_ATTRIBUTES)
  5   as select crs.rset_owner, crs.rset_name, crs.prim_attr, crs.prim_asetnm,
  6        decode(bitand(pem.prim_evttflgs, 1), 1, 'YES', 'NO'),
  7        decode(bitand(pem.prim_evttflgs, 32),32, 'EXCLUSIVE','SHARED'),
  8        '"'||pem.talstabonr||'"."'||pem.talstabnm||'"',
  9        decode(pem.prim_durmin, -1, 'TRANSACTION', -2, 'SESSION', -3, 'CALL',
 10               pem.prim_evdurcls),
 11        decode(bitand(pem.prim_evttflgs, 128), 128, 'YES','NO'),
 12          pem.collcttab, pem.grpbyattrs
 13   from rlm$rsprimevents crs, rlm$primevttypemap pem
 14   where  crs.rset_owner = pem.rset_owner and crs.rset_name = pem.rset_name
 15         and crs.prim_asetnm = pem.prim_evntst;

View created.

SQL> 
SQL> ---
SQL> ---            USER_RLMGR_ACTION_ERRORS
SQL> ---
SQL> create or replace view USER_RLMGR_ACTION_ERRORS
  2    (RULE_CLASS_NAME, SCHEDULED_TIME, ORA_ERROR) as
  3    select rset_name, actschat, oraerrcde from rlm$schacterrs
  4    where rset_owner = SYS_CONTEXT('USERENV', 'CURRENT_USER');

View created.

SQL> 
SQL> COMMENT ON TABLE user_rlmgr_action_errors IS
  2  'Table listing the errors encountered during action execution';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_action_errors.rule_class_name IS
  2  'Name of the rule class producing the errors during action execution';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_action_errors.scheduled_time IS
  2  'Time at which the action was scheduled to run.';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN user_rlmgr_action_errors.ora_error IS
  2  'Code for the error encountered : ORA-XXXXX';

Comment created.

SQL> 
SQL> grant select on exfsys.USER_RLMGR_ACTION_ERRORS to public;

Grant succeeded.

SQL> 
SQL> ---
SQL> ---            ALL_RLMGR_ACTION_ERRORS
SQL> ---
SQL> create or replace view ALL_RLMGR_ACTION_ERRORS
  2    (RULE_CLASS_OWNER, RULE_CLASS_NAME, SCHEDULED_TIME, ORA_ERROR) as
  3    select rset_owner, rset_name, actschat, oraerrcde from rlm$schacterrs rs
  4    where
  5      rs.rset_owner = sys_context('USERENV', 'CURRENT_USER') or
  6      exists (select 1 from user_role_privs where granted_role = 'DBA') or
  7      ((rs.rset_owner, rs.rset_name) IN
  8       (select rsp.rset_owner, rsp.rset_name from rlm$rulesetprivs rsp
  9           where prv_grantee = sys_context('USERENV', 'CURRENT_USER')));

View created.

SQL> 
SQL> COMMENT ON TABLE all_rlmgr_action_errors IS
  2  'Table listing the errors encountered during action execution';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_action_errors.rule_class_owner IS
  2  'Owner of the rule class';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_action_errors.rule_class_name IS
  2  'Name of the rule class producing the errors during action execution';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_action_errors.scheduled_time IS
  2  'Time at which the action was scheduled to run.';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN all_rlmgr_action_errors.ora_error IS
  2  'Code for the error encountered : ORA-XXXXX';

Comment created.

SQL> 
SQL> grant select on exfsys.ALL_RLMGR_ACTION_ERRORS to public;

Grant succeeded.

SQL> 
SQL> ---
SQL> ---            ADM_RLMGR_ACTION_ERRORS
SQL> ---
SQL> create or replace view ADM_RLMGR_ACTION_ERRORS
  2    (RULE_CLASS_OWNER, RULE_CLASS_NAME, SCHEDULED_TIME, ORA_ERROR) as
  3    select rset_owner, rset_name, actschat, oraerrcde from rlm$schacterrs;

View created.

SQL> 
SQL> /***************************************************************************/
SQL> /***           RLM4J : Rule Manager for Java Catalog views               ***/
SQL> /***************************************************************************/
SQL> 
SQL> CREATE OR REPLACE VIEW user_rlm4j_evtst
  2    (DB_OWNER, EVTST_NAME, JAVA_PACKAGE, JAVA_CLASS, IS_COMPOSITE)
  3    AS
  4    SELECT evt.dbowner, evt.dbesname, evt.javapck, evt.javacls,
  5           decode(evt.estflags, 1, 'YES','NO')
  6    FROM rlm4j$evtstructs evt
  7    where evt.dbowner = SYS_CONTEXT('USERENV', 'CURRENT_USER');

View created.

SQL> 
SQL> GRANT SELECT ON exfsys.user_rlm4j_evtst TO PUBLIC;

Grant succeeded.

SQL> 
SQL> /**************** [USER/ALL/ADM]_RLM4J_EVENT_STRUCTS ***********************/
SQL> -- Currently only 'user' is considered
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM USER_RLM4J_EVENT_STRUCTS
  2      for exfsys.user_rlm4j_evtst;

Synonym created.

SQL> 
SQL> GRANT SELECT ON USER_RLM4J_EVENT_STRUCTS TO PUBLIC;

Grant succeeded.

SQL> 
SQL> /******************* [USER/ALL/ADM]_RLM4J_RULE_CLASSES ************************/
SQL> 
SQL> CREATE OR REPLACE VIEW user_rlm4j_ruleclasses
  2    (DB_OWNER, RULECLASS_NAME, EVTST_NAME, JAVA_PACKAGE, JAVA_CLASS)
  3    AS
  4    SELECT rle.dbowner, rle.dbrsname, rle.dbevsnm, rle.javapck,
  5      rle.javacls
  6    FROM rlm4j$ruleset rle
  7    where rle.dbowner = SYS_CONTEXT('USERENV', 'CURRENT_USER');

View created.

SQL> 
SQL> GRANT SELECT ON exfsys.user_rlm4j_ruleclasses TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM USER_RLM4J_RULE_CLASSES
  2      FOR exfsys.user_rlm4j_ruleclasses;

Synonym created.

SQL> 
SQL> GRANT SELECT ON USER_RLM4J_RULE_CLASSES to public;

Grant succeeded.

SQL> 
SQL> /******************** USER_RLM4J_ATTRIBUTE_ALIASES ****************************/
SQL> 
SQL> CREATE OR REPLACE VIEW user_rlm4j_attribute_aliases
  2    (EVENT_STRUCT, ATTRIBUTE_ALIAS, ATTRIBUTE_EXPRESSION, ALIAS_TYPE)
  3    AS
  4    SELECT esname, esattals, esattexp,
  5            decode(bitand(aliastype, 1), 1, 'PREDICATE', 'LHS')
  6    FROM  rlm4j$attraliases
  7    WHERE esowner =  SYS_CONTEXT('USERENV', 'CURRENT_USER');

View created.

SQL> 
SQL> GRANT SELECT ON exfsys.user_rlm4j_attribute_aliases TO PUBLIC;

Grant succeeded.

SQL> 
SQL> -- synonym is not needed --
SQL> 
SQL> GRANT SELECT ON EXFSYS.USER_RLM4J_ATTRIBUTE_ALIASES to public;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create package implementations
SQL> REM
SQL> prompt .. installing Rules Manager Packages
.. installing Rules Manager Packages
SQL> @@rulimpvs.plb
SQL> create or replace function rlm$eqlchk wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  172 144
 21  +KUQJhZEUAN+k14Fz0pSNsv8yswwg0zIAK4df3RAWLvqMH3IfMp7B8vtbmQfPcFN9B314Gda
 22  WqAd5LX7muq6KtaGXRB5JKG6tAzjdKqwTvwe/tI6cx3Uv/ixYgGp3abOGYsLP/J3ZDMwdxKZ
 23  lFnVa4nb3WNkfzWFt1BGVkHpA6G47CZphtGlEQSEYOaWjws4f9ArgKE0iWE+M5w+yWHL4Gmj
 24  hu+NQSSOYw6QNMI7vR9ImMPhNDJ1L0iZOVlKUX6iPFzqDvbnYnUCXQEd9pklqJZ6ToyxSHrv
 25  ATReQRcC/c1d5TgsIigoGs+57iz7DsOR
 26  
 27  /

Function created.

SQL> grant execute on rlm$eqlchk to public;

Grant succeeded.

SQL> create or replace function rlm$seqchk wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  31f 19d
 21  iocMB8WrAq6vwy+yIT+U7o8h5ocwg/AJ+txqfC9DbmR1hCj0Z8xq8wpa3gZpmb9oIz4pvubm
 22  4cvdtQy0DZBjofOtoohyE8Rf6wTYIbbnmixPbU+xZOsFEuzdfSbfcgfxCml/Ng55jErFnM+Y
 23  TQwuef7L0UDy+azJIUbJmOhlHaEN9wTycMsGF7+b3fxvZtMcK2kvBaPrSUAXhTqVq1rWY3fQ
 24  kUqV5Qh00kDgoAaps9Sep2uIXZw2FjxvhOFF8zxfgiMoQhyCwY18TTeZLR6bsoFYnG8jYD8v
 25  +hs4kbhZuuj4I4pqXNzQdAk2q5jQDPQiLmVsbZpzuUXIQQhhzoIetbf/Vfrv0gPr1/XUZNg4
 26  n7+JCjoMLuKzOQkPFOtzOc/z8+IeP/bp/jwAvjpEzj0mxw==
 27  
 28  /

Function created.

SQL> grant execute on rlm$seqchk to public;

Grant succeeded.

SQL> create or replace function rlm$wlnchk wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  2fa 1b1
 21  JS+7MdClindpMn5+BTdU5ecd/+Ewg/AJ7a5GfI6/i2QwarIvsq0rCFlXFocL+CNrQ8tJWx+2
 22  rlsftRD4kjcOyIXm2btOjWEAPEDVRnLZ+IsemwibkqcbfBL8aoYm03uKV+FLaz2ue7tGaCGN
 23  OG/tNw9mk7KysclmFYe5k/4HVPSCM4K/rkcOC+i7fH43tgKgxrnbE/tmKEi/aYk2WkrUOgTR
 24  WN+NetPJ1+kpRmEle7wXKHZiClzfGCeOyMFS0jQrAKsv8qRMEhnmqw6JF8PwcWV8W0A4elHb
 25  s59LgVR23rrhatTAcSBw5rZV/ijJcBLOFQy5QScFtaAWtwiPnGuTl3M2+U/Hidr4mFw6J5JX
 26  ljt9FN7tV2HMcoYsm30yUy5Ysp+9t0cIWrax9y4kb3/Q8SkueDNWUKfVZLz7kazi8w==
 27  
 28  /

Function created.

SQL> show errors;
No errors.
SQL> grant execute on rlm$wlnchk to public;

Grant succeeded.

SQL> create or replace function rlm$parseobycls wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  1d4 117
 21  FF3/PMYW+E3slbVnS42/+5OhGkYwgw3QNZmsZ45G2v7VGah8qDNQDesbyUDiwgpgxtfff9+N
 22  sOlz+HeEjocUEUpqRzT+eeDJ6UjdpoEyK6HYXELP6EVBx/OKWNevAchpSHk+D9HofNxxfPwF
 23  pV54VCxWrs8yr4qXaErg+TgJ+xwB3Fmk/Z8ha1Cafrdg9GU9GE2AMv8q3q9lFGhOhFbVAi7i
 24  /EuGoiWGOTAJEQ3dH0Kcotlm71GvNIVgqnp3LLBH/o7li0CVynDYG5ZKsnlU
 25  
 26  /

Function created.

SQL> show errors;
No errors.
SQL> create or replace function rlm$eqllsrnoneg wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  14c 10f
 21  8LlG9uhUCMfdh4Q9ZhvNSWvD1pIwg41KmJ4VfI5AkBAYgufFWjnqsGng7dtUXtVXOa1A8lkF
 22  txYivFHWxOm1CJ0I8JmN2LAMRF1KpH5umV3V0GFJK2X3rd3Dr0AekRWBuFBAmo3ef1htzR68
 23  qpr2LdHS6zZB1l3FYjDFcNR4do4P51NcmJRYkIRAnCMPe58doNugcZHDPVot28iInlpH4Efl
 24  yqtJhIqkRzF8FzQBQholBZ0OmtI60t1bFTBmtY2fgDvV3tlcaQ==
 25  
 26  /

Function created.

SQL> show errors;
No errors.
SQL> create or replace function rlm$optimeqcls wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  1ee 124
 21  ESiZCEeD/UVdTPk8oukE9O/kmpgwgw1yAJkVfC85cBeqlbKsbxTWCl4WLcUqO6G6wWn/0/Rz
 22  Uyvzqu0s48rRGM5Kv6Vo7QPDkvpm8WdIJE38/7kt+kyZ72Pp03kaaUvIpojq+W4K+gSSpUJI
 23  QF3V+yQE4KT8VM6lJzDq5vQUXJut4eKoXWVaQspw+oLL/usQBCuRwAd0roE8e59ioy9e7sXo
 24  5WD8VmEta2/0VR4FghiLcG7ifyzNR7N8F5esKUp+k8/+krr5R0Io8EvaaTphHNwSH0gZwHA=
 25  
 26  
 27  /

Function created.

SQL> show errors;
No errors.
SQL> create or replace procedure rlm$proccllgrpby wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  12c ff
 21  cRsVNkBenUb6+LXaCICi1kmux84wg43/LcusfI4COBdBBssbZ+B7U3tMLTWyjl42wfIn1iZQ
 22  oHBdzZQbMoZHSQ/5tnJmRdVXRAosDAsF5SWjk8ekyo+tABcfYK12BGf0eoPvD2Td1q39lEA+
 23  Aixsbo5HqDVvHwReV+D0fKQApbrVxWL0z1i6O/pJLpMVt46Nwgn03JuHDIDUcSlxfgUZflsf
 24  aJVeL2Kr6Zv/PPDsE5INqsXSeG14XtvyWA==
 25  
 26  /

Procedure created.

SQL> create or replace procedure rlm$processcollpreds wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  2d6 130
 21  6/6kmyUsmAxeeuHz+kH6h6WOPscwgzuz2ssVfC82aSfcLUTTyunRESancAjzf7OLHYkrfCvI
 22  oWbaykooN5575oumIIADqHkQIq7j1iqcNQHZWa2cjdTDK6SkXxYGCJ9JV6/yZxhdlvcbHNLu
 23  wSHx3alqmgmF6zAqmmoM06F8hneDKeLMz+fuhKsdYPANNS1auK848D4V+HAsQGONWMxZVQpe
 24  SLTHEHmIeeF3g8Vi9unqjHYKfovkwdoVi6SMAzShyZFrk8MFNFCHbeIuRcCbUUgN6pykvJAI
 25  uIMSpivH90s=
 26  
 27  /

Procedure created.

SQL> show errors;
No errors.
SQL> create or replace view rlm$incrrsltmaps as
  2    select /*+ nested_table_get_refs */ nested_table_id as incrrref,
  3                                        column_value as incrrrid
  4    from rlm$incrrrschact;

View created.

SQL> grant select on rlm$incrrsltmaps to public;

Grant succeeded.

SQL> create or replace package dbms_rlmgr_utl wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  2379 a2f
 21  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
 57  
 58  /

Package created.

SQL> show errors;
No errors.
SQL> grant execute on dbms_rlmgr_utl to public;

Grant succeeded.

SQL> create or replace package rlm$timecentral wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  9c b6
 21  cH5Tc2f5vQat7OqkgkWG2LsoG1owg5m49TOf9b9cFpf6XD76Ry4u3NfVPvJHzLh0iwlp58tS
 22  dJ69CNIyXGmlmYEywLLCOZ6SVzmElcg2kITWrFA2N1H7Nfn/4tFrNeJpt1A2Hax6c+YGNYMh
 23  5B1x1o4VdtZuAHbWXyE7vnFzcdiIpnSCFos=
 24  
 25  /

Package created.

SQL> create or replace package body rlm$timecentral wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  258 19d
 21  e6R6Yw/rEZU7WKvDg9jk19zA3iIwg5DMLvbWZ46KrZ3gy0QNL94SWX04PfCT5Qo0EGHXoeal
 22  yj125iNOxr89ooMvWikVuRX4dVj+Gx/uCuNsrFaDj1Cg/sZFO589+TC03y85gsqwVonMNdNA
 23  RH+EiP2ykdigc1IY5cPgCKwWWi6TS/KOIORUwDFJp4RMZkfD34HSPiaMQ4ofzNzy0DtIpwwV
 24  Ew64Yn0xmF0r1VN7C+o/2EfUzh3abN5ZK4QGuqZjhiU01cuxQVuHDPBrKMr6RCnMWJRw9zmy
 25  BEmFnv+ZM81itmOAlBlUdm+iqnUzxV/WrbTRBMbNFw3G4dyxvhfdOkI1GWrrC7GQ9YetyyVF
 26  3id1J8EweLQVZGEIsxMj+t+TpShFTytB+0lJ+MG5/Vjljd0=
 27  
 28  /

Package body created.

SQL> show errors;
No errors.
SQL> create or replace package dbms_rlmgr_dr wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  4e10 104d
 21  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
 78  neQoPMtPYQ==
 79  
 80  /

Package created.

SQL> show errors;
No errors.
SQL> create or replace package dbms_rlmgr_ir wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  1149 422
 21  vPCOeeoQZBkKzHHRinkgd9vSokwwg83qrxgFfC/NQp3mxkx9JtKnt1bw7YOFwp8U2imhaZ5j
 22  UO1+tSx7nzz0YjFKVUsC5sdUp6UhI07Si6EtcYpC+4oFsZwP7oHB2f6xpYaNCIMkxfqi8OfU
 23  B4P7Zbm0VaQLb9X7wmBwRM6pSvlabM98Y5iWwwt0ljd/AQQLsoAIhQjrgGAepyKNr+tlKz0/
 24  akWf/usVs0UHpDvZ9u805XQD7JnncjJDr0SNW0bB+E3RqgqbM976T/Z/Ng+MraotDOlNwknK
 25  ROXW+3Qb9Q0GYomIeVLpDm3KYkv2ueFKLTHrVjOo4NUc/jV1elTD8CVpGnrMEbEqZTVOOB+t
 26  Z8q4KDcS0MUKKZ08spLIjpRK2ifeRf69imfldaZtFrjBwzg8CaV4XuMtQRfobto8jtXFAPAu
 27  3PxmeQXMu8l4Pf0sQbS0vPQDYJDpK7sWbsEb4Lgvfe3suN860GEP9oqK+qotgtPSjMn8ZR12
 28  Ay3npwtdDXft0kOpRwbecRULRCC8RNh21+q91y9uXI05SAYcsFue9i4LBIkIqa1jsWiJ4us0
 29  RCh6IwKY+gc5k4azeGFb/tClMmM99VLeu4Ndn8cb7F/diYpvC2eExCZOEMexxfaadv/mViNY
 30  mZbC7ekt4R78eurGLj4U5SU5V6P1N2VH7Zq0lTVZ+OaG5MVSnJLyIaVEWH6YOX2rYh1saX9r
 31  NdMVDBcTGqXTMHejWyKVgCdLF0yTJOIFSXLguplqpT95952UdkgAZJ16mSE5viWJ19NKKUxX
 32  d/yXGbhHjXriE7szjX+cwPRL0tRUKBn1LcwBzXr+uRBg2JwrHCTEYaK/t7zD1IvVTg6ZY8Ck
 33  n6FGWNSRJoScc0z1fnbCusl037IUkJxjT9aqbmGCaxRrCFHxfPuQz1c4uxNSz8wx+qaCOimj
 34  c9bkkpbNBtdwFEPcFzGsjl+NY0ak8photjeYJ/ZKr6dVN/8UgOTg6G4RD08AumIz56PcNGd4
 35  zmdHLM36B3AUt5Mp4fzC3Q64/u548zVAZA==
 36  
 37  /

Package created.

SQL> show errors;
No errors.
SQL> create or replace package dbms_rlmgr_irpk wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  1d4 107
 21  PkHrYazlFCimycFxJonJnctuToowg9fQNZkVfHQCALvqXU2PNTlBn5fCfdSD4ho7HJlm431n
 22  i7VbHmkvaK+MrTaHmwgccmYNUwFXHJISduJz3uPB7p/7dLxIxQ7KFdTGj1SmpJGIqY1KU54V
 23  ZxV9rQmweYkOdYltMwFXrl3Bhc4aPH3M3xs7pJ49FjrAGM0zGwE/A3LZjrst5JWYdOVshprA
 24  kS5QAZflMNY1QoWxCul/TD3eCvlh/FGFtMOVivtI4xGU
 25  
 26  /

Package created.

SQL> create or replace package body dbms_rlmgr_utl wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  9f66 2871
 21  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
163  
164  /

Package body created.

SQL> show errors;
No errors.
SQL> create or replace package body dbms_rlmgr_dr wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  2226d 7afb
 21  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
452  3P+u1V0VIvmq+ZaEhM1s
453  
454  /

Package body created.

SQL> show errors;
No errors.
SQL> create or replace package body dbms_rlmgr_ir wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  21cf0 8029
 21  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
470  MipHkVroE3GpZZ4c9nD1tU+1LCH34ec=
471  
472  /

Package body created.

SQL> show errors;
No errors.
SQL> create or replace package body dbms_rlmgr wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  10521 3677
 21  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
212  
213  
214  /

Package body created.

SQL> show errors;
No errors.
SQL> create or replace package adm_rlmgr_systrig wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  d6 ce
 21  28shTwCT9uFkh9LoM5pQHchGWc4wg5m49TOf9b9cWln68JaX+i6WGJbiVtE+l1nquHSLBglp
 22  5+ebv58yvbLARMJxhkys5B3kkDQGEKQAc+aOIalZtbgkscoCfMbKFyjGyu+kDss0pk1qcrOx
 23  XDcUpKj3+1p7ITs1uaxm6iQfRIAfms7KLA/+Ds6PhY/Iyq6/9jmmKPt8og==
 24  
 25  /

Package created.

SQL> show errors;
No errors.
SQL> create or replace package body adm_rlmgr_systrig wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  b3b 48b
 21  BQL0ctiuK3nhXqZmr5TmDDRoqmEwgzsrTPYFfI5Vx6oCOaRSYG/x2EwsRznCMrcjjWyu8bcz
 22  oXQ5AUu89RIxnZqN5POTUrYJyZ73bFWMEnKtRUjpTtpF+/GhM2e8tTDCcp1BHE/Nu52dtXq1
 23  zxTDt22Z5pKd8vp2VDumgHBY8Y1HvIPxbxXINgfASWf3Ylw6YlwKiGB2EHzmUNOFk/OLa55m
 24  6HWMKAl7xhTn8zJYN/Jzdn7w31GKeEks6uvJlZBxnOzdc6Mkfb4GQ2y8ID6uEJDjnbZTWRWy
 25  8rmeyRGLL2W0jhUgVjw1Q0/6Gr11WfS+RDWDI451o/SgQkSvfOX670alAqjmOzUu55VMpCQg
 26  DxV5qgS4fGc88qfWRvbLq3QxVeHF6LgRmCHaXUG7G2rmfoMQU4f/7C0laH6/FAo6pPpswcj9
 27  rKzZStuThCuD4DtjZkRIygxlT78Si77YzBzRAT0sKSXbfpaTKyeZ/j1Fj2/BxaBdesGXLpM5
 28  zieePvFvFj7oSS7Cqhsc/b60Fihj88dlLhKpaq8mGnyy2Jqe9Pah2eAMpug8hNrwTC0paU1e
 29  fdySqJ9t53GEiR7Oco+IBfNYsnNHa1K6dcN5zm4BKysOTYyaknN9hJtmOlJT2M/WpSqyTG16
 30  qb/3eOmbP4O0Jr6vxi52QRz9RYhF8uQY/v4ZKVeqL9iyKg3ULmsud3H9eS2UjlbtVyHjhmT6
 31  jjFU20vzCYK4Vrm9FFvIjFkzBEHGl3scVhukXqEzLsXjx+EWoxFLDonD+j2b64EucOTiW4G2
 32  +EDfaedhRQElDHcqd1QUtKzdlFzBC+YqFozyOo3yOFRkw8h33oxTatVciXV171MaPbQ6gNgG
 33  rGJ+TDNTdzycQO6vuGRzH8IEtgZ+XEhv2WeN7sQ40s7c+4do+1jOm8cLTRB4Qjt/SG+x6zWv
 34  4rF2CKCMJS2nDK/YICxz/iA881dqcnzBgNXW+HbFsaMVjL/i4ahijFQlq+kX7+mtfSHL8VOu
 35  KV7xVzmBeEEMi6NqB5WbJw2rhmK8su+xgdixtSMT/7zMB+5zYJ3PfWOvpM87nB3w76CckTOX
 36  YMtvVhX1DxXncsH31FKEmPQQeCixgy2ENprLUar2f4XXXithMu+yYJQT0tck0QxCug==
 37  
 38  /

Package body created.

SQL> exec exfsys.adm_expfil_systrig.create_systrig_dropobj;

PL/SQL procedure successfully completed.

SQL> exec exfsys.adm_expfil_systrig.create_systrig_truncrulcls;

PL/SQL procedure successfully completed.

SQL> show errors;
No errors.
SQL> declare
  2    asetcnt NUMBER;
  3  begin
  4    select count(*) into asetcnt from exf$attrset;
  5    if (asetcnt = 0) then
  6      adm_expfil_systrig.disable_all;
  7    end if;
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> CREATE OR REPLACE PACKAGE dbms_rlm4j_dictmaint_dr wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  3cf 1a9
 21  BzJOqjeBkvD0k/DfQhYN9r3b+Pwwg5BeLdxqfC8B/+poWmwbd2LrlbxhSKTae0+E2pNnp2YV
 22  aZK1FWygqWcW7l3Xuykp7b+xDoOP8Q4SfQ/r7r5PJGNItTCKu/6WxnekpozYXzkumYbj+4TM
 23  pl2xS+oa77YOPPSjwPGsuMPhsY7kVb3P7G+TO8ggIJ7OxxZX2L0bUjy04AOTP8Hd5/HCOPHI
 24  vZex8Chg53HY1QaTQvnVcOeR85DThkyf8Y62ninDzQkhD04EPs6I1Fh8HRv0ig6bGdNF0yIj
 25  zsxEgAw+aeL7tCXKevLfjFs9zBEnajbSYyazff4Y0bnZD8TL6bTDzBZrKgTcNdk2asHYAaz3
 26  OFBAtbgRBaXDSors2MeTRTR5XZutKzJafh46e96MGmC3cq7HQoE5RGxqcw==
 27  
 28  /

Package created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PACKAGE BODY dbms_rlm4j_dictmaint wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  ea4 5b8
 21  Zwl5Qpu0CB3Hw4f90JmGzh70Nwswg5DqBUiG3y/Nx7zgaY7jdE1Kt9dvfas+Zwz1R0xV8gmf
 22  mxQaSpgu7v1+lsjhOs7L6Ql49nkBAsqn+u5x/25Ya7YGEKj+jmAttedyqjszMUi+RXN4Ej9Y
 23  LCuulh4dL1L7UJJ43O+uwlfhT0JlbVpapNzJ/LZUNl4V7b3ueACPw+g0caboIayjQfEOVJ8i
 24  Dn2w2uMlygRR3eMZA03F4xLxA1CDfbJOLt85B+nmwIBtvrg6TgEouY9FW8DmDUDlywOmj9Dm
 25  9/OoFpwQrxUUDljOglBS4/XDXEKG5meMEq1/1e0PICPUIrI2AMJS8jLsFHcn0YmiIjlRmnmF
 26  nmViYzyNovtOSyqkvdAA/LBu4QhzX9zeFIJ0ZoEUV8PbA+PAd37un5l2gyzFm6K8htsXZWz6
 27  nPj8vX2425nb2l987pU405kbPmVsdswZA88V4wLbfNAE6SzUnTA+wT6Lai3j1e4WRuy4kJ8y
 28  rTuAehg/QXEcRsRPgo33yEtaM9nTUN1r4gmhJoIX9mxGrOhvJm2eeCmEZck1moaJWuzz9Ios
 29  Y84bTfXIXSAg1L7EeORANKoaBiVGFyEOnP56CzTlHa4XYcDpb0fIdjlXsWAF/RUtb51QCWM8
 30  CDgfOcZjzLVN4SbWRwmI0g2kfwslE8oZF3W4CV6raZQXuXzUQm+J4VQ2GpQoDFtMTYvZ1oC3
 31  NPurgYKNhQTr+uliJlRyRr17RoYjS6Oy4JCpNzeo6v22XEHsgZqnGm0jPUVhb1Un9N5mTQ4T
 32  xZigyo0CR5lLKKwdeg5FRDLl9Yk8zbC3IZAYv1ofEOUD9RlRl0LJwZxNW/XlVaVA1mEFXby/
 33  KYQrNcHfkS9+VCkZlehRej+nfkLoXLpldVPUD7EESDVT+ph7PfL8XcO1y6+Xl2z77+Fu4BEy
 34  QWfOyA76QUgHS2dC/q9jcoXGNrIpr0QipLchyLSW9wnoto7HRYaOhPUe85xH5sciGQtQ18BO
 35  n3wEERrHPzVM2Sj/Vyp3R4FNoDHWJI9quxE7Gb0eHWwgbYhDeov/zYEgLCQGju/ZnLAA5O0x
 36  r8AD+Z5tsc1ILZqdfjz42ZJ5vfIebzHaSzOrtrCs6e9a68lSdlrcZn9KQnXeocZdU27JMl6x
 37  sl6aEqMb+KGm8VXhIJquB0RdaVaXU9lCg5RgOpqf+zBefId44hMBErO1/zxCjI+KDSViFl2D
 38  J/wJhMZDOMBd5j0PBbar1DL5BRMdh+xYZMmY/O+0cWVoFbrEkcNX/D3Q7YY/4m8sFWcxO3hw
 39  DTfYfxIr++Dkcu5Lc/UygUWj4v5z17nevHHSwRM9lPlGkkWYg9ec+M1IA82duU95nghxDzC2
 40  q9MeUfClRtlqSjfJh3Y6WUxadoE8dNMZlGOzuCKXINmVzwM/+TcWDKpc0U4PV2Jo/fnSJBoM
 41  yYQ=
 42  
 43  /

Package body created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PACKAGE BODY dbms_rlm4j_dictmaint_dr wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  849 3dd
 21  +eJfuqLdftGQNGEC1xB7sZSc5Acwg5BcLiCDZy/NrZ3gy42m+vAJ7PI7acv2u3UE5D1VKr2w
 22  lLKiYwaM4Umw5M5KsYfGZ6Gob9MzIxm5RxP+1D5OQNjQjxvPdOtP2TsZVqexnYH1+ciWSU5c
 23  4rD9cJvhDjoM6QaocjbhhnGG5wtjY9NYsA7wZb5tzKbd4727p/TihOPE0Yl/bS//Z3S042Nq
 24  P7b7SWc0aUFSWsrtFPK2iBZGV21xjqSj78htc8rfj8qnFo5zJjalGZwLQj4VfSOl84DlXYRh
 25  vvbOuKmYAWvcWLx4oL3DJq0WjSzCvIrDHu9vyRb2YKS0ryj43PB+i4MpiFcAgDfFuX+LW3n8
 26  TCEFKRctsKwU6B2gScg+XYOkHlYwgHgoEzH7N8W2f95WvfeVbPTdA+Nm/E0znOL65I1x9Kjx
 27  DlZ5bNmUlx+h9V9SU5jpN1ynlPi4HWHTYPV3EhnDOqduXEIl38n7uwBZmYdHDIMqQFezbj7o
 28  cxSMeY5iXMHDaU8C02Ip+H658bweqPcCTWzxqmdGVMkj04aOTNM/CSFKXYizDdfcSt/LEnnk
 29  Jp8+5bAGE4fzjTwmXInHw/gFI8YcxCBv2UELWFJ+swe8raAYzVc0YXpr0ZneI3nH588R2Sxr
 30  nKXmNU/iRVW7T/DiVkQ3GvTzQJCkjnUNQRCiCfJzQJj3d9vpDxHR0USZFCeOZvPNlpq8h0zN
 31  LsQ8ikJhlzgTIEEcm7DXdCsedkFJbTqOHLH9BFlBSXwP+ZNHp47f+sEelKCHh/mCuUpMO4Hv
 32  XZ3JS0KjR484fzFIupQgY5cdna2R2EqaJXte8jZI6GkDfHDJ3SaCjiDBX3uE+kPpi88oObte
 33  UtFg8F5G1BcdSqtr9Wev9DiGTx0sbO0XlQ54v4lpO+cdxdweIbwf5dQKwNblwManhrR20D9i
 34  M+yiwu1ngq0Ma4coISh6lH/lNxQF+KUfQUqDYA==
 35  
 36  /

Package body created.

SQL> show errors;
No errors.
SQL> exec exfsys.rlm$create_scheduler_jobs;

PL/SQL procedure successfully completed.

SQL> 
SQL> @@rulpkpvs.plb
SQL> create or replace package body dbms_rlmgr_irpk wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  26d9b 893d
 21  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
502  ByDUjnpr7rX+tR0ZHkHX
503  
504  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> --- rule set export import support
SQL> @@ruleipvs.plb
SQL> create or replace package dbms_rlmgr_depasexp wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  616 20f
 21  fa2047v4H/HyAvsK3JkEZV/EquswgzuJLiAVfHRAv4vqzlOhdt9KhNoaJj6IedOV0SywEbYR
 22  nKioU4rBlmLYLA5/o2L8bPRzkoGGTSuFWFovPLsF1pqqSCQzP+0x7aTfD9ovra5cdGW/yyr4
 23  blA3Dq+mDpLjRIzqoy3TPkZs8MsX7Pt+8u6sf72TcpalV+IVO4L0hFH27q7wuBiQKrPVTL0s
 24  lO4CgnGDZR5mUUP1cUbcwGKTiLKgZtRWaC5fKDr+PGsq27hx8sSgQB3OEESqq2y22mO2fK1q
 25  cVetlEj1KnlKSp7vMq8TJSHRz4mrrdW/6Q1Aclu4hb7rjXeTcsAYWE0SIrmYPSC4/OGhzHb0
 26  uX79yJIv/ECAjbtZ4LKF88JviJ8+KGmRWOl46+2vM2AFKLmqj5VsjEp/4q0PpBevDz1RauuC
 27  SJBzbGcrhQljoVswAZbLIEL4wXtrAobQmysMsPcyFnOCCm/jI47Bt00a0UnTUIR2AV1M7Gz/
 28  xhFEAjnUv5pYGF77
 29  
 30  /

Package created.

SQL> show errors;
No errors.
SQL> create or replace package dbms_rlmgr_exp wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  44f 1ee
 21  sCf7ODMAEbJY7EJ4G2BQ7yAnL1Iwgw23LdxqfC9AWE6OxA2NBA6NBOMEdvhahKQFe0+63wzn
 22  2+Zsw28cLJhjoW2iDlowGIq7/5og2tyFAk3zHCw8IFJOwj8Z27D+6i+8FqZ6mdS0dUD9a6iy
 23  3i7sgnSPoK6ZXyrTcZrd6THuU5FyjhQoj5wA3Byt5ckvTzNTyFYKRHSXR5eHh2Hczn1NHI9k
 24  8lp6GZigbkrgJLxpgActOy+hVceynTtabGUvMfxIB5ZE+r4OKTDfkJEZNjvHCYz4pwCgC2CV
 25  ERO53wT68CrIGu1ugOk86QLRKv6G4bwsvd95+RFHNf69L8DK6y6K9Z255jULvJahdVFzOE9O
 26  a9PWCvKWn2zfpe5S+X0XALvNVMPMAjyy/DGNoZz18Yc/JgVatYkWW8CRbOVn562vszsVV5nP
 27  IyzV3ciEsNGjRrfVA0B+XJwOEnwBN2A35aMsocQqldK1iRcshlH+mw==
 28  
 29  /

Package created.

SQL> show errors;
No errors.
SQL> create or replace package body dbms_rlmgr_exp wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  42ca 115c
 21  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
 82  
 83  /

Package body created.

SQL> show errors;
No errors.
SQL> create or replace package body dbms_rlmgr_depasexp wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  11ab 5e0
 21  jeM/Gsw3R/wRNh+z1DGjUWMXdU0wgztULiCG3y/NrZ3gnqDITBqZSRK6KlujUZQq02zIibdu
 22  RkjvkR2RkN2hswDOxr/OayD6p5A5NVltQe64GRN4hhrbmKj7AgEGmmpqsbsgOjM6+IbfqhaH
 23  tSPVPzTh8xcXpj27xQtBdLY5Bodaq8Goumyt7QwXPrDeZhR1T8j7GvfdeaEdl3JycOTGDASM
 24  QY7xB1apFLdLG2iYG+TAZDHswGvhJihukdR9ebxf07tgnV6wKgZu9gzcAdSTQ8vm+0NOKvTS
 25  MZ/2MzrALVRHTGiHJaYLEYMDVhh3ywE/eLrRoPGDlwq/LgsJwT00JLlKslZK+2aO+fF20A8d
 26  415pfeZ8ibXu0njC0JjEHIKKukBfpfglTzGBZa95oCr1PPFsQpdqKuJ9kIBeAqwxWq29WfwK
 27  stKrl1gNVwealm9PlifODT35JO6e5Qm+rJV2XSoNoDf/DAdgBOkUfd2H3mswb+JoAy0L9y7m
 28  06EIcXPlu9PxTaTW/3ec1ZW0dtVeJdqtx2U1rQH2wXZ2loZTib4jXUfN3oumeZJOlFcRHqav
 29  uJdJQNuLDhhvrGBUM1T5iLcDmotaHFhUBOp69Fw2TzaUGLqtrmbFe0ZF7dQOfJRTAurApSM6
 30  nk73+KLxbPN3JqwKCScGIRfDMSBTQxSOoBRGunmJWHmdCmtpoNuJOtlUXXoYHeLF/rbJ/buQ
 31  +HqhxyzzD/k+fipyDOoyiA466TJnvXec0ybDznHauAcmJckC9IV5h6Qmglo3lwj7ZvlyeHcW
 32  BGQW4hiVzU44cLNyGEMg8F5k4INQDan2weWJKWHORYzFpGV0N0KgPN7RTZEU6MZNymA3K/rN
 33  UoNCwrxP2KWw3uQ/jU/FmwHQXEux3bnrx1yY6B90MqzMDcYI73AIddn0kN1lYX90disZny0p
 34  JUvYSwmD9yYAViTMav6hMIiZIsMTXiE0No8OGP1EJIfd2R0iVu4Hg+g6gr7QrhFotymmTC0q
 35  K/ukUO7zrYqW/D5jRE9RIm9a4oEMhBFtNe9aL9P49CIwWrKXCGZsLo4BL+3jqxfJhJZSsLBv
 36  O9aMpUCs1sSSRJTK0j2NMEBKPw2iov6TdKrdYwVGmIou8BfLz2IcT99UCnfZfNc4dl4kw72/
 37  bgfN2dU0IE8cLG1iV5iQvn1IwVfc62KOJPnRh5pPh9+lu8TgHZa7mhjN/TQKgYtPwRcfGNcd
 38  qyFfxQERweM+0cVgwdVW050MsdTCk1Dsp5S60PYZLHmNC9ea2J+YvIu/xuFWnrKk5tBxhXNW
 39  3Awu2mTnUg6/doo+TjebpBPVOcbs3HfFlzMW6ygxi48dTrrqKDki2bepjHBFfFIRKddmttRv
 40  iucR8nMjPy0ND8Sf2nQNQc1z8gfLovJ6zWOtk6k0rhIosM8QzZLMsuYN2PqoMVLB44zZrbCN
 41  46tD9LXRERAsds4g3Vd055CSZ9bsWmB+AlNO66pDTJpt
 42  
 43  /

Package body created.

SQL> show errors;
No errors.
SQL> grant execute on dbms_rlmgr_depasexp to public;

Grant succeeded.

SQL> begin
  2  
  3  
  4    delete from sys.expdepact$ where schema = 'EXFSYS'
  5       and package = 'DBMS_RLMGR_DEPASEXP';
  6  
  7    delete from sys.exppkgact$ where package = 'DBMS_RLMGR_DEPASEXP'
  8      and schema = 'EXFSYS';
  9  
 10  
 11  
 12  
 13  
 14    insert into sys.exppkgact$ (package, schema, class, level#)
 15        values ('DBMS_RLMGR_DEPASEXP','EXFSYS',3,1000);
 16    insert into sys.exppkgact$ (package, schema, class, level#)
 17        values ('DBMS_RLMGR_DEPASEXP','EXFSYS',4,1000);
 18    commit;
 19  end;
 20  /

PL/SQL procedure successfully completed.

SQL> 
SQL> REM
SQL> REM Validate Rules Manager installation
SQL> REM
SQL> EXECUTE sys.dbms_registry.loaded('RUL');

PL/SQL procedure successfully completed.

SQL> 
SQL> REM
SQL> REM Validation for Rules Manager and Expression Filter is same.
SQL> REM
SQL> EXECUTE sys.validate_rul;

PL/SQL procedure successfully completed.

SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> spool off
